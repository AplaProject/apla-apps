{
    "name": "Multisigned",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "ms_link",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1keys).WhereId(#key_id#).Columns(\"id,multi\").Vars(k)\nIf(#k_multi#==0){\n    AddToolButton(Title:$@1ms_create$, Icon:icon-wallet, Page:@1ms_multisigned).Popup(50, $@1ms_create$)\n}",
            "Type": "blocks"
        },
        {
            "Name": "ms_amount_max",
            "Trans": "{\"en\": \"Maximum number of tokens for a single transfer\", \"ru\": \"Максимальное разовое количество токенов для перевода\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_amount_max_day",
            "Trans": "{\"en\": \"The maximum daily number of tokens for a transfer\", \"ru\": \"Максимальное дневное количество токенов для перевода\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_amount_max_month",
            "Trans": "{\"en\": \"The maximum monthly number of tokens for a transfer\", \"ru\": \"Максимальное месячное количество токенов для перевода\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_create",
            "Trans": "{\"en\": \"Create multisigned\", \"ru\": \"Создать мультиподпись\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_group_single",
            "Trans": "{\"en\": \"Any member of the group\", \"ru\": \"Любой участник группы\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_group_voting",
            "Trans": "{\"en\": \"The vote within the group\", \"ru\": \"Голосование внутри группы\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_limits",
            "Trans": "{\"en\": \"Limitations\", \"ru\": \"Ограничения\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_limits_date",
            "Trans": "{\"en\": \"The limitation of the power of attorney\", \"ru\": \"Cрок доверенности\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_limits_sign",
            "Trans": "{\"en\": \"Limit transaction signature\", \"ru\": \"Ограничение подписи транзакций\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_no_limit",
            "Trans": "{\"en\": \"Not limited\", \"ru\": \"Не ограничено\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_not_assigned",
            "Trans": "{\"en\": \"Is not set\", \"ru\": \"Не задано\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_one_sign_transfer",
            "Trans": "{\"en\": \"Transfer with one signature\", \"ru\": \"Перевод одной подписью\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_role_single",
            "Trans": "{\"en\": \"Any member of the role\", \"ru\": \"Любой участник роли\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_role_voting",
            "Trans": "{\"en\": \"The voting members of the role\", \"ru\": \"Голосование участников роли\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_select_type",
            "Trans": "{\"en\": \"The transfer of funds from multicausality\", \"ru\": \"Перевод средств с мультикошелька\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_set_date",
            "Trans": "{\"en\": \"To set the time\", \"ru\": \"Установить срок\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_settings",
            "Trans": "{\"en\": \"Multisigned settings\", \"ru\": \"Настройки мультиподписи\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_voting_template",
            "Trans": "{\"en\": \"The template of voting\", \"ru\": \"Шаблон голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_want_multisigned_this",
            "Trans": "{\"en\": \"Do you want to create multisigned for this account?\", \"ru\": \"Вы действительно хотите создать мультиподпись для этого аккаунта?\"}",
            "Type": "languages"
        },
        {
            "Name": "ms_limits_date",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "ms_no_limit,ms_set_date",
            "Type": "app_params"
        },
        {
            "Name": "ms_limits_sign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "ms_one_sign_transfer,ms_voting_template",
            "Type": "app_params"
        },
        {
            "Name": "ms_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "ms_group_single,ms_group_voting,ms_role_single,ms_role_voting",
            "Type": "app_params"
        },
        {
            "Name": "ms_multisigned",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Multisigned\", ecosystem:1}).Vars(application)\nAppParam(App: #application_id#, Name:ms_types, Source:types)\nAppParam(App: #application_id#, Name:ms_limits_date, Source:limits_date)\nAppParam(App: #application_id#, Name:ms_limits_sign, Source:limits_sign)\nDBFind(@1keys).WhereId(#key_id#).Columns(\"multi\").Vars(k)\n\nSetVar(this_page,@1ms_multisigned).(back_page,@1profile_edit)\nDBFind(@1buffer_data).Where({member_id:#key_id#, key:multisigned_units, ecosystem:#ecosystem_id#}).Columns(\"id,value->type,value->units\").Vars(buf)\nDBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#}).Columns(\"id,role_name\")\nIf(GetVar(TemplateId)==\"\"){\n    SetVar(TemplateId,0)\n}\nIf(Or(#Type#==1,#Type#==2)){\n    SetVar(button_title,$@1ms_assign_group$)\n}.Else{\n    SetVar(button_title,$@1ms_assign_roles$)\n}\nDiv(content-wrapper){\n    If(#k_multi#==0){\n        If(GetVar(Type)!=\"\"){\n            SetTitle($@1ms_create$)\n            Div(breadcrumb){\n                LinkPage(Body: $@1profile$, Page: #back_page#)\n                Span(/,mh)\n                Span($@1ms_create$,text-muted)\n            }\n\n            Div(row){\n                Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                    Form(panel panel-primary){\n                        Div(panel-heading){\n                            $@1ms_settings$\n                        }\n                        Div(panel-body){\n                            Label($@1ms_limits$)\n                            Div(list-group-item){\n                                Label($@1ms_limits_date$)\n                                Input(Name:Limit, Value: 2, Type: hidden)\n                                Div(row mb){\n                                    Div(col-md-6){\n                                        Input(Name: LimitDate, Type: date)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: LimitTime, Type: time, Value: \"00:00\")\n                                    }\n                                }\n                                Div(mb){\n                                    Label($@1ms_amount_max$)\n                                    Input(Name:AmountMax, Type: number)\n                                }\n                                Div(mb){\n                                    Label($@1ms_amount_max_day$)\n                                    Input(Name:AmountMaxDay, Type: number)\n                                }\n                                Div(mb){\n                                    Label($@1ms_amount_max_month$)\n                                    Input(Name:AmountMaxMonth, Type: number)\n                                }\n                            }\n                            Div(list-group-item){\n                                Label($@1ms_limits_sign$)\n                                RadioGroup(Name:Sign, Source:limits_sign, NameColumn: name, ValueColumn: id)\n                                Div(input-group){\n                                    If(#TemplateId#>0){\n                                        #TemplateId#\n                                        SetV\n                                        Input(Name: TemplateId, Disabled: 1, Value: #TemplateId#)\n                                    }.Else{\n                                    }\n                                    Input(Name: TemplateId, Disabled: 1, Value: $@1ms_not_assigned$)\n                                    Div(input-group-btn){\n                                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1ms_select_template, PageParams:\"back_page=#this_page#,back_header=$@1select_voting_template$,Type=#Type#\").Popup(50, $@1ms_voting_template$)\n                                    }.Style(\n                                        .buttons {\n                                            border: 1px solid #dde6e9;\n                                            padding: 6px 16px;\n                                        }\n                                    )\n                                }.Show(Sign=2)\n                            }\n                            Div(list-group-item){\n                                Div(h4 mb){\n                                    AppParam(App: #application_id#, Name:ms_types, Index:#Type#)\n                                }\n                                Div(mb){\n                                    If(#buf_value_type#==#Type#){\n                                        ArrayToSource(buf_units, #buf_value_units#)\n                                        If(Or(#Type#==1,#Type#==2)){\n                                            ForList(buf_units){\n                                                Span(Address(#value#), mr)\n                                            }\n                                        }.ElseIf(Or(#Type#==3,#Type#==4)){\n                                            ForList(buf_units){\n                                                ForList(src_roles){\n                                                    If(#id#==#value#){\n                                                        Span(#role_name#, mr)\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        Div(text-center){\n                                            Button(Body: #button_title#, Page: @1ms_select_units, Class: btn btn-default, PageParams: \"Type=#Type#\").Popup(50, $@1edit_group$)\n                                        }\n                                    }.Else{\n                                        Div(text-center text-muted){\n                                            $@1ms_not_assigned$\n                                        }\n                                        Div(text-center){\n                                            Button(Body: #button_title#, Page: @1ms_select_units, Class: btn btn-default, PageParams: \"Type=#Type#\").Popup(50, $@1assign_group$)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-left){\n                            Button(Body: $@1back$, Class: btn btn-default, Page: #this_page#).Popup(50, $@1multi_types$)\n                            Button(Body: $@1send$, Class: btn btn-primary pull-right, Page: #back_page#, Contract: MSCreate, Params: \"BufferId=#buf_id#\").Alert(Text: $@1ms_want_multisigned_this$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n            }\n        }.Else{\n            Form(){\n                Div(form-group){\n                    Label($@1ms_select_type$)\n                }\n                Div(form-group){\n                    Select(Name: Type, Source: types, NameColumn: name, ValueColumn: id)\n                }\n                Div(){\n                    Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#)\n                    Button(Body: $@1next$, Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"Type=Val(Type)\")\n                }\n            }\n        }\n    }.Else{\n        Div(mt-lg alert alert-warning text-center){\n            $@1attention_already_multi$\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ms_select_template",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Multisigned\", ecosystem:1}).Vars(application)\n\nSetVar(this_page,@1ms_select_template).(back_page,@1ms_multisigned).(this_table, @1voting_templates).(current_header, $@1ms_select_template$).(pager_limit, 10)\nInclude(@1pager_header)\n\nIf(GetVar(Id)==\"\"){\n    SetVar(Id,)\n}\n\nIf(GetVar(search)!=\"\"){\n    SetVar(where, {ecosystem: #ecosystem_id#, $or:[{title:{$like:#search#}}, {subject:{$like:#search#}}]})\n}.Else{\n    SetVar(where, {ecosystem: #ecosystem_id#}).(search,)\n}\n\nDiv(){\n    Form(input-group){\n        Div(input-group-addon){\n            LangRes(@1template)\n        }\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\n        Div(input-group-btn){\n            If(GetVar(search)!=\"\"){\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,Id=#Id#,Type=#Type#\").Popup(Header: #current_header#, Width: \"50\")\n            }\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,Type=#Type#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\n        }\n    }\n}.Style(\n    .buttons {\n        border: 1px solid #dde6e9;\n    }\n)\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_actions){\n    Button(Class: btn btn-default fa fa-check, Page: #back_page#, PageParams: \"Type=#Type#,Id=#Id#,TemplateId=#id#\")\n}\n\nDiv(fullscreen){\n    Div(table-responsive){\n        Div(){\n            If(#count# > 0){\n                Table(src, \"id=id,subject=subject,title=title,=_actions\")\n            }.Else{\n                Div(Class: text-center h4 text-muted, Body: \"$@1templates$ $@1not_founded$\")\n            }\n        }.Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(){\n    Include(@1pager_for_popup)\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"Type=#Type#,Id=#Id#\")\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ms_select_units",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Multisigned\", ecosystem:1}).Vars(application)\nAppParam(App: #application_id#, Name:ms_types, Source:types)\nDBFind(@1keys).WhereId(#key_id#).Columns(\"multi\").Vars(k)\n\nSetVar(this_page,@1ms_select_units).(back_page,@1ms_multisigned)\nDBFind(@1buffer_data).Where({member_id:#key_id#, key:multisigned_units, ecosystem:#ecosystem_id#}).Columns(\"id,value->type,value->units\").Vars(buf)\n\nIf(GetVar(TemplateId)==\"\"){\n    SetVar(TemplateId,0)\n}\nDiv(content-wrapper){\n    Form(){\n        ArrayToSource(buf_units, [])\n        If(#buf_value_type#==#Type#){\n            ArrayToSource(buf_units, #buf_value_units#)\n        }\n        If(Or(#Type#==1,#Type#==2)){\n            DBFind(@1keys,units).Where({ecosystem:#ecosystem_id#, id:{$neq:#guest_key#}}).Columns(\"id\").Count(units_count)\n        }.ElseIf(Or(#Type#==3,#Type#==4)){\n            DBFind(@1roles,units).Where({ecosystem:#ecosystem_id#}).Columns(\"id,role_name\").Count(units_count)\n        }\n        Div(row){\n            If(#units_count#>0){\n                ForList(units){\n                    SetVar(checked,false)\n                    ForList(buf_units){\n                        If(#id#==#value#){\n                            SetVar(checked,true)\n                        }\n                    }\n                    Div(col-sm-6 text-nowrap){\n                        Label(Class: form-inline){\n                            Input(Name: Vals, Type: checkbox, Value: #checked#)\n                            Input(Name: Units, Type: hidden, Value: #id#)\n                            If(GetVar(role_name)){\n                                #role_name#\n                            }.Else{\n                                Address(#id#)\n                            }\n                        }\n                    }\n                }\n            }.Else{\n                Div(h4 text-center text-muted){\n                    If(Or(#Type#==1,#Type#==2)){\n                        $@1members$ $@1not_founded$\n                    }.ElseIf(Or(#Type#==3,#Type#==4)){\n                        $@1roles$ $@1not_founded$\n                    }\n                }\n            }\n        }\n        Div(text-left){\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#, PageParams: \"Type=#Type#\")\n            If(#units_count#>0){\n                Button(Body: $@1send$, Class: btn btn-primary pull-right, Page: #back_page#, Contract: MSUnits, PageParams: \"Type=#Type#\", Params:\"Action=set,Type=#Type#,Vals=Val(Vals),Units=Val(Units)\")\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "MSCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MSCreate {\n    data {\n        BufferId int\n        Limit int\n        LimitDate string\n        LimitTime string\n        AmountMax money\n        AmountMaxDay money\n        AmountMaxMonth money\n        Sign int\n        TemplateId int\n        PoaTemplateId int\n    }\n\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Contains(d, \"T00:00:00Z\") {\n            d = Replace(d, \"T00:00:00Z\", \"\")\n        }\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", d, t)\n        }\n        return dt\n    }\n\n    conditions {\n        $GROUP_SINGLE = 1\n        $GROUP_VOTING = 2\n        $ROLE_SINGLE = 3\n        $ROLE_VOTING = 4\n        $NO_LIMIT = 1\n        $ONE_SIGN = 1\n        $CONTRACT = \"@1PoaTokensSend\"\n\n        $buf = DBFind(\"@1buffer_data\").Where({id:$BufferId, ecosystem:$ecosystem_id}).Columns(\"value->type,value->units\").Row()\n        if !$buf {\n            warning \"not assigned group\"\n        }\n        if Int($buf[\"value.type\"]) == 0 {\n            warning \"not assigned group\"\n        }\n        $units = JSONDecode($buf[\"value.units\"])\n\n        if $Limit != $NO_LIMIT{\n            $limit = UnixDateTime(dateAddTime($LimitDate, $LimitTime))\n            if $limit == 0 {\n                warning \"invalid datetime\"\n            }\n        }\n\n        if $Sign != $ONE_SIGN{\n            var templateId int\n            templateId = Int(DBFind(\"@1voting_templates\").Where({id:$TemplateId, ecosystem:$ecosystem_id}))\n            if templateId == 0{\n                warning \"Voting template not founded\"\n            }\n            // в таблице 1_keys в колонку multi записывается id шаблона голосования\n            $multi = templateId\n        }else{\n            // -1, если выбрано \"перевод одной подписью\"\n            $multi = -1\n        }\n        var amount_day amount_month date_day date_month int role_ids array\n        if $buf[\"value.type\"] == $ROLE_SINGLE || $buf[\"value.type\"] == $ROLE_VOTING{\n            role_ids = $units\n        }\n        $PARAMS = [\"amount_max\", \"amount_max_day\", \"amount_max_month\", \"amount_day\", \"amount_month\", \"date_day\", \"date_month\", \"voting_template_id\", \"sign\", \"role_ids\"]\n        $VALUES = [$AmountMax, $AmountMaxDay, $AmountMaxMonth, amount_day, amount_month, date_day, date_month, $TemplateId, $Sign, role_ids]\n    }\n    func getPoaTemplateId() int{\n        var where map poaTemplateId int\n        where[\"contract\"] = $CONTRACT\n        where[\"deleted\"] = 0\n        where[\"ecosystem\"] = $ecosystem_id\n        where[\"creator->member_id\"] = $key_id\n        where[\"params\"] = $PARAMS\n        poaTemplateId = Int(DBFind(\"@1poa_templates\").Where(where).One(\"id\"))\n        if poaTemplateId == 0{\n            poaTemplateId = @1PoaTemplateAdd(\"ContractName,ParamArr\", $CONTRACT, $PARAMS)\n        }\n        return poaTemplateId\n    }\n    func createMembersPoa(poaTemplateId int){\n        var params map\n        params[\"Recipient\"] = $key_id\n        params[\"DateExpiration\"] = $LimitDate\n        params[\"TimeExpiration\"] = $LimitTime\n        params[\"TemplateId\"] = poaTemplateId\n        params[\"ParamArr\"] = $PARAMS\n        params[\"ValueArr\"] = $VALUES\n        CallContract(\"@1PoaAdd\", params)\n    }\n\n    action {\n        var table string\n        table = Sprintf(\"@%vkeys\", $ecosystem_id)\n        // DBUpdate(table, $key_id, {multi:$multi})\n\n        // пользователи и роли КМП заносятся в таблицу доверенностей с указанными лимитами\n        createMembersPoa(getPoaTemplateId())\n    }}\n",
            "Type": "contracts"
        },
        {
            "Name": "MSUnits",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MSUnits {\n    data {\n        Action string\n        Units array\n        Vals array\n        Type int\n    }\n    conditions {\n        var units array i lenVals int\n        lenVals = Len($Vals)\n        while i < lenVals{\n            if $Vals[i] == \"true\"{\n                units = Append(units, $Units[i])\n            }\n            i = i + 1\n        }\n        $units = units\n    }\n\n\n    action {\n        var id int m buf map\n        buf[\"key\"] = \"multisigned_units\"\n        buf[\"member_id\"] = $key_id\n        buf[\"ecosystem\"] = $ecosystem_id\n        buf[\"id\"] = DBFind(\"@1buffer_data\").Where(buf).One(\"id\")\n        if !buf[\"id\"] {\n            buf[\"value\"] = `{}`\n            buf[\"id\"] = DBInsert(\"@1buffer_data\", buf)\n        }\n        if $Action == \"set\" {\n            m[\"value->type\"] = $Type\n            m[\"value->units\"] = JSONEncode($units)\n            DBUpdate(\"@1buffer_data\", Int(buf[\"id\"]), m)\n        }\n    }\n}\n",
            "Type": "contracts"
        }
    ]
}