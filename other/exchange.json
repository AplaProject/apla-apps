{
    "name": "Exchange",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Type": "pages",
            "Name": "ex_edit",
            "Value": "DBFind(@1symbol).WhereId(#id#).Vars(symbol)\nDBFind(@1ecosystems,src_eco).Where({\"id\":{\"$gt\":1}}).Columns(\"id,name\").Order(id)\nSetVar(s_pricetick,Money(#symbol_pricetick#))\nSetVar(s_range,Money(#symbol_range#))\nSetVar(s_lotsize,Money(#symbol_lotsize#))\nDiv(content-wrapper){\n    SetTitle($@1ex_symbol_param$)\n    Div(Class: breadcrumb){\n        LinkPage($@1ex_exchange$, @1ex_listing)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $@1ex_symbol_param$)\n    }\n    \n    Form(){\n        Div(form-group){\n            Label($@1title$)\n            Input(Name: name, Value: #symbol_name#, Disabled: true)\n        }\n        Div(form-group){\n            Label($@1ex_pricetick$)\n            Input(Name: pricetick,  Type: Number, Value: #s_pricetick#)\n        }\n        Div(form-group){\n            Label($@1ex_range$)\n            Input(Name: range,  Type: Number, Value: #s_range#)\n        }\n        Div(form-group){\n            Label($@1ex_lotsize$)\n            Input(Name: lotsize,  Type: Number, Value: #s_lotsize#)\n        }\n        Div(form-group){\n            Label($@1ex_ecosystem_hub$)\n            Select(Name: ecosystem, Source: src_eco, NameColumn: name, ValueColumn: id)\n        }\n        Div(form-group){\n            Button(Class: btn btn-primary, Body: $@1save$, Contract: @1ExSymbol, Page: @1ex_edit, PageParams: \"id=#symbol_id#\", Params: \"id=#symbol_id#, name=#symbol_name#, operation=E\").Alert(Text: $@1ex_confirmation_kill$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "ex_listing",
            "Value": "Include(@1pager_header)\nSetTitle($@1ex_exchange$)\nIf(#role_id#==1){\n    SetVar(permission,1)\n}\nDBFind(@1keys).Where({\"id\":1}).Count(exchange_wallet)\nIf(And(#permission#==1,#exchange_wallet#==1)){\n    Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1ex_exchange_desc$))\n    AddToolButton(Title: $@1ex_symbol_new$, Page: @1ex_symbol_new, Icon: icon-plus).Popup(Header: $@1ex_symbol_new$, Width: \"45\")\n}\nDBFind(@1ecosystems).Count(eco_hubs)\nDBFind(@1symbol,src_symbol).Custom(custom_name){\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1ex_tradedesk, PageParams: \"ticker_id=#id#\"){\n            Div(Class: text-primary){\n                Span(#name#).Style({padding-left: 30px;})\n            }\n        }\n    }.Custom(lotsize_money){\n            Money(#lotsize#)\n    }.Custom(pricetick_money){\n            Money(#pricetick#)\n    }.Custom(range_money){\n            Money(#range#)\n    }.Custom(tradeable_status){\n        If(#tradeable#==1){\n            If(#permission#==1){\n                Button(Body: Em(Class: fa fa-check), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExSymbol, Params: \"operation=U,status=TR,isTradeable=0,id=#id#,name=#name#\").Style({margin-left: 30px;})\n            }.Else{\n                Hint(fa fa-check, $@1ex_hint_tradestatus$).Style({margin-left: 30px;})\n            }\n        }.Else{\n            If(#permission#==1){\n                Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExSymbol, Params: \"operation=U,status=TR,isTradeable=1,id=#id#,name=#name#\").Style({margin-left: 30px;})\n            }.Else{\n                Hint(fa fa-times, $@1ex_error_tradestatus$).Style({margin-left: 30px;})\n            }\n        }\n    }.Custom(otc_status){\n        If(#otc#==1){\n            If(#permission#==1){\n                Button(Body: Em(Class: fa fa-check), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExSymbol, Params: \"operation=U,status=OTC,isOTC=0,id=#id#\").Style({margin-left: 30px;})\n            }.Else{\n                Hint(fa fa-times, $@1ex_hint_otcstatus$).Style({margin-left: 30px;})\n            }\n        }.Else{\n            If(#permission#==1){\n                Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExSymbol, Params: \"operation=U,status=OTC,isOTC=1,id=#id#\").Style({margin-left: 30px;})\n            }.Else{\n                Hint(fa fa-times, $@1ex_error_otcstatus$).Style({margin-left: 30px;})\n            }\n        }\n    }.Custom(cross_status){\n        If(#cross#==1){\n            If(#permission#==1){\n                Button(Body: Em(Class: fa fa-check), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExSymbol, Params: \"operation=U,status=CR,isCross=0,id=#id#\").Style({margin-left: 30px;})\n            }.Else{\n                Hint(fa fa-check, $@1ex_hint_cross_trades$).Style({margin-left: 30px;})\n            }\n        }.Else{\n            If(#permission#==1){\n                Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExSymbol, Params: \"operation=U,status=CR,isCross=1,id=#id#\").Style({margin-left: 30px;})\n            }.Else{\n                Hint(fa fa-times, $@ex_error_cross_trades$).Style({margin-left: 30px;})\n            }\n        }\n    }.Custom(cancel_orders){\n        Button(Body: Em(Class: fa fa-window-close), Class: btn-xs btn-link, Page: @1ex_listing, Contract: @1ExCancel, Params: \"symbol=#name#\").Style({margin-left: 30px;}).Alert(Text: \"$@1ex_cancel_all_confirmation$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n    }.Custom(edit){\n        Span(Class: pull-right){\n            LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1ex_edit, PageParams: \"id=#id#\")\n        }\n    }.Count(symbols)\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        If(#symbols#>0){\n            Div(list-group-item){\n                If(#permission#==1){\n                    Table(Source: src_symbol, Columns: \"$@1ex_symbol$=custom_name,$@1ex_pricetick$=pricetick_money,$@1ex_range$=range_money,$@1ex_lotsize$=lotsize_money,$@1ex_trade_status$=tradeable_status,$@1ex_cross_trades$=cross_status$,$@1ex_otc_short$=otc_status,$@1ex_cancel_all$=cancel_orders,=edit\").Style(\n                        tbody > tr > td {\n                            padding-left: 30px;\n                        }\n                    )\n                }.Else{\n                    Table(Source: src_symbol, Columns: \"$@1ex_symbol$=custom_name,$@1ex_pricetick$=pricetick_money,$@1ex_range$=range_money,$@1ex_lotsize$=lotsize_money,$@1ex_trade_status$=tradeable_status,$@1ex_cross_trades$=cross_status,$@1ex_otc_short$=otc_status\").Style(\n                        tbody > tr > td {\n                            padding-left: 30px;\n                        }\n                    )\n                }\n            }.Style(\n                margin-top:-15px;\n                tbody > tr:nth-of-type(odd) {\n                    background-color: #f8f9fc;\n                }\n            )\n        }.Else{\n            If(#eco_hubs#>0){\n                If(And(#permission#==1,#exchange_wallet#==0)){\n                    Div(Class: text-center h4 text-muted, Body: $@1ex_hint_exchange_wallet$)\n                    Button(Body: LangRes(@1create), Page: @1ex_listing, Class: center-block btn btn-primary, Contract: @1ExSymbol, Params: \"operation=N\")\n                }.Else{\n                    Div(Class: text-center h4 text-muted, Body: $@1ex_error_no_symbols$)\n                }\n            }.Else{\n                Div(Class: text-center h4 text-muted, Body: $@1ex_error_ecosystems$)\n            }\n        }\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}\n",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "ex_symbol_new",
            "Value": "Form(){\n    DBFind(@1ecosystems,src_eco).Where({\"id\":{\"$gt\":1}}).Columns(\"id,name\").Order(id)\n    Data(bool,\"value,name\"){\n        0,$@1ex_unavaliable$\n        1,$@1ex_avaliable$\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Name){\n                Span(Body: LangRes(@1ex_symbol)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: name, Type: text)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Pricetick){\n                Span(Body: LangRes(@1ex_pricetick)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: pricetick, Type: number)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Range){\n                Span(Body: LangRes(@1ex_range)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: range, Type: number)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: LotSize){\n                Span(Body: LangRes($@1ex_lotsize$)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: lotsize, Type: number)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_hub_value))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: isTradeable){\n                Span(Body: LangRes(@1ex_trade_status)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            RadioGroup(Name: isTradeable, Value: 1, Source: bool, ValueColumn: value, NameColumn: name)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: isCross){\n                Span(Body: LangRes(@1ex_cross_trades)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            RadioGroup(Name: isCross, Value: 1, Source: bool, ValueColumn: value, NameColumn: name)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: isOTC){\n                Span(Body: LangRes(@1ex_otc)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            RadioGroup(Name: isOTC, Value: 1, Source: bool, ValueColumn: value, NameColumn: name)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: ecosystem_hub){\n                Span(Body: LangRes(@1ex_ecosystem_hub)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Select(Name: ecosystem, Source: src_eco, NameColumn: name, ValueColumn: id)\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1ex_listing)\n            Button(Body: LangRes(@1create), Page: @1ex_listing, Class: btn pull-right btn-primary, Contract: @1ExSymbol, Params: \"operation=C\")\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "ex_tradedesk",
            "Value": "DBFind(@1symbol).Where({id:#ticker_id#}).Custom(lotsize_money){\n    SetVar(lotsize_symbol,Money(#lotsize#))\n}.Vars(ticker)\nDBFind(@1order_log).Where({\"symbol\":#ticker_name#,\"status\":\"A\",\"venue\":\"EX\"}).Order({\"price\":\"-1\"}).Count(orders)\nDBFind(@1keys).Where({\"id\":#key_id#, \"ecosystem\":1}).Custom(amount_money){\n    SetVar(balance_primary,Money(#amount#))\n}\nDBFind(@1keys).Where({\"id\":#key_id#, \"ecosystem\":#ticker_ecosystem_hub#}).Custom(hub_money){\n    SetVar(balance_hub,Money(#amount#))\n}\nDBFind(@1order_log,filled).Where({\"symbol\":#ticker_name#,\"status\":\"F\", $or:[{\"client\": #key_id#},{\"counterparty\": #key_id#}]}).Limit(5).Custom(price_money){\n    Money(#price#) APLA\n}.Custom(value_money){\n    Money(#client_value#) APLA\n}.Custom(quantity_money){\n    #quantity# x Money(#ticker_lotsize#)\n}.Count(tns)\n\nDBFind(@1notifications,otc_A).Where({\"closed\":0, \"page_params->symbol\":#ticker_name#,\"page_params->client\":#key_id#}).Columns(\"page_params->flag, page_params->price, page_params->quantity, page_params->client_value, page_params->venue\").Limit(5).Custom(price_money){\n    Money(#page_params.price#) APLA\n}.Custom(value_money){\n    Money(#page_params.client_value#) APLA\n}.Custom(quantity_money){\n    #page_params.quantity# x Money(#ticker_lotsize#)\n}.Custom(button){\n    Button(Body: LangRes(@1ex_cancel), Class: btn btn-warning, Page: @1ex_tradedesk, Contract: @1ExMatchingOTC, Params: \"notific_id=#id#,status=C\", PageParams: \"ticker_id=#ticker_id#\")\n}.Count(otc_log)\n\nDiv(content-wrapper){\n    Div(col-lg-12){\n        Div(panel-body){\n            Div(row){\n                Span(Class: h3 text-primary, Body: #ticker_name#)\n            }\n        }\n    }\n    Div(col-lg-6){\n        Div(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-10){\n                        DBFind(@1order_log,src_L2).Where({\"status\":\"F\",\"symbol\":\"#ticker_name#\",\"venue\":\"EX\"}).Columns(\"lastmodified,price\").Custom(graph_price){\n                            Money(#price#)\n                        }.Custom(graph_lastmodified){\n                            DateTime(#lastmodified#, HH:MI DD.MM)\n                        }.Count(graph_orders)\n                        If(#graph_orders#>0){\n                            Chart(Type: \"line\", Source: src_L2, FieldLabel: \"lastmodified\", FieldValue: \"price\", Colors: \"#0080B8\")\n                        }.Else{\n                            Div(Class: h4 text-bold m0 text-center, Body: $@1ex_hint_no_orders$ #ticker_name#)\n                        }\n                    }\n                }\n            }\n        }\n        If(#tns#>0){\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-10){\n                            Table(Source: filled, Columns: \"$@1ex_flag$=flag,$@1ex_price$=price_money,$@1ex_quantity$=quantity_money,$@1ex_value$=value_money,$@1ex_venue$=venue\") \n                        }\n                    }\n                }\n            }\n        }\n        If(#otc_log#>0){\n            Div(panel panel-primary){\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-10){\n                            Table(Source: otc_A, Columns: \"$@1ex_flag$=page_params.flag,$@1ex_price$=price_money,$@1ex_quantity$=quantity_money,$@1ex_value$=value_money,$@1ex_venue$=page_params.venue,$@1ex_cancel$=button\")  \n                        }\n                    }\n                }\n            }\n        }\n    }\n    Div(col-lg-6){\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12 text-left){\n                        If(#orders# > 0){\n                            DBFind(@1order_log,src_S).Where({\"flag\":\"S\",\"symbol\":\"#ticker_name#\",\"status\":\"A\",\"venue\":\"EX\"}).Order({\"price\":\"-1\"}).Limit(20).Custom(price_money){\n                                    Money(#price#)\n                            }.Custom(value_money){\n                                    Money(#client_value#) for Money(#counterparty_value#)\n                            }.Custom(_button){\n                                If(And(#ticker_cross#==1,#client#==#key_id#)){\n                                    Button(Body: LangRes(@1ex_buy), Class: btn btn-success, Page: @1ex_tradedesk, Contract: @1ExMatching, Params: \"flag=B,venue=EX,client=#key_id#,id=#id#,quantity=#quantity#,price=#price#,symbol=#symbol#,status=F\", PageParams: \"ticker_id=#ticker_id#\")\n                                }\n                                If(#client#!=#key_id#){\n                                    Button(Body: LangRes(@1ex_buy), Class: btn btn-success, Page: @1ex_tradedesk, Contract: @1ExMatching, Params: \"flag=B,venue=EX,client=#key_id#,id=#id#,quantity=#quantity#,price=#price#,symbol=#symbol#,status=F\", PageParams: \"ticker_id=#ticker_id#\")\n                                }\n                            }.Custom(_cancel){\n                                If(#client#==#key_id#){\n                                    Button(Body: LangRes(@1ex_cancel), Class: btn btn-warning, Page: @1ex_tradedesk, Contract: @1ExCancelOrder, Params: \"id=#id#,flag=#flag#,symbol=#symbol#\", PageParams: \"ticker_id=#ticker_id#\")\n                                }\n                            }.Count(sell_orders)\n                            If(#sell_orders# > 0){\n                                Table(Source: src_S, Columns: \"=_cancel,$@1ex_flag$=flag,Symbol=symbol,$@1ex_quantity$=quantity,$@1ex_price$=price_money,$@1ex_value$=value_money,=_button\").Style(\n                                    tbody > tr > td {\n                                        width: 10%;\n                                        word-break: break-all;\n                                        font-weight: 400;\n                                        font-size: 13px;\n                                        color: #666;\n                                        border-top: 1px solid #eee;\n                                        vertical-align: middle;\n                                    }\n                                )\n                            }\n                            DBFind(@1order_log,src_B).Where({\"flag\":\"B\",\"symbol\":\"#ticker_name#\",\"status\":\"A\",\"venue\":\"EX\"}).Order({\"price\":\"-1\"}).Limit(20).Custom(price_money){\n                                    Money(#price#)\n                            }.Custom(value_money){\n                                    Money(#client_value#) for Money(#counterparty_value#)\n                            }.Custom(_button){\n                                If(And(#ticker_cross#==1,#client#==#key_id#)){\n                                    Button(Body: LangRes(@1ex_sell), Class: btn btn-danger, Page: @1ex_tradedesk, Contract: @1ExMatching, Params: \"flag=S,venue=EX,client=#key_id#,id=#id#,quantity=#quantity#,price=#price#,symbol=#symbol#,status=F\", PageParams: \"ticker_id=#ticker_id#\")\n                                }\n                                If(#client#!=#key_id#){\n                                    Button(Body: LangRes(@1ex_sell), Class: btn btn-danger, Page: @1ex_tradedesk, Contract: @1ExMatching, Params: \"flag=S,venue=EX,client=#key_id#,id=#id#,quantity=#quantity#,price=#price#,symbol=#symbol#,status=F\", PageParams: \"ticker_id=#ticker_id#\")\n                                }\n                            }.Custom(_cancel){\n                                If(#client#==#key_id#){\n                                    Button(Body: LangRes(@1ex_cancel), Class: btn btn-warning, Page: @1ex_tradedesk, Contract: @1ExCancelOrder, Params: \"id=#id#,flag=#flag#,symbol=#symbol#\", PageParams: \"ticker_id=#ticker_id#\")\n                                }\n                            }.Count(buy_orders)\n                            If(#buy_orders# > 0){\n                                Table(Source: src_B, Columns: \"=_cancel,$@1ex_flag$=flag,Symbol=symbol,$@1ex_quantity$=quantity,$@1ex_price$=price_money,$@1ex_value$=value_money,=_button\").Style(\n                                    tbody > tr > td {\n                                        width: 10%;\n                                        word-break: break-all;\n                                        font-weight: 400;\n                                        font-size: 13px;\n                                        color: #666;\n                                        border-top: 1px solid #eee;\n                                        vertical-align: middle;\n                                    }\n                                )\n                            }\n                        }.Else{\n                            Div(Class: h4 text-bold m0 text-center, Body: $@1ex_hint_no_orders$ #ticker_name#)\n                        }\n                    }\n                }\n            }\n        }\n        Form(panel panel-primary){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-10){\n                        Div(row form-group){\n                            Div(col-sm-3 mt-sm text-right){\n                                Label(For: Balance){\n                                    Span(Body: LangRes(@1ex_balance_apla))\n                                }\n                            }\n                            Div(col-sm-9){\n                                Input(Name: balance, Value: #balance_primary#, Disabled: true)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n                            }\n                        }\n                        Div(row form-group){\n                            Div(col-sm-3 mt-sm text-right){\n                                Label(For: Ecosystem Hub Balance){\n                                    Span(Body: LangRes(@1ex_balance_hub))\n                                }\n                            }\n                            Div(col-sm-9){\n                                Input(Name: balance_hub, Value: #balance_hub#, Disabled: true)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_hub_value))\n                            }\n                        }\n                        Div(row form-group){\n                            Div(col-sm-3 mt-sm text-right){\n                                Label(For: Lot Size){\n                                    Span(Body: LangRes(@1ex_lotsize))\n                                }\n                            }\n                            Div(col-sm-9){\n                                Input(Name: lotsize, Value: #lotsize_symbol#, Disabled: true)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_hub_value))\n                            }\n                        }\n                        Div(row form-group){\n                            Div(col-sm-3 mt-sm text-right){\n                                Label(For: Quantity){\n                                    Span(Body: LangRes(@1ex_quantity)\n                                }\n                            }\n                            Div(col-sm-9){\n                                Input(Name: quantity, Type: number)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_quantity))\n                            }\n                        }\n                        Div(row form-group){\n                            Div(col-sm-3 mt-sm text-right){\n                                Label(For: Price){\n                                    Span(Body: LangRes(@1ex_price)\n                                }\n                            }\n                            Div(col-sm-9){\n                                Input(Name: price, Type: number)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n                            }\n                        }\n                    }\n                }\n                Div(row mt){\n                    Div(col-lg-12){\n                        Div(col-lg-2){\n                            Button(Body: LangRes(@1ex_sell), Page: @1ex_tradedesk, Class: btn pull-left btn-danger, Contract: @1ExOrder, Params: \"flag=S, symbol=#ticker_name#, client=#key_id#\", PageParams: \"ticker_id=#ticker_id#\")\n                        }\n                        Div(col-lg-2){\n                            Button(Body: LangRes(@1ex_sell_otc), Page: @1ex_otc, Class: btn pull-left btn-danger, PageParams: \"ticker_id=#ticker_id#, flag=S\").Popup(Header: $@1ex_otc$, Width: \"45\")\n                        }\n                        Div(col-lg-2){\n                            Button(Body: LangRes(@1ex_cancel_sell), Page: @1ex_tradedesk, Class: btn pull-left btn-danger, Contract: @1ExCancelOrders, Params: \"flag=S, symbol=#ticker_name#, client=#key_id#\", PageParams: \"ticker_id=#ticker_id#\")\n                        }\n                        Div(col-lg-2){\n                            Button(Body: LangRes(@1ex_cancel_buy), Page: @1ex_tradedesk, Class: btn pull-right btn-success, Contract: @1ExCancelOrders, Params: \"flag=B, symbol=#ticker_name#, client=#key_id#\", PageParams: \"ticker_id=#ticker_id#\")\n                        }\n                        Div(col-lg-2){\n                            Button(Body: LangRes(@1ex_buy_otc), Page: @1ex_otc, Class: btn pull-right btn-success, PageParams: \"ticker_id=#ticker_id#, flag=B\").Popup(Header: $@1ex_otc$, Width: \"45\")\n                        }\n                        Div(col-lg-2){\n                            Button(Body: LangRes(@1ex_buy), Page: @1ex_tradedesk, Class: btn pull-right btn-success, Contract: @1ExOrder, Params: \"flag=B, symbol=#ticker_name#, client=#key_id#\", PageParams: \"ticker_id=#ticker_id#\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu"
        },
        {
            "Type": "pages",
            "Name": "ex_otc",
            "Value": "Form(){\n    DBFind(@1symbol).Where({id:#ticker_id#}).Vars(ticker).Custom(custom_lotsize){\n        SetVar(lotsize_money,Money(#ticker_lotsize#))\n    }\n    If(#flag#==\"S\"){\n        SetVar(order_ecosystem,1)\n    }\n    If(#flag#==\"B\"){\n        SetVar(order_ecosystem,#ticker_ecosystem_hub#)\n    }\n    DBFind(@1ecosystems).Where({\"id\":#order_ecosystem#}).Columns(\"id,name\").Vars(eco)\n    DBFind(@1keys,src).Where({\"ecosystem\":#order_ecosystem#}).Columns(\"id\").Order(id).Custom(custom_id){\n        DBFind(@1members).Where({\"ecosystem\":#order_ecosystem#, \"id\":#id#}).Vars(m)\n        If(Or(#m_id#>0,#m_id#<0)){\n            #m_member_name# Address(#id#) @ #eco_name#\n        }.Else{\n            Address(#id#) @ #eco_name#\n        }\n    }\n    DBFind(@1keys).Where({\"id\":#key_id#, \"ecosystem\":1}).Custom(amount_money){\n        SetVar(balance_primary,Money(#amount#))\n    }\n    DBFind(@1keys).Where({\"id\":#key_id#, \"ecosystem\":#ticker_ecosystem_hub#}).Custom(hub_money){\n        SetVar(balance_hub,Money(#amount#))\n    }\n\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Name){\n                Span(Body: LangRes(@1ex_symbol)\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: name, Value: #ticker_name#, Disabled: true)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: price){\n                Span(Body: LangRes(@1ex_price)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: price, Type: number)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: lotsize){\n                Span(Body: LangRes(@1ex_lotsize)\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: lotsize, Value:#lotsize_money# , Disabled: true)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_hub_value))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: quantity){\n                Span(Body: LangRes(@1ex_quantity)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: quantity, Type: number)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_quantity))\n        }\n    }\n    Div(list-group-item){\n        Div(row mt-sm){\n            Div(col-sm-3 mt-sm text-right){\n                Label(For: counterparty){\n                    Span(Body: LangRes(@1ex_counterparty)\n                }\n                Span(Class: text-danger, Body:*)\n            }\n            Div(col-sm-9){\n                Select(Name: counterparty, Source: src, NameColumn: custom_id, ValueColumn: id)\n                \n            }\n        }\n        Div(row form-group){\n            Div(col-sm-3 mt-sm text-right){\n                Label(For: counterparty){\n                    Span()\n                }\n            }\n            Div(col-sm-6){\n                Input(Name: cp_direct, Type: number)\n                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_overwrite))\n            }\n            Div(col-sm-3){\n                Input(Name: cp_eco, Value:#eco_name#, Disabled: true)\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Balance){\n                Span(Body: LangRes(@1ex_balance_apla))\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: name, Value: #balance_primary#, Disabled: true)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Ecosystem Hub Balance){\n                Span(Body: LangRes(@1ex_hint_hub_value))\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: name, Value: #balance_hub#, Disabled: true)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_hub_value))\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1ex_tradedesk, PageParams: \"ticker_id=#ticker_id#\")\n            Button(Body: LangRes(@1create), Page: @1ex_tradedesk, Class: btn pull-right btn-primary, Contract: @1ExOTC, Params: \"ticker_id=#ticker_id#,flag=#flag#,ecosystem=#order_ecosystem#, client=#key_id#\", PageParams: \"ticker_id=#ticker_id#\")\n        }\n    }\n}.Style(.list-group-item {margin-bottom: 15px;})",
            "Conditions": "true",
            "Menu": "admin_menu"
        },
        {
            "Type": "pages",
            "Name": "ex_otc_new",
            "Value": "Div(content-wrapper){\n    If(#notific_id#>0){\n        DBFind(@1notifications).Where({id:#notific_id#}).Columns(\"id,sender->type,notification->type,notification->header,notification->body,page_params->flag,page_params->price,page_params->quantity,page_params->venue,page_params->client,page_params->counterparty,page_params->client_value,page_params->counterparty_value,page_params->status,page_params->symbol,page_params->lotsize,date_start_processing,closed\").Vars(prefix)\n        SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_body,#prefix_notification_body#).(notific_flag,#prefix_page_params_flag#).(notific_price,Money(#prefix_page_params_price#)).(notific_quantity,#prefix_page_params_quantity#).(notific_venue,#prefix_page_params_venue#).(notific_client,Address(#prefix_page_params_client#)).(notific_counterparty,Address(#prefix_page_params_counterparty#)).(notific_client_value,Money(#prefix_page_params_client_value#)).(notific_counterparty_value,Money(#prefix_page_params_counterparty_value#)).(notific_status,#prefix_page_params_status#).(notific_symbol,#prefix_page_params_symbol#).(notific_lotsize,Money(#prefix_page_params_lotsize#))\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(@1attention))\n        }\n        SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_body,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\n    }\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Form(){\n                Div(list-group-item text-center){\n                    Span(Class: h3, Body: #notific_header# @ #notific_price# APLA)\n                }\n                Div(panel-body){\n                    Div(col col-lg-5){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-left){\n                                Span(Class: h4, Body: LangRes(@1ex_price))\n                            }\n                            Div(col-md-8 mt-sm text-left){\n                                Input(Name: price, Value: #notific_price#, Disabled: true)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_apla_value))\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-4 mt-sm text-left){\n                                Span(Class: h4, Body: LangRes(@1ex_client))\n                            }\n                            Div(col-md-8 mt-sm text-left){\n                                Input(Name: client, Value: #notific_counterparty#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-4 mt-sm text-left){\n                                Span(Class: h4, Body: LangRes(@1ex_pay))\n                            }\n                            Div(col-md-8 mt-sm text-left){\n                                If(#notific_flag#==\"S\"){\n                                    Input(Name: client_value, Value: #notific_client_value#, Disabled: true)\n                                    Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_otc_pay_apla))\n                                }\n                                If(#notific_flag#==\"B\"){\n                                    Input(Name: counterparty_value, Value: #notific_counterparty_value#, Disabled: true)\n                                    Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_otc_pay_hub))\n                                }\n                            }\n                        }\n                    }\n                    Div(col col-lg-2){\n                        Div(row form-group){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(@1ex_quantity))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Input(Name: name, Value: #notific_quantity#, Disabled: true)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(col-sm-12 mt-sm text-center){\n                                Label(For: exchange){\n                                    Span(Class: h1, Body: Em(Class: fa fa-exchange))\n                                }\n                            }\n                        }\n                    }\n                    Div(col col-lg-5){\n                        Div(row){\n                            Div(col-md-4 mt-sm text-left){\n                                Span(Class: h4, Body: LangRes(@1ex_lotsize))\n                            }\n                            Div(col-md-8 mt-sm text-left){\n                                Input(Name: lotsize, Value: #notific_lotsize#, Disabled: true)\n                                Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_hub_value))\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-4 mt-sm text-left){\n                                Span(Class: h4, Body: LangRes(@1ex_counterparty))\n                            }\n                            Div(col-md-8 mt-sm text-left){\n                                Input(Name: counterparty, Value: #notific_client#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-4 mt-sm text-left){\n                                Span(Class: h4, Body: LangRes(@1ex_receive))\n                            }\n                            Div(col-md-8 mt-sm text-left){\n                                If(#notific_flag#==\"S\"){\n                                    Input(Name: counterparty_value, Value:  #notific_counterparty_value#, Disabled: true)\n                                    Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_otc_pay_hub))\n                                }\n                                If(#notific_flag#==\"B\"){\n                                    Input(Name: counterparty_value, Value: #notific_client_value#, Disabled: true)\n                                    Div(Class: m0 h6 text-muted, Body: LangRes(@1ex_hint_otc_rec_apla))\n                                }\n                            }\n                        }\n                    }\n                    Div(col-lg-12){\n                        Div(row mt){\n                            If(#prefix_closed# == 0){\n                                Button(Body: LangRes(@1reject), Class: btn pull-left btn btn-danger, Contract: @1ExMatchingOTC, Params: \"notific_id=#notific_id#, status=C\", Page: @1notifications_list)\n                                Button(Body: LangRes(@1accept), Class: btn pull-right btn btn-primary, Contract: @1ExMatchingOTC, Params: \"notific_id=#notific_id#, status=F\", Page: @1notifications_list).Alert(Text: \"$@1ex_confirmation$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=0\")\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n",
            "Conditions": "true",
            "Menu": "admin_menu"
        },
        {
            "Type": "contracts",
            "Name": "ExCancel",
            "Value": "contract ExCancel {\n    data {\n        symbol string\n    }\n    conditions {\n        ContractConditions(\"@1AdminCondition\") \n    }\n    action {\n        var ids array\n        var i ecosystem_hub wallet_apla wallet_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        i = 0\n        ids = DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\"}).Columns(\"id,client,client_value,counterparty_value,flag\")\n        while i < Len(ids) {\n            var param map\n            param = ids[i]\n            var client id int\n            client = Int(param[\"client\"])\n            id = Int(param[\"id\"])\n            var amount money\n            if param[\"flag\"] == \"S\" {\n                amount = Money(param[\"counterparty_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_hub, client, \"ExCancel\", ecosystem_hub)\n            }\n            if param[\"flag\"] == \"B\" {\n                amount = Money(param[\"client_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_apla, client, \"ExCancel\", 1)\n            }\n            DBUpdate(\"@1order_log\", id, {status:\"C\", lastmodified:$time})\n            i = i + 1\n        }  \n       \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "ExMatching",
            "Value": "contract ExMatching {\n    data {\n        id int\n        flag string\n        symbol string\n        client int\n        quantity int\n    }\n    func checkBalance (client int, ecosystem int, value money) {\n        var balance money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":client, \"ecosystem\":ecosystem}).Columns(\"amount\").One(\"amount\"))\n        if value > balance {\n            warning LangRes(\"@1ex_error_balance_check\", \"en\")\n        }\n    }\n    conditions {\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"tradeable\").One(\"tradeable\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_tradestatus\", \"en\")\n        }\n        var check_eco_id ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        check_eco_id = Int(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":ecosystem_hub}).One(\"id\"))\n        if check_eco_id != $client {\n            warning LangRes(\"@1ex_error_account\", \"en\")\n        }\n        if $flag == \"S\" {\n            var face_value money\n            face_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"counterparty_value\").One(\"counterparty_value\"))\n            checkBalance($client, ecosystem_hub, face_value) //check ecosystem_hub\n        }\n        if $flag == \"B\" {\n            var apla_value money\n            apla_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client_value\").One(\"client_value\"))\n            checkBalance($client, 1, apla_value)      \n        }\n        var counterparty check_cross int\n        counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n        check_cross = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).One(\"cross\"))\n        if check_cross = 0 && $client == counterparty {\n            warning LangRes(\"@1ex_error_cross_trades\", \"en\")\n        }\n    }\n    action {\n        DBUpdate(\"@1order_log\", $id, {status:\"F\", counterparty: $client, lastmodified:$time})\n        var ecosystem_hub counterparty wallet_hub wallet_apla int\n        counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        var apla_value face_value price money\n        price = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"price\").One(\"price\"))\n        apla_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client_value\").One(\"client_value\"))\n        face_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"counterparty_value\").One(\"counterparty_value\")) \n        if $flag == \"S\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, $client, counterparty, \"EXMatching\", ecosystem_hub)\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, wallet_apla, $client, \"EXMatching\", 1)\n        }\n        if $flag == \"B\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, $client, counterparty, \"EXMatching\", 1)\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, wallet_hub, $client, \"EXMatching\", ecosystem_hub)          \n        }\n        //DBInsert(\"@1order_log\", {flag: $flag, client: $client, counterparty: counterparty, venue: \"EX\", symbol: $symbol, quantity: $quantity, price: price, client_value: apla_value, counterparty_value: face_value, status: \"F\", lastmodified: $time})\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "ExSymbol",
            "Value": "contract ExSymbol {\n    data {\n        id int \"optional\"\n        status string \"optional\"\n        operation string\n        name string\n        pricetick money\n        range money\n        lotsize money\n        ecosystem int\n        isTradeable int \"optional\"\n        isCross int \"optional\"\n        isOTC int \"optional\"\n    }\n    func exWallet (ecosystem int) int {\n        var check_ex_wallet is_ex_wallet new_ex_wallet int\n        check_ex_wallet = Int(DBFind(\"@1keys\").Where({\"id\":$ecosystem}).Columns(\"id\").One(\"id\"))\n        if check_ex_wallet == $ecosystem {\n            is_ex_wallet = Int(DBFind(\"@1symbol\").Where({\"wallet_hub\":check_ex_wallet}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n            if check_ex_wallet == is_ex_wallet {\n                return is_ex_wallet\n            } else {\n                new_ex_wallet = Int($ecosystem - ($ecosystem * 2))\n                DBInsert(\"@1keys\", {\"id\":new_ex_wallet, \"ecosystem\":$ecosystem})\n                return new_ex_wallet\n            }\n        }\n        if check_ex_wallet == 0 {\n            DBInsert(\"@1keys\", {\"id\":$ecosystem, \"ecosystem\":$ecosystem})\n            return $ecosystem\n        }\n    }\n    conditions {\n        if $operation == \"N\" {\n            if DBFind(\"@1keys\").Where({\"id\":1, \"ecosystem\": 1}).Columns(\"id\").One(\"id\") {\n                warning LangRes(\"@1ex_error_apla_wallet\", \"en\")\n            }\n        }\n        if $operation == \"C\" {\n            var check_symbol string\n            check_symbol = DBFind(\"@1symbol\").Where({\"name\":$name}).Columns(\"name\").One(\"name\")\n            if (check_symbol == $name) {\n                warning LangRes(\"@1ex_error_symbol_name\", \"en\")\n            }\n        }\n        if ($ecosystem == 1) {\n            warning LangRes(\"@1ex_error_mirror_trading\", \"en\")\n        }\n        ContractConditions(\"@1AdminCondition\") \n    }\n    action {\n        if $operation == \"N\" {\n            DBInsert(\"@1keys\", {\"id\":1, \"ecosystem\":1})\n        }\n        if $operation == \"C\" {\n            var m map\n            m[\"name\"] = $name\n            m[\"pricetick\"] = $pricetick\n            m[\"range\"] = $range\n            m[\"lotsize\"] = $lotsize\n            m[\"ecosystem_hub\"] = $ecosystem\n            m[\"tradeable\"] = $isTradeable\n            m[\"cross\"] = $isCross\n            m[\"otc\"] = $isOTC\n            m[\"wallet_hub\"] = exWallet($ecosystem)\n            m[\"wallet_apla\"] = 1\n            DBInsert(\"@1symbol\", m)\n        }\n        if $operation == \"E\" {\n            @1ExCancel(\"symbol\", $name)\n            var m map\n            m[\"pricetick\"] = $pricetick\n            m[\"range\"] = $range\n            m[\"lotsize\"] = $lotsize\n            m[\"ecosystem_hub\"] = $ecosystem\n            DBUpdate(\"@1symbol\", $id, m)\n        }\n        if $operation == \"U\" {\n            var m map\n            if $status == \"TR\" {\n                //@1ExCancel(\"symbol\", $name)\n                m[\"tradeable\"] = $isTradeable\n            } \n            if $status == \"CR\" {\n                m[\"cross\"] = $isCross\n            }\n            if $status == \"OTC\" {\n                m[\"otc\"] = $isOTC\n            }\n            DBUpdate(\"@1symbol\", $id, m)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "ExOrder",
            "Value": "contract ExOrder {\n    data {\n        client int\n        flag string\n        symbol string\n        quantity int\n        price money\n    }\n    func calcFaceValue (quantity int) money {\n        var lot_size face_value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 1\n        face_value = Money(0)\n        while i < $quantity+1 {\n            face_value = face_value + lot_size\n            if i == $quantity {\n                return face_value\n            }\n            i = i + 1\n        }  \n    }\n    func calcAplaValue (price money, quantity int) money {\n        var apla_value money\n        var j int\n        j = 1\n        apla_value = Money(0)\n        while j < $quantity+1 {\n            apla_value = apla_value + price\n            if j == $quantity {\n                return apla_value\n            }\n            j = j + 1\n        }  \n    }\n    conditions {\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"tradeable\").One(\"tradeable\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_tradestatus\", \"en\")\n        }\n        var check_eco_id ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        check_eco_id = Int(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":ecosystem_hub}).One(\"id\"))\n        if check_eco_id != $client {\n            warning LangRes(\"@1ex_error_account\", \"en\")\n        }\n        var balance value money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":$ecosystem_id}).Columns(\"amount\").One(\"amount\"))\n        if $flag == \"B\" {\n            var check_price int\n            check_price = Int(DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\",\"flag\":\"S\", \"price\":{\"$lt\":$price}}).One(\"price\"))\n            if check_price > 0 {\n                warning LangRes(\"@1ex_error_market_orders\", \"en\")\n            }\n            var face_value money\n            face_value = calcFaceValue($quantity)\n            if (face_value > balance) { \n                warning LangRes(\"@1ex_error_balance_check\", \"en\")\n            }\n        }\n        if $flag == \"S\" {\n            var check_price int\n            check_price = Int(DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\",\"flag\":\"S\", \"price\":{\"$gt\":$price}}).One(\"price\"))\n            if check_price > 0 {\n                warning LangRes(\"@1ex_error_market_orders\", \"en\")\n            }\n            var apla_value money\n            apla_value = calcAplaValue($price, $quantity)\n            if (apla_value > balance) {  \n                warning LangRes(\"@1ex_error_balance_check\", \"en\")\n            }\n        }\n    }\n    action {\n        var face_value apla_value money\n        face_value = calcFaceValue($quantity)\n        apla_value = calcAplaValue($price, $quantity)\n        var ecosystem_hub wallet_hub wallet_apla int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        var m map\n        m[\"flag\"] = $flag\n        m[\"client\"] = $client\n        m[\"venue\"] = \"EX\"\n        m[\"symbol\"] = $symbol\n        m[\"quantity\"] = $quantity\n        m[\"price\"] = $price\n        m[\"client_value\"] = apla_value\n        m[\"counterparty_value\"] = face_value\n        m[\"status\"] = \"A\"\n        m[\"lastmodified\"] = $time\n        DBInsert(\"@1order_log\", m)\n        if $flag == \"S\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, $client, wallet_hub, \"EXOrder\", ecosystem_hub)\n        }\n        if $flag == \"B\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, $client, wallet_apla, \"EXOrder\", 1)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExCancelOrder",
            "Value": "contract ExCancelOrder {\n    data {\n        id int\n        symbol string\n    }\n    conditions {\n        var client int\n        client = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\")) \n        if (client!=$key_id){\n            warning LangRes(\"@1ex_error_permissions\", \"en\")\n        }\n    }\n    action {\n        var ecosystem_hub client wallet_apla wallet_hub int\n        var flag string\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        client = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))  \n        flag = DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"flag\").One(\"flag\")\n        DBUpdate(\"@1order_log\", $id, {status:\"C\", lastmodified: $time})  \n        if flag == \"S\" {\n            var face_value money\n            face_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"counterparty_value\").One(\"counterparty_value\"))\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, wallet_hub, client, \"ExCancelOrder\", ecosystem_hub)\n        }\n        if flag == \"B\" {\n            var apla_value money\n            apla_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client_value\").One(\"client_value\"))\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, wallet_apla, client, \"ExCancelOrder\", 1)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExOTC",
            "Value": "contract ExOTC {\n    data {\n        ticker_id int\n        flag string\n        price money\n        quantity int\n        client int\n        cp string \"optional\"\n        counterparty int \"optional\"\n        ecosystem int\n    }\n    func calcFaceValue (quantity int) money {\n        var lot_size face_value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 1\n        face_value = Money(0)\n        while i < $quantity+1 {\n            face_value = face_value + lot_size\n            if i == $quantity {\n                return face_value\n            }\n            i = i + 1\n        }  \n    }\n    func calcAplaValue (price money, quantity int) money {\n        var apla_value money\n        var j int\n        j = 1\n        apla_value = Money(0)\n        while j < $quantity+1 {\n            apla_value = apla_value + price\n            if j == $quantity {\n                return apla_value\n            }\n            j = j + 1\n        }  \n    }\n    func checkBalance (client int, ecosystem int, value money) {\n        var balance money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":client, \"ecosystem\":ecosystem}).Columns(\"amount\").One(\"amount\"))\n        if value > balance {\n            warning LangRes(\"@1ex_error_balance_check\", \"en\")\n        }\n    }\n    conditions {\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"otc\").One(\"otc\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_otcstatus\", \"en\")\n        }\n        if $flag == \"S\" {\n            var ecosystem_hub int\n            ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n            var face_value money\n            face_value = calcFaceValue($quantity)\n            checkBalance($client, ecosystem_hub, face_value)\n        }\n        if $flag == \"B\" {\n            var apla_value money\n            apla_value = calcAplaValue($price, $quantity)\n            checkBalance($client, 1, apla_value)\n        }\n        if $cp != \"\" {\n            $recipient_id = AddressToId($cp)\n            if $recipient_id == 0 {\n                error Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $cp)\n            }\n        }\n    }\n    action {\n        if $cp == \"\" {\n            $recipient_id = $counterparty\n        }\n        var face_value apla_value money\n        face_value = calcFaceValue($quantity)\n        apla_value = calcAplaValue($price, $quantity)\n        var symbol string\n        symbol = DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"name\").One(\"name\")\n        var lotsize money\n        lotsize = Money(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"lotsize\").One(\"lotsize\"))\n        var ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        var m map\n        m[\"flag\"] = $flag\n        m[\"client\"] = $client\n        m[\"counterparty\"] = $recipient_id\n        m[\"venue\"] = \"EXOTC\"\n        m[\"symbol\"] = symbol\n        m[\"quantity\"] = $quantity\n        m[\"price\"] = $price\n        m[\"client_value\"] = apla_value\n        m[\"counterparty_value\"] = face_value\n        m[\"status\"] = \"A\"\n        m[\"lotsize\"] = lotsize\n        m[\"ecosystem_hub\"] = ecosystem_hub\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $recipient_id, 1, \"fa fa-exchange\", Sprintf(\"%s %s\", $flag,symbol), LangRes(\"@1ex_new_otc\", \"en\"), \"@1ex_otc_new\", m, $ecosystem)\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExMatchingOTC",
            "Value": "contract ExMatchingOTC {\n    data {\n        notific_id int\n        status string\n    }\n    func checkBalance (client int, ecosystem int, value money) {\n        var balance money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":client, \"ecosystem\":ecosystem}).Columns(\"amount\").One(\"amount\"))\n        if value > balance {\n            warning LangRes(\"@1ex_error_balance_check\", \"en\")\n        }\n    }\n    conditions {\n        if $status == \"F\" {\n            var m order map\n            m = DBFind(\"@1notifications\").Where({\"id\":$notific_id}).Columns(\"page_params->flag,page_params->client,page_params->counterparty,page_params->client_value,page_params->counterparty_value,page_params->price,page_params->quantity,page_params->symbol,page_params->ecosystem_hub\").Row()\n            if m[\"page_params.flag\"] == \"B\" {\n                checkBalance(Int(m[\"page_params.counterparty\"]), Int(m[\"page_params.ecosystem_hub\"]), Money(m[\"page_params.counterparty_value\"]))\n                checkBalance(Int(m[\"page_params.client\"]), 1, Money(m[\"page_params.client_value\"]))\n            }\n            if m[\"page_params.flag\"] == \"S\" {\n                checkBalance(Int(m[\"page_params.client\"]), Int(m[\"page_params.ecosystem_hub\"]), Money(m[\"page_params.counterparty_value\"]))\n                checkBalance(Int(m[\"page_params.counterparty\"]), 1, Money(m[\"page_params.client_value\"]))\n            }\n        }\n    }\n    action {\n        var m order map\n        m = DBFind(\"@1notifications\").Where({\"id\":$notific_id}).Columns(\"page_params->flag,page_params->client,page_params->counterparty,page_params->client_value,page_params->counterparty_value,page_params->price,page_params->quantity,page_params->symbol,page_params->ecosystem_hub\").Row()\n        order[\"flag\"] = Str(m[\"page_params.flag\"])\n        order[\"symbol\"] = Str(m[\"page_params.symbol\"])\n        order[\"client\"] = Int(m[\"page_params.client\"])\n        order[\"counterparty\"] = Int(m[\"page_params.counterparty\"])\n        order[\"client_value\"] = Money(m[\"page_params.client_value\"])\n        order[\"counterparty_value\"] = Money(m[\"page_params.counterparty_value\"])\n        order[\"quantity\"] = Int(m[\"page_params.quantity\"])\n        order[\"price\"] = Money(m[\"page_params.price\"])\n        order[\"venue\"] = \"EXOTC\"\n        order[\"status\"] = $status\n        if $status == \"F\" {\n            if order[\"flag\"] == \"B\" {\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"counterparty_value\"], order[\"counterparty\"], order[\"client\"], \"ExMatchingOTC\", m[\"page_params.ecosystem_hub\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"client_value\"], order[\"client\"], order[\"counterparty\"], \"ExMatchingOTC\", 1)\n            }\n            if order[\"flag\"] == \"S\" {\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"counterparty_value\"], order[\"client\"], order[\"counterparty\"], \"ExMatchingOTC\", m[\"page_params.ecosystem_hub\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"client_value\"], order[\"counterparty\"], order[\"client\"], \"ExMatchingOTC\", 1)\n            }\n            \n        }\n        DBInsert(\"@1order_log\", order)\n        @1NotificationsClose(\"notific_id\", $notific_id)\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExCancelOrders",
            "Value": "contract ExCancelOrders {\n    data {\n        symbol string\n        client int\n        flag string\n    }\n    conditions {\n    }\n    action {\n        var ids array\n        var i ecosystem_hub wallet_apla wallet_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        i = 0\n        ids = DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\", \"client\":$client, \"flag\":$flag}).Columns(\"id,client_value,counterparty_value\")\n        while i < Len(ids) {\n            var param map\n            param = ids[i]\n            var client id int\n            client = Int(param[\"client\"])\n            id = Int(param[\"id\"])\n            var amount money\n            if $flag == \"S\" {\n                amount = Money(param[\"counterparty_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_hub, $client, \"ExCancel\", ecosystem_hub)\n            }\n            if $flag == \"B\" {\n                amount = Money(param[\"client_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_apla, $client, \"ExCancel\", 1)\n            }\n            DBUpdate(\"@1order_log\", id, {status:\"C\", lastmodified:$time})\n            i = i + 1\n        }  \n       \n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "tables",
            "Name": "symbol",
            "Conditions": "ContractAccess(\"@1EditTable\")",
            "Columns": "[{\"name\":\"cross\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"ecosystem_hub\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"lotsize\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"name\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"otc\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"pricetick\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"range\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"tradeable\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"wallet_apla\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"wallet_hub\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1ExSymbol\\\")\", \"update\": \"ContractAccess(\\\"@1ExSymbol\\\")\", \"new_column\": \"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Type": "tables",
            "Name": "order_log",
            "Conditions": "ContractAccess(\"@1EditTable\")",
            "Columns": "[{\"name\":\"client\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"client_value\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"counterparty\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"counterparty_value\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"flag\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"lastmodified\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"price\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"quantity\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"status\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"symbol\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"venue\",\"conditions\":\"true\",\"type\":\"text\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1ExOrder\\\",\\\"@1ExMatchingOTC\\\",\\\"@1ExMatching\\\")\", \"update\": \"ContractAccess(\\\"@1ExCancel\\\",\\\"@1ExCancelOrder\\\",\\\"@1ExCancelOrders\\\",\\\"@1ExMatching\\\")\", \"new_column\": \"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:$@1ex_exchange$, Page:@1ex_listing, Icon:\"fa fa-money\")",
            "Type": "menu"
        },        {
            "Name": "ex_add_trade_symbol",
            "Trans": "{\"en\": \"New trade symbol\", \"ru\": \"Добавить торговый инструмент\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_avaliable",
            "Trans": "{\"en\": \"Avaliable\", \"ru\": \"Доступно\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_balance_apla",
            "Trans": "{\"en\": \"Balance\", \"ru\": \"Баланс\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_balance_hub",
            "Trans": "{\"en\": \"Ecosystem Hub Balance\", \"ru\": \"Баланс в сопряженной торговой системе\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_buy",
            "Trans": "{\"en\": \"Buy\", \"ru\": \"Покупка\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_buy_otc",
            "Trans": "{\"en\": \"OTC Buy\", \"ru\": \"OTC Покупка\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_cancel",
            "Trans": "{\"en\": \"Cancel\", \"ru\": \"Отмена\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_cancel_all",
            "Trans": "{\"en\": \"Cancel all orders\", \"ru\": \"Снять все заявки\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_cancel_all_confirmation",
            "Trans": "{\"en\": \"Warning! Make sure that by pressing this button you will cancel all active orders at this symbol. Please confirm your action\", \"ru\": \"ВНИМАНИЕ! Нажимая на данную кнопку, вы снимите все активные торговые заявки по данному инструменту с площадки и инициируете возврат депозитарной маржи. Пожалуйста подтвердите ваше действие.\" }",
            "Type": "languages"
        },
        {
            "Name": "ex_cancel_buy",
            "Trans": "{\"en\": \"Cancel all B\", \"ru\": \"Снять всю покупку\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_cancel_sell",
            "Trans": "{\"en\": \"Cancel all S\", \"ru\": \"Снять всю продажу\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_confirmation",
            "Trans": "{\"en\": \"This operation is one way only, please confirm it\", \"ru\": \"Эта операция не подлежит отзыву, пожалуйста подтвердите ваше действие\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_confirmation_kill",
            "Trans": "{\"en\": \"Warning! Make sure that changing any of trading params and pressing this button you will cancel all active orders at this symbol. Please confirm your action\", \"ru\": \"ВНИМАНИЕ! Изменяя один из торговых параметров и для сохранения изменений, вам придется отменить все активные заявки по данному торговому инструменту. Если вы действительно желаете изменить параметры, подтвердите ваше действие.\" }",
            "Type": "languages"
        },
        {
            "Name": "ex_counterparty",
            "Trans": "{\"en\": \"Counterparty\", \"ru\": \"Контрагент\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_cross_trades",
            "Trans": "{\"en\": \"Cross trades\", \"ru\": \"Кросс-заявки\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_ecosystem_hub",
            "Trans": "{\"en\": \"Ecosystem Trade Hub\", \"ru\": \"Сопряженная для торговли экосистема\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_account",
            "Trans": "{\"en\": \"Wallen not found in the ecosystem! You must enter first in the ecosystem to trade this symbol\", \"ru\": \"Ваш кошелек не найден в соответствующей экосистеме. Пожалуйста, зайдите в экосистему что бы начать торговать этим инструментом\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_apla_wallet",
            "Trans": "{\"en\": \"Someone already occupied default deposit margin wallet for exchange operations or it's already exists, if you want to continue please fix this problem and then return back\", \"ru\": \"Кто-то уже занял кошелек для депозитарной маржи биржи по умолчанию или он уже существует. Если вы желаете продолжить процедуру создания, пожалуйста исправте эту проблему, а затем вернитесь к процессу\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_balance_check",
            "Trans": "{\"en\": \"Order cancelled. Value of transaction is more then current balance\", \"ru\": \"Заявка отменена. Сумма транзакции превышает баланс.\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_cross_trades",
            "Trans": "{\"en\": \"Cross trade are not allowed for this trade symbol\", \"ru\": \"Кросс заявки отключены для этого торгового инстумента\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_ecosystems",
            "Trans": "{\"en\": \"You should have more then one ecosystem created, to make Token Exchange avaliable.\", \"ru\": \"Вам необходимо создать более чем одну экосистему, что бы Биржа Токенов стала доступна.\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_market_orders",
            "Trans": "{\"en\": \"Market orders are not allowed on this type of exchange\", \"ru\": \"Исполнение заявки по ценам выше рыночных недопустимы на этой бирже\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_mirror_trading",
            "Trans": "{\"en\": \"You can't trade any symbol inside primary ecosystem.\", \"ru\": \"Невозможно создать торговый инструмент внутри основной экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_no_symbols",
            "Trans": "{\"en\": \"There are no symbols created and avaliable for trading yet! Please contract administrator to create one.\", \"ru\": \"В данный момент ещё не создан ни один торговый инструмент. Если вы хотите создать его, пожалуйста сообщите об этом администратору.\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_otcstatus",
            "Trans": "{\"en\": \"Negotiated OTC deals are not avaliable for this instrument at the moment\", \"ru\": \"В данный момент внебиржевые адресные сделки недоступны по этому инструменту\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_permissions",
            "Trans": "{\"en\": \"You are unable to cancel this trade order\", \"ru\": \"Вы не можете отменить этот торговый приказ\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_symbol_name",
            "Trans": "{\"en\": \"Symbol name must be unique!\", \"ru\": \"Имя торгового инструмента должно быть уникально!\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_error_tradestatus",
            "Trans": "{\"en\": \"At the moment this trade symbol doesn't avaliable for trading\", \"ru\": \"На данный момент торговля по данному инструменту остановлена\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_exchange",
            "Trans": "{\"en\": \"Token Exchange\", \"ru\": \"Биржа Токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_exchange_desc",
            "Trans": "{\"en\": \"Welcome to Token Exchange! Please select symbol below or create one to start trading.\", \"ru\": \"Добро пожаловать на Биржу Токенов! Пожалуйста выберите торговый инструмент ниже или создайте его что бы начать торговлю.\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_flag",
            "Trans": "{\"en\": \"Flag\", \"ru\": \"Направление\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_apla_value",
            "Trans": "{\"en\": \"nominated in APLA\", \"ru\": \"номинированно в APLA\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_cross_trades",
            "Trans": "{\"en\": \"Cross trade are allowed for this trade symbol. Yoo can place orders and fill it by yourself\", \"ru\": \"Кросс заявки допускаются для этого торгового инстумента. Вы можете выставлять заявки и сами же исполнять их.\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_exchange_wallet",
            "Trans": "{\"en\": \"Press to create APLA Depositary Exchange Wallet \", \"ru\": \"Нажмите на кнопку что-бы создать депозитарный кошелек биржи в основной экосистеме\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_hub_value",
            "Trans": "{\"en\": \"nominated in token of ecosystem hub\", \"ru\": \"номинированно в токенах сопряженной экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_no_orders",
            "Trans": "{\"en\": \"There are no orders yet! Be the first who conquer market on \", \"ru\": \"Никто пока не выставил ни одной заявки! Будь первым кто захватит рынок по \"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_otc_pay_apla",
            "Trans": "{\"en\": \"You will pay this amount in APLA\", \"ru\": \"Вы заплатите указанный номинал в APLA\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_otc_pay_hub",
            "Trans": "{\"en\": \"You will pay this amount in Tokens of \", \"ru\": \"Вы заплатите указанный номинал в токенах экосистемы \"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_otc_rec_apla",
            "Trans": "{\"en\": \"You will receive this amount in APLA\", \"ru\": \"Вы получите указанный номинал в APLA\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_otc_rec_hub",
            "Trans": "{\"en\": \"You will receive this amount in Tokens of \", \"ru\": \"Вы заплатите получите указанный номинал в токенах экосистемы \"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_otcstatus",
            "Trans": "{\"en\": \"Negotiated OTC deals are avaliable for this instrument\", \"ru\": \"Внебиржевые адресные сделки доступны по этому инструменту\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_overwrite",
            "Trans": "{\"en\": \"leave this field blank if you want to use dropdown, otherwise direct address field from the bottom will prevail\", \"ru\": \"оставьте поле пустым если хотите выбрать контрагента из списка, в противном случае прямой адрес контрагента превалирует над верхним значением\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_quantity",
            "Trans": "{\"en\": \"quantity of trade lots\", \"ru\": \"указывается в лотах\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_hint_tradestatus",
            "Trans": "{\"en\": \"At the moment this trade symbol avaliable for trading\", \"ru\": \"На данный момент производятся торги по данному инструменту\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_lotsize",
            "Trans": "{\"en\": \"Lot Size\", \"ru\": \"Размер лота\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_new_otc",
            "Trans": "{\"en\": \"New OTC Order\", \"ru\": \"Новая ОТС заявка\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_otc",
            "Trans": "{\"en\": \"Negotiated Over-the-Counter deals\", \"ru\": \"Режим адресных внебиржевых сделок\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_otc_short",
            "Trans": "{\"en\": \"OTC Market\", \"ru\": \"ОТС сделки\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_pay",
            "Trans": "{\"en\": \"Pay\", \"ru\": \"Заплачу\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_price",
            "Trans": "{\"en\": \"Price\", \"ru\": \"Цена\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_pricetick",
            "Trans": "{\"en\": \"Pricetick\", \"ru\": \"Шаг цены\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_quantity",
            "Trans": "{\"en\": \"Quantity\", \"ru\": \"Количество\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_range",
            "Trans": "{\"en\": \"Trade range\", \"ru\": \"Допустимый диапазон\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_receive",
            "Trans": "{\"en\": \"Receive\", \"ru\": \"Получаю\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_sell",
            "Trans": "{\"en\": \"Sell\", \"ru\": \"Продажа\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_sell_otc",
            "Trans": "{\"en\": \"OTC Sell\", \"ru\": \"OTC Продажа\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_symbol",
            "Trans": "{\"en\": \"Symbol\", \"ru\": \"Торговый инстумент\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_symbol_new",
            "Trans": "{\"en\": \"Create new trading symbol\", \"ru\": \"Добавить новый торговый инструмент\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_symbol_param",
            "Trans": "{\"en\": \"Edit symbol parameters\", \"ru\": \"Редактирование параметров торгового инструмента\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_trade_status",
            "Trans": "{\"en\": \"Trade status\", \"ru\": \"Статус торгов\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_unavaliable",
            "Trans": "{\"en\": \"Unavailable\", \"ru\": \"Недоступно\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_value",
            "Trans": "{\"en\": \"Value\", \"ru\": \"Объём\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_venue",
            "Trans": "{\"en\": \"Venue\", \"ru\": \"Площадка\"}",
            "Type": "languages"
        },
        {
            "Name": "ex_welcome_screen",
            "Trans": "{\"en\": \"Welcome to Token Exchange. Currently there are no trade symbols allowed to trade.\", \"ru\": \"Добро пожаловать на Биржу Токенов! К сожалению в текущий момент нет ни одного инструмента доступного для торгов.\"}",
            "Type": "languages"
        }
    ]
}