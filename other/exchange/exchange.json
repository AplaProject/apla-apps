{
    "name": "Exchange",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
       
        {
            "Type": "contracts",
            "Name": "ExCancel",
            "Value": "contract ExCancel {\n    data {\n        symbol string\n    }\n    conditions {\n        ContractConditions(\"@1AdminCondition\") \n    }\n    action {\n        var ids array\n        var i ecosystem_hub wallet_apla wallet_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        i = 0\n        ids = DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\"}).Columns(\"id,client,client_value,counterparty_value,flag\")\n        while i < Len(ids) {\n            var param map\n            param = ids[i]\n            var client id int\n            client = Int(param[\"client\"])\n            id = Int(param[\"id\"])\n            var amount money\n            if param[\"flag\"] == \"S\" {\n                amount = Money(param[\"counterparty_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_hub, client, \"ExCancel\", ecosystem_hub)\n            }\n            if param[\"flag\"] == \"B\" {\n                amount = Money(param[\"client_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_apla, client, \"ExCancel\", 1)\n            }\n            DBUpdate(\"@1order_log\", id, {status:\"C\", lastmodified:$time})\n            i = i + 1\n        }  \n       \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "ExMatching",
            "Value": "contract ExMatching {\n    data {\n        id int\n        flag string\n        symbol string\n        client int\n        quantity int\n    }\n    func checkBalance (client int, ecosystem int, value money) {\n        var balance money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":client, \"ecosystem\":ecosystem}).Columns(\"amount\").One(\"amount\"))\n        if value > balance {\n            warning LangRes(\"@1ex_error_balance_check\", \"en\")\n        }\n    }\n    conditions {\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"tradeable\").One(\"tradeable\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_tradestatus\", \"en\")\n        }\n        var check_eco_id ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        check_eco_id = Int(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":ecosystem_hub}).One(\"id\"))\n        if check_eco_id != $client {\n            warning LangRes(\"@1ex_error_account\", \"en\")\n        }\n        if $flag == \"S\" {\n            var face_value money\n            face_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"counterparty_value\").One(\"counterparty_value\"))\n            checkBalance($client, ecosystem_hub, face_value) //check ecosystem_hub\n        }\n        if $flag == \"B\" {\n            var apla_value money\n            apla_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client_value\").One(\"client_value\"))\n            checkBalance($client, 1, apla_value)      \n        }\n        var counterparty check_cross int\n        counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n        check_cross = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).One(\"cross\"))\n        if check_cross = 0 && $client == counterparty {\n            warning LangRes(\"@1ex_error_cross_trades\", \"en\")\n        }\n    }\n    action {\n        DBUpdate(\"@1order_log\", $id, {status:\"F\", counterparty: $client, lastmodified:$time})\n        var ecosystem_hub counterparty wallet_hub wallet_apla int\n        counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        var apla_value face_value price money\n        price = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"price\").One(\"price\"))\n        apla_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client_value\").One(\"client_value\"))\n        face_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"counterparty_value\").One(\"counterparty_value\")) \n        if $flag == \"S\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, $client, counterparty, \"EXMatching\", ecosystem_hub)\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, wallet_apla, $client, \"EXMatching\", 1)\n        }\n        if $flag == \"B\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, $client, counterparty, \"EXMatching\", 1)\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, wallet_hub, $client, \"EXMatching\", ecosystem_hub)          \n        }\n        //DBInsert(\"@1order_log\", {flag: $flag, client: $client, counterparty: counterparty, venue: \"EX\", symbol: $symbol, quantity: $quantity, price: price, client_value: apla_value, counterparty_value: face_value, status: \"F\", lastmodified: $time})\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "ExSymbol",
            "Value": "contract ExSymbol {\n    data {\n        id int \"optional\"\n        status string \"optional\"\n        operation string\n        name string\n        pricetick money\n        range money\n        lotsize money\n        ecosystem int\n        isTradeable int \"optional\"\n        isCross int \"optional\"\n        isOTC int \"optional\"\n    }\n    func exWallet (ecosystem int) int {\n        var check_ex_wallet is_ex_wallet new_ex_wallet int\n        check_ex_wallet = Int(DBFind(\"@1keys\").Where({\"id\":$ecosystem}).Columns(\"id\").One(\"id\"))\n        if check_ex_wallet == $ecosystem {\n            is_ex_wallet = Int(DBFind(\"@1symbol\").Where({\"wallet_hub\":check_ex_wallet}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n            if check_ex_wallet == is_ex_wallet {\n                return is_ex_wallet\n            } else {\n                new_ex_wallet = Int($ecosystem - ($ecosystem * 2))\n                DBInsert(\"@1keys\", {\"id\":new_ex_wallet, \"ecosystem\":$ecosystem})\n                return new_ex_wallet\n            }\n        }\n        if check_ex_wallet == 0 {\n            DBInsert(\"@1keys\", {\"id\":$ecosystem, \"ecosystem\":$ecosystem})\n            return $ecosystem\n        }\n    }\n    conditions {\n        if $operation == \"N\" {\n            if DBFind(\"@1keys\").Where({\"id\":1, \"ecosystem\": 1}).Columns(\"id\").One(\"id\") {\n                warning LangRes(\"@1ex_error_apla_wallet\", \"en\")\n            }\n        }\n        if $operation == \"C\" {\n            var check_symbol string\n            check_symbol = DBFind(\"@1symbol\").Where({\"name\":$name}).Columns(\"name\").One(\"name\")\n            if (check_symbol == $name) {\n                warning LangRes(\"@1ex_error_symbol_name\", \"en\")\n            }\n        }\n        if ($ecosystem == 1) {\n            warning LangRes(\"@1ex_error_mirror_trading\", \"en\")\n        }\n        ContractConditions(\"@1AdminCondition\") \n    }\n    action {\n        if $operation == \"N\" {\n            DBInsert(\"@1keys\", {\"id\":1, \"ecosystem\":1})\n        }\n        if $operation == \"C\" {\n            var m map\n            m[\"name\"] = $name\n            m[\"pricetick\"] = $pricetick\n            m[\"range\"] = $range\n            m[\"lotsize\"] = $lotsize\n            m[\"ecosystem_hub\"] = $ecosystem\n            m[\"tradeable\"] = $isTradeable\n            m[\"cross\"] = $isCross\n            m[\"otc\"] = $isOTC\n            m[\"wallet_hub\"] = exWallet($ecosystem)\n            m[\"wallet_apla\"] = 1\n            DBInsert(\"@1symbol\", m)\n        }\n        if $operation == \"E\" {\n            @1ExCancel(\"symbol\", $name)\n            var m map\n            m[\"pricetick\"] = $pricetick\n            m[\"range\"] = $range\n            m[\"lotsize\"] = $lotsize\n            m[\"ecosystem_hub\"] = $ecosystem\n            DBUpdate(\"@1symbol\", $id, m)\n        }\n        if $operation == \"U\" {\n            var m map\n            if $status == \"TR\" {\n                //@1ExCancel(\"symbol\", $name)\n                m[\"tradeable\"] = $isTradeable\n            } \n            if $status == \"CR\" {\n                m[\"cross\"] = $isCross\n            }\n            if $status == \"OTC\" {\n                m[\"otc\"] = $isOTC\n            }\n            DBUpdate(\"@1symbol\", $id, m)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Type": "contracts",
            "Name": "ExOrder",
            "Value": "contract ExOrder {\n    data {\n        client int\n        flag string\n        symbol string\n        quantity int\n        price money\n    }\n    func calcFaceValue (quantity int) money {\n        var lot_size face_value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 1\n        face_value = Money(0)\n        while i < $quantity+1 {\n            face_value = face_value + lot_size\n            if i == $quantity {\n                return face_value\n            }\n            i = i + 1\n        }  \n    }\n    func calcAplaValue (price money, quantity int) money {\n        var apla_value money\n        var j int\n        j = 1\n        apla_value = Money(0)\n        while j < $quantity+1 {\n            apla_value = apla_value + price\n            if j == $quantity {\n                return apla_value\n            }\n            j = j + 1\n        }  \n    }\n    conditions {\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"tradeable\").One(\"tradeable\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_tradestatus\", \"en\")\n        }\n        var check_eco_id ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        check_eco_id = Int(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":ecosystem_hub}).One(\"id\"))\n        if check_eco_id != $client {\n            warning LangRes(\"@1ex_error_account\", \"en\")\n        }\n        var balance value money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":$ecosystem_id}).Columns(\"amount\").One(\"amount\"))\n        if $flag == \"B\" {\n            var check_price int\n            check_price = Int(DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\",\"flag\":\"S\", \"price\":{\"$lt\":$price}}).One(\"price\"))\n            if check_price > 0 {\n                warning LangRes(\"@1ex_error_market_orders\", \"en\")\n            }\n            var face_value money\n            face_value = calcFaceValue($quantity)\n            if (face_value > balance) { \n                warning LangRes(\"@1ex_error_balance_check\", \"en\")\n            }\n        }\n        if $flag == \"S\" {\n            var check_price int\n            check_price = Int(DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\",\"flag\":\"S\", \"price\":{\"$gt\":$price}}).One(\"price\"))\n            if check_price > 0 {\n                warning LangRes(\"@1ex_error_market_orders\", \"en\")\n            }\n            var apla_value money\n            apla_value = calcAplaValue($price, $quantity)\n            if (apla_value > balance) {  \n                warning LangRes(\"@1ex_error_balance_check\", \"en\")\n            }\n        }\n    }\n    action {\n        var face_value apla_value money\n        face_value = calcFaceValue($quantity)\n        apla_value = calcAplaValue($price, $quantity)\n        var ecosystem_hub wallet_hub wallet_apla int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        var m map\n        m[\"flag\"] = $flag\n        m[\"client\"] = $client\n        m[\"venue\"] = \"EX\"\n        m[\"symbol\"] = $symbol\n        m[\"quantity\"] = $quantity\n        m[\"price\"] = $price\n        m[\"client_value\"] = apla_value\n        m[\"counterparty_value\"] = face_value\n        m[\"status\"] = \"A\"\n        m[\"lastmodified\"] = $time\n        DBInsert(\"@1order_log\", m)\n        if $flag == \"S\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, $client, wallet_hub, \"EXOrder\", ecosystem_hub)\n        }\n        if $flag == \"B\" {\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, $client, wallet_apla, \"EXOrder\", 1)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExCancelOrder",
            "Value": "contract ExCancelOrder {\n    data {\n        id int\n        symbol string\n    }\n    conditions {\n        var client int\n        client = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\")) \n        if (client!=$key_id){\n            warning LangRes(\"@1ex_error_permissions\", \"en\")\n        }\n    }\n    action {\n        var ecosystem_hub client wallet_apla wallet_hub int\n        var flag string\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        client = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))  \n        flag = DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"flag\").One(\"flag\")\n        DBUpdate(\"@1order_log\", $id, {status:\"C\", lastmodified: $time})  \n        if flag == \"S\" {\n            var face_value money\n            face_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"counterparty_value\").One(\"counterparty_value\"))\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", face_value, wallet_hub, client, \"ExCancelOrder\", ecosystem_hub)\n        }\n        if flag == \"B\" {\n            var apla_value money\n            apla_value = Money(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client_value\").One(\"client_value\"))\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", apla_value, wallet_apla, client, \"ExCancelOrder\", 1)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExOTC",
            "Value": "contract ExOTC {\n    data {\n        ticker_id int\n        flag string\n        price money\n        quantity int\n        client int\n        cp string \"optional\"\n        counterparty int \"optional\"\n        ecosystem int\n    }\n    func calcFaceValue (quantity int) money {\n        var lot_size face_value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 1\n        face_value = Money(0)\n        while i < $quantity+1 {\n            face_value = face_value + lot_size\n            if i == $quantity {\n                return face_value\n            }\n            i = i + 1\n        }  \n    }\n    func calcAplaValue (price money, quantity int) money {\n        var apla_value money\n        var j int\n        j = 1\n        apla_value = Money(0)\n        while j < $quantity+1 {\n            apla_value = apla_value + price\n            if j == $quantity {\n                return apla_value\n            }\n            j = j + 1\n        }  \n    }\n    func checkBalance (client int, ecosystem int, value money) {\n        var balance money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":client, \"ecosystem\":ecosystem}).Columns(\"amount\").One(\"amount\"))\n        if value > balance {\n            warning LangRes(\"@1ex_error_balance_check\", \"en\")\n        }\n    }\n    conditions {\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"otc\").One(\"otc\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_otcstatus\", \"en\")\n        }\n        if $flag == \"S\" {\n            var ecosystem_hub int\n            ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n            var face_value money\n            face_value = calcFaceValue($quantity)\n            checkBalance($client, ecosystem_hub, face_value)\n        }\n        if $flag == \"B\" {\n            var apla_value money\n            apla_value = calcAplaValue($price, $quantity)\n            checkBalance($client, 1, apla_value)\n        }\n        if $cp != \"\" {\n            $recipient_id = AddressToId($cp)\n            if $recipient_id == 0 {\n                error Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $cp)\n            }\n        }\n    }\n    action {\n        if $cp == \"\" {\n            $recipient_id = $counterparty\n        }\n        var face_value apla_value money\n        face_value = calcFaceValue($quantity)\n        apla_value = calcAplaValue($price, $quantity)\n        var symbol string\n        symbol = DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"name\").One(\"name\")\n        var lotsize money\n        lotsize = Money(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"lotsize\").One(\"lotsize\"))\n        var ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"id\":$ticker_id}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        var m map\n        m[\"flag\"] = $flag\n        m[\"client\"] = $client\n        m[\"counterparty\"] = $recipient_id\n        m[\"venue\"] = \"EXOTC\"\n        m[\"symbol\"] = symbol\n        m[\"quantity\"] = $quantity\n        m[\"price\"] = $price\n        m[\"client_value\"] = apla_value\n        m[\"counterparty_value\"] = face_value\n        m[\"status\"] = \"A\"\n        m[\"lotsize\"] = lotsize\n        m[\"ecosystem_hub\"] = ecosystem_hub\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $recipient_id, 1, \"fa fa-exchange\", Sprintf(\"%s %s\", $flag,symbol), LangRes(\"@1ex_new_otc\", \"en\"), \"@1ex_otc_new\", m, $ecosystem)\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExMatchingOTC",
            "Value": "contract ExMatchingOTC {\n    data {\n        notific_id int\n        status string\n    }\n    func checkBalance (client int, ecosystem int, value money) {\n        var balance money\n        balance = Money(DBFind(\"@1keys\").Where({\"id\":client, \"ecosystem\":ecosystem}).Columns(\"amount\").One(\"amount\"))\n        if value > balance {\n            warning LangRes(\"@1ex_error_balance_check\", \"en\")\n        }\n    }\n    conditions {\n        if $status == \"F\" {\n            var m order map\n            m = DBFind(\"@1notifications\").Where({\"id\":$notific_id}).Columns(\"page_params->flag,page_params->client,page_params->counterparty,page_params->client_value,page_params->counterparty_value,page_params->price,page_params->quantity,page_params->symbol,page_params->ecosystem_hub\").Row()\n            if m[\"page_params.flag\"] == \"B\" {\n                checkBalance(Int(m[\"page_params.counterparty\"]), Int(m[\"page_params.ecosystem_hub\"]), Money(m[\"page_params.counterparty_value\"]))\n                checkBalance(Int(m[\"page_params.client\"]), 1, Money(m[\"page_params.client_value\"]))\n            }\n            if m[\"page_params.flag\"] == \"S\" {\n                checkBalance(Int(m[\"page_params.client\"]), Int(m[\"page_params.ecosystem_hub\"]), Money(m[\"page_params.counterparty_value\"]))\n                checkBalance(Int(m[\"page_params.counterparty\"]), 1, Money(m[\"page_params.client_value\"]))\n            }\n        }\n    }\n    action {\n        var m order map\n        m = DBFind(\"@1notifications\").Where({\"id\":$notific_id}).Columns(\"page_params->flag,page_params->client,page_params->counterparty,page_params->client_value,page_params->counterparty_value,page_params->price,page_params->quantity,page_params->symbol,page_params->ecosystem_hub\").Row()\n        order[\"flag\"] = Str(m[\"page_params.flag\"])\n        order[\"symbol\"] = Str(m[\"page_params.symbol\"])\n        order[\"client\"] = Int(m[\"page_params.client\"])\n        order[\"counterparty\"] = Int(m[\"page_params.counterparty\"])\n        order[\"client_value\"] = Money(m[\"page_params.client_value\"])\n        order[\"counterparty_value\"] = Money(m[\"page_params.counterparty_value\"])\n        order[\"quantity\"] = Int(m[\"page_params.quantity\"])\n        order[\"price\"] = Money(m[\"page_params.price\"])\n        order[\"venue\"] = \"EXOTC\"\n        order[\"status\"] = $status\n        if $status == \"F\" {\n            if order[\"flag\"] == \"B\" {\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"counterparty_value\"], order[\"counterparty\"], order[\"client\"], \"ExMatchingOTC\", m[\"page_params.ecosystem_hub\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"client_value\"], order[\"client\"], order[\"counterparty\"], \"ExMatchingOTC\", 1)\n            }\n            if order[\"flag\"] == \"S\" {\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"counterparty_value\"], order[\"client\"], order[\"counterparty\"], \"ExMatchingOTC\", m[\"page_params.ecosystem_hub\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", order[\"client_value\"], order[\"counterparty\"], order[\"client\"], \"ExMatchingOTC\", 1)\n            }\n            \n        }\n        DBInsert(\"@1order_log\", order)\n        @1NotificationsClose(\"notific_id\", $notific_id)\n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "contracts",
            "Name": "ExCancelOrders",
            "Value": "contract ExCancelOrders {\n    data {\n        symbol string\n        client int\n        flag string\n    }\n    conditions {\n    }\n    action {\n        var ids array\n        var i ecosystem_hub wallet_apla wallet_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        wallet_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_hub\").One(\"wallet_hub\"))\n        wallet_apla = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"wallet_apla\").One(\"wallet_apla\"))\n        i = 0\n        ids = DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\", \"client\":$client, \"flag\":$flag}).Columns(\"id,client_value,counterparty_value\")\n        while i < Len(ids) {\n            var param map\n            param = ids[i]\n            var client id int\n            client = Int(param[\"client\"])\n            id = Int(param[\"id\"])\n            var amount money\n            if $flag == \"S\" {\n                amount = Money(param[\"counterparty_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_hub, $client, \"ExCancel\", ecosystem_hub)\n            }\n            if $flag == \"B\" {\n                amount = Money(param[\"client_value\"])\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", amount, wallet_apla, $client, \"ExCancel\", 1)\n            }\n            DBUpdate(\"@1order_log\", id, {status:\"C\", lastmodified:$time})\n            i = i + 1\n        }  \n       \n    }\n}",
            "Conditions": "true"
        },
        {
            "Type": "tables",
            "Name": "symbol",
            "Conditions": "ContractAccess(\"@1EditTable\")",
            "Columns": "[{\"name\":\"cross\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"ecosystem_hub\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"lotsize\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"name\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"pricetick\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"range\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"tradeable\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"wallet_apla\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"wallet_hub\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1ExOSymbol\\\")\", \"update\": \"ContractAccess(\\\"@1ExOSymbol\\\")\", \"new_column\": \"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Type": "tables",
            "Name": "order_log",
            "Conditions": "ContractAccess(\"@1EditTable\")",
            "Columns": "[{\"name\":\"client\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"client_value\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"counterparty\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"counterparty_value\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"flag\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"lastmodified\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"price\",\"conditions\":\"true\",\"type\":\"money\"},{\"name\":\"quantity\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"status\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"symbol\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"venue\",\"conditions\":\"true\",\"type\":\"text\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1ExOrder\\\",\\\"@1ExMatchingOTC\\\",\\\"@1ExMatching\\\")\", \"update\": \"ContractAccess(\\\"@1ExCancel\\\",\\\"@1ExCancelOrder\\\",\\\"@1ExCancelOrders\\\",\\\"@1ExMatching\\\")\", \"new_column\": \"ContractConditions(\\\"MainCondition\\\")\"}"
        }
    ]
}