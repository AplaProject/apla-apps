{
    "blocks": [],
    "contracts": [
        {
            "Name": "ExCancel",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExCancel {\n    data {\n        symbol string\n    }\n    conditions {\n        //only founder\n    }\n    action {\n        var ids array\n        var i int\n        i = 0\n        ids = DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\"}).Columns(\"id\")\n        while i < Len(ids) {\n            var id int\n            id = ids[i]\n            var cancel int \n            cancel = Int(id[\"id\"])\n            DBUpdate(\"@1order_log\", cancel, {status:\"C\"})\n            i = i + 1\n        }  \n    }\n}"
        },
        {
            "Name": "ExMatching",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExMatching {\n    data {\n        id int \"optional\"\n        client int \"optional\"\n        counterparty int \"optional\"\n        flag string\n        symbol string\n        venue string\n        quantity int\n        price money\n        status string\n        comment string \"optional\"\n    }\n    //double value with special field\n    func calcCounterpartyValue (quantity int) money {\n        var lot_size counterparty_value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 1\n        counterparty_value = Money(0)\n        while i < $quantity+1 {\n            counterparty_value = counterparty_value + lot_size\n            if i == $quantity {\n                return counterparty_value\n            }\n            i = i + 1\n        }  \n    }\n    func calcClientValue (price money, quantity int) money {\n        var client_value money\n        var j int\n        j = 1\n        client_value = Money(0)\n        while j < $quantity+1 {\n            client_value = client_value + price\n            if j == $quantity {\n                return client_value\n            }\n            j = j + 1\n        }  \n    }\n    conditions {\n        //check for price for range probably via func\n        //check price via pricetick by divide zero to string\n        var tradestatus int\n        tradestatus = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"tradeable\").One(\"tradeable\"))\n        if (tradestatus != 1) {\n           warning LangRes(\"@1ex_error_tradestatus\", \"en\")\n        }\n        var check_eco_id ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        check_eco_id = Int(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":ecosystem_hub}).One(\"id\"))\n        if check_eco_id != $client {\n            warning LangRes(\"@1ex_error_account\", \"en\")\n        }\n        if $status != \"C\" {\n            var balance client_value money\n            balance = Money(DBFind(\"@1keys\").Where({\"id\":$client, \"ecosystem\":$ecosystem_id}).Columns(\"amount\").One(\"amount\"))\n            client_value = calcClientValue($price, $quantity)\n            if (client_value > balance) {\n                warning LangRes(\"@1ex_error_balance_check\", \"en\")\n            }\n        }\n        if $flag == \"B\" && $status == \"A\" {\n            var check_price int\n            check_price = Int(DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\",\"flag\":\"S\", \"price\":{\"$lt\":$price}}).One(\"price\"))\n            if check_price > 0 {\n                warning LangRes(\"@1ex_error_market_orders\", \"en\")\n            }\n        }\n        if $flag == \"S\" && $status == \"A\" {\n            var check_price int\n            check_price = Int(DBFind(\"@1order_log\").Where({\"symbol\":$symbol, \"status\":\"A\",\"flag\":\"S\", \"price\":{\"$gt\":$price}}).One(\"price\"))\n            if check_price > 0 {\n                warning LangRes(\"@1ex_error_market_orders\", \"en\")\n            }\n        }\n        if $status == \"F\" {\n            var counterparty check_cross int\n            counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n            check_cross = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).One(\"cross\"))\n            if check_cross = 0 {\n                if $client == counterparty {\n                    warning LangRes(\"@1ex_error_cross_trades\", \"en\")\n                }\n            }\n        }\n    }\n    action {\n        var counterparty_value client_value money\n        counterparty_value = calcCounterpartyValue($quantity)\n        client_value = calcClientValue($price, $quantity)\n        var ecosystem_hub int\n        ecosystem_hub = Int(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"ecosystem_hub\").One(\"ecosystem_hub\"))\n        if $flag == \"B\" {\n            if $status == \"C\" {\n                DBUpdate(\"@1order_log\", $id, {status:\"C\"})\n            }\n            if $status == \"A\" {\n                DBInsert(\"@1order_log\", {flag: $flag, client: $client, venue: $venue, symbol: $symbol, quantity: $quantity, price: $price, client_value: client_value, counterparty_value: counterparty_value, status: $status})\n            }\n            if $status == \"F\" {\n                DBUpdate(\"@1order_log\", $id, {status:\"F\", counterparty: $client})\n                var counterparty int\n                counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n                DBInsert(\"@1order_log\", {flag: $flag, client: $client, counterparty: counterparty, venue: $venue, symbol: $symbol, quantity: $quantity, price: $price,client_value: client_value, counterparty_value: counterparty_value, status: $status})\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", client_value, $client, counterparty, $comment, $ecosystem_id)\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", counterparty_value, counterparty, $client, $comment, ecosystem_hub)\n            }\n        }\n        if $flag == \"S\" {\n            if $status == \"C\" {\n                DBUpdate(\"@1order_log\", $id, {status:\"C\"})\n            } \n            if $status == \"A\" {\n                DBInsert(\"@1order_log\", {flag: $flag, client: $client, venue: $venue, symbol: $symbol, quantity: $quantity, price: $price, client_value: client_value, counterparty_value: counterparty_value, status: $status})\n            } \n            if $status == \"F\" {\n                DBUpdate(\"@1order_log\", $id, {status:\"F\", counterparty: $client})\n                var counterparty int\n                counterparty = Int(DBFind(\"@1order_log\").Where({\"id\":$id}).Columns(\"client\").One(\"client\"))\n                DBInsert(\"@1order_log\", {flag: $flag, client: $client, counterparty: counterparty, venue: $venue, symbol: $symbol, quantity: $quantity, price: $price, client_value: client_value, counterparty_value: counterparty_value, status: $status})\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", client_value, $client, counterparty, $comment, $ecosystem_id)\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", counterparty_value, counterparty, $client, $comment, ecosystem_hub)\n            }\n        }\n    }\n}"
        },
        {
            "Name": "ExSandbox",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExSandbox {\n    data {\n        symbol string\n        price money\n        quote_price money\n    }\n    conditions {\n        var min max test money\n        min = Money(0)\n        max = 1000000000000000001\n        //====100000000000000000\n        //if $range > max || $range < min {\n            //warning Sprintf (\"%s\",\"no\")\n        //}\n    }\n    action {\n        var check_range range money\n        range = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"range\").One(\"range\"))\n        //test = range/Money(1000000000000000000)\n        //var check_range money\n        //check_range_max = $quote_price + ($quote_price * $range)\n        //check_range_min = ($quote_price * $range)\n        check_range = $price * $quote_price\n        //if check_range > $range {\n            warning Sprintf (\"%s\",range, check_range)\n        //}\n    }\n}\n\ncontract ExSandbox {\n    data {\n        symbol string\n        price money\n    }\n    func check_pricetick (price money) money {\n        var pricetick check money\n        pricetick = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"range\").One(\"range\"))\n        //test = Int($price/pricetick)\n        var i int\n        i = 0\n        var check money\n        while i < 10 {\n            check = $price - pricetick\n            return i\n            i = i + 1\n        }  \n    }\n    conditions {\n\n    }\n    action {\n        var check int\n        check = check_pricetick($price)\n        warning Sprintf (\"%s\", check)\n    }\n}\n\n\ncontract ExSandbox {\n    data {\n        symbol string\n        price money\n    }\n    \n    conditions {\n\n    }\n    action {\n        var pricetick test money\n        pricetick = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"range\").One(\"range\"))\n        test = $price/pricetick\n\n        warning Sprintf (\"%s\", Len(test))\n        //var check int\n        //check = check_pricetick($price)\n        //warning Sprintf (\"%s\", check)\n    }\n}\n\n\ncontract ExSandbox {\n    data {\n        quantity int\n    }\n    //func calcValue (quantity int, price money) money {\n        var lot_size value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 0\n        while i < $quantity+1 {\n            value = value + $lot_size\n            if i > $quantity-1 {\n                warning Sprintf (\"%s\", value)\n            }\n            i = i + 1\n        } \n        //value = Money(($quantity * lot_size) * $price)\n    //}\n    conditions {\n\n    }\n    action {\n        var lot_size value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 0\n        value = Money(0)\n        while i < $quantity+1 {\n            value = value + $lot_size\n            if i > $quantity-1 {\n                warning Sprintf (\"%s\", value)\n            }\n            i = i + 1\n        } \n    }\n}\n\n\ncontract ExSandbox {\n    data {\n        symbol string\n        quantity int\n    }\n    func calcValue (quantity int) money {\n        var lot_size value money\n        lot_size = Money(DBFind(\"@1symbol\").Where({\"name\":$symbol}).Columns(\"lotsize\").One(\"lotsize\"))\n        var i int\n        i = 1\n        value = Money(0)\n        while i < $quantity+1 {\n            value = value + lot_size\n            if i == $quantity {\n                return value\n            }\n            i = i + 1\n        }  \n    }\n    conditions {\n\n    }\n    action {\n        var value money\n        value = calcValue($quantity)\n        warning Sprintf (\"%s\", value)\n        //value = Money(($quantity * lot_size) * $price)\n    }\n}\n"
        },
        {
            "Name": "ExSymbol",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ExSymbol {\n    data {\n        id int \"optional\"\n        status string \"optional\"\n        operation string\n        name string\n        pricetick money\n        range money\n        lotsize money\n        ecosystem int\n        isTradeable int \"optional\"\n        isCross int \"optional\"\n    }\n    conditions {\n        if $operation == \"C\" {\n            var check_symbol string\n            check_symbol = DBFind(\"@1symbol\").Where({\"name\":$name}).Columns(\"name\").One(\"name\")\n            if (check_symbol == $name) {\n                warning LangRes(\"@1ex_error_symbol_name\", \"en\")\n            }\n        }\n        if ($ecosystem == 1) {\n            warning LangRes(\"@1ex_error_mirror_trading\", \"en\")\n        }\n        //only founder\n    }\n    action {\n        if $operation == \"C\" {\n            var m map\n            m[\"name\"] = $name\n            m[\"pricetick\"] = $pricetick\n            m[\"range\"] = $range\n            m[\"lotsize\"] = $lotsize\n            m[\"ecosystem_hub\"] = $ecosystem\n            m[\"tradeable\"] = $isTradeable\n            m[\"cross\"] = $isCross\n            DBInsert(\"@1symbol\", m)\n        }\n        if $operation == \"E\" {\n            @1ExCancel(\"symbol\", $name)\n            var m map\n            m[\"pricetick\"] = $pricetick\n            m[\"range\"] = $range\n            m[\"lotsize\"] = $lotsize\n            m[\"ecosystem_hub\"] = $ecosystem\n            DBUpdate(\"@1symbol\", $id, m)\n        }\n        if $operation == \"U\" {\n            var m map\n            if $status == \"TR\" {\n                @1ExCancel(\"symbol\", $name)\n                m[\"tradeable\"] = $isTradeable\n            } \n            if $status == \"CR\" {\n                m[\"cross\"] = $isCross\n            }\n            DBUpdate(\"@1symbol\", $id, m)\n        }\n    }\n}"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [],
    "pages": [],
    "parameters": [],
    "tables": []
}