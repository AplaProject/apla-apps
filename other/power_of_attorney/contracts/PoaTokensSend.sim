contract PoaTokensSend {
    data {
        Amount money
        Sender string
        Recipient string
        Comment string "optional"
    }

    func getPermission() {
        var array_permissions array result i int prevContract string
        array_permissions = ["@1PoaTokensSend"]

        prevContract = $stack[0]
        if Len($stack) > 2 {
            prevContract = $stack[Len($stack) - 2]
        }
        while i < Len(array_permissions) {
            var contract_name string
            contract_name = array_permissions[i]
            if contract_name==prevContract {
                result = 1
            }
            i = i + 1
        }

        if result == 0 {
            warning LangRes("@1tokens_transfer_cannot_be_made", "en")
        }
    }

    func checkKeys() {
        $sender_id = AddressToId($Sender)
        $recipient_id = AddressToId($Recipient)

        //check the sender key
        if $sender_id == 0 {
            warning Sprintf(LangRes("@1sender_x_invalid", "en"), $Sender)
        }
        //check the recipient key
        if $recipient_id == 0 {
            warning Sprintf(LangRes("@1recipient_x_invalid", "en"), $Recipient)
        }
    }

    func checkPoa() {
        var poa_map map
        poa_map = DBFind("@1poa").Where({"contract":"@1PoaTokensSend", "poa_sender->member_id": $sender_id, "poa_recipient->member_id":$key_id, "ecosystem":$ecosystem_id, "deleted": 0}).Columns("id,date_expiration,params->amount_max,params->amount_max_day,params->amount_max_month,params->amount_day,params->amount_month,params->date_day,params->date_month").Row()
        if !poa_map {
            warning LangRes("@1poa_not_found", "en")
        }

        if UnixDateTime(BlockTime()) > Int(poa_map["date_expiration"]) {
            warning LangRes("@1poa_expired", "en")
        }

        $poa_id = poa_map["id"]
        $amount_max = poa_map["params.amount_max"]
        $amount_max_day = poa_map["params.amount_max_day"]
        $amount_max_month = poa_map["params.amount_max_month"]
        $amount_day = poa_map["params.amount_day"]
        $amount_month = poa_map["params.amount_month"]
        $date_day = poa_map["params.date_day"]       // 2018-10-19 00:00:00
        $date_month = poa_map["params.date_month"]   // 2018-10-01 00:00:00

        $cur_date_day = UnixDateTime(Substr(BlockTime(), 0, 10) + " 00:00:00")
        $cur_date_month = UnixDateTime(Substr(BlockTime(), 0, 8) + "01 00:00:00")
    }

    func checkLimit() {
        if Int($cur_date_day) > Int($date_day) {
            $date_day = $cur_date_day
            $amount_day = 0
        }
        if Int($cur_date_month) > Int($date_month) {
            $date_month = $cur_date_month
            $amount_month = 0
        }

        if Money($amount_max) < Money($Amount) {
            warning LangRes("poa_exceeded_single_limit", "en")
        }
        if Money($amount_max_day) < Money($amount_day) + Money($Amount) {
            warning LangRes("poa_exceeded_daily_limit", "en")
        }
        if Money($amount_max_month) < Money($amount_month) + Money($Amount) {
            warning LangRes("poa_exceeded_monthly_limit", "en")
        }
    }

    func updateParams() {
        $amount_day = Money($amount_day) + Money($Amount)
        $amount_month = Money($amount_month) + Money($Amount)

        var m map
        m["amount_max"] = Str($amount_max)
        m["amount_max_day"] = Str($amount_max_day)
        m["amount_max_month"] = Str($amount_max_month)
        m["amount_day"] = Str($amount_day)
        m["amount_month"] = Str($amount_month)
        m["date_day"] = Str($date_day)
        m["date_month"] = Str($date_month)

        @1PoaUpdateParams("PoaId,ParamsStr", Int($poa_id), JSONEncode(m))  
    }

    conditions {
        getPermission()
        checkKeys()
        checkPoa()
        checkLimit()
    }

    action {
        @1TokensTransfer("Amount,SenderId,RecipientId,Comment", $Amount, $sender_id, $recipient_id, $Comment)
        updateParams()
    }
}