{
    "name": "Tokens sale",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "ts_contract_investors",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(list-group-item mt-lg mb-lg ml-lg mr-lg){\r\n    Div(Class: h3 text-bold m0 text-center, Body: To Apla Users who have passed)\r\n    Div(Class: h3 text-bold m0 text-center, Body: the KYC screening at SnapSwap International S.A.)\r\n\r\n    Div(Class: h4 mt-xl, Body: Em(Date: 1st of November 2018))\r\n    Div(Class: h4, Body: Em(Re: Invitation to submit purchase orders to buy APLA Tokens))\r\n\r\n    Div(Class: h4 mt-xl, Body: Dear Apla User,)\r\n    Div(Class: h4, Body: We are very delighted that you have chosen the Apla blockchain platform to build decentralised applications, create ecosystems and accommodate your other business needs.)\r\n    Div(Class: h4, Body: According to Article 8.1 of the Apla General Terms and Conditions (Span(Class: text-primary, Body: www.apla.io)), EGAAS S.A. will be charging a license fee for each transaction signed by Apla users on the platform. The license fee is payable in the internal virtual currency of the Apla platform ecosystem named APLA tokens. Hence, in order to use the platform, you will need to have APLA tokens on your APLA Wallet prior to signing each transaction.)\r\n    Div(Class: h4){\r\n        Span(EGAAS S.A. will be conducting an initial sale of APLA Tokens from November 2018 until July 2019. The commercial terms of the sale are summarised below:)\r\n        Button(Class: btn-xs btn-link, Page: ts_commercial_terms){\r\n            Span(Class: h4, Body: The commercial terms)\r\n        }.Popup(70, The commercial terms)\r\n    }\r\n\r\n    Div(Class: h4, Body: Please submit your purchase order to buy APLA tokens after you have reviewed and agreed with the legal terms of sale.)\r\n    Div(Class: h4, Body: After we have received your purchase order, we will send you an invoice for making the payment of the purchase price.)\r\n    Div(Class: h4, Body: Please reach out to us via the email Span(Class: text-primary, Body: luxembourg@apla.io) if you have any questions or require any clarification of the above terms. We’ll also give you an access to the online data room with all information and legal documents concerning the Apla project, if you require so.)\r\n\r\n    Div(Class: h4 mt-xl, Body: Kind regards,)\r\n    Div(row){\r\n        Div(col-sm-6){\r\n            Div(Class: h4 m0, Body: Oleg Strelenko)\r\n        }\r\n        Div(col-sm-6){\r\n            Div(Class: h4 m0, Body: Vitaly Bondar)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-6){\r\n            Div(Class: h4 m0, Body: Director)\r\n        }\r\n        Div(col-sm-6){\r\n            Div(Class: h4 m0, Body: Director)\r\n        }\r\n    }\r\n\r\n    Div(Class: h4 mt-xl, Body: Annexes:)\r\n    Div(Class: h4 m0, Body: Annex 1. Purchase Order)\r\n    Div(Class: h4 m0, Body: Annex 2. Standard Terms & Conditions of Sale)\r\n\r\n    Div(row mt-xl pull-right){\r\n        Div(col-sm-12){\r\n            Button(Class: btn btn-primary h4, Page: ts_buyer_contract, Body: Standard terms and conditions of sale)\r\n        }\r\n    }\r\n}.Style(\r\n    padding-left: 60px!important; \r\n    padding-right: 60px!important;\r\n)",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# == 1){\r\n    MenuItem(Title:$@1ts_settings$, Page:ts_settings, Icon:\"icon-wrench\")\r\n}",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# == 1){\r\n    SetVar(is_allowed, 0).(k_id, 0).(unreaded_wallet_id,0).(exist_wallet_id,0)\r\n    DBFind(@1keys).Where({id:#key_id#}).Vars(k)\r\n    DBFind(@1ts_wallets).Where({key_id_buyer:#key_id#}).Vars(exist_wallet)\r\n    DBFind(@1ts_wallets).Where({key_id_buyer:#key_id#, rejected_at:0, signed_at:0}).Vars(unreaded_wallet)\r\n    If(#k_id#!=0){\r\n        If(#exist_wallet_id#>0){\r\n            If(#unreaded_wallet_id#==0){\r\n                SetVar(is_allowed, 1)\r\n            }\r\n        }.Else{\r\n            SetVar(is_allowed, 1)\r\n        }\r\n    }\r\n    If(#is_allowed#==1){\r\n        SetVar(snapswap_role_id,0).(admin_role_id,0).(manager_role_id,0).(seller_role_id,0)\r\n        SetVar(snapswap_role_id, EcosysParam(Name:role_snapswap))\r\n        SetVar(admin_role_id, EcosysParam(Name:role_sale_admin))\r\n        SetVar(manager_role_id, EcosysParam(Name:role_sale_manager))\r\n        SetVar(seller_role_id, EcosysParam(Name:role_sale_seller))\r\n\r\n        Span(\"Set here the menu of the first ecosystem\")\r\n        If(And(#role_id#>0,Or(#role_id#==#admin_role_id#,#role_id#==#manager_role_id#,#role_id#==#seller_role_id#,#role_id#==#snapswap_role_id#))){\r\n            MenuItem(Title:$@1ts_free_wallets$, Page:@1ts_free_wallets, Icon:\"icon-credit-card\")\r\n        }\r\n        If(And(#role_id#>0,Or(#role_id#==#admin_role_id#,#role_id#==#manager_role_id#,#role_id#==#seller_role_id#,#role_id#==#snapswap_role_id#))){\r\n            MenuItem(Title:$@1ts_wallets$, Page:@1ts_wallets, Icon:\"icon-credit-card\")\r\n        }\r\n        If(And(#role_id#>0,Or(#role_id#==#admin_role_id#,#role_id#==#manager_role_id#,#role_id#==#seller_role_id#,#role_id#==#snapswap_role_id#))){\r\n            MenuItem(Title:$@1ts_sales$, Page:@1ts_sales, Icon:\"icon-credit-card\")\r\n        }\r\n    }\r\n}",
            "Type": "menu"
        },
        {
            "Name": "ts_sales",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"buyer_transferred_at\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\")\",\r\n        \"name\": \"seller_reject_comment\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"varchar\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"currency_type\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\")\",\r\n        \"name\": \"manager_rejected_at\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferSeller\\\")\",\r\n        \"name\": \"seller_transferred_at\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"amount_apl\",\r\n        \"type\": \"money\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\",\\\"@1TsTransferSeller\\\")\",\r\n        \"name\": \"key_id_seller\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\")\",\r\n        \"name\": \"seller_rejected_at\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"key_id_sale_apl_admin\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\")\",\r\n        \"name\": \"manager_reject_comment\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\",\\\"@1TsTransferManager\\\")\",\r\n        \"name\": \"key_id_sale_apl_manager\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"created_at\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"key_id_buyer\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1TsTransferReject\\\",\\\"@1TsTransferManager\\\",\\\"@1TsTransferAdmin\\\",\\\"@1TsTransferSeller\\\")\",\r\n        \"name\": \"status\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1TsTransferAdmin\\\")\", \"update\": \"ContractAccess(\\\"@1TsTransferReject\\\",\\\"@1TsTransferSeller\\\",\\\"@1TsTransferManager\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "ts_wallets",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsBuyerAction\\\",\\\"@1TsConsensusAction\\\")\",\r\n        \"name\":\"rejected_at\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsKeyApprove\\\")\",\r\n        \"name\":\"key_id_buyer\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsConsensusAction\\\")\",\r\n        \"name\":\"key_id_signer\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"btc\",\r\n        \"type\":\"money\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"eth\",\r\n        \"type\":\"money\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsBuyerAction\\\")\",\r\n        \"name\":\"signed_at\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsKeyApprove\\\")\",\r\n        \"name\":\"created_at\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"wallet_eth\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"wallet_btc\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsFreeWalletDelete\\\")\",\r\n        \"name\":\"deleted\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsKeyApprove\\\")\",\r\n        \"name\": \"pub_buyer\",\r\n        \"type\": \"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TsKeyApprove\\\")\",\r\n        \"name\": \"pub_short_buyer\",\r\n        \"type\": \"text\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1TsFreeWalletAdd\\\")\", \"update\": \"ContractAccess(\\\"@1TsBuyerAction\\\",\\\"@1TsConsensusAction\\\",\\\"@1TsKeyApprove\\\",\\\"@1TsFreeWalletDelete\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "ts_currency_type",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1btc,@1eth,@1euro",
            "Type": "app_params"
        },
        {
            "Name": "ts_statuses",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1waiting_manager_approved,@1waiting_seller_transfer,@1finished,@1rejected",
            "Type": "app_params"
        },
        {
            "Name": "ts_statuses_classes",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "text-muted,text-info,text-success,text-warning",
            "Type": "app_params"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# == 1){\r\n    DBFind(@1ts_wallets).Where({key_id_buyer:#key_id#, rejected_at:0, signed_at:0}).Vars(unconfirmed_wallet)\r\n    If(#unconfirmed_wallet_id#>0){\r\n        Include(@1ts_contract_investors)\r\n    }.Else{\r\n        Include(@1profile)\r\n    }\r\n}\r\nIf(#ecosystem_id# > 1){\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#}).Count(roles_count)\r\n    If(#roles_count# > 0){\r\n        Include(@1profile)\r\n    }.Else{\r\n        Include(@1welcome)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_buyer_congratulation",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1ts_wallets).Where({\"key_id_buyer\":#key_id#}).Vars(w)\r\nIf(#w_id# > 0){\r\n    Div(list-group-item mt-lg mb-lg ml-lg mr-lg){\r\n        Div(Class: h3 text-bold text-center pb-xl, Body: Purchase Order)\r\n        Div(Class: h4 pb-lg, Body: In response to your invitation to submit a purchase order as of 1s tof November 2018, we would like to submit the below purchase order to buy APLA Tokens: )\r\n            Div(){\r\n                Div(row){\r\n                    Div(col-md-12){\r\n                        Div(table tablez){\r\n                            Div(table__row){\r\n                                Div(table__cell table__cell_10){APLA Wallet Number}\r\n                                Div(table__cell table__cell_10){Address(#key_id#)}\r\n                            }\r\n                            Div(table__row){\r\n                                Div(table__cell table__cell_10){Number of APLA Tokens to buy}\r\n                                Div(table__cell table__cell_10){}\r\n                            }\r\n                            Div(table__row){\r\n                                Div(table__cell table__cell_10 tborder){Payment means}\r\n                                Div(table__cell table__cell_10 tborder){\r\n                                    Div(Class: text-normal, Body: BTC: #w_wallet_btc#)\r\n                                    Div(Class: text-normal, Body: ETH: #w_wallet_eth#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }.Style(\r\n                .row-flex {\r\n                    display: flex;\r\n                    flex-flow: row wrap;\r\n                }\r\n                .table {\r\n                    display: table;\r\n                    border: solid 1px #000000;\r\n                }\r\n                .tablez {\r\n                    border: solid 1px #000000;\r\n                }\r\n                .table .table__head {\r\n                    display: table-header-group;\r\n                    background: blue;\r\n                    color: #fff;\r\n                }\r\n                .table .table__head .table__cell {\r\n                    font-size: 15px;\r\n                    color: #000000;\r\n                    background: #B7B7B7;\r\n                }\r\n                .table > div:not(.table__body) {\r\n                    display: table-row-group;\r\n                }\r\n                .table .table__body:last-child .table__row:last-child .table__cell {\r\n                    border-bottom: none;\r\n                }\r\n                .table .table__row {\r\n                    display: table-row;\r\n                    flex-direction: row;\r\n                    flex-wrap: no-wrap;\r\n                }\r\n                .table .table__row:nth-child(2n) {\r\n                    display: table-row;\r\n                    flex-direction: row;\r\n                    flex-wrap: no-wrap;\r\n                    border-left: solid 1px red;\r\n                }\r\n                .table .table__row .table__cell {\r\n                    border-bottom: solid 1px #000000;\r\n                }\r\n                .table .table__cell {\r\n                    display: table-cell;\r\n                    padding: 8px 10px;\r\n                    font-size: 14px;\r\n                    color: #000000;\r\n                    border-right: solid 1px #000000;\r\n                }\r\n                .tborder {\r\n                    border-bottom: 0!important;\r\n                }\r\n                .table .table__cell:last-child {\r\n                    border-right: none;\r\n                }\r\n                .table .table__cell.table__cell_collapse {\r\n                    width: 1px;\r\n                }\r\n                .table .table__cell.table__cell_10 {\r\n                    width: 10%;\r\n                }\r\n                .table .table__cell.table__cell_20 {\r\n                    width: 20%;\r\n                }\r\n                .table .table__cell.table__cell_25 {\r\n                    width: 25%;\r\n                }\r\n                .table .table__cell.table__cell_30 {\r\n                    width: 30%;\r\n                }\r\n                .table .table__cell.table__cell_40 {\r\n                    width: 40%;\r\n                }\r\n                .table .table__cell.table__cell_50 {\r\n                    width: 50%;\r\n                }\r\n                .table .table__cell.table__cell_60 {\r\n                    width: 60%;\r\n                }\r\n                .table .table__cell.table__cell_70 {\r\n                    width: 70%;\r\n                }\r\n                .table .table__cell.table__cell_80 {\r\n                    width: 80%;\r\n                }\r\n                .table .table__cell.table__cell_18 {\r\n                    width: 18%;\r\n                }\r\n                .table .table__cell.table__cell_90 {\r\n                    width: 90%;\r\n                }\r\n                .table .table__cell.table__cell_stretch {\r\n                    width: 100%;\r\n                }\r\n            )\r\n        Div(Class: h4, Body: We hereby acknowledge the receipt of and agree with the Standard Terms & Conditions of Sale. )\r\n        Div(){\r\n            DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"closed\").Vars(note)\r\n            If(#note_closed# == 0){\r\n                Button(Body: $@1mark_read$, Class: btn btn-primary pull-right, Page: default_page, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\")\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(list-group-item text-center h4 ml mr mt-lg){\r\n        $@1wallet$ $@1not_found$\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_buyer_contract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1ts_wallets).Where({key_id_buyer:#key_id#, key_id_signer:0, rejected_at:0}).Vars(unconfirmed_wallet)\r\nIf(#unconfirmed_wallet_id#>0){\r\n    Div(list-group-item mt-lg mb-lg ml-lg mr-lg){\r\n        Div(Class: h3 text-bold m0 text-center, Body: APLA Tokens)\r\n        Div(Class: h3 text-bold m0 text-center, Body: Standard Terms and Conditions of Sale)\r\n\r\n        Div(Class: h4 mt-xl text-bold, Body: 1. Introduction)\r\n        Div(Class: h4, Body: The present standard terms and conditions of sale (T&Cs) govern the relationship between the Seller and Buyer in connection with the sale and purchase of the APLA Tokens as per the EGAAS S.A. letter to the Apla Users as of 1st of November 2018.).Style(padding-right: 60px!important;)\r\n        Div(Class: h4 mt-xl text-bold, Body: Glossary of Terms)\r\n\r\n        Div(){\r\n            Div(Class: h4, Body: Strong(Body: 1.1) Unless the context requires otherwise, the following terms of this Article 1 shall be used in this Agreement:)\r\n            Div(Class: h4, Body: Strong(Body: APLA Wallet) means a software application for storing, holding and transferring APLA Tokens;)\r\n            Div(Class: h4, Body: Strong(Body: APLA Tokens) means a digital representation of value generated by the source code of the Apla platform ecosystem that is used by Apla users to pay a license fee for the execution of smart contracts, creation of tables, and adding new columns and rows to them in all Apla ecosystems;)\r\n            Div(Class: h4, Body: Strong(Body: Apla Contractual Documentation) means the Terms & Conditions and Apla policies, as amended from time to time, that can be downloaded from Span(Class: text-primary, Body: www.apla.io) website; )\r\n            Div(Class: h4, Body: Strong(Body: Apla platform) means a software program for executing smart laws and smart contracts based on the distributed ledger technology, the source code of which is stored at GitHub.com/AplaProject. The program operates on the basis of peer to peer (P2P) architecture that is a system of peer client-side programs installed on users' computers and participating in data exchange via peer to peer (P2P) computer network; )\r\n            Div(Class: h4, Body: Strong(Body: Apla Software) means the Apla platform software the source code of which is published at GitHub.com/AplaProject; )\r\n            Div(Class: h4, Body: Strong(Body: Buyer) means a legal entity or individual that has signed the Commercial Terms with the Seller; )\r\n            Div(Class: h4, Body: Strong(Body: Commercial Terms) means the price, payment, delivery and other terms of sale of APLA Tokens indicated in the Seller’s letter to the potential Buyers as of 1st of November 2018;)\r\n            Div(Class: h4, Body: Strong(Body: Laws) means the civil law in general, any constitution, legislation, decree, order, instruction, rule, regulation, ordinance, code, directive, by-law, judgment, international treaty or any other legislative or quasi-legislative measure related, in each case, to the respective jurisdiction that may be applicable to any transaction closed or to the circumstances existing as of the respective date and, in each case (if any liability is stipulated by or may arise in accordance with them) including any former provision (that may be statutorily amended or re-enacted from time to time) that was directly or indirectly replaced by such provision;)\r\n            Div(Class: h4, Body: Strong(Body: Luxembourg) means the Grand Duchy of Luxembourg;)\r\n            Div(Class: h4, Body: Strong(Body: Parties) means both the Seller and Buyer;)\r\n            Div(Class: h4, Body: Strong(Body: Party) means either the Seller or Buyer as the context suggests; )\r\n            Div(Class: h4, Body: Strong(Body: Public Authority) means any supranational, national, municipal, local or foreign public authority or organisation, or any department, commission, administration, bureau, agency, court or instrumentality, subdivision or any other authority thereof, or any quasi-public or private authority having any regulatory, tax, financial regulation and any other public or quasi-public authority)\r\n            Div(Class: h4, Body: Strong(Body: Purchase Order)  means an order to purchase APLA Tokens submitted by the Buyer to the Seller in accordance with the Commercial Terms; )\r\n            Div(Class: h4, Body: Strong(Body: Seller) means Strong(Body: EGAAS S.A.,) a legal entity incorporated under the laws of the Grand Duchy of Luxembourg, registered at RCS Luxembourg under the number B216 352 and having its registered office at L-1273 Luxembourg, 20, rue de Bitbourg; )\r\n            Div(Class: h4, Body: Strong(Body: SnapSwap) means SnapSwap International S.A., a legal entity incorporated under the laws of the Grand Duchy of Luxembourg, having its registered office at 59, Boulevard Royal L-2449 Luxembourg and authorised as an electronic money institution by the Ministry of Finance. )\r\n            Div(Class: h4, Body: Strong(Body: 1.2 In the context of this Agreement:) )\r\n            Div(){\r\n                Div(Class: h4, Body: Strong(Body: 1.2.1) A reference to this Agreement shall be interpreted as a reference to this document, including all amendments, supplements, appendices, novations or transfer of rights made from time to time;)\r\n                Div(Class: h4, Body: Strong(Body: 1.2.2) A reference to the article, clause, sub-clause or appendix, unless such reference is followed by the name of a particular document, shall be deemed the reference to an article, clause, section or appendix to this Agreement;)\r\n                Div(Class: h4, Body: Strong(Body: 1.2.3) A reference to the terms defined in this Agreement includes the singular and plural of those terms and denotes the masculine, feminine or neuter gender, as the context requires;)\r\n                Div(Class: h4, Body: Strong(Body: 1.2.4) It is understood that the words “including” and “includes” are followed by the expression “without limitation”, and such expressions shall be without prejudice to the generality of the foregoing;)\r\n                Div(Class: h4, Body: Strong(Body: 1.2.5) Headings are for the convenience only and shall not affect the interpretation of this Agreement; and)\r\n                Div(Class: h4, Body: Strong(Body: 1.2.6) All terms that are written in capital letters and not defined in clause 1.1 shall have the meaning ascribed to those terms in the text of this Agreement or appendices hereto.)\r\n            }.Style(padding-left: 50px!important;)\r\n\r\n            Div(Class: h4, Body: Strong(Body: 2 Subject matter) )\r\n            Div(Class: h4, Body: Strong(Body: 2.1) Subject to the terms and conditions set forth herein, Seller shall sell and Buyer shall buy the number of APLA Tokens indicated in Purchase Order of Buyer to the extent such an order has been accepted by Seller. Seller shall be deemed accepted Purchase Order of Buyer by sending an invoice for making the payment of the purchase price to Buyer in response to the submitted Purchase Order.)\r\n            Div(Class: h4, Body: Strong(Body: 2.2) No U.S. Buyers. APLA Tokens during the initial sale are not being offered to U.S. persons. U.S. persons are strictly prohibited and restricted from purchasing APLA Tokens and Seller is not soliciting purchases by U.S. persons in any way. )\r\n            Div(Class: h4, Body: Strong(Body: 2.3) APLA Tokens are not intended to be offered for investment purposes. The pure purpose of the legitimate use of APLA Tokens is to pay for license fees in connection with the execution of transactions on Apla Platform. )\r\n            Div(Class: h4, Body: Strong(Body: 2.4) Buyer acknowledges and agrees that Buyer is not purchasing APLA Tokens for purposes of investment, speculation, as some type of arbitrage strategy, for immediate resale or other financial purposes. )\r\n\r\n            Div(Class: h4, Body: Strong(Body: 3 Transfer of APLA Tokens) )\r\n            Div(Class: h4, Body: Strong(Body: 3.1) Buyer shall open APLA Wallet in accordance with the rules set forth in the Apla Contractual Documentation and following the KYC (know-your-customer procedure) with SnapSwap. Buyer shall inform Seller about the public key of the opened APLA Wallet in Purchase Order.)\r\n            Div(Class: h4, Body: Strong(Body: 3.2) Seller shall transfer the number of APLA Tokens, indicated in Purchase Order accepted by Seller, to the APLA Wallet of Buyer within 2 business days following the receipt of the purchase price from the Buyer. )\r\n    \r\n\r\n            Div(Class: h4, Body: Strong(Body: 4 Representations and warranties of the Parties))\r\n                Div(Class: h4, Body: Strong(Body: 4.1) Seller gives no guarantee and/or warrantee as regards the market value of APLA Tokens throughout the term of this T&C and thereafter. )\r\n                Div(Class: h4, Body: Strong(Body: 4.2) Buyer is made aware of the potential high volatility of APLA Tokens on the market and other risks pretraining to crypto-currencies as further defined in the warning of the CSSF published on Span(Class: text-primary, Body: http://www.cssf.lu/fileadmin/files/Protection_consommateurs/Avertissements/W_virtual_currencies_140318_eng.pdf))\r\n                Div(Class: h4, Body: Strong(Body: 4.3) Hereby Buyer gives to Seller the following true, correct and irrevocable representations and warranties that shall be true at the date of submitting Purchase Order to Seller: )\r\n                Div(){\r\n                    Div(){\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.3.1) Span(Class: underline, Body: Legal Status of Buyer.) Buyer is not undergoing any liquidation and/or bankruptcy procedure.)\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.3.2) Span(Class: underline, Body: Powers and Authorities of Buyer.)  Buyer has right, power and authority to enter into, execute and deliver these T&Cs, any other documents contemplated hereby and the transaction contemplated hereby and to perform its obligations hereunder and all corporate actions necessary for this has been undertaken by Buyer.  The T&Cs are valid and legally binding for Buyer and can be lawfully enforced in accordance with their terms. The signatory of Buyer that has executed the T&Cs was duly granted with the relevant powers.)\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.3.3) Span(Class: underline, Body: No Conflict.) The execution of the T&Cs and the fulfilment of obligations by Buyer will not constitute any conflict with (i) the provisions of Buyer’s constituent documents and any other documents regulating Buyer’s status and activities, (ii) any laws, rules or regulations, arbitral awards, court rulings, official orders, resolutions, instructions etc. applicable to Buyer. Buyer obtained all applicable governmental, statutory, regulatory or other consents, licences, authorisations, waivers and exemptions required to enter into these T&Cs and any other documents contemplated hereby and to perform its obligations hereunder.)\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.3.4) Span(Class: underline, Body: Finance.) Buyer has and will have its own cash and/or fully available credit lines to fulfil its obligations hereunder.)\r\n                    }.Style(padding-left: 50px!important;)\r\n                    Div(Class: h4, Body: Strong(Body: 4.4) Hereby Seller gives to Buyer the following true, correct and irrevocable warranties and representations that shall be valid at the date of accepting Purchase Order:)\r\n                    Div(){\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.4.1) Span(Class: underline, Body: Legal Status of Seller.) Seller is a corporation duly established and acting on a legal basis in accordance with the legislation of Luxembourg. Seller is not undergoing any liquidation and/or bankruptcy procedure. )\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.4.2) Span(Class: underline, Body: Powers and Authorities of Seller.) Seller has right, power and authority to enter into, execute and deliver these T&Cs, any other documents contemplated hereby and the transaction contemplated hereby and to perform its obligations hereunderand all corporate actions necessary for this has been undertaken by Seller. The T&Cs are valid and legally binding for Seller and can be lawfully enforced in accordance with its terms. The signatory of Seller that has executed the T&Cs was duly granted with the relevant powers.)\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.4.3) Span(Class: underline, Body: No Conflict.) The execution of the T& and the fulfilment of obligations by Seller will not constitute any conflict with (i) the provisions of Seller’s constituent documents and any other documents regulating the Seller’s status and activities, (ii) any laws, rules or regulations, arbitral awards, court rulings, official orders, resolutions, instructions etc. applicable to Seller. Seller obtained all applicable governmental, statutory, regulatory or other consents, licences, authorisations, waivers and exemptions required to enter into these T&Cs and any other documents contemplated hereby and to perform its obligations hereunder.)\r\n                        Div(Class: h4, Body: Strong(Class: wrap, Body: 4.4.4) Span(Class: underline, Body: Title to APLA Tokens.) As of the date of accepting Purchase Order, Seller will have legal and unrestricted title to the APLA Tokens being the subject matter of these T&Cs, free from any pledge, lien, any other encumbrances and defects. )\r\n                    }.Style(padding-left: 50px!important;)\r\n                }.Style(\r\n                    .underline {\r\n                        text-decoration: underline;\r\n                    }\r\n                    .wrap {\r\n                        padding-right: 8px!important;\r\n                    }\r\n                )\r\n                Div(Class: h4, Body: Strong(Body: 4.5) Unless otherwise specifically provided in these T&Cs, in the event that at any time it appears that any of the warranties and representations was not true and correct in any material respect when made, then the Party to whom these warranties and representations were given shall give prompt written notice of any such breach to the other Party and give this default Party the opportunity to eliminate (at the defaulting Party’s own cost and expense) any such breach and the Party to whom these warranties and representations were given shall be required (at the defaulting Party’s own cost and expense) to provide such assistance to the default Party with remedying any such breach as the defaulting party may reasonably request.)\r\n                Div(Class: h4, Body: Strong(Body: 5 Liability))\r\n                Div(Class: h4, Body: Strong(Body: 5.1 ) The Seller’s liability under these T&Cs may not exceed the amount of the purchase price received by Seller from Buyer for APLA Tokens.)\r\n                Div(Class: h4, Body: Strong(Body: 5.2) Seller shall in no case be liable for indirect or consequential damages incurred by Buyer. )\r\n                Div(Class: h4, Body: Strong(Body: 5.3) None of the Parties  shall be liable for a failure to properly perform their duties under these T&Cs if this non-performance or poor performance is resulted from force majeure events. Force majeure event means any event and/or circumstance, which is beyond the reasonable control of, and is not attributable to, the affected party resulting in the affected party being prevented from performing or being delayed in the performance of any of its obligations under the T&Cs. Force majeure event may include, but not limited to, an act of a Public Authority or court of any state, interruption or unavailability of power supplies and telecommunication networks in addition to the acts of God. )\r\n                Div(Class: h4, Body: Strong(Body: 6 Entry into Force))\r\n                Div(Class: h4, Body: Strong(Body: 6.1) These T&Cs shall come into force on the date when Seller has accepted Purchase Order of Buyer.  )\r\n                Div(Class: h4, Body: Strong(Body: 7 Termination of agreement))\r\n                Div(Class: h4, Body: The agreement between the Parties shall be deemed terminated on the following grounds: )\r\n                Div(Class: h4, Body: Strong(Body: 7.1) Buyer has not transferred the purchase price to Seller for APLA Tokens indicated in Purchase Order accepted by Seller within 5 business days from the acceptance date. )\r\n                Div(Class: h4, Body: Strong(Body: 8 Severability))\r\n                Div(Class: h4, Body: If any part of this agreement is recognized invalid, unlawful, or unenforceable, the other part will continue to be valid and enforceable to the fullest extent permitted by applicable Law. The invalid, unlawful, or unenforceable part shall be construed and further negotiated by the parties concerned in a manner compliant with applicable Law and consistent with original intentions of the Parties. )\r\n                Div(Class: h4, Body: Strong(Body: 9 Notices))\r\n                Div(Class: h4, Body: All notices under this Agreement shall be sent by registered mail or private courier to the following addresses:)\r\n                Div(Class: h4, Body: If to Seller: L-1273 Luxembourg, 20, rue de Bitbourg)\r\n                Div(Class: h4, Body: If to the Buyer: address of APLA Wallet of Buyer)\r\n                Div(Class: h4, Body: or to such other addresses as shall be indicated by the Parties hereto. All notices shall be deemed to have been received [7 (seven) calendar] days after posting by registered mail or upon confirmation of receipt if sent by private courier.)\r\n                Div(Class: h4, Body: Strong(Body: 10 Dispute Resolution))\r\n                Div(Class: h4, Body: All disputes arising out of or in connection with these T&Cs shall be referred to the Arbitration Centre at the Chamber of Commerce and Industry of Luxembourg for final resolution under the Rules of Arbitration established by such Centre by one arbitrator appointed in accordance with those Rules.)\r\n                Div(Class: h4, Body: The law applicable to the relations of the Parties under these T&Cs shall be the Law of Luxembourg.)\r\n        }.Style(padding-left: 50px!important;)\r\n\r\n        Div(mt-xl mb-lg){\r\n            Button(Body: $@1reject$, Class: btn btn-danger, Page: default_page, Contract: TsBuyerAction, Params: \"Action=reject\")\r\n            Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: default_page, Contract: TsBuyerAction, Params: \"Action=accept\")\r\n        }\r\n\r\n    }.Style(\r\n        padding-left: 60px!important; \r\n        padding-right: 60px!important;\r\n    )\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_commercial_terms",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(ml mr){\r\n    Div(Class: h5 text-bold, Body: 1. Price, sale rounds and extra terms:)\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(table tablez){\r\n                Div(table__head){\r\n                    Div(table__row){\r\n                        Div(table__cell table__cell_20){Round}\r\n                        Div(table__cell table__cell_10){Volume of APLA Tokens}\r\n                        Div(table__cell table__cell_10){Price, EUR, excl. VAT}\r\n                        Div(table__cell table__cell_10){Discount}\r\n                        Div(table__cell){Extra terms}\r\n                    }\r\n                }\r\n                Div(table__row){\r\n                    Div(table__cell){Round 1 (01.11.18-20.12.18)}\r\n                    Div(table__cell){15 100 000}\r\n                    Div(table__cell){5}\r\n                    Div(table__cell){20%}\r\n                    Div(table__cell){25% of unsold APLA tokens during each Round 2 to 7 will be proportionally distributed for free among the buyers purchased the tokens during Round 1. \r\n                    This option becomes available only if the conditions for free distribution of APLA Tokens to the buyers participating to the Rounds 2-7 have been fulfilled.\r\n                    If you acquire APLA Tokens for the amount of at least 125,000 EUR, you will be entitled to additional benefits.  Please reach out to us via email luxembourg@apla.io to get more details. \r\n                    }\r\n                }\r\n                Div(table__row){\r\n                    Div(table__cell){Round 2(20.12.18-01.02.19)}\r\n                    Div(table__cell){1 000 000}\r\n                    Div(table__cell){5}\r\n                    Div(table__cell){0%}\r\n                    Div(table__cell tborder){75% of unsold APLA tokens during each Round 2 to 7 will be proportionally distributed for free among the buyers participating to the respective round. This option becomes available only if at least 40% of APLA tokens have been sold out during this round. In all other cases, the unsold tokens remain the property of the current owner.\r\n                    }\r\n                }\r\n                Div(table__row){\r\n                    Div(table__cell){Round 4 (01.03.19-01.04.19)}\r\n                    Div(table__cell){5 000 000}\r\n                    Div(table__cell){5}\r\n                    Div(table__cell){0%}\r\n                    Div(table__cell tborder){}\r\n                }\r\n                Div(table__row){\r\n                    Div(table__cell){Round 5 (01.04.19-01.05.19)}\r\n                    Div(table__cell){7 000 000}\r\n                    Div(table__cell){5}\r\n                    Div(table__cell){0%}\r\n                    Div(table__cell tborder){}\r\n                }\r\n                Div(table__row){\r\n                    Div(table__cell){Round 6 (01.05.19-01.06.19)}\r\n                    Div(table__cell){12 000 000}\r\n                    Div(table__cell){5}\r\n                    Div(table__cell){0%}\r\n                    Div(table__cell tborder){}\r\n                }\r\n                Div(table__row){\r\n                    Div(table__cell tborder){Round 7 (01.06.19-01.07.19)}\r\n                    Div(table__cell tborder){16 000 000}\r\n                    Div(table__cell tborder){5}\r\n                    Div(table__cell tborder){0%}\r\n                    Div(table__cell tborder){}\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(Class: h5 m0, Body: Each round starts at 11:01 am and ends at 11 am of the designated date)\r\n\r\n    Div(row mt-xl){\r\n        Div(col-sm-3){\r\n            Div(Class: h5 text-bold, Body: 2. Delivery of APLA Tokens)\r\n        }\r\n        Div(col-sm-9){\r\n            Div(Class: h5, Body: The number of APLA tokens you have paid for, will be delivered to your APLA Wallet within 2 business days after EGAAS S.A. have received the payment of the purchase price.)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3){\r\n            Div(Class: h5 text-bold, Body: 3. Payment currency)\r\n        }\r\n        Div(col-sm-9){\r\n            Div(Class: h5, Body: EUR/BTC/ETH)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3){\r\n            Div(Class: h5 text-bold, Body: 4. Payment terms )\r\n        }\r\n        Div(col-sm-9){\r\n            Div(Class: h5, Body: If you make a payment in EUR, you will need to make a transfer of the purchase price from your EUR account with SnapSwap to the EUR account of EGAAS S.A. with the same financial institution. Please indicate in the payment order your APLA Wallet number for the delivery of APLA Tokens.)\r\n            Div(Class: h5, Body: If you make a payment in BTC or ETH, the Bitstamp exchange rate of BTC/EUR or ETH/EUR shall be used to calculate the EUR equivalent. The Bitstamp rate shall be defined on the day EGAAS S.A. have received BTC or ETH into its wallet. )\r\n            Div(Class: h5, Body: The details of the BTC or ETH wallets of EGAAS S.A. will be communicated to you for each transaction individually after we have received your purchase order. )\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3){\r\n            Div(Class: h5 text-bold, Body: 5. Legal terms)\r\n        }\r\n        Div(col-sm-9){\r\n            Div(Class: h5, Body: Standard Terms & Conditions of Sale enclosed to these commercial terms. )\r\n        }\r\n    }\r\n\r\n    Div(row mt-xl pull-right){\r\n        Div(col-sm-12){\r\n            Button(Class: btn btn-default, Page: default_page, Body: Back)\r\n        }\r\n    }\r\n}.Style(\r\n    .row-flex {\r\n        display: flex;\r\n        flex-flow: row wrap;\r\n    }\r\n    .table {\r\n        display: table;\r\n        border: solid 1px #000000;\r\n    }\r\n    .tablez {\r\n        border: solid 1px #000000;\r\n    }\r\n    .table .table__head {\r\n        display: table-header-group;\r\n        background: blue;\r\n        color: #fff;\r\n    }\r\n    .table .table__head .table__cell {\r\n        font-size: 15px;\r\n        color: #000000;\r\n        background: #B7B7B7;\r\n    }\r\n    .table > div:not(.table__body) {\r\n        display: table-row-group;\r\n    }\r\n    .table .table__body:last-child .table__row:last-child .table__cell {\r\n        border-bottom: none;\r\n    }\r\n    .table .table__row {\r\n        display: table-row;\r\n        flex-direction: row;\r\n        flex-wrap: no-wrap;\r\n    }\r\n    .table .table__row:nth-child(2n) {\r\n        display: table-row;\r\n        flex-direction: row;\r\n        flex-wrap: no-wrap;\r\n        border-left: solid 1px red;\r\n    }\r\n    .table .table__row .table__cell {\r\n        border-bottom: solid 1px #000000;\r\n    }\r\n    .table .table__cell {\r\n        display: table-cell;\r\n        padding: 8px 10px;\r\n        font-size: 14px;\r\n        color: #000000;\r\n        border-right: solid 1px #000000;\r\n    }\r\n    .tborder {\r\n        border-bottom: 0!important;\r\n    }\r\n    .table .table__cell:last-child {\r\n        border-right: none;\r\n    }\r\n    .table .table__cell.table__cell_collapse {\r\n        width: 1px;\r\n    }\r\n    .table .table__cell.table__cell_10 {\r\n        width: 10%;\r\n    }\r\n    .table .table__cell.table__cell_20 {\r\n        width: 20%;\r\n    }\r\n    .table .table__cell.table__cell_25 {\r\n        width: 25%;\r\n    }\r\n    .table .table__cell.table__cell_30 {\r\n        width: 30%;\r\n    }\r\n    .table .table__cell.table__cell_40 {\r\n        width: 40%;\r\n    }\r\n    .table .table__cell.table__cell_50 {\r\n        width: 50%;\r\n    }\r\n    .table .table__cell.table__cell_60 {\r\n        width: 60%;\r\n    }\r\n    .table .table__cell.table__cell_70 {\r\n        width: 70%;\r\n    }\r\n    .table .table__cell.table__cell_80 {\r\n        width: 80%;\r\n    }\r\n    .table .table__cell.table__cell_18 {\r\n        width: 18%;\r\n    }\r\n    .table .table__cell.table__cell_90 {\r\n        width: 90%;\r\n    }\r\n    .table .table__cell.table__cell_stretch {\r\n        width: 100%;\r\n    }\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_consensus_contract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Tokens sale\"}).Columns(\"id\").Vars(application)\r\nSetVar(isStartProcessing,0)\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->wallet_id,date_start_processing,notification->type,processing_info->member_id,closed\").Vars(note)\r\n    If(#note_date_start_processing#!=\"\"){\r\n        SetVar(isStartProcessing,1)\r\n    }\r\n}\r\n\r\nSetVar(this_page, ts_consensus_contract)\r\nDiv(content-wrapper){\r\n    Form(){\r\n        DBFind(@1ts_wallets).Where({id:#note_page_params_wallet_id#, rejected_at:0}).Vars(wallet)\r\n        If(#wallet_id#>0){\r\n            Div(list-group-item){\r\n                Div(text-center text-bold h4 m0){\r\n                    LangRes(@1key_id_investor)\r\n                }\r\n            }\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1key_id_investor$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#wallet_key_id_buyer#\"){\r\n                            Address(#wallet_key_id_buyer#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1signed_at$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        DateTime(#wallet_signed_at#, \"YYYY-MM-DD HH:MI:SS\")\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1pub_key$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_pub_buyer#)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1ts_wallet_btc$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_wallet_btc#)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1ts_wallet_eth$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_wallet_eth#)\r\n                    }\r\n                }\r\n            }\r\n            If(#note_closed# == 0){\r\n                Div(list-group-item){\r\n                    If(And(#note_processing_info_member_id#==#key_id#,#isStartProcessing#==1)){\r\n                        Button(Body: $@1reject$, Class: btn btn-default, Page: #this_page#, PageParams: \"notific_id=#notific_id#\", Contract: TsConsensusAction, Params: \"Action=reject,WalletId=#note_page_params_wallet_id#,NotificId=#notific_id#\")\r\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"notific_id=#notific_id#\", Contract: TsConsensusAction, Params: \"Action=accept,WalletId=#note_page_params_wallet_id#,NotificId=#notific_id#\")\r\n                    }.ElseIf(#isStartProcessing#==1){\r\n                        Div(text-muted text-center){\r\n                            $@1notice_processing_started_another_member$\r\n                        }\r\n                    }.ElseIf(#isStartProcessing#==0){\r\n                        Div(text-right){\r\n                            Button(Body: $@1processing$, Class: btn btn-primary, Page: #this_page#, PageParams: \"notific_id=#notific_id#\", Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(list-group-item text-center h4){\r\n                $@1wallet$ $@1not_found$\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_free_wallet_add",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-2 mt-lg text-right){\r\n            Label(For: wallet_btc){\r\n                LangRes(@1ts_wallet_btc)\r\n            }\r\n        }\r\n        Div(col-md-10){\r\n            Input(Name: wallet_btc, Type: textarea).Validate(minLength:27, maxLength:34)\r\n            InputErr(Name: wallet_btc, minLength: $@1validate_wallet_btc$, maxLength: $@1validate_wallet_btc$)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-2 mt-lg text-right){\r\n            Label(For: wallet_eth){\r\n                LangRes(@1ts_wallet_eth)\r\n            }\r\n        }\r\n        Div(col-md-10){\r\n            Input(Name: wallet_eth, Type: textarea).Validate(minLength:40, maxLength:44)\r\n            InputErr(Name: wallet_btc, minLength: $@1validate_wallet_eth$, maxLength: $@1validate_wallet_eth$)\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1add), Class: btn btn-primary pull-right mt, Page: @1ts_free_wallets, Contract: @1TsFreeWalletAdd)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ts_free_wallets)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_free_wallets",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ts_free_wallets).(this_table, @1ts_wallets)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ts_free_wallets$\")\r\nSetVar(admin_role_id, EcosysParam(Name:role_sale_admin))\r\nIf(And(#admin_role_id#>0,#role_id#==#admin_role_id#)){\r\n    AddToolButton(Title:$@1ts_free_wallet_add$, Page: @1ts_free_wallet_add, Icon: icon-wallet).Popup(Header: $@1ts_free_wallet_add$, Width: \"50\")\r\n}\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, {$and: [{\"deleted\":0}, {\"key_id_buyer\":0}, {$or:[{\"wallet_btc\": {$like: #search#}},{\"wallet_eth\": {$like: #search#}}]}]})\r\n}.Else{\r\n    SetVar(where, {$and: [{\"deleted\":0}, {\"key_id_buyer\":0}]}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1wallet))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_btc){\r\n    Span(#wallet_btc#)\r\n}.Custom(_eth){\r\n    Span(#wallet_eth#)\r\n}.Custom(action){\r\n    Div(pull-right){\r\n        If(#deleted#==0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1TsFreeWalletDelete, Params: \"wallet_id=#id#\", Page: @1ts_free_wallets).Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1id$=id,$@1ts_wallet_btc$=_btc,$@1ts_wallet_eth$=_eth,=action\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1ts_free_wallets$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_key_approve",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-2 mt-xl text-right){\r\n            Label(For: public_key){\r\n                LangRes(@1pub_key)\r\n            }\r\n        }\r\n        Div(col-md-10){\r\n            Span(Body: LangRes(@1ts_public_key_input_des), Class: text-muted m0 h6)\r\n            Input(Name: public_key, Type: textarea)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-2 mt-lg text-right){\r\n            Label(For: token_buyer){\r\n                LangRes(@1public_key_type)\r\n            }\r\n        }\r\n        Div(col-md-10){\r\n            Data(key_radio, \"value,description\"){\r\n                investor,$@1ts_investor_key$\r\n                user,$@1ts_user_key$\r\n            }\r\n            RadioGroup(Name: key_type, Source: key_radio, NameColumn: description, ValueColumn: value)\r\n        }\r\n    }\r\n    Input(Name: current_role_id, Type: hidden, Value: #role_id#)\r\n    Button(Body: LangRes(@1add), Class: btn btn-primary pull-right mt, Page: @1ts_wallets, Contract: @1TsKeyApprove).Alert(Text: \"$@1want_add_investor$\", ConfirmButton: \"$@1yes$\", CancelButton: \"$@1no$\", Icon: icon-question)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ts_wallets)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_notification",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Tokens sale\"}).Columns(\"id\").Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"notification->type,notification->header,notification->body,id,processing_info->member_id,closed\").Vars(note)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Div(row mt-sm){\r\n        Div(col-lg-10 col-lg-offset-1){\r\n            Form(panel panel-primary){\r\n                DBFind(@1ts_wallets).Where({key_id_signer:{$neq:0}, rejected_at:0}).Vars(wallet)\r\n                If(#note_id#>0){\r\n                    Div(panel-body text-center){\r\n                        Div(h4 text-bold m0){\r\n                            #note_notification_header#\r\n                        }\r\n                        Div(m0){\r\n                            #note_notification_body#\r\n                        }\r\n                    }\r\n                    If(#note_closed# == 0){\r\n                        Div(panel-footer text-right){\r\n                            If(Or(#note_notification_type#==1,#note_processing_info_member_id# == #key_id#)){\r\n                                Button(Body: $@1mark_read$, Class: btn btn-primary, Page: @1default_page, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\")\r\n                            }.ElseIf(#note_notification_type#==2){\r\n                                Button(Body: $@1processing$, Class: btn btn-primary, Page: @1ts_notification, PageParams: \"notific_id=#notific_id#\", Contract: NotificationsProcess, Params: \"notific_id=#notific_id#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_sales",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ts_sales).(this_table, @1ts_sales)\r\nInclude(@1pager_header)\r\n\r\nDBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Tokens sale\"}).Columns(\"id\").Vars(application)\r\nSetVar(admin_role_id, EcosysParam(Name:role_sale_admin))\r\nSetVar(manager_role_id, EcosysParam(Name:role_sale_manager))\r\nSetVar(seller_role_id, EcosysParam(Name:role_sale_seller))\r\nSetVar(STATUS_MANAGER,1).(STATUS_SELLER,2)\r\n\r\nSetTitle(\"$@1ts_sales$\")\r\nIf(And(#admin_role_id#>0,#role_id#==#admin_role_id#)){\r\n    AddToolButton(Title:$@1ts_add_transfer$, Page: @1ts_transfer_admin, Icon: icon-wallet).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n}\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, {id:#search#})\r\n}.Else{\r\n    SetVar(where, {id:{$gt:0}}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1key_id))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(#id#)\r\n    SetVar(w_wallet_btc,).(w_wallet_eth,).(w_pub_short_buyer,)\r\n    DBFind(@1ts_wallets).Where({\"key_id_buyer\":#key_id_buyer#}).Vars(w)\r\n}.Custom(_btat){\r\n    Span(Class: text-muted, Body: DateTime(#buyer_transferred_at#, Format: YYYY-MM-DD HH:MI:SS))\r\n}.Custom(_cat){\r\n    Span(Class: text-muted, Body: DateTime(#created_at#, Format: YYYY-MM-DD HH:MI:SS))\r\n}.Custom(_amount){\r\n    Div(text-right){\r\n        Span(Class: text-bold, Body: Money(#amount_apl#)).Style(margin-right:5px;)\r\n        Span(Class: text-bold, Body: APLA)\r\n    }\r\n}.Custom(_info){\r\n    Button(Class: btn-xs btn-link, Page: @1ts_transfer_view, PageParams: \"Id=#id#\"){\r\n        Span(Class: text-bold h5, Body: LangRes(@1information))\r\n    }.Popup(Header: $@1information$, Width: 35)\r\n}.Custom(_status){\r\n    SetVar(status_class, AppParam(App:#application_id#, Name:ts_statuses_classes, Index:#status#, Ecosystem: #ecosystem_id#))\r\n    Div(#status_class#){\r\n        AppParam(App:#application_id#, Name:ts_statuses, Index:#status#, Ecosystem: #ecosystem_id#)\r\n    }\r\n}.Custom(_action){\r\n    If(And(#status#==#STATUS_MANAGER#,#manager_role_id#>0,#role_id#==#manager_role_id#)){\r\n        Button(Class: fa fa-play btn btn-primary, Page: @1ts_transfer_manager, PageParams: \"SaleId=#id#\")\r\n    }\r\n    If(And(#status#==#STATUS_SELLER#,#seller_role_id#>0,#role_id#==#seller_role_id#)){\r\n        Button(Class: fa fa-play btn btn-primary, Page: @1ts_transfer_seller, PageParams: \"SaleId=#id#\")\r\n    }\r\n}.Custom(_buyer){\r\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#key_id_buyer#\"){\r\n        Address(#key_id_buyer#)\r\n    }\r\n    Div(){\r\n        Span(Class: h6 text-muted, Body: PUB:)\r\n        Span(Class: h6 text-muted ml-sm, Body: #w_pub_short_buyer#)\r\n    }\r\n}.Custom(_wlts){\r\n    Div(){\r\n        Span(Class: h6 text-muted, Body: BTC:)\r\n        Span(Class: h6 ml-sm, Body: #w_wallet_btc#)\r\n    }\r\n    Div(){\r\n        Span(Class: h6 text-muted, Body: ETH:)\r\n        Span(Class: h6 ml-sm, Body: #w_wallet_eth#)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1id$=_id,$@1key_id_investor$=_buyer,$@1wallets$=_wlts,$@1information$=_info,$@1investor_funds_transfer_date$=_btat,$@1created_at$=_cat,$@1status$=_status,=_action,=_amount\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1sales$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_settings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, ts_settings).(role_admin,0).(role_manager,0).(role_seller,0)\r\nSetVar(role_admin, EcosysParam(Name:role_sale_admin))\r\nSetVar(role_manager, EcosysParam(Name:role_sale_manager))\r\nSetVar(role_seller, EcosysParam(Name:role_sale_seller))\r\nSetVar(role_snapswap, EcosysParam(Name:role_snapswap))\r\n\r\nDBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"role_name,id\").Limit(100)\r\n\r\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\r\nSetTitle($@1ts_settings$)\r\nDiv(content-wrapper){\r\n    Div(row mt-sm){\r\n        Div(col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(#row#){\r\n                        Div(col-sm-12 text-center text-muted){\r\n                            $@1ts_settings_description$\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            $@1role_sale_admin$\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name:RoleAdmin, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_admin#)\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            $@1role_sale_manager$\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name:RoleManager, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_manager#)\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            $@1role_sale_seller$\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name:RoleSeller, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_seller#)\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            $@1role_snapswap$\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name:RoleSnapswap, Source:src_roles, NameColumn: role_name, ValueColumn: id, Value:#role_snapswap#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-center){\r\n                    Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: TsSettings)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_transfer_admin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ts_transfer_admin).(back_page, @1ts_sales)\r\n\r\nIf(GetVar(type_currency)==\"\"){\r\n    SetVar(type_currency,1)\r\n}\r\n\r\nForm(){\r\n    Div(row mb-sm){\r\n        Div(col-md-4 mt-sm text-right text-bold){\r\n            LangRes(@1type)\r\n        }\r\n        Div(col-md-8 text-left){\r\n            If(GetVar(type_currency)==1){\r\n                Input(Name: CurrencyType, Type: hidden, Value: 1)\r\n                Button(Body: BTC, Page: #this_page#, PageParams: \"type_currency=1\", Class: btn btn-primary disabled mr-lg).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n                Button(Body: ETH, Page: #this_page#, PageParams: \"type_currency=2\", Class: btn btn-primary mr-lg).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n                Button(Body: EUR, Page: #this_page#, PageParams: \"type_currency=3\", Class: btn btn-primary).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n            }.ElseIf(GetVar(type_currency)==2){\r\n                Input(Name: CurrencyType, Type: hidden, Value: 2)\r\n                Button(Body: BTC, Page: #this_page#, PageParams: \"type_currency=1\", Class: btn btn-primary mr-lg).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n                Button(Body: ETH, Page: #this_page#, PageParams: \"type_currency=2\", Class: btn btn-primary disabled mr-lg).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n                Button(Body: EUR, Page: #this_page#, PageParams: \"type_currency=3\", Class: btn btn-primary).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n            }.ElseIf(GetVar(type_currency)==3){\r\n                Input(Name: CurrencyType, Type: hidden, Value: 3)\r\n                Button(Body: BTC, Page: #this_page#, PageParams: \"type_currency=1\", Class: btn btn-primary mr-lg).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n                Button(Body: ETH, Page: #this_page#, PageParams: \"type_currency=2\", Class: btn btn-primary mr-lg).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n                Button(Body: EUR, Page: #this_page#, PageParams: \"type_currency=3\", Class: btn btn-primary disabled).Popup(Header: $@1ts_add_transfer$, Width: \"50\")\r\n            }\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-sm-4 mt text-bold text-right){\r\n            If(GetVar(type_currency)==1){\r\n                LangRes(@1ts_wallet_btc)\r\n            }.ElseIf(GetVar(type_currency)==2){\r\n                LangRes(@1ts_wallet_eth)\r\n            }.ElseIf(GetVar(type_currency)==3){\r\n                LangRes(@1pub_key)\r\n            }\r\n        }\r\n        Div(col-sm-8 text-left){\r\n            Input(Name: WalletStr, Type: textarea)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-4 mt-sm text-right text-bold){\r\n            LangRes(@1amount_apl)\r\n        }\r\n        Div(col-sm-8 text-left){\r\n            Input(Name:AmountApl, Type:number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-4 mt-sm text-right text-bold){\r\n            LangRes(@1investor_funds_transfer_date)\r\n        }\r\n        Div(col-sm-8 text-left){\r\n            Div(row){\r\n                Div(col-sm-6){\r\n                    Input(Name:TransferredDate, Type:date)\r\n                }\r\n                Div(col-sm-6){\r\n                    Input(Name:TransferredTime, Type:time, Value: \"00:00\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Button(Body: $@1send_to_check$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: TsTransferAdmin).Alert(Text: \"$@1want_add_investor$\", ConfirmButton: \"$@1yes$\", CancelButton: \"$@1no$\", Icon: question)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_transfer_manager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Tokens sale\"}).Columns(\"id\").Vars(application)\r\n\r\nSetVar(this_page, ts_transfer_manager)\r\nSetVar(role_param, role_sale_manager)\r\nSetVar(needed_role_id, EcosysParam(Name:#role_param#))\r\n\r\nSetVar(isStartProcessing,0)\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->sale_id,date_start_processing,notification->type,processing_info->member_id,closed\").Vars(note)\r\n    If(#note_date_start_processing#!=\"\"){\r\n        SetVar(isStartProcessing,1)\r\n    }\r\n}.ElseIf(GetVar(SaleId)!=\"\"){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"page_params->sale_id\":#SaleId#, closed:0}).Columns(\"page_params->sale_id,date_start_processing,notification->type,processing_info->member_id,id\").Vars(note)\r\n    SetVar(notific_id,#note_id#)\r\n    If(#note_date_start_processing#!=\"\"){\r\n        SetVar(isStartProcessing,1)\r\n    }\r\n}\r\nSetVar(sale_id,0)\r\nIf(#note_page_params_sale_id#>0){\r\n    DBFind(@1ts_sales).Where({id:#note_page_params_sale_id#}).Vars(sale)\r\n    DBFind(@1ts_wallets).Where({key_id_buyer:#sale_key_id_buyer#}).Vars(wallet)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Form(){\r\n        If(And(#needed_role_id#>0,#role_id#==#needed_role_id#,#sale_id#>0)){\r\n            Div(list-group-item){\r\n                Div(text-center text-bold h4 m0){\r\n                    LangRes(@1ts_transfer_manager)\r\n                }\r\n            }\r\n            Div(list-group-item){\r\n                Div(row mt-sm){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1key_id_investor$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sale_key_id_buyer#\"){\r\n                            Address(#sale_key_id_buyer#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1tokens$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Money(#sale_amount_apl#) APLA\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1pub_key$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_pub_buyer#)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1ts_wallet_btc$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_wallet_btc#)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1ts_wallet_eth$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_wallet_eth#)\r\n                    }\r\n                }\r\n                Div(row mt-sm text-muted ){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1investor_funds_transfer_date$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        DateTime(#sale_buyer_transferred_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                    }\r\n                }\r\n                Div(row text-muted){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1created_at$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        DateTime(#sale_created_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                    }\r\n                }\r\n                Div(row text-muted){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1created_by$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Address(#sale_key_id_sale_apl_admin#)\r\n                    }\r\n                }\r\n            }\r\n            If(#sale_status# == 1){\r\n                Div(list-group-item){\r\n                    If(And(#note_processing_info_member_id#==#key_id#,#isStartProcessing#==1)){\r\n                        Button(Body: $@1reject$, Class: btn btn-default, Page: ts_transfer_reject, PageParams: \"RoleParam=#role_param#,notific_id=#notific_id#,back_page=#this_page#\").Popup(50,\"Rejected comment\")\r\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: ts_sales, Contract: TsTransferManager, Params: \"SaleId=#sale_id#,NotificId=#notific_id#\")\r\n                    }.ElseIf(#isStartProcessing#==1){\r\n                        Div(text-muted text-center){\r\n                            process begin another manager\r\n                        }\r\n                    }.ElseIf(#isStartProcessing#==0){\r\n                        Div(text-right){\r\n                            Button(Body: $@1processing$, Class: btn btn-primary, Page: #this_page#, PageParams: \"notific_id=#notific_id#\", Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(list-group-item text-center h4){\r\n                If(#needed_role_id#>0){\r\n                    If(#needed_role_id#!=#role_id#){\r\n                        DBFind(@1parameters).Where({ecosystem:#ecosystem_id#, name:#role_param#}).Vars(param)\r\n                        Div(h4){\r\n                            This page only for role from parameter LinkPage(Page: @1params_edit, PageParams: \"id=#param_id#,back_page=#this_page#\", Body:#role_param#)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Div(h4){\r\n                        #role_param# not setted\r\n                    }\r\n                    Div(h4){\r\n                        LinkPage(Body:$@1ts_settings$, Page:ts_settings)\r\n                    }\r\n                }\r\n\r\n                If(#note_id_page_params_sale_id#>0){\r\n                    If(#sale_id#>0){}.Else{\r\n                        Sale not found\r\n                    }\r\n                }.Else{\r\n                    Notification not found\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_transfer_reject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(needed_role_id,0)\r\nIf(GetVar(RoleParam)!=\"\"){\r\n    SetVar(needed_role_id, EcosysParam(Name:#RoleParam#))\r\n}\r\nIf(GetVar(notific_id)!=\"\"){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->sale_id\").Vars(note)\r\n}\r\nSetVar(sale_id,0)\r\nIf(#note_page_params_sale_id#>0){\r\n    DBFind(@1ts_sales).Where({id:#note_page_params_sale_id#}).Vars(sale)\r\n}\r\n\r\nForm(){\r\n    If(And(#needed_role_id#>0,#role_id#==#needed_role_id#,#sale_id#>0)){\r\n        Div(mb){\r\n            Input(Name:Comment, Type:textarea)\r\n        }\r\n        Div(){\r\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#, PageParams: \"notific_id=#notific_id#\")\r\n            Button(Body: $@1send$, Class: btn btn-primary pull-right, Page: default_page, Contract: TsTransferReject, Params: \"RoleParam=#RoleParam#,NotificId=#notific_id#\")\r\n        }\r\n    }.Else{\r\n        Div(text-center text-muted){\r\n            If(And(#needed_role_id#>0,#role_id#!=#needed_role_id#)){\r\n                Div(){\r\n                    for added comment you must be logined as role id #needed_role_id#\r\n                }\r\n            }\r\n            If(#sale_id#==0){\r\n                Div(){\r\n                    sale not found\r\n                }\r\n            }\r\n        }\r\n        Div(){\r\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#, PageParams: \"notific_id=#notific_id#\")\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_transfer_seller",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Tokens sale\"}).Columns(\"id\").Vars(application)\r\n\r\nSetVar(this_page, ts_transfer_seller)\r\nSetVar(role_param, role_sale_seller)\r\nSetVar(needed_role_id, EcosysParam(Name:#role_param#))\r\n\r\nAppParam(App:#application_id#, Name:ts_currency_type, Ecosystem: #ecosystem_id#, Source:currency_type)\r\nSetVar(isStartProcessing,0)\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"page_params->sale_id,date_start_processing,notification->type,processing_info->member_id,closed\").Vars(note)\r\n    If(#note_date_start_processing#!=\"\"){\r\n        SetVar(isStartProcessing,1)\r\n    }\r\n}.ElseIf(GetVar(SaleId)!=\"\"){\r\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, \"page_params->sale_id\":#SaleId#, closed:0}).Columns(\"page_params->sale_id,date_start_processing,notification->type,processing_info->member_id,closed\").Vars(note)\r\n    SetVar(notific_id,#note_id#)\r\n    If(#note_date_start_processing#!=\"\"){\r\n        SetVar(isStartProcessing,1)\r\n    }\r\n}\r\nSetVar(sale_id,0)\r\nIf(#note_page_params_sale_id#>0){\r\n    DBFind(@1ts_sales).Where({id:#note_page_params_sale_id#}).Vars(sale)\r\n    DBFind(@1ts_wallets).Where({key_id_buyer:#sale_key_id_buyer#}).Vars(wallet)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Form(){\r\n        If(And(#needed_role_id#>0,#role_id#==#needed_role_id#,#sale_id#>0)){\r\n            Div(list-group-item){\r\n                Div(text-center text-bold h4 m0){\r\n                    LangRes(@1ts_transfer_seller)\r\n                }\r\n            }\r\n            Div(list-group-item){\r\n                Div(row mt-sm){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1key_id_investor$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sale_key_id_buyer#\"){\r\n                            Address(#sale_key_id_buyer#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1tokens$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Money(#sale_amount_apl#) APLA\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1pub_key$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_pub_buyer#)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1ts_wallet_btc$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_wallet_btc#)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1ts_wallet_eth$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Span(Class: h6, Body: #wallet_wallet_eth#)\r\n                    }\r\n                }\r\n                Div(row mt-sm text-muted){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1investor_funds_transfer_date$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        DateTime(#sale_buyer_transferred_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                    }\r\n                }\r\n                Div(row text-muted){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1created_at$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        DateTime(#sale_created_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                    }\r\n                }\r\n                Div(row text-muted){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1created_by$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Address(#sale_key_id_sale_apl_admin#)\r\n                    }\r\n                }\r\n                Div(row text-muted){\r\n                    Div(col-sm-3 text-right text-bold){\r\n                        $@1checked_by$\r\n                    }\r\n                    Div(col-sm-9 text-left){\r\n                        Address(#sale_key_id_sale_apl_manager#)\r\n                    }\r\n                }\r\n            }\r\n            If(#sale_status# == 2){\r\n                Div(list-group-item){\r\n                    If(And(#note_processing_info_member_id#==#key_id#,#isStartProcessing#==1)){\r\n                        Button(Body: $@1reject$, Class: btn btn-default, Page: ts_transfer_reject, PageParams: \"RoleParam=#role_param#,notific_id=#notific_id#,back_page=#this_page#\").Popup(50,\"Rejected comment\")\r\n                        Button(Body: $@1accept$, Class: btn btn-primary pull-right, Page: ts_sales, Contract: TsTransferSeller, Params: \"SaleId=#sale_id#,NotificId=#notific_id#\")\r\n                    }.ElseIf(#isStartProcessing#==1){\r\n                        Div(text-muted text-center){\r\n                            process begin another seller\r\n                        }\r\n                    }.ElseIf(#isStartProcessing#==0){\r\n                        Div(text-right){\r\n                            Button(Body: $@1processing$, Class: btn btn-primary, Page: #this_page#, PageParams: \"notific_id=#notific_id#\", Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(panel-body){\r\n                If(#needed_role_id#>0){\r\n                    If(#needed_role_id#!=#role_id#){\r\n                        DBFind(@1parameters).Where({ecosystem:#ecosystem_id#, name:#role_param#}).Vars(param)\r\n                        Div(h4){\r\n                            This page only for role from parameter LinkPage(Page: @1params_edit, PageParams: \"id=#param_id#,back_page=#this_page#\", Body:#role_param#)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Div(h4){\r\n                        #role_param# not setted\r\n                    }\r\n                    Div(h4){\r\n                        LinkPage(Body:$@1ts_settings$, Page:ts_settings)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_transfer_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({ecosystem:#ecosystem_id#, name:\"Tokens sale\"}).Columns(\"id\").Vars(application)\r\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-6 text-right text-bold\").(col-right,\"col-sm-6 text-left\")\r\nIf(GetVar(back_page)==\"\"){\r\n    SetVar(back_page, @1ts_sales)\r\n}\r\nIf(GetVar(Id)){\r\n    DBFind(@1ts_sales).Where({id:#Id#}).Vars(sale)\r\n}\r\n\r\nIf(#sale_id#>0){\r\n    Div(#row#){\r\n        Div(#col_left#){\r\n            $@1key_id_investor$\r\n        }\r\n        Div(#col_right#){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sale_key_id_buyer#\"){\r\n                Address(#sale_key_id_buyer#)\r\n            }\r\n        }\r\n    }\r\n    Div(#row#){\r\n        Div(#col_left#){\r\n            $@1tokens$\r\n        }\r\n        Div(#col_right#){\r\n            Money(#sale_amount_apl#) APLA\r\n        }\r\n    }\r\n    Div(#row#){\r\n        Div(#col_left#){\r\n            $@1key_id_sale_apl_admin$\r\n        }\r\n        Div(#col_right#){\r\n            Address(#sale_key_id_sale_apl_admin#) (#sale_key_id_sale_apl_admin#)\r\n        }\r\n    }\r\n    If(#sale_key_id_sale_apl_manager#!=0){\r\n        Div(#row#){\r\n            Div(#col_left#){\r\n                $@1key_id_sale_apl_manager$\r\n            }\r\n            Div(#col_right#){\r\n                Address(#sale_key_id_sale_apl_manager#) (#sale_key_id_sale_apl_manager#)\r\n            }\r\n        }\r\n        If(#sale_manager_rejected_at#>0){\r\n            Div(#row#){\r\n                Div(#col_left#){\r\n                    $@1manager_rejected_at$\r\n                }\r\n                Div(#col_right#){\r\n                    DateTime(#sale_manager_rejected_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                }\r\n            }\r\n\r\n            Div(#row#){\r\n                Div(#col_left#){\r\n                    $@1manager_reject_comment$\r\n                }\r\n                Div(#col_right#){\r\n                    #sale_manager_reject_comment#\r\n                }\r\n            }\r\n        }\r\n    }\r\n    If(#sale_key_id_seller#!=0){\r\n        Div(#row#){\r\n            Div(#col_left#){\r\n                $@1key_id_seller$\r\n            }\r\n            Div(#col_right#){\r\n                Address(#sale_key_id_seller#) (#sale_key_id_seller#)\r\n            }\r\n        }\r\n        If(#sale_seller_rejected_at#>0){\r\n            Div(#row#){\r\n                Div(#col_left#){\r\n                    $@1seller_rejected_at$\r\n                }\r\n                Div(#col_right#){\r\n                    DateTime(#sale_seller_rejected_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                }\r\n            }\r\n\r\n            Div(#row#){\r\n                Div(#col_left#){\r\n                    $@1seller_reject_comment$\r\n                }\r\n                Div(#col_right#){\r\n                    #sale_seller_reject_comment#\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(#row#){\r\n                Div(#col_left#){\r\n                    $@1seller_transferred_at$\r\n                }\r\n                Div(#col_right#){\r\n                    DateTime(#sale_seller_transferred_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nDiv(row mt){\r\n    Div(col-md-12){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ts_wallets",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ts_wallets).(this_table, @1ts_wallets)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ts_wallets$\")\r\nSetVar(snapswap_role_id, EcosysParam(Name:role_snapswap))\r\nIf(And(#snapswap_role_id#>0,#role_id#==#snapswap_role_id#)){\r\n    AddToolButton(Title:$@1ts_add_public_key$, Page: @1ts_key_approve, Icon: icon-wallet).Popup(Header: $@1ts_add_public_key$, Width: \"50\")\r\n}\r\n\r\nIf(GetVar(search)!=\"\"){\r\n    SetVar(where, {$and: [{\"key_id_buyer\":{$neq:0}}, {$or:[{\"pub_buyer\": {$like: #search#}},{\"wallet_btc\": {$like: #search#}},{\"wallet_eth\": {$like: #search#}}]}]})\r\n}.Else{\r\n    SetVar(where, {\"key_id_buyer\":{$neq:0}}).(search,)\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1pub_key) \\ LangRes(@1wallet))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_rat){\r\n    If(#rejected_at#>0){\r\n        DateTime(#rejected_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n    }.Else{\r\n        Span(Class: text-muted, Body: --)\r\n    }\r\n}.Custom(_sat){\r\n    If(#signed_at#>0){\r\n        DateTime(#signed_at#, Format: YYYY-MM-DD HH:MI:SS)\r\n    }\r\n}.Custom(_cat){\r\n    If(#created_at#>0){\r\n        Span(Class:text-muted, Body:DateTime(#created_at#, Format: YYYY-MM-DD HH:MI:SS))\r\n    }\r\n}.Custom(_buyer){\r\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#key_id_buyer#\"){\r\n        Address(#key_id_buyer#)\r\n    }\r\n    Div(){\r\n        Span(Class: h6 text-muted, Body: PUB:)\r\n        Span(Class: h6 text-muted ml-sm, Body: #pub_short_buyer#)\r\n    }\r\n}.Custom(_signer){\r\n    If(#key_id_signer#!=0){\r\n        Span(Class:text-success, Body: Address(#key_id_signer#))\r\n    }\r\n}.Custom(_wlts){\r\n    Div(){\r\n        Span(Class: h6 text-muted, Body: BTC:)\r\n        Span(Class: h6 ml-sm, Body: #wallet_btc#)\r\n    }\r\n    Div(){\r\n        Span(Class: h6 text-muted, Body: ETH:)\r\n        Span(Class: h6 ml-sm, Body: #wallet_eth#)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1id$=id,$@1key_id_investor$=_buyer,$@1wallets$=_wlts,$@1created_at$=_cat,$@1signed_at$=_sat,$@1rejected_at$=_rat,$@1key_id_consensus$=_signer\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1wallets$ $@1not_founded$\")\r\n            }                       \r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TsBuyerAction",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsBuyerAction {\r\n    data {\r\n        Action string\r\n    }\r\n    conditions{\r\n        var basicAppId int\r\n        basicAppId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).One(\"id\"))\r\n        if basicAppId == 0{\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        $roleConsensus = Int(EcosysParam(\"role_apla_consensus_asbl\"))\r\n        if $roleConsensus == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_apla_consensus_asbl\")\r\n        }\r\n        $wallet = DBFind(\"ts_wallets\").Where({key_id_buyer:$key_id, rejected_at:0}).Row()\r\n        if !$wallet{\r\n            warning \"Buyer wallet not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Action == \"accept\"{\r\n            DBUpdate(\"ts_wallets\", Int($wallet[\"id\"]), {signed_at:$time})\r\n            // role Apla Consensus notification\r\n            var params map title string\r\n            title = Sprintf(\"Buyer %v signed contract\", IdToAddress($key_id))\r\n            params[\"wallet_id\"] = $wallet[\"id\"]\r\n            @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type\", $roleConsensus, 1, title, \"ts_consensus_contract\", params, 1)\r\n\r\n        }elif $Action == \"reject\"{\r\n            DBUpdate(\"ts_wallets\", Int($wallet[\"id\"]), {rejected_at:$time})\r\n        }\r\n\r\n        var notes array i int note map\r\n        notes = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, \"recipient->member_id\":$key_id, page_name:\"@1ts_buyer_contract\", closed:0}).Columns(\"id\")\r\n        while i < Len(notes){\r\n            note = notes[i]\r\n            @1NotificationsClose(\"notific_id\",Int(note[\"id\"]))\r\n            i = i + 1\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "TsConsensusAction",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsConsensusAction {\r\n    data {\r\n        Action string\r\n        WalletId int\r\n        NotificId int\r\n    }\r\n    conditions{\r\n        var basicAppId int\r\n        basicAppId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Basic\"}).One(\"id\"))\r\n        if basicAppId == 0{\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        $roleConsensus = Int(EcosysParam(\"role_apla_consensus_asbl\"))\r\n        if $roleConsensus == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_apla_consensus_asbl\")\r\n        }\r\n        if !RoleAccess($roleConsensus){\r\n            warning \"this action allowed only for role id #\" + $roleConsensus\r\n        }\r\n        $wallet = DBFind(\"ts_wallets\").Where({id:$WalletId, rejected_at:0}).Row()\r\n        if !$wallet{\r\n            warning \"Buyer wallet not found\"\r\n        }\r\n        if Int($wallet[\"signed_at\"]) == 0{\r\n            warning \"Buyer wallet not signed\"\r\n        }\r\n        if $wallet[\"key_id_signer\"] > 0{\r\n            if $wallet[\"key_id_signer\"] != $key_id{\r\n                warning \"This wallet was signed by asbl early\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Action == \"accept\"{\r\n            DBUpdate(\"ts_wallets\", Int($wallet[\"id\"]), {key_id_signer:$key_id})\r\n            // buyer notification\r\n            var params map\r\n            params[\"wallet_id\"] = $wallet[\"id\"]\r\n            @1NotificationsSend(\"member_id,sender,text_header,page_name,params_map,closure_type\", Int($wallet[\"key_id_buyer\"]), 1, \"Your wallet approved\", \"ts_buyer_congratulation\", params, 1)\r\n\r\n        }elif $Action == \"reject\"{\r\n            DBUpdate(\"ts_wallets\", Int($wallet[\"id\"]), {rejected_at:$time})\r\n        }\r\n        @1NotificationsClose(\"notific_id\", $NotificId)\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "TsFreeWalletAdd",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsFreeWalletAdd {\r\n    data {\r\n        wallet_btc string\r\n        wallet_eth string\r\n    }\r\n\r\n    conditions {\r\n        var adminRoleId int adminRoleName string\r\n        adminRoleId = Int(EcosysParam(\"role_sale_admin\"))\r\n        adminRoleName = DBFind(\"@1roles\").Where({\"id\": adminRoleId}).One(\"role_name\")\r\n\r\n        if adminRoleId == 0 {\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_sale_admin\")\r\n        }\r\n\r\n        if !RoleAccess(adminRoleId) {\r\n            warning Sprintf(LangRes(\"x_role_only_action\", \"en\"), adminRoleName)\r\n        }\r\n\r\n        if DBFind(\"ts_wallets\").Where({\"wallet_btc\": $wallet_btc}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"wallet_btc_exists\", \"en\"), $wallet_btc)\r\n        }\r\n\r\n        if DBFind(\"ts_wallets\").Where({\"wallet_eth\": $wallet_eth}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"wallet_eth_exists\", \"en\"), $wallet_eth)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"ts_wallets\", {\"wallet_btc\": $wallet_btc, \"wallet_eth\": $wallet_eth})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsFreeWalletDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsFreeWalletDelete {\r\n    data {\r\n        wallet_id int\r\n    }\r\n\r\n    conditions {\r\n        var adminRoleId int adminRoleName string\r\n        adminRoleId = Int(EcosysParam(\"role_sale_admin\"))\r\n        adminRoleName = DBFind(\"@1roles\").Where({\"id\": adminRoleId}).One(\"role_name\")\r\n\r\n        if adminRoleId == 0 {\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_sale_admin\")\r\n        }\r\n\r\n        if !RoleAccess(adminRoleId) {\r\n            warning Sprintf(LangRes(\"x_role_only_action\", \"en\"), adminRoleName)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"ts_wallets\", $wallet_id, {\"deleted\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsKeyApprove",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsKeyApprove {\r\n    data {\r\n        public_key string\r\n        key_type string\r\n        current_role_id int\r\n    }\r\n\r\n    func getFreeWallet() int {\r\n        var count_wallets int wallet_map map wallet_arr array\r\n        wallet_arr = DBFind(\"ts_wallets\").Where({\"key_id_buyer\": 0, \"deleted\":0}).Order({\"id\": 1})\r\n\r\n        count_wallets = Len(wallet_arr)\r\n        if count_wallets == 0 {\r\n            warning LangRes(\"@1ts_free_wallet_not_found\", \"en\")\r\n        }\r\n\r\n        if count_wallets == 1 {\r\n            var managerRoleId int\r\n            managerRoleId = Int(EcosysParam(\"role_sale_manager\"))\r\n            if managerRoleId > 0 {\r\n                var params map title page body string\r\n                title = LangRes(\"@1ts_free_wallets_emptied\", \"en\")\r\n                body = LangRes(\"@1ts_free_wallets_need\", \"en\")\r\n                page = \"@1ts_notification\"\r\n                @1NotificationsSend(\"rid,sender,text_header,text_body,page_name,params_map,closure_type,current_role_id\", managerRoleId, 2, title, body, page, params, 1, $current_role_id)\r\n            }\r\n        }\r\n\r\n        wallet_map = wallet_arr[0]\r\n        return Int(wallet_map[\"id\"])\r\n    }\r\n\r\n    conditions {\r\n        if $public_key == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n\r\n        $public_key = Replace($public_key, \" \", \"\")\r\n        if Size($public_key) < 128 {\r\n            warning LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size($public_key) > 130 {\r\n            warning LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        $userKey = PubToID($public_key)\r\n        if $userKey == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"ts_wallets\").Where({key_id_buyer: $userKey}).One(\"id\") {\r\n            warning LangRes(\"@1investor_added_already\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1keys\").Where({id: $userKey, ecosystem: 1}).One(\"id\") {\r\n            warning LangRes(\"@1key_added_already\", \"en\")\r\n        }\r\n\r\n        var snapSwapRoleId int snapSwapRoleName string\r\n        snapSwapRoleId = Int(EcosysParam(\"role_snapswap\"))\r\n        snapSwapRoleName = DBFind(\"@1roles\").Where({\"id\": snapSwapRoleId}).One(\"role_name\")\r\n\r\n        if snapSwapRoleId == 0 {\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), \"role_snapswap\")\r\n        }\r\n\r\n        if !RoleAccess(snapSwapRoleId) {\r\n            warning Sprintf(LangRes(\"x_role_only_action\", \"en\"), snapSwapRoleName)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pub_bytes bytes\r\n        pub_bytes = HexToPub($public_key)\r\n        DBInsert(\"@1keys\", {\"id\": $userKey, \"pub\": pub_bytes, \"ecosystem\": 1})\r\n        var start_balance money\r\n        start_balance = Money(1000000000000000)\r\n        @1TokensSend(\"Recipient,Amount\", IdToAddress($userKey), start_balance)\r\n\r\n        if $key_type == \"investor\" {\r\n            $wallet_id = getFreeWallet()\r\n            $pub_short_buyer = Substr($public_key, 0, 12) + \"...\" + Substr($public_key, Size($public_key) - 12, 12)\r\n            DBUpdate(\"ts_wallets\", $wallet_id, {\"key_id_buyer\": $userKey, \"created_at\": $block_time, \"pub_buyer\": $public_key, \"pub_short_buyer\": $pub_short_buyer})\r\n\r\n            // new user notification\r\n            var params map title page body string\r\n            title = LangRes(\"@1ts_hello_user_description\", \"en\")\r\n            body = LangRes(\"@1ts_read_contract\", \"en\")\r\n            page = \"@1ts_buyer_contract\"\r\n            @1NotificationsSend(\"member_id,sender,text_header,text_body,page_name,params_map,closure_type,current_role_id\", $userKey, 2, title, body, page, params, 1, $current_role_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsSettings {\r\n    data {\r\n        RoleAdmin int\r\n        RoleManager int\r\n        RoleSeller int\r\n        RoleSnapswap int\r\n    }\r\n    conditions{\r\n        MainCondition()\r\n    }\r\n    func updateParam(name string, id int){\r\n        if id > 0{\r\n            var params paramsNew map\r\n            params = DBFind(\"@1parameters\").Where({name:name, ecosystem:$ecosystem_id}).Row()\r\n            paramsNew[\"Value\"] = Str(id)\r\n            if params {\r\n                paramsNew[\"Id\"] = Int(params[\"id\"])\r\n                paramsNew[\"Conditions\"] = params[\"conditions\"]\r\n                CallContract(\"@1EditParameter\", paramsNew)\r\n            }else{\r\n                paramsNew[\"Name\"] = name\r\n                paramsNew[\"Conditions\"] = \"ContractConditions(\\\"MainCondition\\\")\"\r\n                CallContract(\"@1NewParameter\", paramsNew)\r\n            }\r\n        }\r\n    }\r\n    action {\r\n        updateParam(\"role_sale_admin\", $RoleAdmin)\r\n        updateParam(\"role_sale_manager\", $RoleManager)\r\n        updateParam(\"role_sale_seller\", $RoleSeller)\r\n        updateParam(\"role_snapswap\", $RoleSnapswap)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsTransferAdmin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsTransferAdmin {\r\n    data {\r\n        WalletStr string\r\n        CurrencyType int\r\n        AmountApl money\r\n        TransferredDate string\r\n        TransferredTime string\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    func trimZeroTime(s string) string {\r\n        if Contains(s, \"T00:00:00Z\") {\r\n            s = s Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n\r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5 {\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n\r\n    conditions {\r\n        $WAITING_MANAGER = 1\r\n        $WAITING_SELLER = 2\r\n        $FINISHED = 3\r\n        $REJECTED = 4\r\n        if $AmountApl <= 0 {\r\n            warning \"invalid amount APLA\"\r\n        }\r\n\r\n        $transferredAt = UnixDateTime(dateAddTime($TransferredDate, $TransferredTime))\r\n        if $transferredAt == 0 {\r\n            warning \"invalid transfer datetime\"\r\n        }\r\n\r\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Tokens sale\"}).One(\"id\"))\r\n        if $appId == 0 {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n\r\n        $currentRole = getRoleId(\"role_sale_admin\")\r\n        if !RoleAccess($currentRole) {\r\n            warning \"this action allowed only for role id #\" + $currentRole\r\n        }\r\n\r\n        if $CurrencyType <= 0 || $CurrencyType > 3 {\r\n            warning \"Invalid Currency Type\"\r\n        }\r\n\r\n        if $CurrencyType == 1 {\r\n            $wallet = DBFind(\"ts_wallets\").Where({wallet_btc: $WalletStr}).Row()\r\n        }\r\n        if $CurrencyType == 2 {\r\n            $wallet = DBFind(\"ts_wallets\").Where({wallet_eth: $WalletStr}).Row()\r\n        }\r\n        if $CurrencyType == 3 {\r\n            if $WalletStr == \"\" {\r\n                warning LangRes(\"@1public_key_empty\", \"en\")\r\n            }\r\n\r\n            $WalletStr = Replace($WalletStr, \" \", \"\")\r\n            if Size($WalletStr) < 128 {\r\n                warning LangRes(\"@1key_too_short\", \"en\")\r\n            }\r\n            if Size($WalletStr) > 130 {\r\n                warning LangRes(\"@1key_too_long\", \"en\")\r\n            }\r\n            var key_id_buyer int\r\n            key_id_buyer = PubToID($WalletStr)\r\n            if key_id_buyer == 0 {\r\n                warning LangRes(\"@1public_key_invalid\", \"en\")\r\n            }\r\n\r\n            $wallet = DBFind(\"ts_wallets\").Where({key_id_buyer: key_id_buyer}).Row()\r\n        }\r\n\r\n        if !$wallet {\r\n            warning \"Buyer wallet not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var sale map saleId int\r\n        sale[\"key_id_buyer\"] = $wallet[\"key_id_buyer\"]\r\n        sale[\"currency_type\"] = $CurrencyType\r\n        sale[\"amount_apl\"] = $AmountApl\r\n        sale[\"key_id_sale_apl_admin\"] = $key_id\r\n        sale[\"created_at\"] = $time\r\n        sale[\"buyer_transferred_at\"] = $transferredAt\r\n        sale[\"status\"] = $WAITING_MANAGER\r\n\r\n        saleId = DBInsert(\"ts_sales\", sale)\r\n\r\n        // role Apla sales manager notification\r\n        var params map title page string\r\n        title = Sprintf(\"Check sale id %v\", saleId)\r\n        page = \"ts_transfer_manager\"\r\n        params[\"sale_id\"] = saleId\r\n        $roleAplManager = getRoleId(\"role_sale_manager\")\r\n        @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type,current_role_id\", $roleAplManager, 2, title, page, params, 1, $currentRole)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsTransferManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsTransferManager {\r\n    data {\r\n        SaleId int\r\n        NotificId int\r\n    }\r\n    func getRoleId(name string) int{\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n    conditions{\r\n        $WAITING_MANAGER = 1\r\n        $WAITING_SELLER = 2\r\n        $FINISHED = 3\r\n        $REJECTED = 4\r\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Tokens sale\"}).One(\"id\"))\r\n        if $appId == 0{\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        $roleAplSeller = getRoleId(\"role_sale_seller\")\r\n        $currentRole = getRoleId(\"role_sale_manager\")\r\n        if !RoleAccess($currentRole){\r\n            warning \"this action allowed only for role id #\" + $currentRole\r\n        }\r\n\r\n        $sale = DBFind(\"ts_sales\").Where({id:$SaleId}).Row()\r\n        if !$sale{\r\n            warning \"Sale not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1NotificationsClose(\"notific_id\", $NotificId)\r\n        DBUpdate(\"ts_sales\", Int($sale[\"id\"]), {key_id_sale_apl_manager:$key_id, status:$WAITING_SELLER})\r\n\r\n        // role Apla seller notification\r\n        var params map title page string\r\n        title = Sprintf(\"Transfer sale id %v\", $sale[\"id\"])\r\n        params[\"sale_id\"] = $sale[\"id\"]\r\n        page = \"ts_transfer_seller\"\r\n        @1NotificationsSend(\"rid,sender,text_header,page_name,params_map,closure_type,current_role_id\", $roleAplSeller, 2, title, page, params, 1, $currentRole)\r\n\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsTransferReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsTransferReject {\r\n    data {\r\n        Comment string\r\n        RoleParam string\r\n        NotificId int\r\n    }\r\n    func getRoleId(name string) int{\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n    conditions{\r\n        $WAITING_MANAGER = 1\r\n        $WAITING_SELLER = 2\r\n        $FINISHED = 3\r\n        $REJECTED = 4\r\n\r\n        if !($RoleParam == \"role_sale_manager\" || $RoleParam == \"role_sale_seller\"){\r\n            warning \"invalid role parameter\"\r\n        }\r\n        var role noteSaleId int note map\r\n        role = getRoleId($RoleParam)\r\n        if !RoleAccess(role){\r\n            warning \"this action allowed only for role id #\" + role\r\n        }\r\n        note = DBFind(\"@1notifications\").Where({id:$NotificId}).Columns(\"page_params->sale_id,date_start_processing,notification->type\").Row()\r\n        if !note{\r\n            warning \"Notification not found\"\r\n        }\r\n        $needProcessing = note[\"date_start_processing\"] == \"\"\r\n        noteSaleId = Int(note[\"page_params.sale_id\"])\r\n        $sale = DBFind(\"ts_sales\").Where({id:noteSaleId}).Row()\r\n        if !$sale {\r\n            warning \"Sale not found\"\r\n        }\r\n        $saleId = Int($sale[\"id\"])\r\n    }\r\n\r\n    action {\r\n        if $needProcessing {\r\n            @1NotificationsProcess(\"notific_id\", $NotificId)\r\n        }\r\n        @1NotificationsClose(\"notific_id\", $NotificId)\r\n        var sale params map title body string prevKeyId int\r\n        title = Sprintf(\"Sale %v rejected\", $saleId)\r\n        body = $Comment\r\n        params[\"sale_id\"] = $saleId\r\n        sale[\"status\"] = $REJECTED\r\n        if $RoleParam == \"role_sale_manager\"{\r\n            sale[\"key_id_sale_apl_manager\"] = $key_id\r\n            sale[\"manager_reject_comment\"] = $Comment\r\n            sale[\"manager_rejected_at\"] = $time\r\n            prevKeyId = Int($sale[\"key_id_sale_apl_admin\"])\r\n\r\n        }elif $RoleParam == \"role_sale_seller\"{\r\n            sale[\"key_id_seller\"] = $key_id\r\n            sale[\"seller_reject_comment\"] = $Comment\r\n            sale[\"seller_rejected_at\"] = $time\r\n            prevKeyId = Int($sale[\"key_id_sale_apl_manager\"])\r\n        }\r\n\r\n        DBUpdate(\"ts_sales\", $saleId, sale)\r\n        @1NotificationsSend(\"member_id,sender,text_header,text_body,page_name,params_map,closure_type\", prevKeyId, 1, title, body, \"ts_notification\", params, 1)\r\n\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TsTransferSeller",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TsTransferSeller {\r\n    data {\r\n        SaleId int\r\n        NotificId int\r\n    }\r\n    func getRoleId(name string) int{\r\n        var rid int\r\n        rid = Int(EcosysParam(name))\r\n        if rid == 0{\r\n            warning Sprintf(LangRes(\"@1role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n    conditions{\r\n        $WAITING_MANAGER = 1\r\n        $WAITING_SELLER = 2\r\n        $FINISHED = 3\r\n        $REJECTED = 4\r\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:$ecosystem_id, name:\"Tokens sale\"}).One(\"id\"))\r\n        if $appId == 0{\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        $currentRole = getRoleId(\"role_sale_seller\")\r\n        if !RoleAccess($currentRole){\r\n            warning \"this action allowed only for role id #\" + $currentRole\r\n        }\r\n\r\n        $sale = DBFind(\"ts_sales\").Where({id:$SaleId}).Row()\r\n        if !$sale{\r\n            warning \"sale not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1NotificationsClose(\"notific_id\", $NotificId)\r\n        var s transfer map\r\n        s[\"key_id_seller\"] = $key_id\r\n        s[\"seller_transferred_at\"] = $time\r\n        s[\"status\"] = $FINISHED\r\n        DBUpdate(\"ts_sales\", Int($sale[\"id\"]), s)\r\n\r\n        @1TokensSend(\"Recipient,Amount\", $sale[\"key_id_buyer\"], Money($sale[\"amount_apl\"]))\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}