contract MSCreate {
    data {
        BufferId int
        Limit int
        LimitDate string
        LimitTime string
        AmountMax money
        AmountMaxDay money
        AmountMaxMonth money
        Sign int
        Duration int "optional"
        Quorum int "optional"
        Volume int "optional"
        PoaTemplateId int
    }

    func dateAddTime(d, t string) string {
        var dt string
        if Contains(d, "T00:00:00Z") {
            d = Replace(d, "T00:00:00Z", "")
        }
        if Size(t) == 5 {
            dt = Sprintf("%v %v:00", d, t)
        }
        return dt
    }

    conditions {
        $TYPE_ROLE_SINGLE = 1
        $TYPE_ROLE_VOTING = 2
        $TYPE_MEMBER = 3

        $NO_LIMIT = 1
        $ONE_SIGN = 1

        $buf = DBFind("@1buffer_data").Where({id:$BufferId, ecosystem:$ecosystem_id}).Columns("value->type,value->units").Row()
        if !$buf {
            warning "Not set subjects"
        }
        if Int($buf["value.type"]) == 0 {
            warning "Not found type"
        }
        $units = JSONDecode($buf["value.units"])

        if $Limit != $NO_LIMIT{
            $limit = UnixDateTime(dateAddTime($LimitDate, $LimitTime))
            if $limit == 0 {
                warning "Invalid Date or Time"
            }
        }

        $params = ["amount_max", "amount_max_day", "amount_max_month", "amount_day", "amount_month", "date_day", "date_month"]
        $values = [$AmountMax, $AmountMaxDay, $AmountMaxMonth, 0, 0, 0, 0]
        if $Sign == $ONE_SIGN{
            $multi = -1
        }else{
            // перевод голосованием
            if $Duration == 0 || $Quorum == 0|| $Volume == 0 {
                warning "Invalid parameters of voting"
            }
            $params = Append($params, "voting_duration")
            $params = Append($params, "voting_quorum")
            $params = Append($params, "voting_volume")
            $values = Append($values, $Duration)
            $values = Append($values, $Quorum)
            $values = Append($values, $Volume)

            $multi = 1
        }
        if Int($buf["value.type"]) != $TYPE_MEMBER {
            $params = Append($params, "role_id")
        }
    }

    action {
        var table string
        table = Sprintf("@%vkeys", $ecosystem_id)
        DBUpdate(table, $key_id, {multi:$multi})

        // лимиты ролей пишу в таблицу доверенностей
        var m map i lenUnits int
        lenUnits = Len($units)
        m["DateExpiration"] = $LimitDate
        m["TimeExpiration"] = $LimitTime
        m["TemplateId"] = $PoaTemplateId
        m["ParamArr"] = $params
        m["Recipient"] = IdToAddress($key_id)
        m["ValueArr"] = $values

        while i < lenUnits{
            if Int($buf["value.type"]) == $TYPE_MEMBER {
                m["Recipient"] = IdToAddress(AddressToId($units[i]))
            }else{
                m["ValueArr"] = Append($values, $units[i])
            }
            CallContract("@1PoaAdd", m)
            i = i + 1
        }
    }
}
