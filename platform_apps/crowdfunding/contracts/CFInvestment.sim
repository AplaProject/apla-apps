contract CFInvestment {
    data {
        Amount money
        Id int
    }

    conditions{
        $CREATED = 1
        $PUBLISHED = 2
        $STARTED = 3
        $FINISHED = 4
        $FAILED = 5
        $STOPPED = 6
        $REJECTED = 7

        $startup = DBFind("@1cf_startups").Where({id:$Id, deleted_at:0, status:$STARTED}).Row()
        if !$startup{
            warning "Startup not found"
        }
        if $Amount < $startup["minimal_investment"]{
            warning "Too small amount"
        }
        $recipient = AddressToId($startup["wallet"])
        if $recipient == 0{
            warning "Startup wallet not found"
        }
        var w map balance diff money
        w["ecosystem"] = $startup["ecosystem"]
        w["id"] = $startup["wallet"]
        balance = Money(DBFind("@1keys").Where(w).One("amount"))
        diff = balance - Money($startup["current_investment"]) - $Amount
        if diff < 0 {
            warning "You can't invest in this startup since spent planned amount of funds"
        }
    }
    func investorNotify(){
        var sender int header page eco popup string params map
        sender = 1
        header = Sprintf("Investing notification")
        body = Sprintf("Thank you for investing in a startup (%v, %v)", $startup["id"], $startup["name"])
        page = "@1cf_notification"
        popup = "true"
        @1NotificationsSend("member_id,sender,text_header,text_body,page_name,params_map,popup", $key_id, sender, header, body, page, params, popup)
    }
    func updateCurrentInvestment(startupId int){
        var items array total money i lenItems int item map
        items = DBFind("@1cf_investments").Where({startup_id:startupId}).Columns("amount").Limit(10000)
        lenItems = Len(items)
        while i < lenItems{
            item = items[i]
            total = total + Money(item["amount"])
            i = i + 1
        }
        if total > 0{
            DBUpdate("@1cf_startups", startupId, {current_investment:total})
        }
    }
    action {
        var m map
        m["startup_id"] = $startup["id"]
        m["investment_wallet"] = $key_id
        m["amount"] = $Amount
        m["created_at"] = $block_time
        DBInsert("@1cf_investments", m)

        updateCurrentInvestment(Int($startup["id"]))

        @1TokensTransfer("Amount,SenderId,RecipientId,Comment", $Amount, $key_id, $recipient, "startup investment")
        // TODO: проверить работу - после инвестирования показать попап с поздравлениями и оставшемся временем до завершения кампании
        investorNotify()
    }
}