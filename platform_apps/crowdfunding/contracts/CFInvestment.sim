contract CFInvestment {
    data {
        NotificId int
        Amount money
    }

    conditions{
        // получить стартап из оповещения
        $note = DBFind("@1notifications").Where({ecosystem:$ecosystem_id, id:$NotificId}).Columns("id,page_params->startup_id").Row()
        if !$note{
            warning "Notification not found"
        }
        var startupId int
        startupId = Int($note["page_params.startup_id"])
        $startup = DBFind("@1cf_startups").WhereId(startupId).Row()
        if !$startup{
            warning "Startup not found"
        }
        if $Amount < $startup["minimal_investment"]{
            warning "Too small amount"
        }
        $recipient = AddressToId($startup["wallet"])
        if $recipient == 0{
            warning "Startup wallet not found"
        }
    }
    func updateCurrentInvestment(startupId int){
        var items array total money i lenItems int item map
        items = DBFind("@1cf_investments").Where({startup_id:startupId}).Columns("amount").Limit(10000)
        lenItems = Len(items)
        while i < lenItems{
            item = items[i]
            total = total + Money(item["amount"])
            i = i + 1
        }
        if total > 0{
            DBUpdate("@1cf_startups", startupId, {current_investment:total})
        }
    }
    action {
        @1NotificationsClose("notific_id", $NotificId)

        var m map
        m["startup_id"] = $startup["id"]
        m["investment_wallet"] = $key_id
        m["amount"] = $Amount
        m["created_at"] = $block_time
        DBInsert("@1cf_investments", m)

        updateCurrentInvestment(Int($startup["id"]))

        @1TokensTransfer("Amount,SenderId,RecipientId,Comment", $Amount, $key_id, $recipient, "startup investment")
    }
}