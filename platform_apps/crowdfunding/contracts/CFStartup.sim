contract CFStartup {
    data {
        Id int "optional"
        Ecosystem int
        Name string
        Description string
        Wallet string
        WebAddress string
        StartDate string
        StartTime string
        EndDate string
        EndTime string
        Estimated money
        Minimal money
    }
    func dateAddTime(d, t string) string {
        var dt string
        if Contains(d, "T00:00:00Z") {
            d = Replace(d, "T00:00:00Z", "")
        }
        if Size(t) == 5 {
            dt = Sprintf("%v %v:00", d, t)
        }
        return dt
    }
    conditions{
        // для нормальной работы добавить разрешения в @1TokensTransfer
        
        $CREATED = 1
        $PUBLISHED = 2
        $STARTED = 3
        $FINISHED = 4
        $FAILED = 5
        $STOPPED = 6
        $REJECTED = 7

        if $Id > 0 {
            $startup = DBFind("@1cf_startups").Where({id:$Id, deleted_at:0}).Row()
            if !$startup{
                warning "Startup not found"
            }
            if Int($startup["status"]) == $PUBLISHED{
                warning "Editing a published company is not available"
            }
        }
        if DBFind("@1cf_startups").Where({ecosystem:$Ecosystem, deleted_at:0}).Row(){
            warning "A startup for this ecosystem already exists"
        }

        // $key_id - админ $Ecosystem
        var adminRoleId int admin map
        adminRoleId = Int(DBFind("@1parameters").Where({name:"role_admin", ecosystem:$Ecosystem}).One("value"))
        if adminRoleId == 0{
            warning "Admin role not defined in target ecosystem"
        }
        admin = DBFind("@1roles_participants").Where({"role->id":adminRoleId, "member->member_id": $key_id, ecosystem:$Ecosystem, deleted:0}).Row()
        if !admin{
            warning "You must be Admin in target ecosystem"
        }

        $startupKey = AddressToId($Wallet)
        // if DBFind("@1keys").Where({ecosystem:1, id:$Wallet, multi:0}).Row(){
        //     // $Wallet - кошелек с мультиподписями
        //     warning "Wallet for investment in platform ecosystem  must be multisigned"
        // }
        $Wallet = IdToAddress($startupKey)
        // $WalletEscrow = IdToAddress(AddressToId($WalletEscrow))

        var eco token map
        eco = DBFind("@1ecosystems").WhereId($Ecosystem).Row()
        // токен $Ecosystem - без дополнительной эмиссии и без сжигания
        if eco["type_withdraw"] != 1 {
            warning "Ecosystem token must be with out withdraw"
        }
        if eco["type_emission"] != 1 {
            warning "Ecosystem additional emission must be blocked"
        }

        token["token_title"] = eco["token_title"]
        token["emission_amount"] = eco["emission_amount"]
        // TODO: наличие токена на бирже
        $token = token

        $dateStartString = dateAddTime($StartDate, $StartTime)
        $dateStart = UnixDateTime($dateStartString)
        if $dateStart == 0 {
            warning "Invalid starting date"
        }
        $dateEndString = dateAddTime($EndDate, $EndTime)
        $dateEnd = UnixDateTime($dateEndString)
        if $dateEnd == 0 {
            warning "Invalid ending date"
        }
        if $dateStart >= $dateEnd {
            warning "Invalid starting date. Must be earler then ending date"
        }
        if $Estimated < $Minimal {
            warning "Estimated amount less then minimal amount"
        }
        if $Estimated == 0 {
            warning "Estimated amount must be greater then zero"
        }
        $appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Crowdfunding"}).One("id"))
        $downpayment = Money(AppParam($appId, "cf_downpayment", 1))
        var feeWallet string
        feeWallet = AppParam($appId, "cf_fee_wallet", 1)
        $feeKey = AddressToId(feeWallet)

        // проверяю, что ожидаемое количество токенов не больше чем баланс стартапа в экосистеме стартапа
        var balance money
        balance = Money(DBFind("@1keys").Where({ecosystem:$Ecosystem, id:$startupKey}).One("amount"))
        if balance < $Estimated {
            warning "The expected amount of investment should be not less than the amount of emission of dangerous elements in ecosystems IU startup"
        }

        // проверяю, что хватает средств на оплату создания стартапа
        balance = Money(DBFind("@1keys").Where({ecosystem:1, id:$key_id}).One("amount"))
        if $downpayment > balance {
            warning Sprintf("Not enough money to pay for the creation of a startup. Necessary: %v. On balance: %v", FormatMoney(Str($downpayment), 18), FormatMoney(Str(balance), 18))
        }
    }

    action {
        var escrowName escrowWallet string escrowKey int
        // TODO: escrow получать из мультиподписи
        // escrowKey = 
        // escrowName = DBFind("@1members").Where({ecosystem:1, id:escrowKey}).Columns("member_name").One("member_name")
        // if !escrowName{
        //     escrowName = $WalletEscrow
        // }
        var m map
        m["ecosystem"] = $Ecosystem
        m["name"] = $Name
        m["description"] = $Description
        m["wallet"] = $Wallet
        m["escrow_wallet"] = escrowWallet
        m["escrow_name"] = escrowName
        m["web_address"] = $WebAddress
        m["registered_at"] = $block_time
        m["started_at"] = $dateStart
        m["finished_at"] = $dateEnd
        m["estimated_amount"] = $Estimated
        m["minimal_investment"] = $Minimal
        m["token_info"] = $token
        m["date_started"] = $dateStartString
        m["date_finished"] = $dateEndString

        if $Id > 0{
            DBUpdate("@1cf_startups", $Id, m)
        }else{
            m["status"] = $CREATED
            DBInsert("@1cf_startups", m)
            @1TokensTransfer("Amount,SenderId,RecipientId,Comment", $downpayment, $key_id, $feeKey, "crowdfunding downpayment")
        }
    }
}