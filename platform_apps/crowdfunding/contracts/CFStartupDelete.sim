contract CFStartupDelete {
    data {
        Id int
    }
    func inArray(ar array, val string)bool{
        var i lenAr int
        lenAr = Len(ar)
        while i < lenAr{
            if Str(ar[i]) == val{
                return true
            }
            i = i + 1
        }
        return false
    }
    func notifyStartup(body string){
        var sender int header page eco popup string params map
        sender = 1
        header = Sprintf("Startup %v (%v) notification", $startup["name"], $startup["id"])
        page = "@1cf_notification"
        eco = $startup["ecosystem"]
        popup = "true"
        @1NotificationsSend("member_id,sender,text_header,text_body,page_name,params_map,eco_id,popup", $startupKey, sender, header, body, page, params, eco, popup)
    }
    conditions{
        $CREATED = 1
        $PUBLISHED = 2
        $STARTED = 3
        $FINISHED = 4
        $FAILED = 5
        $STOPPED = 6
        $REJECTED = 7


        $startup = DBFind("@1cf_startups").Where({id:$Id, deleted_at:0}).Row()
        if !$startup{
            warning "Startup not found"
        }
        if inArray([$PUBLISHED, $STARTED, $FINISHED], $startup["status"]){
            warning "Deleting a company is not available"
        }


        // $key_id - админ $Ecosystem
        var ecoAdminRoleId adminRoleId ecoId int admin map
        ecoId = Int($startup["ecosystem"])
        ecoAdminRoleId = Int(DBFind("@1parameters").Where({name:"role_admin", ecosystem:ecoId}).One("value"))
        if ecoAdminRoleId == 0{
            warning "Admin role not defined in target ecosystem"
        }
        admin = DBFind("@1roles_participants").Where({"role->id":ecoAdminRoleId, "member->member_id": $key_id, ecosystem:ecoId, deleted:0}).Row()
        if !admin{
            adminRoleId = EcosysParam("role_admin")
            admin = DBFind("@1roles_participants").Where({"role->id":adminRoleId, "member->member_id": $key_id, ecosystem:$ecosystem_id, deleted:0}).Row()
            if !admin{
                warning "Your role must be Admin in target ecosystem or Admin crowdfunding platform"
            }
        }

    }

    action {
        DBUpdate("@1cf_startups", $Id,{deleted_at:$block_time, status:$STOPPED})
        notifyStartup("Your startup was deleted")
    }
}