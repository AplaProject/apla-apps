contract CFStartupStatusUpdate {
    data {}

    func changeStatus(from, to map) {
        var items array i lenItems int it map
        from["deleted_at"] = 0
        items = DBFind($table).Columns("id,started_at,finished_at,name,current_investment,estimated_amount,wallet").Where(from).Limit(10000)

        lenItems = Len(items)
        while i < lenItems{
            it = items[i]
            DBUpdate($table, Int(it["id"]), to)
            if to["status"] == $FINISHED {
                var feeAmount currentAmount estimatedAmount money
                currentAmount = Money(it["current_investment"])
                estimatedAmount = Money(it["estimated_amount"])

                if currentAmount < estimatedAmount {
                    // если не набрана сумма - возврат токенов
                    @1CFStartupRefund("Id", it["id"])
                }else{
                    // переводится комиссия площадки
                    feeAmount = currentAmount / Money(100) * Money($fee)
                    @1TokensTransfer("Amount,SenderId,RecipientId,Comment", feeAmount, AddressToId(it["wallet"]), $feeKey, "crowdfunding fee")
                }
            }
            i = i + 1
        }
    }
    conditions{
        var appId admin int feeWallet string
        appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Crowdfunding"}).One("id"))
        admin = Int(AppParam(appId, "cf_catalog_admin", 1))
        if !RoleAccess(admin){
            warning "This action allowed only for startup catalog admin role"
        }
        $CREATED = 1
        $PUBLISHED = 2
        $STARTED = 3
        $FINISHED = 4
        $FAILED = 5
        $STOPPED = 6
        $REJECTED = 7
        $table = "@1cf_startups"

        $fee = AppParam(appId, "cf_fee", 1)
        feeWallet = AppParam(appId, "cf_fee_wallet", 1)
        $feeKey = AddressToId(feeWallet)
        if $feeKey == 0{
            $feeKey = Int(DBFind("@parameters").Where({ecosystem:1, name:"founder_account"}).One("value"))
        }
    }

    action {
        changeStatus({status:$PUBLISHED, started_at:{"$lte":$block_time}}, {status:$STARTED})
        changeStatus({status:$STARTED, finished_at:{"$lte":$block_time}}, {status:$FINISHED})
    }
}