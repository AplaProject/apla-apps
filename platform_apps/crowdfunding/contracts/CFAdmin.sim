contract CFAdmin {
    data {
        Id int
        Action string
    }
    conditions{
        // для нормальной работы добавить разрешения в @1TokensTransfer

        $startup = DBFind("@1cf_startups").Where({id: $Id, deleted_at:0}).Row()
        if !$startup{
            warning "Startup not found"
        }

        if $Action == "finish"{
            var ecoAdmin eco int
            eco = Int($startup["ecosystem"])
            if eco != $ecosystem_id {
                warning "For this action need run in startup ecosystem"
            }
            ecoAdmin = Int(EcosysParam("role_admin"))
            if ecoAdmin == 0{
                warning "Admin role not defined in target ecosystem"
            }
            if !RoleAccess(ecoAdmin){
                warning "This action allowed only for startup admin"
            }
        }else{
            var appId admin int
            appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Crowdfunding"}).One("id"))
            admin = Int(AppParam(appId, "cf_catalog_admin", 1))
            if !RoleAccess(admin){
                warning "This action allowed only for startup catalog admin"
            }
        }
        $CREATED = 1
        $PUBLISHED = 2
        $STARTED = 3
        $FINISHED = 4
        $FAILED = 5
        $STOPPED = 6
        $REJECTED = 7
        $appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Crowdfunding"}).One("id"))
        $fee = AppParam($appId, "cf_fee", 1)
        var feeWallet string
        feeWallet = AppParam($appId, "cf_fee_wallet", 1)
        $feeKey = AddressToId(feeWallet)
        if $feeKey == 0{
            $feeKey = Int(DBFind("@parameters").Where({ecosystem:1, name:"founder_account"}).One("value"))
        }
        $startupKey = AddressToId($startup["wallet"])
    }
    func notifyStartup(body string){
        // оповещение wallet экосистемы стартапа
        var sender int header page eco popup string params map
        sender = 1
        header = Sprintf("Startup %v (%v) notification", $startup["name"], $startup["id"])
        page = "@1cf_notification"
        eco = $startup["ecosystem"]
        popup = "true"
        @1NotificationsSend("member_id,sender,text_header,text_body,page_name,params_map,eco_id,popup", $startupKey, sender, header, body, page, params, eco, popup)
    }
    func notifyInvestor(investor int, head, body string){
        var params m map
        params["startup_id"] = $startup["id"]
        params["wallet"] = $startup["wallet"]
        m["params_map"] = JSONEncode(params)
        m["member_id"] = investor
        m["closure_type"] = 1
        m["sender"] = 1
        m["eco_id"] = 1
        m["popup"] = "true"
        m["text_body"] = body
        m["page_name"] = "@1cf_notification"
        m["text_header"] = head
        CallContract("@1NotificationsSend", m)
    }
    func sendTokens(){
        var items array i lenItems limit investor startupKey int it map
        startupKey = AddressToId($startup["wallet"])
        limit = 10000
        items = DBFind("@1cf_investments").Where({startup_id: $Id, refund_at:0}).Limit(limit)
        lenItems = Len(items)
        while i < lenItems{
            it = items[i]
            investor = AddressToId(it["investment_wallet"])
            var exists map
            exists = DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:investor}).Row()
            if !exists{
                // создаем кошельки инвесторов в экосистеме стартапа
                var pub string
                pub = PubToHex(DBFind("@1keys").Where({ecosystem:1, id:investor}).One("pub"))
                @1MembershipAdd("memberskeys", pub)
            }
            //  переводим токены с баланса кошелька стартапа в размере инвестирования на кошелек инвестора в экосистеме стартапа, курс 1:1 
            @1TokensTransfer("Amount,SenderId,RecipientId,Comment", Money(it["amount"]), startupKey, investor, "startup investment")

            // инвестиция погашена
            DBUpdate("@1cf_investments", Int(it["id"]), {refund_at: "-1"})
            var body string
            body = Sprintf("Startup %v (%v) was succesfull. Your funds (%v APLA) have been transferred to the startup ecosystem", $startup["name"],$startup["id"], FormatMoney(Str(it["amount"]), 18))
            notifyInvestor(investor, "Succesfull startup", body)
            i = i + 1
        }
        if lenItems == limit{
            sendTokens()
        }
    }
    func refundTokens(){
        var items array i lenItems limit int it map investor startupKey int
        startupKey = AddressToId($startup["wallet"])
        limit = 10000
        items = DBFind("@1cf_investments").Where({startup_id: $Id, refund_at:0}).Limit(limit)
        lenItems = Len(items)
        while i < lenItems{
            it = items[i]
            investor = AddressToId(it["investment_wallet"])
            // возвращаю токены APLA с кошелька стартапа на кошельки инвесторов
            @1TokensTransfer("Amount,SenderId,RecipientId,Comment,Ecosystem", Money(it["amount"]), startupKey, investor, "startup investment refund", 1)

            // время возврата инвестиции
            DBUpdate("@1cf_investments", Int(it["id"]), {refund_at:$block_time})
            var body string
            body = Sprintf("Startup %v (%v) was failed. Your investment (%v APLA) was refunded to you", $startup["name"], $startup["id"], FormatMoney(Str(it["amount"]), 18))
            notifyInvestor(investor, "Startup failed", body)
            i = i + 1
        }
        if lenItems == limit{
            refundTokens()
        }
    }
    action {
        var m map
        if $Action == "stop"{
            m["stopped_at"] = $block_time
            m["status"] = $STOPPED
            notifyStartup("Your startup compaign was stopped")

        }elif $Action == "accept"{
            m["published_at"] = $block_time
            m["status"] = $PUBLISHED
            notifyStartup("Your request for startup compaign creation was accepted")

        }elif $Action == "reject"{
            m["published_at"] = -1
            m["deleted_at"] = $block_time
            m["status"] = $REJECTED
            notifyStartup("Your request for startup compaign creation was rejected")

        }elif $Action == "finish" {
            m["status"] = $FINISHED
            if $startup["status"] == $STARTED{
                notifyStartup("Your startup compaign was finished")
            }

        }elif $Action == "start"{
            m["stopped_at"] = 0
            m["status"] = $PUBLISHED
            notifyStartup("Your startup compaign was published")
        }

        if m {
            DBUpdate("@1cf_startups", $Id, m)
        }

        if m["status"] == $FINISHED{
            var feeAmount currentAmount estimatedAmount balance money w map
            currentAmount = Money($startup["current_investment"])
            estimatedAmount = Money($startup["estimated_amount"])
            w["ecosystem"] = $startup["ecosystem"]
            w["id"] = AddressToId($startup["wallet"])
            balance = Money(DBFind("@1keys").Where(w).One("amount"))

            if currentAmount < estimatedAmount || currentAmount > balance {
                // если не набрана сумма или если собранно больше чем баланс кошелька стартапа - возврат токенов
                refundTokens()

            }else{
                // переводим комиссию площадки
                feeAmount = currentAmount / Money(100) * Money($fee)
                @1TokensTransfer("Amount,SenderId,RecipientId,Comment,Ecosystem", feeAmount, $startupKey, $feeKey, "crowdfunding fee", 1)

                // создаем кошельки инвесторов и переводим им их токены
                sendTokens()
            }
        }
    }
}