contract CFAdmin {
    data {
        Id int
        Action string
    }
    conditions{
        $startup = DBFind("@1cf_startups").Where({id: $Id, deleted_at:0}).Row()
        if !$startup{
            warning "Startup not found"
        }

        // проверка прав на администрирование (role_id == cf_catalog_admin) или
        // если Action==finish проверить что я админ стартапа или владелец кошелька для инвестиций
        if $Action == "finish"{
            var ecoAdmin eco int
            eco = Int($startup["ecosystem"])
            ecoAdmin = Int(DBFind("@1parameters").Where({name:"role_admin", ecosystem:eco}).One("value"))
            if ecoAdmin == 0{
                warning "Admin role not defined in target ecosystem"
            }
            if !DBFind("@1roles_participants").Where({"role->id":ecoAdmin, "member->member_id": $key_id, ecosystem:eco, deleted:0}).Row(){
                if $startup["wallet"] != IdToAddress($key_id){
                    warning "You must be Admin in target ecosystem or owner of wallet investments"
                }
            }
        }else{
            var appId admin int
            appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Crowdfunding"}).One("id"))
            admin = Int(AppParam(appId, "cf_catalog_admin", 1))
            if !RoleAccess(admin){
                warning "This action allowed only for startup catalog admin role"
            }
        }
        $CREATED = 1
        $PUBLISHED = 2
        $STARTED = 3
        $FINISHED = 4
        $FAILED = 5
        $STOPPED = 6
        $REJECTED = 7
        $appId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Crowdfunding"}).One("id"))
        $fee = AppParam($appId, "cf_fee", 1)
        var feeWallet string
        feeWallet = AppParam($appId, "cf_fee_wallet", 1)
        $feeKey = AddressToId(feeWallet)
        if $feeKey == 0{
            $feeKey = Int(DBFind("@parameters").Where({ecosystem:1, name:"founder_account"}).One("value"))
        }
        $startupKey = AddressToId($startup["wallet"])
    }
    func notify(body string){
        // оповещение wallet экосистемы стартапа
        var sender int header page eco popup string params map
        sender = 1
        header = Sprintf("Startup (%v, %v) notification", $startup["id"], $startup["name"])
        page = "@1cf_notification"
        eco = $startup["ecosystem"]
        popup = "true"
        @1NotificationsSend("member_id,sender,text_header,text_body,page_name,params_map,eco_id,popup", $startupKey, sender, header, body, page, params, eco, popup)
    }
    action {
        var m map
        if $Action == "stop"{
            m["stopped_at"] = $block_time
            m["status"] = $STOPPED
            notify("Your startup compaign was stopped")

        }elif $Action == "accept"{
            m["published_at"] = $block_time
            m["status"] = $PUBLISHED
            notify("Your request for startup compaign creation was accepted")

        }elif $Action == "reject"{
            m["published_at"] = -1
            m["status"] = $REJECTED
            notify("Your request for startup compaign creation was rejected")

        }elif $Action == "delete"{
            m["deleted_at"] = $block_time
            m["status"] = $STOPPED
            notify("Your startup compaign was deleted")

        }elif $Action == "finish" && $startup["status"] == $STARTED{
            m["status"] = $FINISHED
            notify("Your startup compaign was finished")

        }elif $Action == "start"{
            m["stopped_at"] = 0
            m["status"] = $PUBLISHED
            notify("Your startup compaign was published")
        }

        if m {
            DBUpdate("@1cf_startups", $Id, m)
        }

        if m["status"] == $FINISHED{
            var feeAmount currentAmount estimatedAmount money
            currentAmount = Money($startup["current_investment"])
            estimatedAmount = Money($startup["estimated_amount"])

            if currentAmount < estimatedAmount {
                // если не набрана сумма - возврат токенов
                @1CFStartupRefund("Id", $Id)
            }else{
                // переводится комиссия площадки
                feeAmount = currentAmount / Money(100) * Money($fee)
                @1TokensTransfer("Amount,SenderId,RecipientId,Comment", feeAmount, $startupKey, $feeKey, "crowdfunding fee")
            }
        }
    }
}