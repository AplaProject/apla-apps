{
    "blocks": [],
    "contracts": [
        {
            "Name": "QAnswer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QAnswer {\n    data {\n        id int \"optional\"\n        operation string\n        question_id int\n        decision string\n        answer_id int\n    }\n    conditions {\n        //question exist && status && aucditoria\n        //make sure to revoting upd\n        //check time to close shit questions you know\n    }\n    action {\n        if $operation == \"CV\" {\n            var a map\n            a[\"member\"] = $key_id\n            a[\"decision\"] = $decision\n            a[\"answer_id\"] = $answer_id\n            a[\"ecosystem\"] = $ecosystem_id\n            a[\"lastmodified\"] = $time\n            a[\"question_id\"] = $question_id\n            DBInsert(\"@1q_answers\", a)\n        }\n        if $operation == \"UV\" {\n            var a map\n            a[\"member\"] = $key_id\n            a[\"decision\"] = $decision\n            a[\"answer_id\"] = $answer_id\n            a[\"ecosystem\"] = $ecosystem_id\n            a[\"lastmodified\"] = $time\n            a[\"question_id\"] = $question_id\n            DBUpdate(\"@1q_answers\", $id, a)\n        }\n    }\n}"
        },
        {
            "Name": "QOperations",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QOperations {\n    data {\n        id int \"optional\"\n        description string\n        question string\n        answer string\n        operation string\n        status int\n        notifications bool \"optional\"\n        hide bool \"optional\"\n        change bool \"optional\"\n    }\n    conditions {\n        //admin only\n        //check deleted\n    }\n    action {\n        //we need time\n        //aucditorium\n        //notifications when start and changing status\n        if $operation == \"C\" {\n            var decision array\n            decision = Split($answer, \",\")\n            var q params map\n            params[\"notifications\"] = $notifications\n            params[\"hide\"] = $hide\n            params[\"change\"] = $change\n            q[\"question\"] = $question\n            q[\"description\"] = $description\n            q[\"answer\"] = JSONEncode(decision)\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"deleted\"] = 0\n            q[\"init\"] = $key_id\n            q[\"status\"] = 0\n            q[\"created_at\"] = $time\n            q[\"params\"] = JSONEncode(params)\n            q[\"lastmodified\"] = $time\n            DBInsert(\"@1questionnaire\", q)\n        }\n        if $operation == \"E\" {\n            var q map\n            q[\"description\"] = $description\n            q[\"question\"] = $question\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"init\"] = $key_id\n            //check status to edit\n            q[\"status\"] = $status\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"AA\" {\n            var decision array\n            decision = DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"answer\")\n            decision = JSONDecode(decision)\n            decision = Append(decision, Str($answer))\n            var q map\n            q[\"answer\"] = JSONEncode(decision)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"AD\" {\n            var decision array\n            decision = DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"answer\")\n            decision = JSONDecode(decision)\n            var buffer string\n            buffer = Join(decision, \",\")\n            if Contains(buffer, Str($answer)) {\n                buffer = Replace(buffer, `,` + Str($answer), ``)\n            }\n            if HasPrefix(buffer, Str($answer)) {\n                buffer = Replace(buffer, Str($answer) + `,`, ``)\n            }\n            decision = Split(buffer, \",\")\n            var q map\n            q[\"answer\"] = JSONEncode(decision)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"T\" {\n            //notification send\n            var q map\n            q[\"init\"] = $key_id\n            q[\"status\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"D\" {\n            //notifications close\n            var q map\n            q[\"init\"] = $key_id\n            q[\"status\"] = 3\n            q[\"deleted\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n    }\n}"
        },
        {
            "Name": "QSandbox",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QSandbox {\n    data {\n        kekc string\n        operation string\n    }\n    conditions {\n\n    }\n    action {\n        if $operation == \"C\" {            \n            var myarr array\n            myarr[0] = \"This is a string\"\n            myarr[1] = \"This is a line\"\n            var json string\n            json = JSONEncode(myarr)\n            var q map\n            q[\"answer\"] = json\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%v\", myarr)\n        }\n        if $operation == \"M\" {\n            var mydata map\n            mydata[\"0\"] = \"test1\"\n            mydata[\"1\"] = \"test2\"\n            var json string\n            json = JSONEncode(mydata)\n            var q map\n            q[\"answer\"] = json\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%v\", json)\n        }\n        if $operation == \"A\" {\n            var answer array\n            answer = DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":1,ecosystem:$ecosystem_id}).One(\"answer\")\n            answer = JSONDecode(answer)\n            answer = Append(answer, \"This is a test\")\n            answer = JSONEncode(answer)\n            //warning Sprintf(\"%s\", answer)\n            var q map\n            q[\"answer\"] = answer\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%s\", q)\n        }\n        if $operation == \"S\" {\n            var answer array\n            answer = DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":1,ecosystem:$ecosystem_id}).One(\"answer\")\n            answer = JSONDecode(answer)\n            var buffer string\n            buffer = Join(answer, \",\")\n            if HasPrefix(buffer, Str($kekc)) {\n                buffer = Replace(buffer, Str($kekc) + `,`, ``)\n            }\n            if Contains(buffer, Str($kekc)) {\n                buffer = Replace(buffer, `,` + Str($kekc), ``)\n            }\n            answer = Split(buffer, \",\")\n            answer = JSONEncode(answer)\n            var q map\n            q[\"answer\"] = answer\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%v\", answer)\n        }\n    }\n}"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "q_answer",
            "Trans": "{\"en\": \"Answer\", \"ru\": \"Ответ\"}"
        },
        {
            "Name": "q_answer_change",
            "Trans": "{\"en\": \"Edit answer options\", \"ru\": \"Редактирование блока ответов\"}"
        },
        {
            "Name": "q_answer_data",
            "Trans": "{\"en\": \"Actual/Total Voters\", \"ru\": \"Проголосовало/Всего участников\"}"
        },
        {
            "Name": "q_answer_graph",
            "Trans": "{\"en\": \"Show data summary\", \"ru\": \"Отобразить статистику\"}"
        },
        {
            "Name": "q_answer_hide",
            "Trans": "{\"en\": \"Hide answer until expiration\", \"ru\": \"Не показывать ответы до окончания\"}"
        },
        {
            "Name": "q_date_expiration",
            "Trans": "{\"en\": \"Expiration at\", \"ru\": \"Дата окончания опроса\"}"
        },
        {
            "Name": "q_date_start",
            "Trans": "{\"en\": \"Created at\", \"ru\": \"Дата создания опроса\"}"
        },
        {
            "Name": "q_description",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "q_hint_answer",
            "Trans": "{\"en\": \"Please create at least one unique answer for your question. Check placeholder if you want to add more. You could always change your answers at edit stage, before bpting not published.\", \"ru\": \"Пожалуйста, создайте хотя бы один вариант ответ. Если вы хотите добавить больше вариантов, то руководствуйтесь шаблоном на этапе создания. Вы всегда можете отредактировать ваши варианты ответов, до того как вопрос будет опубликован.\"}"
        },
        {
            "Name": "q_hint_answer_change",
            "Trans": "{\"en\": \"If you want to add another answer just type it inside input field and click on plus button\", \"ru\": \"Что бы добавить допольнительный вариант ответа, просто впишите его в тестовое поле\"}"
        },
        {
            "Name": "q_hint_answer_placeholder",
            "Trans": "{\"en\": \"Answer One, Answer Two\", \"ru\": \"Первый вариант, Второй вариант\"}"
        },
        {
            "Name": "q_initiator",
            "Trans": "{\"en\": \"Initiator\", \"ru\": \"Инициатор\"}"
        },
        {
            "Name": "q_lastmodified",
            "Trans": "{\"en\": \"Last Modified\", \"ru\": \"Время последнего изменения\"}"
        },
        {
            "Name": "q_new_question",
            "Trans": "{\"en\": \"New Question\", \"ru\": \"Новый вопрос\"}"
        },
        {
            "Name": "q_notifications_send",
            "Trans": "{\"en\": \"Send notifications\", \"ru\": \"Отправить уведомления\"}"
        },
        {
            "Name": "q_poll",
            "Trans": "{\"en\": \"Questionnaire\", \"ru\": \"Опросы\"}"
        },
        {
            "Name": "q_question",
            "Trans": "{\"en\": \"Question\", \"ru\": \"Вопрос\"}"
        },
        {
            "Name": "q_status_admin",
            "Trans": "{\"en\": \"Poll cancelled by admin\", \"ru\": \"Опрос досрочно закончен администратором\"}"
        },
        {
            "Name": "q_status_created",
            "Trans": "{\"en\": \"Successfully created\", \"ru\": \"Успешно создан\"}"
        },
        {
            "Name": "q_status_ended",
            "Trans": "{\"en\": \"Poll ended\", \"ru\": \"Опрос закончен\"}"
        },
        {
            "Name": "q_status_pause",
            "Trans": "{\"en\": \"Poll paused by admin\", \"ru\": \"Опрос приостановлен администратором\"}"
        },
        {
            "Name": "q_status_started",
            "Trans": "{\"en\": \"Poll in progress\", \"ru\": \"Идет опрос\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:$@1q_poll$, Page:@1q_listing, Icon:\"fa fa-question-circle\")"
        }
    ],
    "pages": [
        {
            "Name": "q_listing",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Include(@1pager_header)\nSetTitle($@1q_poll$)\nIf(#role_id#==1){\n    SetVar(permission,1)\n}\nAddToolButton(Title: @1q_new_question, Page: @1q_question_new, Icon: icon-plus).Popup(Header: \"test\", Width: \"50\")\nDBFind(@1questionnaire,src_q).Where({\"ecosystem\":#ecosystem_id#}).Custom(custom_name){\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\n        Div(Class: text-primary){\n            Span(#question#).Style({padding-left: 30px;})\n        }\n    }\n}.Custom(status){\n    If(#status#==0){\n        Span(Class: text-success, Body: LangRes(@1q_status_created))\n    }\n    If(#status#==1){\n        Span(Class: text-success, Body: LangRes(@1q_status_started))\n    }\n    If(#status#==2){\n        Span(Class: text-primary, Body: LangRes(@1q_status_ended))\n    }\n    If(#status#==3){\n        Span(Class: text-warning, Body: LangRes(@1q_status_admin))\n    }\n    If(#status#==4){\n        Span(Class: text-danger, Body: LangRes(@1q_status_pause))\n    }\n}.Custom(time){\n    DateTime(#lastmodified#,HH:MI DD.MM.YYYY)\n}.Custom(test){\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#init#}).Vars(m)\n    SetVar(member_name, #m_member_name#)\n    #init#\n    #member_name#\n}.Custom(start){\n    Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"operation=T,id=#id#\").Style({margin-left: 30px;})\n}.Custom(delete){\n    Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"operation=D,id=#id#\").Style({margin-left: 30px;})\n}.Custom(edit){\n    Span(Class: pull-right){\n        LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1q_question_edit, PageParams: \"q_id=#id#\")\n    }\n}.Count(q)\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        If(#q#>0){\n            Div(list-group-item){\n                Table(Source: src_q)\n            }\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1questionnaire).Where({id:#q_id#}).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,status,params->hide,params->change\").Vars(question)\nDBFind(@1q_answers).Where({question_id:#question_id#}).Count(answers)\nDBFind(@1q_answers).Where({question_id:#question_id#, member:#key_id#}).Vars(your_answer).Count(a)\nDBFind(@1members).Where({ecosystem:#question_ecosystem#}).Count(total)\nDiv(content-wrapper){  \n    SetTitle(#question_question#)\n    Div(breadcrumb){\n        LinkPage(Body: $@1q_poll$, Page: @1q_listing)\n        Span(/,mh)\n        Span(Class: text-muted, Body: #question_question#)\n    }\n\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(list-group-item text-center){\n                    P(Class: h3 text-bold m0, Body: #question_question#)\n                }\n                If(`#question_description#`!=\"\"){\n                    Div(list-group-item text-center t5){\n                        Div(row){\n                            Div(col-md-12 text-center){\n                                #question_description#\n                            }\n                        }\n                    }\n                }\n                Div(list-group-item text-center t5){\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes(@1q_date_start)\n                        }\n                        Div(col-md-6 text-left){\n                            DateTime(#question_created_at#,HH:MI DD.MM.YYYY)\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes(@1q_lastmodified)\n                        }\n                        Div(col-md-6 text-left){\n                            DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY)\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes(@1q_date_expiration)\n                        }\n                        Div(col-md-6 text-left){\n                            DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY)\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                           Span(Body: LangRes(@1status)\n                        }\n                        Div(col-md-6 text-left){\n                            If(#question_status#==0){\n                                Span(Class: text-success, Body: LangRes(@1q_status_created))\n                            }\n                            If(#question_status#==1){\n                                Span(Class: text-success, Body: LangRes(@1q_status_started))\n                            }\n                            If(#question_status#==2){\n                                Span(Class: text-primary, Body: LangRes(@1q_status_ended))\n                            }\n                            If(#question_status#==3){\n                                Span(Class: text-warning, Body: LangRes(@1q_status_admin))\n                            }\n                            If(#question_status#==4){\n                                Span(Class: text-danger, Body: LangRes(@1q_status_pause))\n                            }\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                           Span(Body: LangRes(@1q_answer_data)\n                        }\n                        Div(col-md-6 text-left){\n                            #answers# / #total#\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-12 text-center){ \n                            If(#question_params_hide#==false){\n                                Button(Body: LangRes(@1q_answer_graph), Page: @1q_question, Class: btn).Popup(Header: $@1q_answer_graph$ / #question_question#, Width: \"50\")\n                            }\n                        }\n                    }\n                }\n                If(#question_status#!=0){\n                    Div(list-group-item text-center t5){\n                        Div(row){\n                            If(#a#>0){\n                                Div(col-sm-6 text-right){\n                                    Input(Name: change, Type: checkbox, Value: true, Disabled: true)\n                                }\n                                Div(col-sm-6 text-left){\n                                    Span(Class: text-bold, Body: #your_answer_decision#)\n                                }.Style(margin-top: 10px;)\n                            }\n                            If(#question_status#==1){\n                                Div(col-md-12 text-center){\n                                    ArrayToSource(src, #question_answer#)\n                                    ForList(Source: src, Index:ind){\n                                        If(#a#==0){\n                                            Button(Body: #value#, Page: @1q_question, Class: btn btn-primary ml-sm, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"question_id=#question_id#, answer_id=#ind#, decision=#value#, operation=CV\")\n                                        }\n                                        If(And(#question_params_change#==true,#a#>0)){\n                                            Button(Body: #value#, Page: @1q_question, Class: btn btn-primary ml-sm, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"id=#your_answer_id#, question_id=#question_id#, answer_id=#ind#, decision=#value#, operation=UV\")\n                                        }\n                                    }     \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1questionnaire).Where({ecosystem:#ecosystem_id#, id:#q_id#}).Vars(question)\nArrayToSource(src, #question_answer#)\nData(src_status,\"status_id,status_name\"){\n    1,$@1q_status_started$\n    3,$@1q_status_admin$\n    4,$@1q_status_pause$\n}\nIf(Or(#question_status#==0, #question_status#==4)){\n    SetVar(editable,1)\n}\nSetVar(time,DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY))\n\nDiv(content-wrapper){\n    SetTitle(#question_question#)\n    Div(Class: breadcrumb){\n        LinkPage($@1q_poll$, @1q_listing)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #question_question#)\n    }\n    \n    Form(){\n        Div(form-group){\n            Label($@1title$)\n            If(#editable#==1){\n                Input(Name: question, Value: #question_question#)\n            }.Else{\n                Input(Name: question, Value: #question_question#, Disabled: true)\n            }\n        }\n        Div(form-group){\n            Label($@1q_description$)\n            If(#editable#==1){\n                Input(Type: textarea, Name: description, Value: #question_description#).Style(resize: vertical; min-height: 6em;)\n            }.Else{\n                Input(Type: textarea, Name: description, Value: #question_description#, Disabled: true).Style(resize: vertical; min-height: 6em;)\n            }\n        }\n        Div(form-group){\n            Label($@1q_answer_change$)\n            If(#editable#==1){\n                Div(input-group mb-sm){\n                    Input(Name: answer)\n                    Div(input-group-btn){\n                        Button(Class: btn btn-primary fa fa-plus, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params:\"id=#question_id#, operation=AA\")\n                    }\n                }\n            }\n            ForList(Source: src, Index:ind){\n                If(#editable#==1){\n                    Button(Body: Span(Class: fa fa-remove) #value#, Page: @1q_question_edit, Class: btn btn-primary ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"id=#question_id#, answer=#value#, operation=AD\")\n                }.Else{\n                    Button(Body: #value#, Class: btn btn-primary ml-sm)\n                }\n            } \n        }\n        Div(form-group){\n            Label($@1status$)\n            Select(Name: status, Source: src_status, NameColumn: status_name, ValueColumn: status_id)\n        }\n        Div(form-group){\n            Label($@1q_lastmodified$)\n            Input(Name: lastmodified,  Value: #time#, Disabled: true)\n        }\n        Div(form-group){\n            Button(Class: btn btn-primary, Body: $@1save$, Contract: @1QOperations, Page: @1q_listing, PageParams: \"q_id=#question_id#\", Params: \"id=#question_id#,operation=E\")\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_new",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Data(bool,\"value,name\"){\n        0,$@1ex_unavaliable$\n        1,$@1ex_avaliable$\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Title){\n                Span(Body: LangRes(@1title)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: question, Type: text)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Description){\n                Span(Body: LangRes(@1q_description)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-sm-9){\n            Input(Type: textarea, Name: description, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Answer){\n                Span(Body: LangRes(@1q_answer)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-sm-9){\n            Input(Type: text, Name: answer, Value: \"\", Placeholder: $@1q_hint_answer_placeholder$)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1q_hint_answer))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: end_date){\n                LangRes(@1date_end)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-md-9 text-left){\n            Div(row){\n                Div(col-md-6){\n                    Input(Name: end_date, Type: date)\n                }\n                Div(col-md-6){\n                    Input(Name: end_time, Type: time)\n                }\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Notifications){\n                Span(Body: LangRes(@1q_notifications_send)\n                Span(Class: text-danger, Body:*)\n            }      \n        }\n        Div(col-sm-9){\n            Input(Name: notifications, Type: checkbox, Value: false)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: AnswerHide){\n                Span(Body: LangRes(@1q_answer_hide)\n                Span(Class: text-danger, Body:*)\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: hide, Type: checkbox, Value: false)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: AnswerChange){\n                Span(Body: LangRes(@1q_answer_change)\n                Span(Class: text-danger, Body:*)\n            }\n            \n        }\n        Div(col-sm-9){\n            Input(Name: change, Type: checkbox, Value: false)\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_listing)\n            Button(Body: LangRes(@1create), Page: @1q_listing, Class: btn pull-right btn-primary, Contract: @1QOperations, Params: \"operation=C\")\n        }\n    }\n}",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "q_answers",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "questionnaire",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}