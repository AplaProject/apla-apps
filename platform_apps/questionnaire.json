{
    "name": "Questionnaire",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "q_profile",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1q_profile)\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"Questionnaire\"}).Vars(application)\r\nSetVar(admin_roles, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: q_admin_role))\r\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": #ecosystem_id#, \"$and\": [\"role->id\": {\"$in\": [#admin_roles#]}, \"role->id\": #role_id#], \"member->member_id\": #key_id#, \"deleted\": 0}).Vars(admin_access)\r\nIf(#admin_access_id# > 0){\r\n    SetVar(permission, 1)\r\n}\r\n\r\nDBFind(@1q_list,src_q).Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0, \"status\": 1}).Order({\"created_at\": 1}).Limit(5).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,expired,status,params->hide,params->change,au_groups,au_roles\").Custom(custom_name){\r\n   If(#permission#==1){\r\n        LinkPage(Class: h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\r\n            Div(Class: text-primary text-left){\r\n                Span(Body:#question#).Style({padding-left: 10px;})\r\n            }\r\n        }\r\n    }.Else{\r\n        If(#status#==1){\r\n            If(And(#au_groups#==[0],#au_roles#==[0])){\r\n                LinkPage(Class:h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\r\n                    Div(Class: text-primary text-left){\r\n                        Span(Body:#question#).Style({padding-left: 10px;})\r\n                    }\r\n                }\r\n            }.Else{\r\n                DBFind(@1groups_participants).Where({\"member->member_id\": #key_id#, \"deleted\": 0, \"ecosystem\": #ecosystem_id#, \"groups_info->id\": {\"$in\": [0]]}}).Count(gp)\r\n                DBFind(@1roles_participants).Where({\"member->member_id\": #key_id#, \"deleted\": 0, \"ecosystem\": #ecosystem_id#, \"role->id\": {\"$in\": [0]]}}).Count(rl)\r\n                If(Or(#gp#>0,#rl#>0)){\r\n                    LinkPage(Class: h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\r\n                        Div(Class: text-primary text-left){\r\n                            Span(Body:#question#).Style({padding-left: 10px;})\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Div(Class: text-left){\r\n                        Span(Class: text-left, Body:#question#).Style({padding-left: 10px;})\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(Class: text-left){\r\n                Span(Class: text-left, Body:#question#).Style({padding-left: 10px;})\r\n            }\r\n        }\r\n    }\r\n}.Custom(initiator){\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem#, id: #init#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n    Span(#member_name#)\r\n}.Custom(stats){\r\n    Span(Class: pull-right){\r\n        If(Or(#admin_access_id# > 0, #params.hide# ==true)){\r\n            Button(Body: Em(Class: fa fa-comment), Class: btn-xs btn-link, Page: @1q_question_graph, PageParams: \"q_id=#id#,q_page=#this_page#\").Style({margin-left: 30px;}).Popup(Header: $@1q_answer_graph$ / #question#, Width: \"50\")\r\n        }\r\n    }\r\n}.Count(que)\r\n\r\nIf(#que#>0){\r\n    Table(Source: src_q, Columns: \"$@1q_question$=custom_name,$@1q_initiator$=initiators,=stats\").Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title: $@1q_poll$, Page: @1q_listing, Icon: \"icon-question\")",
            "Type": "menu"
        },
        {
            "Name": "q_answer",
            "Trans": "{\"en\": \"Answer\", \"ru\": \"Ответ\"}",
            "Type": "languages"
        },
        {
            "Name": "q_answer_change",
            "Trans": "{\"en\": \"Revoting\", \"ru\": \"Изменение ответов\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "q_answer_data",
            "Trans": "{\"en\": \"Voted\", \"ru\": \"Проголосовало\"}",
            "Type": "languages"
        },
        {
            "Name": "q_answer_graph",
            "Trans": "{\"en\": \"Show data summary\", \"ru\": \"Отобразить статистику\"}",
            "Type": "languages"
        },
        {
            "Name": "q_answer_hide",
            "Trans": "{\"en\": \"Hide answers before the end of the poll\", \"ru\": \"Не показывать ответы до окончания опроса\"}",
            "Type": "languages"
        },
        {
            "Name": "q_answer_member",
            "Trans": "{\"en\": \"Voting member\", \"ru\": \"Участник голосования\"}",
            "Type": "languages"
        },
        {
            "Name": "q_audience",
            "Trans": "{\"en\": \"Audience\", \"ru\": \"Аудитория\"}",
            "Type": "languages"
        },
        {
            "Name": "q_change",
            "Trans": "{\"en\": \"Change answer\", \"ru\": \"Изменить ответ\"}",
            "Type": "languages"
        },
        {
            "Name": "q_date_expiration",
            "Trans": "{\"en\": \"Ending date\", \"ru\": \"Дата окончания\"}",
            "Type": "languages"
        },
        {
            "Name": "q_date_lastmodified",
            "Trans": "{\"en\": \"Last Modified\", \"ru\": \"Последнее изменение\"}",
            "Type": "languages"
        },
        {
            "Name": "q_date_start",
            "Trans": "{\"en\": \"Created at\", \"ru\": \"Дата создания\"}",
            "Type": "languages"
        },
        {
            "Name": "q_description",
            "Trans": "{\"en\": \"Question\", \"ru\": \"Вопрос\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_blank",
            "Trans": "{\"en\": \"This value can't be blank\", \"ru\": \"Это значение не может быть пустым\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_cannot",
            "Trans": "{\"en\": \"You can't interact with this poll. You don't have access or the poll is already deleted\", \"ru\": \"Вы не можете взаимодействовать с этим опросом. Возможно у вас нет доступа или опрос уже удален\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_expdate",
            "Trans": "{\"en\": \"Incorrect expiration date\", \"ru\": \"Неверная дата окончания опроса\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_global_d",
            "Trans": "{\"en\": \"You can't manage global permissions\", \"ru\": \"Вы не можете управлять глобальными ролями\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_groups",
            "Trans": "{\"en\": \"This group is already added\", \"ru\": \"Эта группа уже добавлена\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_revoting",
            "Trans": "{\"en\": \"You're unable to change your answer during this poll\", \"ru\": \"Вы не можете изменить свой вариант ответа в рамках этого опроса\"}",
            "Type": "languages"
        },
        {
            "Name": "q_error_roles",
            "Trans": "{\"en\": \"This role is already added\", \"ru\": \"Эта роль уже добавлена\"}",
            "Type": "languages"
        },
        {
            "Name": "q_hide",
            "Trans": "{\"en\": \"Show real-time results\", \"ru\": \"Показывать результаты\"}\r\n\r\n",
            "Type": "languages"
        },
        {
            "Name": "q_hint_answer",
            "Trans": "{\"en\": \"Please create at least one answer for your question. Check placeholder if you want to add more. You can change your answers while the poll is not published\", \"ru\": \"Пожалуйста, создайте хотя бы один вариант ответа. Если вы хотите добавить больше вариантов, руководствуйтесь шаблоном на этапе создания. Вы можете редактировать ваши варианты ответов, пока опрос не опубликован\"}",
            "Type": "languages"
        },
        {
            "Name": "q_hint_answer_change",
            "Trans": "{\"en\": \"If you want to add another answer just type it into the input field and click the Plus button\", \"ru\": \"Если вы хотите добавить другой вариант ответа, просто впишите его в текстовое поле и нажмите кнопку Плюс\"}",
            "Type": "languages"
        },
        {
            "Name": "q_hint_answer_placeholder",
            "Trans": "{\"en\": \"Answer One; Answer Two; Answer Three\", \"ru\": \"Первый вариант; Второй вариант; Третий вариант\"}",
            "Type": "languages"
        },
        {
            "Name": "q_hint_answer_revoting",
            "Trans": "{\"en\": \"You can change your answer\", \"ru\": \"Вы можете изменить свой вариант ответа\"}",
            "Type": "languages"
        },
        {
            "Name": "q_initiator",
            "Trans": "{\"en\": \"Initiator\", \"ru\": \"Инициатор\"}",
            "Type": "languages"
        },
        {
            "Name": "q_lastmodified",
            "Trans": "{\"en\": \"Last Modified\", \"ru\": \"Время последнего изменения\"}",
            "Type": "languages"
        },
        {
            "Name": "q_new_question",
            "Trans": "{\"en\": \"New Question\", \"ru\": \"Новый вопрос\"}",
            "Type": "languages"
        },
        {
            "Name": "q_no_questions",
            "Trans": "{\"en\": \"There are no polls available yet\", \"ru\": \"Доступных для участия опросов не найдено\"}",
            "Type": "languages"
        },
        {
            "Name": "q_notifications_send",
            "Trans": "{\"en\": \"Notify users if poll is public\", \"ru\": \"Уведомить, если опрос публичный\"}",
            "Type": "languages"
        },
        {
            "Name": "q_poll",
            "Trans": "{\"en\": \"Questionnaire\", \"ru\": \"Опросы\"}",
            "Type": "languages"
        },
        {
            "Name": "q_question",
            "Trans": "{\"en\": \"Title\", \"ru\": \"Заголовок\"}",
            "Type": "languages"
        },
        {
            "Name": "q_question_everyone",
            "Trans": "{\"en\": \"Everyone\", \"ru\": \"Доступно всем\"}",
            "Type": "languages"
        },
        {
            "Name": "q_question_groups",
            "Trans": "{\"en\": \"Audience: Groups Access\", \"ru\": \"Аудитория: доступ по группам\"}",
            "Type": "languages"
        },
        {
            "Name": "q_question_logs",
            "Trans": "{\"en\": \"Full Detailed Answer Log\", \"ru\": \"Полная статистика ответов\"}",
            "Type": "languages"
        },
        {
            "Name": "q_question_nobody",
            "Trans": "{\"en\": \"Noone from the list\", \"ru\": \"Никто из списка\"}",
            "Type": "languages"
        },
        {
            "Name": "q_question_roles",
            "Trans": "{\"en\": \"Audience: Roles Access\", \"ru\": \"Аудитория: доступ по ролям\"}",
            "Type": "languages"
        },
        {
            "Name": "q_status",
            "Trans": "{\"en\": \"Poll status\", \"ru\": \"Статус опроса\"}",
            "Type": "languages"
        },
        {
            "Name": "q_status_admin",
            "Trans": "{\"en\": \"Cancelled by admin\", \"ru\": \"Отменён администратором\"}",
            "Type": "languages"
        },
        {
            "Name": "q_status_created",
            "Trans": "{\"en\": \"Successfully created\", \"ru\": \"Успешно создан\"}",
            "Type": "languages"
        },
        {
            "Name": "q_status_ended",
            "Trans": "{\"en\": \"Ended\", \"ru\": \"Закончен\"}",
            "Type": "languages"
        },
        {
            "Name": "q_status_pause",
            "Trans": "{\"en\": \"Paused by admin\", \"ru\": \"Приостановлен администратором\"}",
            "Type": "languages"
        },
        {
            "Name": "q_status_started",
            "Trans": "{\"en\": \"In progress\", \"ru\": \"Идёт опрос\"}",
            "Type": "languages"
        },
        {
            "Name": "q_answers",
            "Columns": "[\r\n    {\r\n        \"name\":\"answer_id\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"decision\",\r\n        \"type\":\"text\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"ecosystem\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"lastmodified\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"member\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"question_id\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QAnswer\\\")\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1QAnswer\\\")\", \"update\": \"ContractAccess(\\\"@1QAnswer\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "q_list",
            "Columns": "[\r\n    {\r\n        \"name\":\"answer\",\r\n        \"type\":\"json\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"au_groups\",\r\n        \"type\":\"json\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"au_roles\",\r\n        \"type\":\"json\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"created_at\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"false\"\r\n    },\r\n    {\r\n        \"name\":\"deleted\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"description\",\r\n        \"type\":\"text\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"ecosystem\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"expired\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\",\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"init\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"lastmodified\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\",\\\"@1QAnswer\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"params\",\r\n        \"type\":\"json\",\r\n        \"conditions\":\"false\"\r\n    },\r\n    {\r\n        \"name\":\"question\",\r\n        \"type\":\"text\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\")\"\r\n    },\r\n    {\r\n        \"name\":\"status\",\r\n        \"type\":\"number\",\r\n        \"conditions\":\"ContractAccess(\\\"@1QOperations\\\",\\\"@1QAnswer\\\")\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1QOperations\\\")\", \"update\": \"ContractAccess(\\\"@1QOperations\\\",\\\"@1QAnswer\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "config",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "{\r\n    \"name\": \"Questionnaire\",\r\n    \"conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n    \"data\": [\r\n        {\r\n            \"Name\": \"default_menu\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"MenuItem(Title: $@1q_poll$, Page: @1q_listing, Icon: \\\"icon-question\\\")\",\r\n            \"Type\": \"menu\"\r\n        },\r\n        {\r\n            \"Name\": \"q_admin_role\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"0\",\r\n            \"Type\": \"app_params\"\r\n        }\r\n    ]\r\n}",
            "Type": "app_params"
        },
        {
            "Name": "q_admin_role",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "q_listing",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1q_listing).(this_table, @1q_list)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1q_poll$)\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"Questionnaire\"}).Vars(application)\r\nSetVar(admin_roles, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: q_admin_role))\r\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": #ecosystem_id#, \"$and\": [\"role->id\": {\"$in\": [#admin_roles#]}, \"role->id\": #role_id#], \"member->member_id\": #key_id#, \"deleted\": 0}).Vars(admin_access)\r\nIf(#admin_access_id# > 0){\r\n    SetVar(permission,1)\r\n}\r\nIf(#permission#==1){\r\n    AddToolButton(Title: $@1q_new_question$, Page: @1q_question_new, Icon: icon-plus).Popup(Header: $@1q_new_question$, Width: \"60\")\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"deleted\": 0, {\"$or\": [{\"question\": {\"$ilike\": \"#search#\"}}]}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"deleted\": 0})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1q_question))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#,src_q).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,expired,status,params->hide,params->change,au_groups,au_roles\").Custom(custom_name){\r\n    If(#permission#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\r\n            Div(Class: text-primary){\r\n                Span(#question#)\r\n            }\r\n        }\r\n    }.Else{\r\n        If(#status#==1){\r\n            If(And(#au_groups#==[0],#au_roles#==[0])){\r\n                LinkPage(Class: #style_link# h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\r\n                    Div(Class: text-primary){\r\n                        Span(#question#)\r\n                    }\r\n                }\r\n            }.Else{\r\n                DBFind(@1groups_participants).Where({\"member->member_id\": #key_id#, \"deleted\": 0, \"ecosystem\": #ecosystem_id#, \"groups_info->id\": {\"$in\": #au_groups#}}).Count(gp)\r\n                DBFind(@1roles_participants).Where({\"member->member_id\": #key_id#, \"deleted\": 0, \"ecosystem\": #ecosystem_id#, \"role->id\": {\"$in\": #au_roles#}}).Count(rl)\r\n                If(And(#gp#>0,#rl#>0)){\r\n                    LinkPage(Class: #style_link# h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\r\n                        Div(Class: text-primary){\r\n                            Span(#question#)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Span(#question#)\r\n                }\r\n            }\r\n        }.Else{\r\n            Span(#question#)\r\n        }\r\n    }\r\n}.Custom(custom_status){\r\n    If(#status#==0){\r\n        Span(Class: text-success, Body: LangRes(@1q_status_created))\r\n    }\r\n    If(#status#==1){\r\n        Span(Class: text-success, Body: LangRes(@1q_status_started))\r\n    }\r\n    If(#status#==2){\r\n        Span(Class: text-primary, Body: LangRes(@1q_status_ended))\r\n    }\r\n    If(#status#==3){\r\n        Span(Class: text-warning, Body: LangRes(@1q_status_admin))\r\n    }\r\n}.Custom(time){\r\n    P(Class:h6 m0, Body: DateTime(#created_at#,HH:MI DD.MM.YYYY))\r\n    P(Class:h6 m0, Body: DateTime(#expired#,HH:MI DD.MM.YYYY))\r\n}.Custom(initiator){\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem#, \"id\":#init#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n    Span(#member_name#)\r\n}.Custom(hidden){\r\n    If(#params.hide#==true){\r\n        Span(Class: fa fa-check fa-1x)\r\n    }.Else{\r\n        Span(Class:fa fa-times fa-1x)\r\n    }\r\n}.Custom(change){\r\n    If(#params.change#==true){\r\n        Span(Class: fa fa-check fa-1x)\r\n    }.Else{\r\n        Span(Class:fa fa-times fa-1x)\r\n    }\r\n}.Custom(ops){\r\n    Span(Class: pull-right){\r\n        If(#permission#==1){\r\n            If(#status#==0){\r\n                LinkPage(Body: Em(Class: fa fa-edit), Class: btn btn-link, Page: @1q_question_edit, PageParams: \"q_id=#id#\")\r\n            }\r\n            DBFind(@1q_answers).Where({\"question_id\": #id#}).Count(answers)\r\n            If(#answers#>0){\r\n                Button(Body: Em(Class: fa fa-bars), Class: btn btn-link, Page: @1q_question_log, PageParams: \"q_id=#id#\").Popup(Header: #question#, Width: \"50\")\r\n            }\r\n            If(#status#==0){\r\n                Button(Body: Em(Class: fa fa-play), Class: btn btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"Operation=T,Id=#id#\")\r\n            }\r\n            If(#status#==1){\r\n                Button(Body: Em(Class: fa fa-stop), Class: btn btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"Operation=Z,Id=#id#\")\r\n            }\r\n            Button(Body: Em(Class: fa fa-info-circle), Class: btn btn-link, Page: @1q_question_graph, PageParams: \"q_id=#id#\").Popup(Header: $@1q_answer_graph$ / #question#, Width: \"50\")\r\n            Button(Body: Em(Class: fa fa-trash-o), Class: btn btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"Operation=D,Id=#id#\")\r\n        }\r\n    }\r\n}.Count(q)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#q#>0){\r\n                Table(Source: src_q, Columns: \"$@1q_question$=custom_name,$@1q_initiator$=initiator,$@1q_status$=custom_status,$@1q_change$=change,$@1q_date_start$/$@1q_date_expiration$=time,=ops\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: $@1q_no_questions$)\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "q_question",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(@1notifications).Where({id:#notific_id#}).Columns(\"page_params->id\").Vars(prefix)\r\n    SetVar(q_id,#prefix_page_params_id#)\r\n}\r\nDBFind(@1q_list).Where({\"id\": #q_id#}).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,expired,status,params->hide,params->change\").Vars(question)\r\nDBFind(@1q_answers).Where({\"question_id\": #question_id#}).Count(answers)\r\nDBFind(@1q_answers).Where({\"question_id\": #question_id#, member:#key_id#}).Vars(your_answer).Count(a)\r\nDBFind(@1members).Where({\"ecosystem\": #question_ecosystem#}).Count(total)\r\n\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"Questionnaire\"}).Vars(application)\r\nSetVar(admin_roles, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: q_admin_role))\r\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": #ecosystem_id#, \"$and\": [\"role->id\": {\"$in\": [#admin_roles#]}, \"role->id\": #role_id#], \"member->member_id\": #key_id#, \"deleted\": 0}).Vars(admin_access)\r\nIf(#admin_access_id# > 0){\r\n    SetVar(permission,1)\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Div(row mt-sm){\r\n        Div(col-lg-10 col-lg-offset-1){\r\n            Form(panel panel-primary){\r\n                Div(list-group-item text-center){\r\n                    P(Class: h3 text-bold m0, Body: #question_description#)\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 text-right){\r\n                            Label(For: Date Start){\r\n                                Span(Body: LangRes(@1q_date_start):)\r\n                            }\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            DateTime(#question_created_at#,HH:MI DD.MM.YYYY)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 text-right){\r\n                            Label(For: Last Modified){\r\n                                Span(Body: LangRes(@1q_lastmodified):)\r\n                            }\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 text-right){\r\n                            Label(For: Date Ending){\r\n                                Span(Body: LangRes(@1q_date_expiration):)\r\n                            }\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            DateTime(#question_expired#,HH:MI DD.MM.YYYY)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 text-right){\r\n                            Label(For: Status){\r\n                                Span(Body: LangRes(@1status):)\r\n                            }\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            If(#question_status#==0){\r\n                                Span(Class: text-success, Body: LangRes(@1q_status_created))\r\n                            }\r\n                            If(#question_status#==1){\r\n                                Span(Class: text-success, Body: LangRes(@1q_status_started))\r\n                            }\r\n                            If(#question_status#==2){\r\n                                Span(Class: text-primary, Body: LangRes(@1q_status_ended))\r\n                            }\r\n                            If(#question_status#==3){\r\n                                Span(Class: text-warning, Body: LangRes(@1q_status_admin))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#question_status#!=0){\r\n                    Div(list-group-item text-center t5){\r\n                        If(#a#>0){\r\n                             Div(row mb){\r\n                                Div(col-sm-6 mt-sm text-right){\r\n                                    Label(For: Notifications){\r\n                                        Span(Body: LangRes(@1q_answer)\r\n                                    }\r\n                                }\r\n                                Div(col-sm-6 mt-sm text-left){\r\n                                    Input(Name: change, Type: checkbox, Value: true, Disabled: true, Class: m0, Placeholder: #your_answer_decision#)\r\n                                }\r\n                            }\r\n                        }\r\n                        If(And(#question_params_change#==true,#a#>0,#question_status#==1)){\r\n                            Div(row mb-sm){\r\n                                Div(col-md-12 text-center){\r\n                                    Span(Class: h6, Body: LangRes(@1q_hint_answer_revoting))\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#question_status#==1){\r\n                            Div(row){\r\n                                Div(col-md-12 text-center){\r\n                                    ArrayToSource(src, #question_answer#)\r\n                                    ForList(Source: src, Index:ind){\r\n                                        If(#a#==0){\r\n                                            Button(Body: #value#, Page: @1q_question, Class: btn btn-primary ml-sm mr-sm, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"QuestionId=#question_id#,AnswerId=#ind#,Decision=#value#,Operation=CV\")\r\n                                        }\r\n                                        If(And(#question_params_change#==true,#a#>0)){\r\n                                            Button(Body: #value#, Page: @1q_question, Class: btn btn-primary ml-sm mr-sm, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"Id=#your_answer_id#,QuestionId=#question_id#,AnswerId=#ind#,Decision=#value#,Operation=UV\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "q_question_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1q_list).Where({\"ecosystem\": #ecosystem_id#, id:#q_id#}).Vars(question)\r\nDBFind(@1roles,src_rid).Where({\"ecosystem\": #ecosystem_id#}).Count(r)\r\nDBFind(@1groups,src_gp).Where({\"ecosystem\": #ecosystem_id#}).Count(g)\r\n\r\nArrayToSource(src, #question_answer#)\r\n\r\nIf(And(#question_au_groups#==[0],#question_au_roles#==[0])){\r\n    SetVar(access,$@1q_question_everyone$)\r\n}.Else{\r\n    SetVar(access,$@1q_question_nobody$)\r\n}\r\n\r\nIf(#question_status#==0){\r\n    SetVar(editable,1)\r\n}\r\nSetVar(time,DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY))\r\n\r\nSetTitle(#question_question#)\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1q_poll$, Page: @1q_listing)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    Span(Class: text-muted, Body: #question_question#)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nDiv(content-wrapper){\r\n    Form(){\r\n        Div(form-group){\r\n            Label($@1title$)\r\n            If(#editable#==1){\r\n                Input(Name: question, Value: #question_question#)\r\n            }.Else{\r\n                Input(Name: question, Value: #question_question#, Disabled: true)\r\n            }\r\n        }\r\n        Div(form-group){\r\n            If(#editable#==1){\r\n            Label($@1q_description$)\r\n                Input(Type: textarea, Name: description, Value: #question_description#).Style(resize: vertical; min-height: 6em;)\r\n            }\r\n        }\r\n        If(#g#>0){\r\n            Div(form-group){\r\n            Label($@1q_question_groups$)\r\n                If(#editable#==1){\r\n                    Div(input-group mb-sm){\r\n                        Select(Name: au_groups, Source: src_gp, NameColumn: group_name, ValueColumn: id)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params:\"Id=#question_id#,Operation=GA\")\r\n                        }\r\n                    }\r\n                }\r\n                ArrayToSource(au_g_src, #question_au_groups#)\r\n                ForList(Source: au_g_src, Index: ind){\r\n                DBFind(@1groups).Where({\"id\": #value#}).Vars(gn)\r\n                    If(#editable#==1){\r\n                        If(#value#==0){\r\n                            Button(Body: #access#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                        }.Else{\r\n                            Button(Body: Span(Class: fa fa-remove) #gn_group_name#, Page: @1q_question_edit, Class: btn-xs bg-gray-lighter ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"Id=#question_id#,AuGroups=#value#,Operation=GD\")\r\n                        }\r\n                    }.Else{\r\n                        If(#value#==0){\r\n                            Button(Body: #access#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                        }.Else{\r\n                            Button(Body: #gn_group_name#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#r#>0){\r\n            Div(form-group){\r\n            Label($@1q_question_roles$)\r\n                If(#editable#==1){\r\n                    Div(input-group mb-sm){\r\n                        Select(Name: au_roles, Source: src_rid, NameColumn: role_name, ValueColumn: id)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params: \"Id=#question_id#,Operation=RA\")\r\n                        }\r\n                    }\r\n                }\r\n                ArrayToSource(au_r_src, #question_au_roles#)\r\n                ForList(Source: au_r_src, Index: ind){\r\n                DBFind(@1roles).Where({\"id\": #value#}).Vars(rn)\r\n                    If(#editable#==1){\r\n                        If(#value#==0){\r\n                            Button(Body: #access#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                        }.Else{\r\n                            Button(Body: Span(Class: fa fa-remove) #rn_role_name#, Page: @1q_question_edit, Class: btn-xs bg-gray-lighter ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"Id=#question_id#,AuRoles=#value#,Operation=RD\")\r\n                        }\r\n                    }.Else{\r\n                        If(#value#==0){\r\n                            Button(Body: #access#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                        }.Else{\r\n                            Button(Body: #rn_role_name#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Label($@1q_answer$)\r\n\r\n            If(#editable#==1){\r\n                Div(input-group mb-sm){\r\n                    Input(Name: answer)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params:\"Id=#question_id#,Operation=AA\")\r\n                    }\r\n                }\r\n            }\r\n            ForList(Source: src, Index: ind){\r\n                If(#editable#==1){\r\n                    Button(Body: Span(Class: fa fa-remove) #value#, Page: @1q_question_edit, Class: btn-xs bg-gray-lighter ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"Id=#question_id#,Answer=#value#,Operation=AD\")\r\n                }.Else{\r\n                    Button(Body: #value#, Class: btn-xs bg-gray-lighter ml-sm)\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Button(Class: btn btn-primary pull-right mt sm, Body: $@1save$, Contract: @1QOperations, Page: @1q_listing, Params: \"Id=#question_id#,Operation=E\")\r\n            Button(Class: btn btn-default pull-right mt sm, Body: LangRes(@1back), Page: @1q_listing)\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "q_question_graph",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    DBFind(@1q_list).Where({\"id\": #q_id#}).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,expired,status,params->hide,params->change\").Vars(question)\r\n    DBFind(@1q_answers).Where({\"question_id\": #question_id#}).Count(answers)\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-12 text-center){\r\n                P(Class: h3 m0, Body: #question_description#)\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-6 text-right){\r\n                Label(For: Date Start){\r\n                    Span(Body: LangRes(@1q_date_start):)\r\n                }\r\n            }\r\n            Div(col-md-6 text-left){\r\n                DateTime(#question_created_at#,HH:MI DD.MM.YYYY)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 text-right){\r\n                Label(For: Last Modified){\r\n                    Span(Body: LangRes(@1q_lastmodified):)\r\n                }\r\n            }\r\n            Div(col-md-6 text-left){\r\n                DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 text-right){\r\n                Label(For: Date Ending){\r\n                    Span(Body: LangRes(@1q_date_expiration):)\r\n                }\r\n            }\r\n            Div(col-md-6 text-left){\r\n                DateTime(#question_expired#,HH:MI DD.MM.YYYY)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 text-right){\r\n                Label(For: Status){\r\n                    Span(Body: LangRes(@1status):)\r\n                }\r\n            }\r\n            Div(col-md-6 text-left){\r\n                If(#question_status#==0){\r\n                    Span(Class: text-success, Body: LangRes(@1q_status_created))\r\n                }\r\n                If(#question_status#==1){\r\n                    Span(Class: text-success, Body: LangRes(@1q_status_started))\r\n                }\r\n                If(#question_status#==2){\r\n                    Span(Class: text-primary, Body: LangRes(@1q_status_ended))\r\n                }\r\n                If(#question_status#==3){\r\n                    Span(Class: text-warning, Body: LangRes(@1q_status_admin))\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 text-right){\r\n                Label(For: Stats){\r\n                    Span(Body: LangRes(@1q_answer_data):)\r\n                }\r\n            }\r\n            Div(col-md-6 text-left){\r\n                #answers#\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item text-center){\r\n        ArrayToSource(src, #question_answer#)\r\n        ForList(Source: src, Index:ind){\r\n            DBFind(@1q_answers).Where({\"question_id\": #question_id#, \"decision\": #value#}).Count(a)\r\n            Span(){\r\n                Span(Class: h4 m0 text-primary, Body: #value#:#a#)\r\n            }.Style(margin-right: 15px; margin-left: 15px;)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12 text-center){\r\n            If(#q_page#==\"@1q_profile\"){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1profile_view)\r\n            }.Else{\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_listing)\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "q_question_log",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    SetVar(this_page, @1q_question_log).(this_table, @1q_answers)\r\n    Include(@1pager_header)\r\n    DBFind(@1q_list).Where({\"id\": #q_id#}).Columns(\"id\").Vars(q)\r\n\r\n    If(#a_id#>0){\r\n        SetVar(where, {\"question_id\": #q_id#, \"answer_id\": #a_id#})\r\n    }.Else{\r\n        SetVar(where, {\"question_id\": #q_id#})\r\n    }\r\n\r\n    DBFind(@1q_answers,src_a).Where(#where#).Limit(#pager_limit#).Custom(ans){\r\n        #answer_id# : #decision#\r\n    }.Custom(c_m){\r\n        Address(#member#)\r\n    }.Custom(time){\r\n        DateTime(#lastmodified#,HH:MI DD.MM.YYYY)\r\n    }.Count(a)\r\n\r\n    Div(row form-group){\r\n        Div(col-sm-12){\r\n            Table(Source: src_a, Columns:\"$@1q_answer_member$=c_m,$@1q_date_lastmodified$=time,$@1q_answer$=ans\")\r\n            Div(mt-sm ml-lg mr-sm mb-sm){\r\n                Include(@1pager)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12 text-center){\r\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_listing)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "q_question_new",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Data(bool,\"value,name\"){\r\n        0,$@1ex_unavaliable$\r\n        1,$@1ex_avaliable$\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Title){\r\n                Span(Body: LangRes(@1title)\r\n                Span(*,text-danger)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: question, Type: text)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Description){\r\n                Span(Body: LangRes(@1q_description)\r\n                Span(*,text-danger)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Type: textarea, Name: description, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Answer){\r\n                Span(Body: LangRes(@1q_answer)\r\n                Span(*,text-danger)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Div(input-group mb-sm){\r\n                Input(Name: answer)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1q_question_new, Contract: @1QOperations, Params:\"Id=#question_id#,Operation=AA\").Popup(60, $@1message_type_here$)\r\n                }\r\n            }\r\n            DBFind(@1buffer_data).Where({\"key\": \"q_answers\", \"member_id\": #key_id#, \"ecosystem\": #ecosystem_id#}).Vars(ans)\r\n            ArrayToSource(src, #ans_value#)\r\n            ForList(Source: src, Index: ind){\r\n                Button(Body: Span(Class: fa fa-remove) #value#, Class: btn-xs bg-gray-lighter mr-sm mb-sm, Page: @1q_question_new, Contract: @1QOperations, Params: \"Id=#question_id#,Answer=#value#,Operation=AD\").Popup(60, $@1message_type_here$)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: end_date){\r\n                LangRes(@1date_end)\r\n                Span(*,text-danger)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(row){\r\n                Div(col-md-6){\r\n                    Input(Name: end_date, Type: date)\r\n                }\r\n                Div(col-md-6){\r\n                    Input(Name: end_time, Type: time, Value: \"00:00\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1notifications)\r\n            }\r\n        }\r\n        Div(col-sm-9 mt-sm){\r\n            Input(Name: notifications, Type: checkbox, Value: false, Class: m0, Placeholder: \"$@1q_notifications_send$\")\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1result)\r\n            }\r\n        }\r\n        Div(col-sm-9 mt-sm){\r\n            Input(Name: hide, Type: checkbox, Value: false, Class: m0, Placeholder: \"$@1q_hide$\")\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1answer)\r\n            }\r\n\r\n        }\r\n        Div(col-sm-9 mt-sm){\r\n            Input(Name: change, Type: checkbox, Value: false, Class: m0, Placeholder: \"$@1q_answer_change$\")\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12){\r\n            Button(Body: LangRes(@1create), Page: @1q_listing, Class: btn btn-primary pull-right mt-sm, Contract: @1QOperations, Params: \"Operation=C\")\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt-sm, Page: @1q_listing)\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "QAnswer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract QAnswer {\r\n    data {\r\n        Id int \"optional\"\r\n        Operation string\r\n        QuestionId int\r\n        Decision string\r\n        AnswerId int\r\n    }\r\n\r\n    conditions {\r\n        $question = DBFind(\"@1q_list\").Where({\"id\": $QuestionId}).Columns(\"deleted,status,params->change,au_roles,au_groups,expired\").Row()\r\n        if $question[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1q_error_cannot\", \"en\")\r\n        }\r\n        if $question[\"status\"] != 1 {\r\n            warning LangRes(\"@1q_error_cannot\", \"en\")\r\n        }\r\n        if $Operation == \"UV\" {\r\n            if $question[\"params.change\"] != \"true\" {\r\n                warning LangRes(\"@1q_error_revoting\", \"en\")\r\n            }\r\n        }\r\n        if $question[\"au_roles\"] != \"[0]\" {\r\n            var au_roles array\r\n            au_roles = JSONDecode($question[\"au_roles\"])\r\n            if !DBFind(\"@1roles_participants\").Where({\"member->member_id\": $key_id, \"deleted\": 0, \"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": au_roles}}) {\r\n                warning LangRes(\"@1q_error_cannot\", \"en\")\r\n            }\r\n        }\r\n        if $question[\"au_groups\"] != \"[0]\" {\r\n            var au_groups array\r\n            au_groups = JSONDecode($question[\"au_groups\"])\r\n            if !DBFind(\"@1groups_participants\").Where({\"member->member_id\": $key_id, \"deleted\": 0, \"ecosystem\": $ecosystem_id,\" groups_info->id\": {\"$in\": au_groups}}) {\r\n                warning LangRes(\"@1q_error_cannot\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var notes array i int note map\r\n        notes = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->member_id\": $key_id, \"page_name\": \"@1q_question\", \"page_params->id\": $QuestionId, \"closed\": 0}).Columns(\"id\")\r\n        while i < Len(notes){\r\n            note = notes[i]\r\n            @1NotificationsClose(\"notific_id\", Int(note[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        var m map\r\n        if $block_time > Int($question[\"expired\"]) {\r\n            m[\"expired\"] = $block_time\r\n            m[\"status\"] = 2\r\n            m[\"lastmodified\"] = $block_time\r\n            DBUpdate(\"@1q_list\", $QuestionId, m)\r\n        } else {\r\n            m[\"member\"] = $key_id\r\n            m[\"decision\"] = $Decision\r\n            m[\"answer_id\"] = $AnswerId\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            m[\"lastmodified\"] = $block_time\r\n            m[\"question_id\"] = $QuestionId\r\n            if $Operation == \"CV\" {\r\n                DBInsert(\"@1q_answers\", m)\r\n            }\r\n            if $Operation == \"UV\" {\r\n                DBUpdate(\"@1q_answers\", $Id, m)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "QOperations",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract QOperations {\r\n    data {\r\n        Id int \"optional\"\r\n        Description string\r\n        Question string\r\n        Answer string\r\n        Operation string\r\n        Notifications bool \"optional\"\r\n        Hide bool \"optional\"\r\n        Change bool \"optional\"\r\n        AuGroups int \"optional\"\r\n        AuRoles int \"optional\"\r\n        EndDate string\r\n        EndTime string\r\n    }\r\n\r\n    func trimZeroTime(s string) string {\r\n        if Contains(s, \"T00:00:00Z\") {\r\n            s = Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n\r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5 {\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n\r\n    func expToTimestamp() {\r\n        $ext_string = dateAddTime($EndDate, $EndTime)\r\n        if $block_time > UnixDateTime($ext_string) {\r\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Questionnaire\"}).One(\"id\")\r\n        var admin_ids int\r\n        admin_ids = AppParam(Int($app), \"q_admin_role\", $ecosystem_id)\r\n        var rids array\r\n        rids = JSONDecode(\"[\"+admin_ids+\"]\")\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        if $Operation == \"GA\" {\r\n            $groups = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"au_groups\").One(\"au_groups\"))\r\n            var i int\r\n            i = 0\r\n            while i < Len($groups) {\r\n                if $groups[i] == $AuRoles {\r\n                    warning LangRes(\"@1q_error_groups\", \"en\")\r\n                }\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $Operation == \"RA\" {\r\n            $roles = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"au_roles\").One(\"au_roles\"))\r\n            var i int\r\n            i = 0\r\n            while i < Len($roles) {\r\n                if $roles[i] == $AuRoles {\r\n                    warning LangRes(\"@1q_error_roles\", \"en\")\r\n                }\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $Operation == \"AA\" {\r\n            if $Answer == \"\" {\r\n                warning LangRes(\"@1q_error_blank\", \"en\")\r\n            }\r\n        }\r\n        if $Operation == \"C\" {\r\n            if $Description == \"\" {\r\n                warning LangRes(\"@1q_error_blank\", \"en\")\r\n            }\r\n            if $Question == \"\" {\r\n                warning LangRes(\"@1q_error_blank\", \"en\")\r\n            }\r\n            expToTimestamp()\r\n            if $block_time > UnixDateTime($ext_string) {\r\n                warning LangRes(\"@1q_error_expdate\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var q map audience audience_new array\r\n        //notifications when start and changing status\r\n        if $Operation == \"C\" {\r\n            var decision array\r\n            decision = JSONDecode(DBFind(\"@1buffer_data\").Where({\"key\": \"q_answers\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n            var params map\r\n            params[\"notifications\"] = $Notifications\r\n            params[\"hide\"] = $Hide\r\n            params[\"change\"] = $Change\r\n            q[\"question\"] = $Question\r\n            q[\"description\"] = $Description\r\n            q[\"answer\"] = JSONEncode(decision)\r\n            q[\"ecosystem\"] = $ecosystem_id\r\n            q[\"deleted\"] = 0\r\n            q[\"init\"] = $key_id\r\n            q[\"status\"] = 0\r\n            q[\"au_roles\"] = \"[0]\"\r\n            q[\"au_groups\"] = \"[0]\"\r\n            q[\"created_at\"] = $block_time\r\n            q[\"params\"] = JSONEncode(params)\r\n            q[\"lastmodified\"] = $block_time\r\n            q[\"expired\"] = UnixDateTime($ext_string)\r\n            DBInsert(\"@1q_list\", q)\r\n        }\r\n        if $Operation == \"E\" {\r\n            q[\"description\"] = $Description\r\n            q[\"question\"] = $Question\r\n            q[\"ecosystem\"] = $ecosystem_id\r\n            q[\"init\"] = $key_id\r\n            q[\"lastmodified\"] = $block_time\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n        }\r\n        if $Operation == \"AA\" {\r\n            if $Id == 0 {\r\n                if !DBFind(\"@1buffer_data\").Where({\"key\": \"q_answers\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}).One(\"value\") {\r\n                    var decision array\r\n                    decision = Append(decision, Str($Answer))\r\n                    q[\"value\"] = JSONEncode(decision)\r\n                    q[\"member_id\"] = $key_id\r\n                    q[\"key\"] = \"q_answers\"\r\n                    q[\"ecosystem\"] = $ecosystem_id\r\n                    DBInsert(\"@1buffer_data\", q)\r\n                } else {\r\n                    var decision array\r\n                    $id_upd = Int(DBFind(\"@1buffer_data\").Where({\"key\": \"q_answers\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}).One(\"id\"))\r\n                    decision = JSONDecode(DBFind(\"@1buffer_data\").Where({\"key\": \"q_answers\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n                    decision = Append(decision, Str($Answer))\r\n                    q[\"value\"] = JSONEncode(decision)\r\n                    DBUpdate(\"@1buffer_data\", $id_upd, q)\r\n                }\r\n            } else {\r\n                var decision array\r\n                decision = JSONDecode(DBFind(\"@1q_list\").Columns(\"answer\").Where({\"id\": $Id, \"ecosystem\": $ecosystem_id}).One(\"answer\"))\r\n                decision = Append(decision, Str($Answer))\r\n                q[\"answer\"] = JSONEncode(decision)\r\n                DBUpdate(\"@1q_list\", $Id, q)\r\n            }\r\n        }\r\n        if $Operation == \"AD\" {\r\n            if $Id == 0 {\r\n                var decision decision_new array\r\n                decision = JSONDecode(DBFind(\"@1buffer_data\").Where({\"key\": \"q_answers\", \"member_id\": $key_id}).One(\"value\"))\r\n                $id_upd = Int(DBFind(\"@1buffer_data\").Where({\"key\": \"q_answers\", \"member_id\": $key_id}).One(\"id\"))\r\n                var i int\r\n                while i < Len(decision) {\r\n                    if decision[i] != Str($Answer) {\r\n                        decision_new = Append(decision_new, decision[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                q[\"value\"] = JSONEncode(decision_new)\r\n                DBUpdate(\"@1buffer_data\", $id_upd, q)\r\n            } else {\r\n                var decision decision_new array\r\n                decision = JSONDecode(DBFind(\"@1q_list\").Columns(\"answer\").Where({\"id\": $Id, \"ecosystem\": $ecosystem_id}).One(\"answer\"))\r\n                var i int\r\n                while i < Len(decision) {\r\n                    if decision[i] != Str($Answer) {\r\n                        decision_new = Append(decision_new, decision[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                q[\"answer\"] = JSONEncode(decision_new)\r\n                DBUpdate(\"@1q_list\", $Id, q)\r\n            }\r\n        }\r\n        if $Operation == \"RA\" {\r\n            audience = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"au_roles\").One(\"au_roles\"))\r\n            if audience[0]==0 {\r\n                audience[0] = $AuRoles\r\n            } else {\r\n                audience = Append(audience, $AuRoles)\r\n            }\r\n            q[\"au_roles\"] = JSONEncode(audience)\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n        }\r\n        if $Operation == \"GA\" {\r\n            audience = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"au_groups\").One(\"au_groups\"))\r\n            if audience[0]==0 {\r\n                audience[0] = $AuGroups\r\n            } else {\r\n                audience = Append(audience, $AuGroups)\r\n            }\r\n            q[\"au_groups\"] = JSONEncode(audience)\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n        }\r\n        if $Operation == \"RD\" {\r\n            audience = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"au_roles\").One(\"au_roles\"))\r\n            var i int\r\n            if audience[0]==$AuRoles && Len(audience)<2 {\r\n                audience[0] = 0\r\n                q[\"au_roles\"] = JSONEncode(audience)\r\n            } else {\r\n                while i < Len(audience) {\r\n                    if audience[i] != $AuRoles {\r\n                        audience_new = Append(audience_new, audience[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                q[\"au_roles\"] = JSONEncode(audience_new)\r\n            }\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n        }\r\n        if $Operation == \"GD\" {\r\n            audience = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"au_groups\").One(\"au_groups\"))\r\n            var i int\r\n            if audience[0]==$AuGroups && Len(audience)<2 {\r\n                audience[0] = 0\r\n                q[\"au_groups\"] = JSONEncode(audience)\r\n            } else {\r\n                while i < Len(audience) {\r\n                    if audience[i] != $AuRoles {\r\n                        audience_new = Append(audience_new, audience[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                q[\"au_groups\"] = JSONEncode(audience)\r\n            }\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n        }\r\n        if $Operation == \"T\" {\r\n            q[\"init\"] = $key_id\r\n            q[\"status\"] = 1\r\n            q[\"lastmodified\"] = $block_time\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n            var params map\r\n            params = DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"id,question,params->notifications\").Row()\r\n            var rid_array grp_array array\r\n            rid_array = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).One(\"au_roles\"))\r\n            grp_array = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).One(\"au_groups\"))\r\n            if rid_array[0] == 0 && grp_array[0] == 0 && params[\"params.notifications\"] == \"true\" {\r\n                var participants array\r\n                participants = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0}).Columns(\"id\")\r\n                var i int\r\n                while i < Len(participants) {\r\n                    var participant map\r\n                    participant = participants[i]\r\n                    @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(participant[\"id\"]), 1, \"fa fa-question-circle\", LangRes(\"@1q_new_question\", \"en\"), params[\"question\"], \"@1q_question\", params, 0, 0)\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n        if $Operation == \"Z\" {\r\n            q[\"init\"] = $key_id\r\n            q[\"status\"] = 3\r\n            q[\"lastmodified\"] = $block_time\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n            var question string\r\n            var params map\r\n            params = DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"id,question,params->notifications\").Row()\r\n            question = params[\"question\"]\r\n            var c_notifications map\r\n            c_notifications = DBFind(\"@1notifications\").Where({\"page_params->question\": question, \"page_params->id\": $Id, \"ecosystem\": $ecosystem_id}).Columns(\"id\")\r\n            var rid_array grp_array array\r\n            rid_array = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).One(\"au_roles\"))\r\n            grp_array = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).One(\"au_groups\"))\r\n            if rid_array[0] == 0 && grp_array[0] == 0 && params[\"params.notifications\"] == \"true\" {\r\n                var i int\r\n                while i < Len(c_notifications) {\r\n                    var notific map\r\n                    notific = c_notifications[i]\r\n                    @1NotificationsClose(\"notific_id\", Int(notific[\"id\"]))\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n        if $Operation == \"D\" {\r\n            q[\"init\"] = $key_id\r\n            q[\"status\"] = 3\r\n            q[\"deleted\"] = 1\r\n            q[\"lastmodified\"] = $block_time\r\n            DBUpdate(\"@1q_list\", $Id, q)\r\n            var question string\r\n            var params map\r\n            params = DBFind(\"@1q_list\").Where({\"id\": $Id}).Columns(\"id,question,params->notifications\").Row()\r\n            question = params[\"question\"]\r\n            var c_notifications map\r\n            c_notifications = DBFind(\"@1notifications\").Where({\"page_params->question\": question, \"page_params->id\": $Id, \"ecosystem\": $ecosystem_id}).Columns(\"id\")\r\n            var rid_array grp_array array\r\n            rid_array = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).One(\"au_roles\"))\r\n            grp_array = JSONDecode(DBFind(\"@1q_list\").Where({\"id\": $Id}).One(\"au_groups\"))\r\n            if rid_array[0] == 0 && grp_array[0] == 0 && params[\"params.notifications\"] == \"true\" {\r\n                var i int\r\n                while i < Len(c_notifications) {\r\n                    var notific map\r\n                    notific = c_notifications[i]\r\n                    @1NotificationsClose(\"notific_id\", Int(notific[\"id\"]))\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}