{
    "blocks": [],
    "contracts": [
        {
            "Name": "QAnswer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QAnswer {\n    data {\n        question_id int\n        decision string\n        answer_id int\n    }\n    conditions {\n        //question exist && status && aucditoria\n    }\n    action {\n        var a map\n        a[\"member\"] = $key_id\n        a[\"decision\"] = $decision\n        a[\"answer_id\"] = $answer_id\n        a[\"ecosystem\"] = $ecosystem_id\n        a[\"lastmodified\"] = $time\n        a[\"question_id\"] = $question_id\n        //warning Sprintf(\"%v\", a)\n        DBInsert(\"@1q_answers\", a)\n    }\n}"
        },
        {
            "Name": "QOperations",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QOperations {\n    data {\n        id int \"optional\"\n        description string\n        question string\n        answer array\n        operation string\n        status int\n    }\n    conditions {\n        //admin only\n        //check deleted\n    }\n    action {\n        //we need time\n        //aucditorium\n        //notifications when start and changing status\n        if $operation == \"C\" {\n            var q map\n            q[\"question\"] = $question\n            q[\"description\"] = $description\n            q[\"answer\"] = JSONEncode($answer) //array with unlimited\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"deleted\"] = 0\n            q[\"init\"] = $key_id\n            q[\"status\"] = 0\n            q[\"lastmodified\"] = $time\n            warning Sprintf(\"%v\", q)\n            //DBInsert(\"@1questionnaire\", q)\n        }\n        if $operation == \"E\" {\n            var q map\n            q[\"description\"] = $description\n            q[\"question\"] = $question\n            q[\"answer\"] = $answer_json\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"init\"] = $key_id\n            //q[\"status\"] = $status\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"T\" {\n            var q map\n            q[\"init\"] = $key_id\n            q[\"status\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"D\" {\n            var q map\n            q[\"init\"] = $key_id\n            q[\"deleted\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n    }\n}"
        },
        {
            "Name": "QSandbox",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QSandbox {\n    data {\n        kekc string\n        operation string\n    }\n    conditions {\n\n    }\n    action {\n        if $operation == \"C\" {            \n            var myarr array\n            myarr[0] = \"This is a string\"\n            myarr[1] = \"This is a line\"\n            var json string\n            json = JSONEncode(myarr)\n            var q map\n            q[\"answer\"] = json\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%v\", myarr)\n        }\n        if $operation == \"M\" {\n            var mydata map\n            mydata[\"0\"] = \"test1\"\n            mydata[\"1\"] = \"test2\"\n            var json string\n            json = JSONEncode(mydata)\n            var q map\n            q[\"answer\"] = json\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%v\", json)\n        }\n        if $operation == \"A\" {\n            var answer array\n            answer = DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":1,ecosystem:$ecosystem_id}).One(\"answer\")\n            answer = JSONDecode(answer)\n            answer = Append(answer, \"This is a test\")\n            answer = JSONEncode(answer)\n            //warning Sprintf(\"%s\", answer)\n            var q map\n            q[\"answer\"] = answer\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%s\", q)\n        }\n        if $operation == \"S\" {\n            var answer array\n            answer = DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":1,ecosystem:$ecosystem_id}).One(\"answer\")\n            answer = JSONDecode(answer)\n            var buffer string\n            buffer = Join(answer, \",\")\n            if HasPrefix(buffer, Str($kekc)) {\n                buffer = Replace(buffer, Str($kekc) + `,`, ``)\n            }\n            if Contains(buffer, Str($kekc)) {\n                buffer = Replace(buffer, `,` + Str($kekc), ``)\n            }\n            answer = Split(buffer, \",\")\n            answer = JSONEncode(answer)\n            var q map\n            q[\"answer\"] = answer\n            DBUpdate(\"@1questionnaire\", 1, q)\n            //warning Sprintf(\"%v\", answer)\n        }\n    }\n}"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "q_admin",
            "Trans": "{\"en\": \"Poll cancelled by admin\", \"ru\": \"Опрос досрочно закончен администратором\"}"
        },
        {
            "Name": "q_answer",
            "Trans": "{\"en\": \"Answer\", \"ru\": \"Ответ\"}"
        },
        {
            "Name": "q_answer_change",
            "Trans": "{\"en\": \"Change answer before expiration\", \"ru\": \"Редактировать ответ до окончания\"}"
        },
        {
            "Name": "q_answer_hide",
            "Trans": "{\"en\": \"Hide answer until expiration\", \"ru\": \"Не показывать ответы до окончания\"}"
        },
        {
            "Name": "q_description",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "q_ended",
            "Trans": "{\"en\": \"Poll ended\", \"ru\": \"Опрос закончен\"}"
        },
        {
            "Name": "q_hint_answer",
            "Trans": "{\"en\": \"Please create at least one unique answer for your question. Check placeholder if you want to add more. You could always change your answers at edit stage, before bpting not published.\", \"ru\": \"Пожалуйста, создайте хотя бы один вариант ответ. Если вы хотите добавить больше вариантов, то руководствуйтесь шаблоном на этапе создания. Вы всегда можете отредактировать ваши варианты ответов, до того как вопрос будет опубликован.\"}"
        },
        {
            "Name": "q_hint_answer_placeholder",
            "Trans": "{\"en\": \"Answer One, Answer Two\", \"ru\": \"Первый вариант, Второй вариант\"}"
        },
        {
            "Name": "q_initiator",
            "Trans": "{\"en\": \"Initiator\", \"ru\": \"Инициатор\"}"
        },
        {
            "Name": "q_notifications_send",
            "Trans": "{\"en\": \"Send notifications\", \"ru\": \"Отправить уведомления\"}"
        },
        {
            "Name": "q_pause",
            "Trans": "{\"en\": \"Poll paused\", \"ru\": \"Опрос приостановлен\"}"
        },
        {
            "Name": "q_poll",
            "Trans": "{\"en\": \"Questionnaire\", \"ru\": \"Опросы\"}"
        },
        {
            "Name": "q_question",
            "Trans": "{\"en\": \"Question\", \"ru\": \"Вопрос\"}"
        },
        {
            "Name": "q_started",
            "Trans": "{\"en\": \"Poll in progress\", \"ru\": \"Идет опрос\"}"
        },
        {
            "Name": "q_success",
            "Trans": "{\"en\": \"Successfully created\", \"ru\": \"Успешно создано\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:$@1q_poll$, Page:@1q_listing, Icon:\"fa fa-question-circle\")"
        }
    ],
    "pages": [
        {
            "Name": "q_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "//TODO создание/редактирование опроса редактирование допустимо только до старта",
            "Menu": "default_menu"
        },
        {
            "Name": "q_listing",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Include(@1pager_header)\nSetTitle($@1q_poll$)\nIf(#role_id#==1){\n    SetVar(permission,1)\n}\nAddToolButton(Title: \"Add new question\", Page: @1q_question_new, Icon: icon-plus).Popup(Header: \"test\", Width: \"50\")\nDBFind(@1questionnaire,src_q).Where({\"ecosystem\":#ecosystem_id#}).Custom(custom_name){\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\n                Div(Class: text-primary){\n                    Span(#name#).Style({padding-left: 30px;})\n                }\n            }\n        }.Custom(start){\n            Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"operation=U,status=TR,isTradeable=1,id=#id#,name=#name#\").Style({margin-left: 30px;})\n        }.Custom(delete){\n            Button(Body: Em(Class: fa fa-times), Class: btn-xs btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"operation=U,status=TR,isTradeable=1,id=#id#,name=#name#\").Style({margin-left: 30px;})\n        }.Custom(edit){\n            Span(Class: pull-right){\n                LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1q_question_edit, PageParams: \"q_id=#id#\")\n            }\n        }.Count(q)\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        If(#q#>0){\n            Div(list-group-item){\n                Table(Source: src_q)\n            }\n        }\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}\n",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1questionnaire).Where({ecosystem:#ecosystem_id#, id:#q_id#}).Vars(question)\n\nDiv(content-wrapper){  \n    SetTitle(#question_question#)\n    Div(breadcrumb){\n        LinkPage(Body: $@1q_poll$, Page: @1q_listing)\n        Span(/,mh)\n        Span(Class: text-muted, Body: #question_question#)\n    }\n\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(list-group-item text-center){\n                    P(Class: h3 text-bold m0, Body: #question_question#)\n                    If(`#question_description#`!=\"\"){\n                    }\n                }\n                Div(list-group-item text-center t5){\n                    Div(row){\n                        Div(col-md-12 text-center){\n                            #question_description#\n                        }\n                    }\n                }\n                Div(list-group-item text-center t5){\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            \"Дата старта\"\n                        }\n                        Div(col-md-6 text-left){\n                            \"Дата старта\"\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            \"Дата Конца\"\n                        }\n                        Div(col-md-6 text-left){\n                            \"Дата Конца\"\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            \"auditoriya\"\n                        }\n                        Div(col-md-6 text-left){\n                            \"auditoriya\"\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                           \"chislo otvetov\"\n                        }\n                        Div(col-md-6 text-left){\n                            \"chislo otvetov\"\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-12 text-center){\n                            \"вывести графики\"\n                        }\n                    }\n                }\n                Div(list-group-item text-center t5){\n                    Div(row){\n                        Div(col-md-12 text-center){\n                            ArrayToSource(src, #question_answer#)\n                            ForList(Source: src, Index:ind){\n                                Button(Body: #value#, Page: @1q_question, Class: center-block btn btn-primary, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"question_id=#question_id#, answer_id=#ind#, decision=#value#\")\n                            }     \n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1questionnaire).Where({ecosystem:#ecosystem_id#, id:#q_id#}).Vars(question)\n\nDiv(content-wrapper){\n    SetTitle(#question_question#)\n    Div(Class: breadcrumb){\n        LinkPage($@1q_poll$, @1q_listing)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #question_question#)\n    }\n    \n    Form(){\n        Div(form-group){\n            Label($@1title$)\n            Input(Name: question, Value: #question_question#)\n            Input(Name: question, Value: #question_question#, Disabled: true)\n        }\n        Div(form-group){\n            Label($@1q_description$)\n            Input(Name: description, Value: #question_description#)\n            Input(Name: description, Value: #question_description#, Disabled: true)\n        }\n        Div(form-group){\n            Label(\"answer block\")\n            Div(input-group mb-sm){\n                Input(Name: test)\n                Div(input-group-btn){\n                    Button(Class: btn btn-primary fa fa-plus, Page: section_access, PageParams:\"id=#section_id#\", Contract: @1SectionRoles, Params:\"id=#section_id#,rid=Val(access_rid),operation=add\")\n                }\n            }\n            ArrayToSource(src, #question_answer#)\n            ForList(Source: src, Index:ind){\n                Button(Body: #value#, Page: @1q_question, Class: center-block btn btn-primary, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"question_id=#question_id#, answer_id=#ind#, decision=#value#\")\n            }\n        }\n        Div(form-group){\n            Label(\"Status\")\n            Select(Name: access_rid, Source:src_roles, NameColumn:role_name, ValueColumn: id)\n        }\n        Div(form-group){\n            Label(\"lastModified\")\n            Input(Name: lastmodified,  Value: #question_lastmodified#, Disabled: true)\n        }\n        Div(form-group){\n            Button(Class: btn btn-primary, Body: $@1save$, Contract: @1ExSymbol, Page: @1ex_edit, PageParams: \"id=#symbol_id#\", Params: \"id=#symbol_id#, name=#symbol_name#, operation=E\").Alert(Text: $@1ex_confirmation_kill$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_new",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Data(bool,\"value,name\"){\n        0,$@1ex_unavaliable$\n        1,$@1ex_avaliable$\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Title){\n                Span(Body: LangRes(@1title)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: question, Type: text)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Description){\n                Span(Body: LangRes(@1q_description)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Type: textarea, Name: description, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: end_date){\n                LangRes(@1date_end)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-md-9 text-left){\n            Div(row){\n                Div(col-md-6){\n                    Input(Name: end_date, Type: date)\n                }\n                Div(col-md-6){\n                    Input(Name: end_time, Type: time)\n                }\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Notifications){\n                Span(Body: LangRes(@1q_notifications_send)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: notifications, Type: checkbox, Value: true)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: AnswerHide){\n                Span(Body: LangRes(@1q_answer_hide)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: hide, Type: checkbox, Value: true)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: AnswerChange){\n                Span(Body: LangRes(@1q_answer_change)\n            }\n            Span(Class: text-danger, Body:*)\n        }\n        Div(col-sm-9){\n            Input(Name: change, Type: checkbox, Value: true)\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_listing)\n            Button(Body: LangRes(@1create), Page: @1q_listing, Class: btn pull-right btn-primary, Contract: @1QOperations, Params: \"operation=C\")\n        }\n    }\n}",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "q_answers",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "questionnaire",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}