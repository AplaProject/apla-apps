{
    "blocks": [],
    "contracts": [
        {
            "Name": "QAnswer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QAnswer {\n    data {\n        id int \"optional\"\n        operation string\n        question_id int\n        decision string\n        answer_id int\n    }\n    conditions {\n        //question exist && status && aucditoria\n        //if !DBFind(\"@1questionnaire\").Where({\"id\":$question_id}) {\n            //question not exist\n        //}\n        var q map\n        q = DBFind(\"@1questionnaire\").Where({\"id\":$question_id}).Columns(\"status,au_groups,au_roles\").Row()\n        \n        if q[\"status\"]!=1 {\n            \n        }\n        \n        //var groups array\n        //groups = q[\"au_groups\"]\n        if q[\"au_groups\"]!=0 {\n            warning Sprintf(\"%v\", q[\"au_groups\"])\n           // var x array\n            warning Sprintf(\"%v\", q[\"au_groups\"])\n            //x = DBFind(\"@1groups_participants\").Where({\"member->member_id\":$key_id,\"groups_info->id\":{\"$in\":[groups]}}).Row()\n            //if !DBFind(\"@1groups_participants\").Where({\"member->member_id\":$key_id,\"groups_info->id\":{\"$in\":[groups]}}) {\n            \n            //}\n        }\n        if q[\"au_roles\"]!=0 {\n            //DBFind(\"@1roles\").Where({\"id\":$question_id})\n        }\n        warning Sprintf(\"%v\", q[\"status\"])\n        //make sure to revoting upd\n    }\n    action {\n        if $time > Int(DBFind(\"@1questionnaire\").Where({\"id\":$question_id}).Columns(\"expired\").One(\"expired\")) {\n            var q map\n            q[\"status\"] = 2\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $question_id, q)\n        } else {\n            if $operation == \"CV\" {\n                var a map\n                a[\"member\"] = $key_id\n                a[\"decision\"] = $decision\n                a[\"answer_id\"] = $answer_id\n                a[\"ecosystem\"] = $ecosystem_id\n                a[\"lastmodified\"] = $time\n                a[\"question_id\"] = $question_id\n                DBInsert(\"@1q_answers\", a)\n            }\n            if $operation == \"UV\" {\n                var a map\n                a[\"member\"] = $key_id\n                a[\"decision\"] = $decision\n                a[\"answer_id\"] = $answer_id\n                a[\"ecosystem\"] = $ecosystem_id\n                a[\"lastmodified\"] = $time\n                a[\"question_id\"] = $question_id\n                DBUpdate(\"@1q_answers\", $id, a)\n            }\n        }\n    }\n}"
        },
        {
            "Name": "QOperations",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QOperations {\n    data {\n        id int \"optional\"\n        description string\n        question string\n        answer string\n        operation string\n        status int\n        notifications bool \"optional\"\n        hide bool \"optional\"\n        change bool \"optional\"\n        au_groups int \"optional\"\n        au_roles int \"optional\"\n        end_date string\n        end_time string\n    }\n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n    func isCalledFromPage() bool {\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\n    }\n    func expToTimestamp() {\n        $ext_string = dateAddTime($end_date, $end_time)\n        if $time > UnixDateTime($ext_string) {\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\n        }\n    }\n    conditions {\n        //check name unqie\n        //admin only\n        //no answer found\n        //check deleted\n\n        //unqiue group or role only One\n        //we can't delete zero\n        if $operation == \"RD\" && $au_roles==0 {\n            warning\n        }\n        if $operation == \"GD\" && $au_groups==0 {\n            warning\n        }\n        if $operation == \"C\" {\n            expToTimestamp()\n            //check name uniques\n            //check function time before real time\n            if $time > UnixDateTime($ext_string) {\n                warning LangRes(\"@1q_error_expdate\", \"en\")\n            }\n        }     \n    }\n    action {\n        var q map\n        var audience audience_new array\n        //notifications when start and changing status\n        if $operation == \"C\" {\n            var decision array\n            decision = Split($answer, \",\")\n            var params map\n            params[\"notifications\"] = $notifications\n            params[\"hide\"] = $hide\n            params[\"change\"] = $change\n            q[\"question\"] = $question\n            q[\"description\"] = $description\n            q[\"answer\"] = JSONEncode(decision)\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"deleted\"] = 0\n            q[\"init\"] = $key_id\n            q[\"status\"] = 0\n            q[\"au_roles\"] = `[0]`\n            q[\"au_groups\"] = `[0]`\n            q[\"created_at\"] = $time\n            q[\"params\"] = JSONEncode(params)\n            q[\"lastmodified\"] = $time \n            q[\"expired\"] = UnixDateTime($ext_string)\n            DBInsert(\"@1questionnaire\", q)\n        }\n        if $operation == \"E\" {\n            q[\"description\"] = $description\n            q[\"question\"] = $question\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"init\"] = $key_id\n            //check status to edit\n            q[\"status\"] = $status\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"AA\" {\n            var decision array\n            decision = JSONDecode(DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"answer\"))\n            decision = Append(decision, Str($answer))\n            q[\"answer\"] = JSONEncode(decision)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"AD\" {\n            var decision decision_new array\n            decision = JSONDecode(DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"answer\"))\n            var i int\n            while i < Len(decision) {\n                if decision[i] != Str($answer) {\n                    decision_new = Append(decision_new, decision[i])\n                }\n                i = i + 1\n            } \n            q[\"answer\"] = JSONEncode(decision_new)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"RA\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_roles\").One(\"au_roles\"))\n            if audience[0]==0 {\n                audience[0] = $au_roles\n            } else {\n                audience = Append(audience, $au_roles)\n            }\n            q[\"au_roles\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"GA\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_groups\").One(\"au_groups\"))\n            if audience[0]==0 {\n                audience[0] = $au_groups\n            } else {\n                audience = Append(audience, $au_groups)\n            }\n            q[\"au_groups\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"RD\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_roles\").One(\"au_roles\"))\n            var i int\n            if audience[0]==$au_roles && Len(audience)<2 {\n                audience[0] = 0\n                q[\"au_roles\"] = JSONEncode(audience)\n            } else {\n                while i < Len(audience) {\n                    if audience[i] != $au_roles {\n                        audience_new = Append(audience_new, audience[i])\n                    }\n                    i = i + 1\n                }\n                q[\"au_roles\"] = JSONEncode(audience_new)\n            }\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"GD\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_groups\").One(\"au_groups\"))\n            var i int\n            if audience[0]==$au_groups && Len(audience)<2 {\n                audience[0] = 0\n                q[\"au_groups\"] = JSONEncode(audience)\n            } else {\n                while i < Len(audience) {\n                    if audience[i] != $au_roles {\n                        audience_new = Append(audience_new, audience[i])\n                    }\n                    i = i + 1\n                }\n                q[\"au_groups\"] = JSONEncode(audience)\n            }\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }        \n        if $operation == \"T\" {\n            //notification send\n            q[\"init\"] = $key_id\n            q[\"status\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"D\" {\n            //notifications close\n            q[\"init\"] = $key_id\n            q[\"status\"] = 3\n            q[\"deleted\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n    }\n}"
        },
        {
            "Name": "QSandbox",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QSandbox {\n    data {\n        id int //recheck id to normal id\n        au_groups int \"optional\"\n        au_roles int \"optional\"\n        operation string\n    } \n    conditions {\n        //unqiue group or role\n    }\n    action {\n        var q map\n        var audience arNew array\n        var buffer string\n        //warning Sprintf(\"%v %v\", $au_roles, $au_groups)\n        if $operation == \"RA\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_roles\").One(\"au_roles\"))\n            audience = Append(audience, $au_roles)\n            q[\"au_roles\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"GA\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_groups\").One(\"au_groups\"))\n            audience = Append(audience, $au_groups)\n            q[\"au_groups\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"RD\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_roles\").One(\"au_roles\"))\n            //buffer = Join(audience, `,`)\n            var i int\n            while i < Len(audience) {\n                if audience[i] != $au_roles {\n                    arNew = Append(arNew, audience[i])\n                }\n                i = i + 1\n            } \n            warning Sprintf(\"%v\", arNew)\n            //if Contains(buffer, Str($au_roles)) {\n                //buffer = Replace(buffer, `,` + $au_roles, ``)\n            //}\n            //audience = Split(buffer, `,`)\n            //if HasPrefix(buffer, Str($au_roles)) {\n                //audience[0] = ``\n            //}\n            //warning Sprintf(\"%v\", audience)\n            q[\"au_roles\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"GD\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_groups\").One(\"au_groups\"))\n            buffer = Join(audience, \",\")\n            if Contains(buffer, Str($au_groups)) {\n                buffer = Replace(buffer, `,` + Str($au_groups), ``)\n            }\n            audience = Split(buffer, \",\")\n            if HasPrefix(buffer, Str($au_roles)) {\n                audience[0] = ``\n            }\n            q[\"au_groups\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n    }\n}"
        }
    ],
    "data": [],
    "languages": [
        {
            "Name": "q_answer",
            "Trans": "{\"en\": \"Answer\", \"ru\": \"Ответ\"}"
        },
        {
            "Name": "q_answer_change",
            "Trans": "{\"en\": \"Edit answer options\", \"ru\": \"Редактирование блока ответов\"}"
        },
        {
            "Name": "q_answer_data",
            "Trans": "{\"en\": \"Actual/Total Voters\", \"ru\": \"Проголосовало/Всего участников\"}"
        },
        {
            "Name": "q_answer_graph",
            "Trans": "{\"en\": \"Show data summary\", \"ru\": \"Отобразить статистику\"}"
        },
        {
            "Name": "q_answer_hide",
            "Trans": "{\"en\": \"Hide answer until expiration\", \"ru\": \"Не показывать ответы до окончания\"}"
        },
        {
            "Name": "q_answer_member",
            "Trans": "{\"en\": \"Voting member\", \"ru\": \"Участник голосования\"}"
        },
        {
            "Name": "q_audience",
            "Trans": "{\"en\": \"Audience\", \"ru\": \"Аудитория\"}"
        },
        {
            "Name": "q_change",
            "Trans": "{\"en\": \"Revoting\", \"ru\": \"Измененить ответ\"}"
        },
        {
            "Name": "q_date_expiration",
            "Trans": "{\"en\": \"Expiration at\", \"ru\": \"Дата окончания опроса\"}"
        },
        {
            "Name": "q_date_lastmodified",
            "Trans": "{\"en\": \"Lastmodified\", \"ru\": \"Последнее изменение\"}"
        },
        {
            "Name": "q_date_start",
            "Trans": "{\"en\": \"Created at\", \"ru\": \"Дата создания опроса\"}"
        },
        {
            "Name": "q_description",
            "Trans": "{\"en\": \"Description\", \"ru\": \"Описание\"}"
        },
        {
            "Name": "q_error_expdate",
            "Trans": "{\"en\": \"Incorrect expiration date\", \"ru\": \"Неверная дата окончания опроса\"}"
        },
        {
            "Name": "q_hide",
            "Trans": "{\"en\": \"Hidden answers\", \"ru\": \"Анонимные ответы\"}"
        },
        {
            "Name": "q_hint_answer",
            "Trans": "{\"en\": \"Please create at least one unique answer for your question. Check placeholder if you want to add more. You could always change your answers at edit stage, before bpting not published.\", \"ru\": \"Пожалуйста, создайте хотя бы один вариант ответ. Если вы хотите добавить больше вариантов, то руководствуйтесь шаблоном на этапе создания. Вы всегда можете отредактировать ваши варианты ответов, до того как вопрос будет опубликован.\"}"
        },
        {
            "Name": "q_hint_answer_change",
            "Trans": "{\"en\": \"If you want to add another answer just type it inside input field and click on plus button\", \"ru\": \"Что бы добавить дополнительные варианты ответов, просто впишите их в текстовое поле через запятую\"}"
        },
        {
            "Name": "q_hint_answer_placeholder",
            "Trans": "{\"en\": \"Answer One, Answer Two\", \"ru\": \"Первый вариант, Второй вариант\"}"
        },
        {
            "Name": "q_initiator",
            "Trans": "{\"en\": \"Initiator\", \"ru\": \"Инициатор\"}"
        },
        {
            "Name": "q_lastmodified",
            "Trans": "{\"en\": \"Last Modified\", \"ru\": \"Время последнего изменения\"}"
        },
        {
            "Name": "q_new_question",
            "Trans": "{\"en\": \"New Question\", \"ru\": \"Новый вопрос\"}"
        },
        {
            "Name": "q_no_questions",
            "Trans": "{\"en\": \"There are no questions here yet!\", \"ru\": \"Доступных для участия опросов не найдено\"}"
        },
        {
            "Name": "q_notifications_send",
            "Trans": "{\"en\": \"Send notifications\", \"ru\": \"Отправить уведомления\"}"
        },
        {
            "Name": "q_poll",
            "Trans": "{\"en\": \"Questionnaire\", \"ru\": \"Опросы\"}"
        },
        {
            "Name": "q_question",
            "Trans": "{\"en\": \"Question\", \"ru\": \"Вопрос\"}"
        },
        {
            "Name": "q_question_everyone",
            "Trans": "{\"en\": \"Everyone\", \"ru\": \"Доступно всем\"}"
        },
        {
            "Name": "q_question_groups",
            "Trans": "{\"en\": \"Audience: Groups Access\", \"ru\": \"Аудитория: доступ по группам\"}"
        },
        {
            "Name": "q_question_logs",
            "Trans": "{\"en\": \"Full Detailed Answer Log\", \"ru\": \"Полная статистика ответов\"}"
        },
        {
            "Name": "q_question_roles",
            "Trans": "{\"en\": \"Audience: Roles Access\", \"ru\": \"Аудитория: доступ по ролям\"}"
        },
        {
            "Name": "q_status",
            "Trans": "{\"en\": \"Status\", \"ru\": \"Статус опроса\"}"
        },
        {
            "Name": "q_status_admin",
            "Trans": "{\"en\": \"Poll cancelled by admin\", \"ru\": \"Опрос досрочно закончен администратором\"}"
        },
        {
            "Name": "q_status_created",
            "Trans": "{\"en\": \"Successfully created\", \"ru\": \"Успешно создан\"}"
        },
        {
            "Name": "q_status_ended",
            "Trans": "{\"en\": \"Poll ended\", \"ru\": \"Опрос закончен\"}"
        },
        {
            "Name": "q_status_pause",
            "Trans": "{\"en\": \"Poll paused by admin\", \"ru\": \"Опрос приостановлен администратором\"}"
        },
        {
            "Name": "q_status_started",
            "Trans": "{\"en\": \"Poll in progress\", \"ru\": \"Идет опрос\"}"
        }
    ],
    "menus": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "MenuItem(Title:$@1q_poll$, Page:@1q_listing, Icon:\"fa fa-question-circle\")"
        }
    ],
    "pages": [
        {
            "Name": "q_listing",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1q_listing).(this_table, @1questionnaire)\nInclude(@1pager_header)\n\nSetTitle($@1q_poll$)\nIf(#role_id#==1){\n    SetVar(permission,1)\n}\nIf(#permission#==1){\n    AddToolButton(Title: @1q_new_question, Page: @1q_question_new, Icon: icon-plus).Popup(Header: \"test\", Width: \"50\")\n}\n\nIf(GetVar(search)!=\"\"){\n    SetVar(where,\"{ecosystem:#ecosystem_id#,deleted:0,{$or:[{question:{$like:#search#}}]}}\")\n}.Else{\n    SetVar(where,\"{ecosystem:#ecosystem_id#,deleted:0}\").(search,)\n}\n\nDiv(list-group-item ml-lg mr-lg pt-lg){\n    SetVar(search_name, LangRes(@1q_question))\n    Include(@1search)\n}\n\nDBFind(#this_table#,src_q).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,expired,status,params->hide,params->change,au_groups,au_roles\").Custom(custom_name){\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1q_question, PageParams: \"q_id=#id#\"){\n        Div(Class: text-primary){\n            Span(#question#).Style({padding-left: 30px;})\n            #au_groups#\n            #au_roles#\n        }\n    }\n}.Custom(custom_status){\n    If(#status#==0){\n        Span(Class: text-success, Body: LangRes(@1q_status_created))\n    }\n    If(#status#==1){\n        Span(Class: text-success, Body: LangRes(@1q_status_started))\n    }\n    If(#status#==2){\n        Span(Class: text-primary, Body: LangRes(@1q_status_ended))\n    }\n    If(#status#==3){\n        Span(Class: text-warning, Body: LangRes(@1q_status_admin))\n    }\n    If(#status#==4){\n        Span(Class: text-danger, Body: LangRes(@1q_status_pause))\n    }\n}.Custom(time){\n    DateTime(#created_at#,HH:MI DD.MM.YYYY) / DateTime(#lastmodified#,HH:MI DD.MM.YYYY) / DateTime(#expired#,HH:MI DD.MM.YYYY)\n}.Custom(initiator){\n    DBFind(@1members).Where({ecosystem:#ecosystem#, id:#init#}).Vars(m)\n    If(Or(#m_id#>0,#m_id#<0)){\n        SetVar(member_name, #m_member_name#)\n    }.Else{\n        SetVar(member_name, Address(#id#))\n    }\n    Span(#member_name#)\n}.Custom(hidden){\n    If(#params.hide#==true){\n        Span(Class: fa fa-check fa-1x)\n    }.Else{\n        Span(Class:fa fa-times fa-1x)\n    }\n}.Custom(change){\n    If(#params.change#==true){\n        Span(Class: fa fa-check fa-1x)\n    }.Else{\n        Span(Class:fa fa-times fa-1x)\n    }\n}.Custom(ops){\n    Span(Class: pull-right){\n        If(#status#!=1){\n            Button(Body: Em(Class: fa fa-hourglass-start), Class: btn-xs btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"operation=T,id=#id#\")\n        }\n        Button(Body: Em(Class: fa fa-trash), Class: btn-xs btn-link, Page: @1q_listing, Contract: @1QOperations, Params: \"operation=D,id=#id#\").Style({margin-left: 30px;})\n        LinkPage(Body: Em(Class: fa fa-cogs), Class: text-primary h4, Page: @1q_question_edit, PageParams: \"q_id=#id#\").Style({margin-left: 30px;})\n    }\n}.Count(q)\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        If(#q#>0){\n            Div(list-group-item){\n                If(#permission#==1){\n                    Table(Source: src_q, Columns: \"$@1q_question$=custom_name,$@1q_date_start$ / $@1q_date_lastmodified$ / $@1q_date_expiration$=time,$@1q_initiator$=initiator,$@1q_audience$=audience,$@1q_status$=custom_status,$@1q_hide$=hidden,$@1q_change$=change,=ops\")\n                }.Else{\n                    Table(Source: src_q, Columns: \"$@1q_question$=custom_name,$@1q_date_start$ / $@1q_date_lastmodified$ / $@1q_date_expiration$=time,$@1q_initiator$=initiator,$@1q_audience$=audience,$@1q_status$=custom_status,$@1q_hide$=hidden,$@1q_change$=change\")\n                }\n            }\n        }.Else{\n            Div(Class: text-center h4 text-muted, Body: $@1q_no_questions$)\n        }\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1questionnaire).Where({id:#q_id#}).Columns(\"id,question,description,answer,ecosystem,init,lastmodified,created_at,expired,status,params->hide,params->change\").Vars(question)\nDBFind(@1q_answers).Where({question_id:#question_id#}).Count(answers)\nDBFind(@1q_answers).Where({question_id:#question_id#, member:#key_id#}).Vars(your_answer).Count(a)\nDBFind(@1members).Where({ecosystem:#question_ecosystem#}).Count(total)\n\nIf(#role_id#==1){\n    SetVar(permission,1)\n}\n\nDiv(content-wrapper){  \n    SetTitle(#question_question#)\n    If(#permission#==1){\n        AddToolButton(Title: @1q_question_logs, Page: @1q_question_log, Icon: fa fa-book, PageParams: \"q_id=#question_id#\").Popup(Header: #question_question#, Width: \"50\")\n        \n    }\n    If(#question_params_hide#==false){\n        AddToolButton(Title: @1q_answer_graph, Page: @1q_question_graph, Icon: fa fa-comment, PageParams: \"q_id=#question_id#\").Popup(Header: $@1q_answer_graph$ / #question_question#, Width: \"50\")\n    }\n    Div(breadcrumb){\n        LinkPage(Body: $@1q_poll$, Page: @1q_listing)\n        Span(/,mh)\n        Span(Class: text-muted, Body: #question_question#)\n    }\n\n    Div(row mt-sm){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(list-group-item text-center){\n                    P(Class: h3 text-bold m0, Body: #question_question#)\n                }\n                If(`#question_description#`!=\"\"){\n                    Div(list-group-item text-center t5){\n                        Div(row){\n                            Div(col-md-12 text-center){\n                                #question_description#\n                            }\n                        }\n                    }\n                }\n                Div(list-group-item text-center t5){\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes(@1q_date_start)\n                        }\n                        Div(col-md-6 text-left){\n                            DateTime(#question_created_at#,HH:MI DD.MM.YYYY)\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes(@1q_lastmodified)\n                        }\n                        Div(col-md-6 text-left){\n                            DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY)\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes(@1q_date_expiration)\n                        }\n                        Div(col-md-6 text-left){\n                            DateTime(#question_expired#,HH:MI DD.MM.YYYY)\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                           Span(Body: LangRes(@1status)\n                        }\n                        Div(col-md-6 text-left){\n                            If(#question_status#==0){\n                                Span(Class: text-success, Body: LangRes(@1q_status_created))\n                            }\n                            If(#question_status#==1){\n                                Span(Class: text-success, Body: LangRes(@1q_status_started))\n                            }\n                            If(#question_status#==2){\n                                Span(Class: text-primary, Body: LangRes(@1q_status_ended))\n                            }\n                            If(#question_status#==3){\n                                Span(Class: text-warning, Body: LangRes(@1q_status_admin))\n                            }\n                            If(#question_status#==4){\n                                Span(Class: text-danger, Body: LangRes(@1q_status_pause))\n                            }\n                        }\n                    }\n                    Div(row){\n                        Div(col-md-6 text-right){\n                           Span(Body: LangRes(@1q_answer_data)\n                        }\n                        Div(col-md-6 text-left){\n                            #answers# / #total#\n                        }\n                    }\n                }\n                If(#question_status#!=0){\n                    Div(list-group-item text-center t5){\n                        Div(row){\n                            If(#a#>0){\n                                Div(col-sm-6 text-right){\n                                    Input(Name: change, Type: checkbox, Value: true, Disabled: true)\n                                }\n                                Div(col-sm-6 text-left){\n                                    Span(Class: text-bold, Body: #your_answer_decision#)\n                                }.Style(margin-top: 10px;)\n                            }\n                            If(#question_status#==1){\n                                Div(col-md-12 text-center){\n                                    ArrayToSource(src, #question_answer#)\n                                    ForList(Source: src, Index:ind){\n                                        If(#a#==0){\n                                            Button(Body: #value#, Page: @1q_question, Class: btn btn-primary ml-sm, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"question_id=#question_id#, answer_id=#ind#, decision=#value#, operation=CV\")\n                                        }\n                                        If(And(#question_params_change#==true,#a#>0)){\n                                            Button(Body: #value#, Page: @1q_question, Class: btn btn-primary ml-sm, Contract: @1QAnswer, PageParams: \"q_id=#question_id#\", Params: \"id=#your_answer_id#, question_id=#question_id#, answer_id=#ind#, decision=#value#, operation=UV\")\n                                        }\n                                    }     \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1questionnaire).Where({ecosystem:#ecosystem_id#, id:#q_id#}).Vars(question)\nArrayToSource(src, #question_answer#)\nData(src_status,\"status_id,status_name\"){\n    1,$@1q_status_started$\n    3,$@1q_status_admin$\n    4,$@1q_status_pause$\n}\nIf(Or(#question_status#==0, #question_status#==4)){\n    SetVar(editable,1)\n}\nSetVar(time,DateTime(#question_lastmodified#,HH:MI DD.MM.YYYY))\n\nDiv(content-wrapper){\n    SetTitle(#question_question#)\n    Div(Class: breadcrumb){\n        LinkPage($@1q_poll$, @1q_listing)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: #question_question#)\n    }\n    \n    Form(){\n        Div(form-group){\n            Label($@1title$)\n            If(#editable#==1){\n                Input(Name: question, Value: #question_question#)\n            }.Else{\n                Input(Name: question, Value: #question_question#, Disabled: true)\n            }\n        }\n        Div(form-group){\n            Label($@1q_description$)\n            If(#editable#==1){\n                Input(Type: textarea, Name: description, Value: #question_description#).Style(resize: vertical; min-height: 6em;)\n            }.Else{\n                Input(Type: textarea, Name: description, Value: #question_description#, Disabled: true).Style(resize: vertical; min-height: 6em;)\n            }\n        }\n        DBFind(@1groups,src_gp).Where({ecosystem:#ecosystem_id#}).Count(g)\n        If(#g#>0){\n            Div(form-group){\n            Label($@1q_question_groups$)\n                If(#editable#==1){\n                    Div(input-group mb-sm){\n                        Select(Name: au_groups, Source: src_gp, NameColumn: group_name, ValueColumn: id)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-primary fa fa-plus, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params:\"id=#question_id#, operation=GA\")\n                        }\n                    }\n                } \n                ArrayToSource(au_g_src, #question_au_groups#)\n                ForList(Source: au_g_src, Index:ind){\n                DBFind(@1groups).Where({id:#value#}).Vars(gn)\n                    If(#editable#==1){\n                        If(#value#==0){\n                            Button(Body: $@1q_question_everyone$, Class: btn btn-success ml-sm)\n                        }.Else{\n                            Button(Body: Span(Class: fa fa-remove) #gn_group_name#, Page: @1q_question_edit, Class: btn btn-danger ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"id=#question_id#, au_groups=#value#, operation=GD\")\n                        }\n                    }.Else{\n                        If(#value#==0){\n                            Button(Body: $@1q_question_everyone$, Class: btn btn-success ml-sm)\n                        }.Else{\n                            Button(Body: #gn_group_name#, Class: btn btn-primary ml-sm)\n                        }\n                    }\n                }\n            }\n        }\n        DBFind(@1roles,src_rid).Where({ecosystem:#ecosystem_id#}).Count(r)\n        If(#r#>0){\n            Div(form-group){\n            Label($@1q_question_roles$)\n                If(#editable#==1){\n                    Div(input-group mb-sm){\n                        Select(Name: au_roles, Source: src_rid, NameColumn: role_name, ValueColumn: id)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-primary fa fa-plus, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params:\"id=#question_id#, operation=RA\")\n                        }\n                    }\n                }\n                ArrayToSource(au_r_src, #question_au_roles#)\n                ForList(Source: au_r_src, Index:ind){\n                DBFind(@1roles).Where({id:#value#}).Vars(rn)\n                    If(#editable#==1){\n                        If(#value#==0){\n                            Button(Body: $@1q_question_everyone$, Class: btn btn-success ml-sm)\n                        }.Else{\n                            Button(Body: Span(Class: fa fa-remove) #rn_role_name#, Page: @1q_question_edit, Class: btn btn-danger ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"id=#question_id#, au_roles=#value#, operation=RD\")\n                        }\n                    }.Else{\n                        If(#value#==0){\n                            Button(Body: $@1q_question_everyone$, Class: btn btn-success ml-sm)\n                        }.Else{\n                            Button(Body: #rn_role_name#, Class: btn btn-primary ml-sm)\n                        }\n                    }\n                }\n            }\n        }\n        Div(form-group){\n            Label($@1q_answer_change$)\n            If(#editable#==1){\n                Div(input-group mb-sm){\n                    Input(Name: answer)\n                    Div(input-group-btn){\n                        Button(Class: btn btn-primary fa fa-plus, Page: @1q_question_edit, PageParams:\"q_id=#question_id#\", Contract: @1QOperations, Params:\"id=#question_id#, operation=AA\")\n                    }\n                }\n            }\n            ForList(Source: src, Index:ind){\n                If(#editable#==1){\n                    Button(Body: Span(Class: fa fa-remove) #value#, Page: @1q_question_edit, Class: btn btn-primary ml-sm, Contract: @1QOperations, PageParams: \"q_id=#question_id#\", Params: \"id=#question_id#, answer=#value#, operation=AD\")\n                }.Else{\n                    Button(Body: #value#, Class: btn btn-primary ml-sm)\n                }\n            } \n        }\n        Div(form-group){\n            Label($@1status$)\n            Select(Name: status, Source: src_status, NameColumn: status_name, ValueColumn: status_id)\n        }\n        Div(form-group){\n            Label($@1q_lastmodified$)\n            Input(Name: lastmodified,  Value: #time#, Disabled: true)\n        }\n        Div(form-group){\n            Button(Class: btn btn-primary, Body: $@1save$, Contract: @1QOperations, Page: @1q_listing, PageParams: \"q_id=#question_id#\", Params: \"id=#question_id#,operation=E\")\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_graph",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    DBFind(@1questionnaire).Where({id:#q_id#}).Columns(\"id,question,description,answer\").Vars(question)\n    DBFind(@1q_answers).Where({question_id:#question_id#}).Count(answers)\n    Div(row form-group){\n        Div(col-sm-12){\n            ArrayToSource(src, #question_answer#)\n            ForList(Source: src, Index:ind){\n                DBFind(@1q_answers).Where({question_id:#question_id#, decision: #value#}).Count(a)\n                Div(col-sm-3){\n                    Form(panel panel-primary text-center){\n                        Div(panel-heading, Body: #ind# : #value#)\n                        Div(panel-body){\n                            Span(Class: text-primary  ml h1, Body: #a#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_question, PageParams: \"q_id=#question_id#\")\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_log",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    SetVar(this_page, @1q_question_log).(this_table, @1q_answers)\n    Include(@1pager_header)\n    DBFind(@1questionnaire).Where({id:#q_id#}).Columns(\"id\").Vars(q)\n\n    If(#a_id#>0){\n        SetVar(where,\"{question_id:#q_id#,answer_id:#a_id#}\")\n    }.Else{\n        SetVar(where,\"{question_id:#q_id#}\")\n    }\n\n    DBFind(@1q_answers,src_a).Where(#where#).Limit(#pager_limit#).Custom(ans){\n        #answer_id# : #decision#\n    }.Custom(c_m){\n        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#member#}).Vars(m)\n        If(Or(#m_id#>0,#m_id#<0)){\n            SetVar(member_name, #m_member_name#)\n        }.Else{\n            SetVar(member_name, Address(#id#))\n        }\n        Span(#member_name#)\n    }.Custom(c_ecosystem){\n        DBFind(@1ecosystems).Where({id:#ecosystem#}).Vars(e)\n        If(Or(#e_id#>0,#e_id#<0)){\n            SetVar(eco_name, #e_name#)\n        }.Else{\n            SetVar(eco_name, #ecosystem#)\n        }\n        Span(#eco_name#)\n    }.Custom(time){\n        DateTime(#lastmodified#,HH:MI DD.MM.YYYY)\n    }.Count(a)\n    \n    Div(row form-group){\n        Div(col-sm-12){           \n            Table(Source: src_a, Columns:\"$@1@q_answer_member$=c_m,$@1ecosystem_name$=c_ecosystem,$@1q_date_lastmodified$=time,$@1q_answer$=ans\")\n            Div(mt-sm ml-lg mr-sm mb-sm){\n                Include(@1pager)\n            }\n        }\n    } \n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_question, PageParams: \"q_id=#q_id#\")\n        }\n    }\n}",
            "Menu": "default_menu"
        },
        {
            "Name": "q_question_new",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Data(bool,\"value,name\"){\n        0,$@1ex_unavaliable$\n        1,$@1ex_avaliable$\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Title){\n                Span(Body: LangRes(@1title)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: question, Type: text)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Description){\n                Span(Body: LangRes(@1q_description)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-sm-9){\n            Input(Type: textarea, Name: description, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Answer){\n                Span(Body: LangRes(@1q_answer)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-sm-9){\n            Input(Type: text, Name: answer, Value: \"\", Placeholder: $@1q_hint_answer_placeholder$)\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1q_hint_answer))\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: end_date){\n                LangRes(@1date_end)\n                Span(*,text-danger)\n            }\n        }\n        Div(col-md-9 text-left){\n            Div(row){\n                Div(col-md-6){\n                    Input(Name: end_date, Type: date)\n                }\n                Div(col-md-6){\n                    Input(Name: end_time, Type: time)\n                }\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: Notifications){\n                Span(Body: LangRes(@1q_notifications_send)\n                Span(Class: text-danger, Body:*)\n            }      \n        }\n        Div(col-sm-9){\n            Input(Name: notifications, Type: checkbox, Value: false)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: AnswerHide){\n                Span(Body: LangRes(@1q_answer_hide)\n                Span(Class: text-danger, Body:*)\n            }\n        }\n        Div(col-sm-9){\n            Input(Name: hide, Type: checkbox, Value: false)\n        }\n    }\n    Div(row form-group){\n        Div(col-sm-3 mt-sm text-right){\n            Label(For: AnswerChange){\n                Span(Body: LangRes(@1q_answer_change)\n                Span(Class: text-danger, Body:*)\n            }\n            \n        }\n        Div(col-sm-9){\n            Input(Name: change, Type: checkbox, Value: false)\n        }\n    }\n    Div(row mt){\n        Div(col-md-12){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1q_listing)\n            Button(Body: LangRes(@1create), Page: @1q_listing, Class: btn pull-right btn-primary, Contract: @1QOperations, Params: \"operation=C\")\n        }\n    }\n}",
            "Menu": "default_menu"
        }
    ],
    "parameters": [],
    "tables": [
        {
            "Name": "q_answers",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "questionnaire",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        }
    ]
}