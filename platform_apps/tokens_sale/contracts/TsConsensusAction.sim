contract TsConsensusAction {
    data {
        Action string
        WalletId int
        NotificId int
    }
    conditions{
        var basicAppId int
        basicAppId = Int(DBFind("@1applications").Where({ecosystem:1, name:"Basic"}).One("id"))
        if basicAppId == 0{
            warning LangRes("@1app_not_found", "en")
        }
        $roleConsensus = Int(EcosysParam("role_consensus"))
        if $roleConsensus == 0{
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), "role_consensus")
        }
        if !RoleAccess($roleConsensus){
            warning "this action allowed only for role id #" + $roleConsensus
        }
        $wallet = DBFind("ts_wallets").Where({id:$WalletId, rejected_at:0}).Row()
        if !$wallet{
            warning "Buyer wallet not found"
        }
        if Int($wallet["signed_at"]) == 0{
            warning "Buyer wallet not signed"
        }
        if $wallet["key_id_signer"] > 0{
            if $wallet["key_id_signer"] != $key_id{
                warning "This wallet was signed by asbl early"
            }
        }
    }

    action {
        if $Action == "accept"{
            DBUpdate("ts_wallets", Int($wallet["id"]), {key_id_signer:$key_id})
            // buyer notification
            var params map
            params["wallet_id"] = $wallet["id"]
            @1NotificationsSend("member_id,sender,text_header,page_name,params_map,closure_type", Int($wallet["key_id_buyer"]), 1, "Your wallet approved", "ts_buyer_congratulation", params, 1)

        }elif $Action == "reject"{
            DBUpdate("ts_wallets", Int($wallet["id"]), {rejected_at:$time})
        }
        @1NotificationsClose("notific_id", $NotificId)
    }
}
