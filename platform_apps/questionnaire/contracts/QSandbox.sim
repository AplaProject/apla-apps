contract QSandbox {
    data {
        id int //recheck id to normal id
        au_groups int "optional"
        au_roles int "optional"
        operation string
    } 
    conditions {
        //unqiue group or role
    }
    action {
        var q map
        var audience arNew array
        var buffer string
        //warning Sprintf("%v %v", $au_roles, $au_groups)
        if $operation == "RA" {
            audience = JSONDecode(DBFind("@1questionnaire").Where({"id":$id}).Columns("au_roles").One("au_roles"))
            audience = Append(audience, $au_roles)
            q["au_roles"] = JSONEncode(audience)
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "GA" {
            audience = JSONDecode(DBFind("@1questionnaire").Where({"id":$id}).Columns("au_groups").One("au_groups"))
            audience = Append(audience, $au_groups)
            q["au_groups"] = JSONEncode(audience)
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "RD" {
            audience = JSONDecode(DBFind("@1questionnaire").Where({"id":$id}).Columns("au_roles").One("au_roles"))
            //buffer = Join(audience, `,`)
            var i int
            while i < Len(audience) {
                if audience[i] != $au_roles {
                    arNew = Append(arNew, audience[i])
                }
                i = i + 1
            } 
            warning Sprintf("%v", arNew)
            //if Contains(buffer, Str($au_roles)) {
                //buffer = Replace(buffer, `,` + $au_roles, ``)
            //}
            //audience = Split(buffer, `,`)
            //if HasPrefix(buffer, Str($au_roles)) {
                //audience[0] = ``
            //}
            //warning Sprintf("%v", audience)
            q["au_roles"] = JSONEncode(audience)
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "GD" {
            audience = JSONDecode(DBFind("@1questionnaire").Where({"id":$id}).Columns("au_groups").One("au_groups"))
            buffer = Join(audience, ",")
            if Contains(buffer, Str($au_groups)) {
                buffer = Replace(buffer, `,` + Str($au_groups), ``)
            }
            audience = Split(buffer, ",")
            if HasPrefix(buffer, Str($au_roles)) {
                audience[0] = ``
            }
            q["au_groups"] = JSONEncode(audience)
            DBUpdate("@1questionnaire", $id, q)
        }
    }
}