contract QOperations {
    data {
        id int "optional"
        description string
        question string
        answer string
        operation string
        status int
        notifications bool "optional"
        hide bool "optional"
        change bool "optional"
        end_date string
        end_time string
    }
    func trimZeroTime(s string) string {
        if Contains(s, "T00:00:00Z") {
            s = Replace(s, "T00:00:00Z", "")
        }
        return s
    }
    func dateAddTime(d, t string) string {
        var dt string
        if Size(t) == 5 {
            dt = Sprintf("%v %v:00", trimZeroTime(d), t)
        }
        return dt
    }
    func isCalledFromPage() bool {
        return $stack[0] == Sprintf("@%v%v", $ecosystem_id, $this_contract)
    }
    func expToTimestamp() {
        $ext_string = dateAddTime($end_date, $end_time)
        if $time > UnixDateTime($ext_string) {
            warning LangRes("@1ending_date_invalid", "en")
        }
    }
    conditions {
        //check name unqie
        //admin only
        //no answer found
        //check deleted
        if $operation == "C" {
            expToTimestamp()
            //check name uniques
            //check function time before real time
            if $time > UnixDateTime($ext_string) {
                warning LangRes("@1q_error_expdate", "en")
            }
        }     
    }
    action {
        //aucditorium
        //notifications when start and changing status
        if $operation == "C" {
            var decision array
            decision = Split($answer, ",")
            var q params map
            params["notifications"] = $notifications
            params["hide"] = $hide
            params["change"] = $change
            q["question"] = $question
            q["description"] = $description
            q["answer"] = JSONEncode(decision)
            q["ecosystem"] = $ecosystem_id
            q["deleted"] = 0
            q["init"] = $key_id
            q["status"] = 0
            q["au_roles"] = `[]`
            q["au_groups"] = `[]`
            q["created_at"] = $time
            q["params"] = JSONEncode(params)
            q["lastmodified"] = $time 
            q["expired"] = UnixDateTime($ext_string)
            DBInsert("@1questionnaire", q)
        }
        if $operation == "E" {
            var q map
            q["description"] = $description
            q["question"] = $question
            q["ecosystem"] = $ecosystem_id
            q["init"] = $key_id
            //check status to edit
            q["status"] = $status
            q["lastmodified"] = $time
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "AA" {
            var decision array
            decision = DBFind("@1questionnaire").Columns("answer").Where({"id":$id,ecosystem:$ecosystem_id}).One("answer")
            decision = JSONDecode(decision)
            decision = Append(decision, Str($answer))
            var q map
            q["answer"] = JSONEncode(decision)
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "AD" {
            var decision array
            decision = DBFind("@1questionnaire").Columns("answer").Where({"id":$id,ecosystem:$ecosystem_id}).One("answer")
            decision = JSONDecode(decision)
            var buffer string
            buffer = Join(decision, ",")
            if Contains(buffer, Str($answer)) {
                buffer = Replace(buffer, `,` + Str($answer), ``)
            }
            if HasPrefix(buffer, Str($answer)) {
                buffer = Replace(buffer, Str($answer) + `,`, ``)
            }
            decision = Split(buffer, ",")
            var q map
            q["answer"] = JSONEncode(decision)
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "T" {
            //notification send
            var q map
            q["init"] = $key_id
            q["status"] = 1
            q["lastmodified"] = $time
            DBUpdate("@1questionnaire", $id, q)
        }
        if $operation == "D" {
            //notifications close
            var q map
            q["init"] = $key_id
            q["status"] = 3
            q["deleted"] = 1
            q["lastmodified"] = $time
            DBUpdate("@1questionnaire", $id, q)
        }
    }
}