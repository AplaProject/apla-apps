contract QOperations {
    data {
        Id int "optional"
        Description string
        Question string
        Answer string
        Operation string
        Notifications bool "optional"
        Hide bool "optional"
        Change bool "optional"
        AuGroups int "optional"
        AuRoles int "optional"
        EndDate string
        EndTime string
    }

    func trimZeroTime(s string) string {
        if Contains(s, "T00:00:00Z") {
            s = Replace(s, "T00:00:00Z", "")
        }
        return s
    }

    func dateAddTime(d, t string) string {
        var dt string
        if Size(t) == 5 {
            dt = Sprintf("%v %v:00", trimZeroTime(d), t)
        }
        return dt
    }

    func expToTimestamp() {
        $ext_string = dateAddTime($EndDate, $EndTime)
        if $block_time > UnixDateTime($ext_string) {
            warning LangRes("@1ending_date_invalid", "en")
        }
    }

    conditions {
        $app = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Questionnaire"}).One("id")
        var admin_ids int
        admin_ids = AppParam(Int($app), "q_admin_role", $ecosystem_id)
        var rids array
        rids = JSONDecode("["+admin_ids+"]")
        if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": {"$in": rids}, "member->member_id": $key_id, "deleted": 0}).Row() {
            warning LangRes("@1access_denied", "en")
        }

        if $Operation == "GA" {
            $groups = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).Columns("au_groups").One("au_groups"))
            var i int
            i = 0
            while i < Len($groups) {
                if $groups[i] == $AuRoles {
                    warning LangRes("@1q_error_groups", "en")
                }
                i = i + 1
            }
        }
        if $Operation == "RA" {
            $roles = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).Columns("au_roles").One("au_roles"))
            var i int
            i = 0
            while i < Len($roles) {
                if $roles[i] == $AuRoles {
                    warning LangRes("@1q_error_roles", "en")
                }
                i = i + 1
            }
        }
        if $Operation == "AA" {
            if $Answer == "" {
                warning LangRes("@1q_error_blank", "en")
            }
        }
        if $Operation == "C" {
            if $Description == "" {
                warning LangRes("@1q_error_blank", "en")
            }
            if $Question == "" {
                warning LangRes("@1q_error_blank", "en")
            }
            expToTimestamp()
            if $block_time > UnixDateTime($ext_string) {
                warning LangRes("@1q_error_expdate", "en")
            }
        }
    }

    action {
        var q map audience audience_new array
        //notifications when start and changing status
        if $Operation == "C" {
            var decision array
            decision = JSONDecode(DBFind("@1buffer_data").Where({"key": "q_answers", "member_id": $key_id, "ecosystem": $ecosystem_id}).One("value"))
            var params map
            params["notifications"] = $Notifications
            params["hide"] = $Hide
            params["change"] = $Change
            q["question"] = $Question
            q["description"] = $Description
            q["answer"] = JSONEncode(decision)
            q["ecosystem"] = $ecosystem_id
            q["deleted"] = 0
            q["init"] = $key_id
            q["status"] = 0
            q["au_roles"] = "[0]"
            q["au_groups"] = "[0]"
            q["created_at"] = $block_time
            q["params"] = JSONEncode(params)
            q["lastmodified"] = $block_time
            q["expired"] = UnixDateTime($ext_string)
            DBInsert("@1q_list", q)
        }
        if $Operation == "E" {
            q["description"] = $Description
            q["question"] = $Question
            q["ecosystem"] = $ecosystem_id
            q["init"] = $key_id
            q["lastmodified"] = $block_time
            DBUpdate("@1q_list", $Id, q)
        }
        if $Operation == "AA" {
            if $Id == 0 {
                if !DBFind("@1buffer_data").Where({"key": "q_answers", "member_id": $key_id, "ecosystem": $ecosystem_id}).One("value") {
                    var decision array
                    decision = Append(decision, Str($Answer))
                    q["value"] = JSONEncode(decision)
                    q["member_id"] = $key_id
                    q["key"] = "q_answers"
                    q["ecosystem"] = $ecosystem_id
                    DBInsert("@1buffer_data", q)
                } else {
                    var decision array
                    $id_upd = Int(DBFind("@1buffer_data").Where({"key": "q_answers", "member_id": $key_id, "ecosystem": $ecosystem_id}).One("id"))
                    decision = JSONDecode(DBFind("@1buffer_data").Where({"key": "q_answers", "member_id": $key_id, "ecosystem": $ecosystem_id}).One("value"))
                    decision = Append(decision, Str($Answer))
                    q["value"] = JSONEncode(decision)
                    DBUpdate("@1buffer_data", $id_upd, q)
                }
            } else {
                var decision array
                decision = JSONDecode(DBFind("@1q_list").Columns("answer").Where({"id": $Id, "ecosystem": $ecosystem_id}).One("answer"))
                decision = Append(decision, Str($Answer))
                q["answer"] = JSONEncode(decision)
                DBUpdate("@1q_list", $Id, q)
            }
        }
        if $Operation == "AD" {
            if $Id == 0 {
                var decision decision_new array
                decision = JSONDecode(DBFind("@1buffer_data").Where({"key": "q_answers", "member_id": $key_id}).One("value"))
                $id_upd = Int(DBFind("@1buffer_data").Where({"key": "q_answers", "member_id": $key_id}).One("id"))
                var i int
                while i < Len(decision) {
                    if decision[i] != Str($Answer) {
                        decision_new = Append(decision_new, decision[i])
                    }
                    i = i + 1
                }
                q["value"] = JSONEncode(decision_new)
                DBUpdate("@1buffer_data", $id_upd, q)
            } else {
                var decision decision_new array
                decision = JSONDecode(DBFind("@1q_list").Columns("answer").Where({"id": $Id, "ecosystem": $ecosystem_id}).One("answer"))
                var i int
                while i < Len(decision) {
                    if decision[i] != Str($Answer) {
                        decision_new = Append(decision_new, decision[i])
                    }
                    i = i + 1
                }
                q["answer"] = JSONEncode(decision_new)
                DBUpdate("@1q_list", $Id, q)
            }
        }
        if $Operation == "RA" {
            audience = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).Columns("au_roles").One("au_roles"))
            if audience[0]==0 {
                audience[0] = $AuRoles
            } else {
                audience = Append(audience, $AuRoles)
            }
            q["au_roles"] = JSONEncode(audience)
            DBUpdate("@1q_list", $Id, q)
        }
        if $Operation == "GA" {
            audience = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).Columns("au_groups").One("au_groups"))
            if audience[0]==0 {
                audience[0] = $AuGroups
            } else {
                audience = Append(audience, $AuGroups)
            }
            q["au_groups"] = JSONEncode(audience)
            DBUpdate("@1q_list", $Id, q)
        }
        if $Operation == "RD" {
            audience = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).Columns("au_roles").One("au_roles"))
            var i int
            if audience[0]==$AuRoles && Len(audience)<2 {
                audience[0] = 0
                q["au_roles"] = JSONEncode(audience)
            } else {
                while i < Len(audience) {
                    if audience[i] != $AuRoles {
                        audience_new = Append(audience_new, audience[i])
                    }
                    i = i + 1
                }
                q["au_roles"] = JSONEncode(audience_new)
            }
            DBUpdate("@1q_list", $Id, q)
        }
        if $Operation == "GD" {
            audience = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).Columns("au_groups").One("au_groups"))
            var i int
            if audience[0]==$AuGroups && Len(audience)<2 {
                audience[0] = 0
                q["au_groups"] = JSONEncode(audience)
            } else {
                while i < Len(audience) {
                    if audience[i] != $AuRoles {
                        audience_new = Append(audience_new, audience[i])
                    }
                    i = i + 1
                }
                q["au_groups"] = JSONEncode(audience)
            }
            DBUpdate("@1q_list", $Id, q)
        }
        if $Operation == "T" {
            q["init"] = $key_id
            q["status"] = 1
            q["lastmodified"] = $block_time
            DBUpdate("@1q_list", $Id, q)
            var params map
            params = DBFind("@1q_list").Where({"id": $Id}).Columns("id,question,params->notifications").Row()
            var rid_array grp_array array
            rid_array = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).One("au_roles"))
            grp_array = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).One("au_groups"))
            if rid_array[0] == 0 && grp_array[0] == 0 && params["params.notifications"] == "true" {
                var participants array
                participants = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "deleted": 0}).Columns("id")
                var i int
                while i < Len(participants) {
                    var participant map
                    participant = participants[i]
                    @1NotificationsSend("member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type", Int(participant["id"]), 1, "fa fa-question-circle", LangRes("@1q_new_question", "en"), params["question"], "@1q_question", params, 0, 0)
                    i = i + 1
                }
            }
        }
        if $Operation == "Z" {
            q["init"] = $key_id
            q["status"] = 3
            q["lastmodified"] = $block_time
            DBUpdate("@1q_list", $Id, q)
            var question string
            var params map
            params = DBFind("@1q_list").Where({"id": $Id}).Columns("id,question,params->notifications").Row()
            question = params["question"]
            var c_notifications map
            c_notifications = DBFind("@1notifications").Where({"page_params->question": question, "page_params->id": $Id, "ecosystem": $ecosystem_id}).Columns("id")
            var rid_array grp_array array
            rid_array = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).One("au_roles"))
            grp_array = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).One("au_groups"))
            if rid_array[0] == 0 && grp_array[0] == 0 && params["params.notifications"] == "true" {
                var i int
                while i < Len(c_notifications) {
                    var notific map
                    notific = c_notifications[i]
                    @1NotificationsClose("notific_id", Int(notific["id"]))
                    i = i + 1
                }
            }
        }
        if $Operation == "D" {
            q["init"] = $key_id
            q["status"] = 3
            q["deleted"] = 1
            q["lastmodified"] = $block_time
            DBUpdate("@1q_list", $Id, q)
            var question string
            var params map
            params = DBFind("@1q_list").Where({"id": $Id}).Columns("id,question,params->notifications").Row()
            question = params["question"]
            var c_notifications map
            c_notifications = DBFind("@1notifications").Where({"page_params->question": question, "page_params->id": $Id, "ecosystem": $ecosystem_id}).Columns("id")
            var rid_array grp_array array
            rid_array = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).One("au_roles"))
            grp_array = JSONDecode(DBFind("@1q_list").Where({"id": $Id}).One("au_groups"))
            if rid_array[0] == 0 && grp_array[0] == 0 && params["params.notifications"] == "true" {
                var i int
                while i < Len(c_notifications) {
                    var notific map
                    notific = c_notifications[i]
                    @1NotificationsClose("notific_id", Int(notific["id"]))
                    i = i + 1
                }
            }
        }
    }
}