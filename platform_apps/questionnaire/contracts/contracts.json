{
    "blocks": [],
    "contracts": [
        {
            "Name": "QAnswer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QAnswer {\n    data {\n        id int \"optional\"\n        operation string\n        question_id int\n        decision string\n        answer_id int\n    }\n    conditions {\n        //check status\n    }\n    action {\n        if $time > Int(DBFind(\"@1questionnaire\").Where({\"id\":$question_id}).Columns(\"expired\").One(\"expired\")) {\n            var q map\n            q[\"status\"] = 2\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $question_id, q)\n        } else {\n            if $operation == \"CV\" {\n                var a map\n                a[\"member\"] = $key_id\n                a[\"decision\"] = $decision\n                a[\"answer_id\"] = $answer_id\n                a[\"ecosystem\"] = $ecosystem_id\n                a[\"lastmodified\"] = $time\n                a[\"question_id\"] = $question_id\n                DBInsert(\"@1q_answers\", a)\n            }\n            if $operation == \"UV\" {\n                var a map\n                a[\"member\"] = $key_id\n                a[\"decision\"] = $decision\n                a[\"answer_id\"] = $answer_id\n                a[\"ecosystem\"] = $ecosystem_id\n                a[\"lastmodified\"] = $time\n                a[\"question_id\"] = $question_id\n                DBUpdate(\"@1q_answers\", $id, a)\n            }\n        }\n    }\n}"
        },
        {
            "Name": "QOperations",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract QOperations {\n    data {\n        id int \"optional\"\n        description string\n        question string\n        answer string\n        operation string\n        status int\n        notifications bool \"optional\"\n        hide bool \"optional\"\n        change bool \"optional\"\n        au_groups int \"optional\"\n        au_roles int \"optional\"\n        end_date string\n        end_time string\n    }\n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n    func isCalledFromPage() bool {\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\n    }\n    func expToTimestamp() {\n        $ext_string = dateAddTime($end_date, $end_time)\n        if $time > UnixDateTime($ext_string) {\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\n        }\n    }\n    conditions {\n        //check name unqie\n        //admin only\n        //no answer found\n        //check deleted\n\n        //unqiue group or role only One\n        //we can't delete zero\n\n        //edit only before start\n    \n        if $operation == \"RD\" && $au_roles==0 {\n            warning\n        }\n        if $operation == \"GD\" && $au_groups==0 {\n            warning\n        }\n        if $operation == \"C\" {\n            expToTimestamp()\n            //check name uniques\n            //check function time before real time\n            if $time > UnixDateTime($ext_string) {\n                warning LangRes(\"@1q_error_expdate\", \"en\")\n            }\n        }     \n    }\n    action {\n        var q map\n        var audience audience_new array\n        //notifications when start and changing status\n        if $operation == \"C\" {\n            var decision array\n            decision = Split($answer, \";\")\n            var params map\n            params[\"notifications\"] = $notifications\n            params[\"hide\"] = $hide\n            params[\"change\"] = $change\n            q[\"question\"] = $question\n            q[\"description\"] = $description\n            q[\"answer\"] = JSONEncode(decision)\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"deleted\"] = 0\n            q[\"init\"] = $key_id\n            q[\"status\"] = 0\n            q[\"au_roles\"] = `[0]`\n            q[\"au_groups\"] = `[0]`\n            q[\"created_at\"] = $time\n            q[\"params\"] = JSONEncode(params)\n            q[\"lastmodified\"] = $time \n            q[\"expired\"] = UnixDateTime($ext_string)\n            DBInsert(\"@1questionnaire\", q)\n        }\n        if $operation == \"E\" {\n            q[\"description\"] = $description\n            q[\"question\"] = $question\n            q[\"ecosystem\"] = $ecosystem_id\n            q[\"init\"] = $key_id\n            //check status to edit\n            q[\"status\"] = $status\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"AA\" {\n            var decision array\n            decision = JSONDecode(DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"answer\"))\n            decision = Append(decision, Str($answer))\n            q[\"answer\"] = JSONEncode(decision)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"AD\" {\n            var decision decision_new array\n            decision = JSONDecode(DBFind(\"@1questionnaire\").Columns(\"answer\").Where({\"id\":$id,ecosystem:$ecosystem_id}).One(\"answer\"))\n            var i int\n            while i < Len(decision) {\n                if decision[i] != Str($answer) {\n                    decision_new = Append(decision_new, decision[i])\n                }\n                i = i + 1\n            } \n            q[\"answer\"] = JSONEncode(decision_new)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"RA\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_roles\").One(\"au_roles\"))\n            if audience[0]==0 {\n                audience[0] = $au_roles\n            } else {\n                audience = Append(audience, $au_roles)\n            }\n            q[\"au_roles\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"GA\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_groups\").One(\"au_groups\"))\n            if audience[0]==0 {\n                audience[0] = $au_groups\n            } else {\n                audience = Append(audience, $au_groups)\n            }\n            q[\"au_groups\"] = JSONEncode(audience)\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"RD\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_roles\").One(\"au_roles\"))\n            var i int\n            if audience[0]==$au_roles && Len(audience)<2 {\n                audience[0] = 0\n                q[\"au_roles\"] = JSONEncode(audience)\n            } else {\n                while i < Len(audience) {\n                    if audience[i] != $au_roles {\n                        audience_new = Append(audience_new, audience[i])\n                    }\n                    i = i + 1\n                }\n                q[\"au_roles\"] = JSONEncode(audience_new)\n            }\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"GD\" {\n            audience = JSONDecode(DBFind(\"@1questionnaire\").Where({\"id\":$id}).Columns(\"au_groups\").One(\"au_groups\"))\n            var i int\n            if audience[0]==$au_groups && Len(audience)<2 {\n                audience[0] = 0\n                q[\"au_groups\"] = JSONEncode(audience)\n            } else {\n                while i < Len(audience) {\n                    if audience[i] != $au_roles {\n                        audience_new = Append(audience_new, audience[i])\n                    }\n                    i = i + 1\n                }\n                q[\"au_groups\"] = JSONEncode(audience)\n            }\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }        \n        if $operation == \"T\" {\n            //notification send\n            q[\"init\"] = $key_id\n            q[\"status\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n        if $operation == \"D\" {\n            //notifications close\n            q[\"init\"] = $key_id\n            q[\"status\"] = 3\n            q[\"deleted\"] = 1\n            q[\"lastmodified\"] = $time\n            DBUpdate(\"@1questionnaire\", $id, q)\n        }\n    }\n}"
        }
    ],
    "data": [],
    "languages": [],
    "menus": [],
    "pages": [],
    "parameters": [],
    "tables": []
}