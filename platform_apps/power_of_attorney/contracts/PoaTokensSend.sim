contract PoaTokensSend {
    data {
        PoaId int
        Amount money
        Recipient string
        Comment string "optional"
    }

    func checkPrev(contracts array) {
        var i int
        $prevContract = $stack[0]
        if Len($stack) > 2 {
            $prevContract = $stack[Len($stack) - 2]
        }
        while i < Len(contracts) {
            if $prevContract == contracts[i] {
                return
            }
            i = i + 1
        }
        warning LangRes("@1tokens_transfer_cannot_be_made", "en")
    }

    func checkKeys() {
        $Sender = $poa["poa_sender.member_id"]
        $sender_id = AddressToId($Sender)
        $recipient_id = AddressToId($Recipient)

        if $sender_id == 0 {
            warning Sprintf(LangRes("@1sender_x_invalid", "en"), $Sender)
        }
        if $recipient_id == 0 {
            warning Sprintf(LangRes("@1recipient_x_invalid", "en"), $Recipient)
        }
    }

    func checkPoa() {
        $poa = DBFind("@1poa").Where({"id":$PoaId, "contract":"@1PoaTokensSend", "ecosystem":$ecosystem_id, "deleted": 0}).Columns("id,date_expiration,params,poa_recipient->member_id,poa_sender->member_id").Row()
        if !$poa {
            warning LangRes("@1poa_not_found", "en")
        }
        $params = JSONDecode($poa["params"])
        if Int($poa["poa_recipient.member_id"]) != $key_id{
            $poa_role_id = Int($params["role_id"])
            if $poa_role_id > 0 {
                if !RoleAccess($poa_role_id){
                    warning LangRes("@1tokens_transfer_cannot_be_made", "en")
                }
            }else{
                warning LangRes("@1tokens_transfer_cannot_be_made", "en")
            }
        }

        if $block_time > Int($poa["date_expiration"]) {
            warning LangRes("@1poa_expired", "en")
        }
        $cur_date_day = UnixDateTime(Substr(BlockTime(), 0, 10) + " 00:00:00")
        $cur_date_month = UnixDateTime(Substr(BlockTime(), 0, 8) + "01 00:00:00")
    }

    func checkLimit() {
        if $cur_date_day > Int($params["date_day"]) {
            $params["date_day"] = $cur_date_day
            $params["amount_day"] = 0
        }
        if $cur_date_month > Int($params["date_month"]) {
            $params["date_month"] = $cur_date_month
            $params["amount_month"] = 0
        }

        if Money($params["amount_max"]) < Money($Amount) {
            warning LangRes("poa_exceeded_single_limit", "en")
        }
        if Money($params["amount_max_day"]) < Money($params["amount_day"]) + Money($Amount) {
            warning LangRes("poa_exceeded_daily_limit", "en")
        }
        if Money($params["amount_max_month"]) < Money($params["amount_month"]) + Money($Amount) {
            warning LangRes("poa_exceeded_monthly_limit", "en")
        }
    }

    func updateParams() {
        $params["amount_day"] = Money($params["amount_day"]) + Money($Amount)
        $params["amount_month"] = Money($params["amount_month"]) + Money($Amount)
        @1PoaUpdateParams("PoaId,ParamsStr", $PoaId, JSONEncode($params))
    }

    func createVotingTransfer(){
        var votingId voters duration volume quorum type typeCount decision participants int title desc contractAccept string contractParams map
        voters = Int($params["role_id"])
        title = Sprintf("Multisigned transfer. %v", BlockTime())
        desc = Sprintf("PoA %v. Amount: %v. Sender: %v. Recipient: %v. Creator: %v", $PoaId, $Amount, $Sender, $Recipient, $key_id)
        volume = Int($params["voting_volume"])
        quorum = Int($params["voting_quorum"])
        duration = Int($params["voting_duration"])
        type = 1
        decision = 5 // выполнение контракта
        participants = 3 // ролевое
        typeCount = 0 // процентное

        votingId = @1VotingCreate("voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval,count_type_voters", title, type, desc, participants, decision, volume, quorum, duration, typeCount)
        if votingId == 0 {
            warning LangRes("@1voting_creation_error", "en")
        }
        contractAccept = "@1PoaVotingAccept"
        contractParams["VotingId"] = votingId
        contractParams["PoaId"] = $PoaId
        contractParams["Amount"] = $Amount
        contractParams["Recipient"] = $Recipient
        contractParams["Comment"] = $Comment
        @1VotingSubjectContract("votingID,contract_accept,contract_accept_params,contract_reject", votingId, contractAccept, JSONEncode(contractParams), "")
    }

    conditions {
        checkPrev(["@1PoaTokensSend", "@1PoaVotingAccept"])
        checkPoa()
        checkKeys()
        checkLimit()
    }

    action {
        var wallet map
        wallet = DBFind("@1keys").Columns("id,multi").Where({id:$sender_id, ecosystem:$ecosystem_id}).Row()
        if wallet["multi"] == 1 && $prevContract != "@1PoaVotingAccept"{
            // голосованием
            createVotingTransfer()
        }else{
            @1TokensTransfer("Amount,SenderId,RecipientId,Comment", $Amount, $sender_id, $recipient_id, $Comment)
            updateParams()
        }
    }
}