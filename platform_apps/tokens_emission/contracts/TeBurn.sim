contract TeBurn {
    data {
        Amount money
    }

    func checkSender() {
        var sender_map map
        sender_map = DBFind("@1keys").Where({"id": $key_id, "ecosystem": $ecosystem_id}).Row()

        if !sender_map {
            warning Sprintf(LangRes("@1sender_x_invalid", "en"), $key_id)
        }
        if Int(sender_map["blocked"]) != 0 {
            warning LangRes("@1sender_blocked", "en")
        }
        if Int(sender_map["deleted"]) != 0 {
            warning LangRes("@1sender_deleted", "en")
        }
        if Money(sender_map["amount"]) < $Amount {
            warning LangRes("@1amount_less_than_needed", "en")
        }
    }

    conditions {
        checkSender()     //check the sender
        
        //check amount
        if $Amount == 0 {
            warning LangRes("@1amount_zero", "en")
        }
        if $Amount < 0 {
            warning LangRes("@1amount_less_zero", "en")
        }

        $item = DBFind("@1ecosystems").WhereId($ecosystem_id).Row()
        if $item["type_withdraw"] == 1 {
            warning LangRes("@1burning_blocked", "en")
        }
    }

    action {
        var mb map
        var burn map arr array
        burn["type"] = "burn"
        burn["time"] = Str($block_time)
        burn["val"] = Money($Amount)
        arr = JSONDecode($item["emission_amount"])
        arr = Append(arr, burn)
        mb["emission_amount"] = JSONEncode(arr)
        DBUpdate("@1ecosystems", $ecosystem_id, mb)

        var m map
        m["sender_id"] = $key_id
        m["recipient_id"] = $guest_key
        m["amount"] = $Amount
        m["comment"] = "New burn"
        m["block_id"] = $block
        m["txhash"] = $txhash
        m["ecosystem"] = $ecosystem_id
        m["type"] = 4
        m["created_at"] = $block_time
        DBInsert("@1history", m)

        DBUpdateExt("@1keys", {"id": $key_id, "ecosystem": $ecosystem_id}, {"-amount": $Amount})
        DBUpdateExt("@1keys", {"id": $guest_key, "ecosystem": $ecosystem_id}, {"+amount": $Amount})
    }
}