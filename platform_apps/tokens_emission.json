{
    "name": "Tokens emission",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#ecosystem_id# > 1){\n    MenuItem(Title: $@1emission_tokens$, Page: @1te_view, Icon: \"icon-chart\")\n}",
            "Type": "menu"
        },
        {
            "Name": "burn",
            "Trans": "{\"en\": \"Burn\", \"ru\": \"Cжечь\"}",
            "Type": "languages"
        },
        {
            "Name": "burning_amount",
            "Trans": "{\"en\": \"Amount of burning\", \"ru\": \"Сумма сжигания\"}",
            "Type": "languages"
        },
        {
            "Name": "burning_available",
            "Trans": "{\"en\": \"Burning available\", \"ru\": \"Сжигание доступно\"}",
            "Type": "languages"
        },
        {
            "Name": "burning_blocked",
            "Trans": "{\"en\": \"Burning blocked\", \"ru\": \"Сжигание заблокировано\"}",
            "Type": "languages"
        },
        {
            "Name": "burning_irreversible",
            "Trans": "{\"en\": \"Attention! Burning tokens is irreversible!\", \"ru\": \"Внимание! Сжигание токенов необратимо!\"}",
            "Type": "languages"
        },
        {
            "Name": "burning_tokens",
            "Trans": "{\"en\": \"Burning tokens\", \"ru\": \"Сжигание токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "completed_stages",
            "Trans": "{\"en\": \"Completed stages\", \"ru\": \"Завершённые этапы\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_amount",
            "Trans": "{\"en\": \"Emission amount\", \"ru\": \"Сумма эмиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_available",
            "Trans": "{\"en\": \"Emission available\", \"ru\": \"Эмиссия доступна\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_blocked",
            "Trans": "{\"en\": \"Emission blocked\", \"ru\": \"Эмиссия заблокирована\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_conditions_contract_not_found",
            "Trans": "{\"en\": \"The conditions contract for the emission extension was not found\", \"ru\": \"Контракт, содержащий условия для продления эмиссии, не найден\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_new",
            "Trans": "{\"en\": \"New emission\", \"ru\": \"Новая эмиссия\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_not_found",
            "Trans": "{\"en\": \"The emission was not found\", \"ru\": \"Эмиссия не найдена\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_not_fulfilled",
            "Trans": "{\"en\": \"Token emission in this ecosystem has not yet been fulfilled.\", \"ru\": \"Эмиссия токенов в этой экосистеме еще не выполнена.\"}",
            "Type": "languages"
        },
        {
            "Name": "emission_tokens",
            "Trans": "{\"en\": \"Token emission\", \"ru\": \"Эмиссия токенов\"}",
            "Type": "languages"
        },
        {
            "Name": "template_creation_error_x_unspecified",
            "Trans": "{\"en\": \"Creation error: %v unspecified\", \"ru\": \"Ошибка создания: %v не определено\"}",
            "Type": "languages"
        },
        {
            "Name": "token_title",
            "Trans": "{\"en\": \"Token title\", \"ru\": \"Название токена\"}",
            "Type": "languages"
        },
        {
            "Name": "type_emission",
            "Trans": "{\"en\": \"Emission type\", \"ru\": \"Тип эмиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "type_withdraw",
            "Trans": "{\"en\": \"Withdrawal type\", \"ru\": \"Тип погашения\"}",
            "Type": "languages"
        },
        {
            "Name": "want_make_burn",
            "Trans": "{\"en\": \"Are you sure you want to burn tokens? This action is irreversible!\", \"ru\": \"Вы уверены, что хотите сжечь токены? Это действие необратимо!\"}",
            "Type": "languages"
        },
        {
            "Name": "want_make_emission",
            "Trans": "{\"en\": \"Are you sure you want to emission tokens?\", \"ru\": \"Вы уверены, что хотите выполнить эмиссию токенов?\"}",
            "Type": "languages"
        },
        {
            "Name": "type_emission",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1emission_blocked,@1emission_available",
            "Type": "app_params"
        },
        {
            "Name": "type_withdraw",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1burning_blocked,@1burning_available",
            "Type": "app_params"
        },
        {
            "Name": "te_burn",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\n    Div(row){\n        Div(col-md-3 mt-sm text-right){\n            Label(){\n                LangRes(@1burning_amount)\n                Span(Class: text-danger, Body:*)\n            }\n        }\n        Div(col-md-9 text-left){\n            Input(Name: Amount, Type: number)\n            Span(Class:text-danger m0, Body: $@1burning_irreversible$)\n        }\n    }\n    Button(Body: LangRes(@1burn), Class: btn btn-primary pull-right mt, Page: @1te_view, Contract: @1TeBurn).Alert(Text: \"$@1want_make_burn$\", ConfirmButton: \"$@1yes$\", CancelButton: \"$@1no$\", Icon: icon-question)\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1te_view)\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "te_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens emission\", deleted:0, ecosystem:1}).Vars(application)\nAppParam(App:#application_id#, Name:type_emission, Source:type_emission, Ecosystem:1)\nAppParam(App:#application_id#, Name:type_withdraw, Source:type_withdraw, Ecosystem:1)\nDBFind(@1ecosystems).WhereId(#ecosystem_id#).Vars(e)\n\nForm(){\n    Div(row){\n        Div(col-md-3 mt-sm text-right){\n            Label(){\n                LangRes(@1emission_amount)\n                Span(Class: text-danger, Body:*)\n            }\n        }\n        Div(col-md-9 text-left){\n            Input(Name: Amount, Type: number)\n        }\n    }\n    If(#e_type_emission#==0){\n        Div(row mt-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1token_title)\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Name: Title)\n            }\n        }\n        Div(row mt-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1type_emission)\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                Select(Name: TypeEmission, Source: type_emission, NameColumn: name, ValueColumn: id)\n            }\n        }\n        Div(row mt-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1type_withdraw)\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                Select(Name: TypeWithdraw, Source: type_withdraw, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: @1te_view, Contract: @1TeCreate).Alert(Text: \"$@1want_make_emission$\", ConfirmButton: \"$@1yes$\", CancelButton: \"$@1no$\", Icon: icon-question)\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1te_view)\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "te_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens emission\", deleted:0, ecosystem:1}).Vars(application)\nAppParam(App:#application_id#, Name:type_emission, Source:type_emission, Ecosystem:1)\nAppParam(App:#application_id#, Name:type_withdraw, Source:type_withdraw, Ecosystem:1)\nDBFind(@1ecosystems).WhereId(#ecosystem_id#).Vars(e)\n\nForm(){\n    Input(Name: TypeChange, Type: Hidden, Value: #TypeChange#)\n    If(#TypeChange# == emission){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1type_emission)\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                Select(Name: Value, Source: type_emission, NameColumn: name, ValueColumn: id, Value: #e_type_emission#)\n            }\n        }\n    }\n    If(#TypeChange# == withdraw){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1type_withdraw)\n                    Span(Class: text-danger, Body:*) \n                }\n            }\n            Div(col-md-9 text-left){\n                Select(Name: Value, Source: type_withdraw, NameColumn: name, ValueColumn: id, Value: #e_type_withdraw#)\n            }\n        }\n    }\n    Button(Body: LangRes(@1change), Class: btn btn-primary pull-right mt, Page: @1te_view, Contract: @1TeChange)\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1te_view)\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "te_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Tokens emission\", deleted:0, ecosystem:1}).Vars(application)\nAppParam(App:#application_id#, Name:type_emission, Source:type_emission, Ecosystem:1)\nAppParam(App:#application_id#, Name:type_withdraw, Source:type_withdraw, Ecosystem:1)\nDBFind(@1ecosystems).WhereId(#ecosystem_id#).Vars(e)\n\nSetTitle($@1emission_tokens$)\nIf(#e_type_emission#>0){\n    If(#e_type_withdraw#==2){    \n        AddToolButton(Page: @1te_burn, Icon: icon-minus, Title: $@1burn$).Popup(50, $@1emission_new$)\n    }\n    If(#e_type_emission#==2){\n        AddToolButton(Page: @1te_create, Icon: icon-plus, Title: $@1emission_new$).Popup(50, $@1emission_new$)\n    }\n}.Else{\n    SetVar(role_admin, EcosysParam(Ecosystem:#ecosystem_id#, Name: role_admin))\n    If(#role_id#==#role_admin#){\n        AddToolButton(Page: @1te_create, Icon: icon-plus, Title: $@1emission_new$).Popup(50, $@1emission_new$)\n    }\n}\n\nForm(content-wrapper){\n    If(#e_type_emission#>0){\n        Div(row){\n            Div(col-sm-8 col-sm-offset-2){\n                Div(list-group-item){\n                    Div(text-center text-bold h4 m0){\n                        LangRes(@1tokens)\n                    }\n                    Div(row mt){\n                        Div(col-sm-6 text-right){\n                            LangRes(@1token_title)\n                        }\n                        Div(col-sm-6 text-left){\n                            Span(Class: ml-sm, Body: #e_token_title#)\n                        }\n                    }\n                    Div(row){\n                        Div(col-sm-6 text-right){\n                            LangRes(@1type_emission)\n                        }\n                        Div(col-sm-6){\n                            Button(Page:@1te_edit, PageParams: \"TypeChange=emission\", Class: btn-xs btn-link){\n                                Span(Class: h5, Body: AppParam(App:#application_id#, Name:type_emission, Index:#e_type_emission#, Ecosystem:1))\n                            }.Popup(50, $@1change$)\n                        }\n                    }\n                    Div(row){\n                        Div(col-sm-6 text-right){\n                            LangRes(@1type_withdraw)\n                        }\n                        Div(col-sm-6){\n                            Button(Page:@1te_edit, PageParams: \"TypeChange=withdraw\", Class: btn-xs btn-link){\n                                Span(Class: h5, Body: AppParam(App:#application_id#, Name:type_withdraw, Index:#e_type_withdraw#, Ecosystem:1))\n                            }.Popup(50, $@1change$)\n                        }\n                    }\n                    ArrayToSource(emission, #e_emission_amount#)\n                    Div(list-group-item mt){\n                        Div(text-center text-bold h5 m0 mb){\n                            LangRes(@1completed_stages)\n                        }\n                        ForList(Source: emission, Index:ind){\n                            Div(row mt-sm){\n                                Div(col-sm-1){\n                                    #ind#\n                                }\n                                JsonToSource(src, #value#, src)\n                                ForList(Source: src){\n                                    If(#src_key#==time){\n                                        Div(col-sm-5){\n                                            DateTime(#src_value#, Format: YYYY-MM-DD HH:MI:SS)\n                                        }  \n                                    }\n                                    If(#src_key#==type){\n                                        Div(col-sm-3 text-center){\n                                            If(#src_value# == emission){\n                                                Span(Class: text-success, Body: $@1emission_tokens$)\n                                            }\n                                            If(#src_value# == burn){\n                                                Span(Class: text-danger, Body: $@1burning_tokens$)\n                                            }\n                                        }  \n                                    }\n                                    If(#src_key#==val){\n                                        Div(col-sm-3 text-right #stl#){\n                                            Money(#src_value#) #e_token_title#\n                                        }  \n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-warning text-center text-bold){\n            Span(Body: LangRes(@1emission_not_fulfilled))\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "TeBurn",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TeBurn {\n    data {\n        Amount money\n    }\n\n    func checkSender() {\n        var sender_map map\n        sender_map = DBFind(\"@1keys\").Where({\"id\": $key_id, \"ecosystem\": $ecosystem_id}).Row()\n\n        if !sender_map {\n            warning Sprintf(LangRes(\"@1sender_x_invalid\", \"en\"), $key_id)\n        }\n        if Int(sender_map[\"blocked\"]) != 0 {\n            warning LangRes(\"@1sender_blocked\", \"en\")\n        }\n        if Int(sender_map[\"deleted\"]) != 0 {\n            warning LangRes(\"@1sender_deleted\", \"en\")\n        }\n        if Money(sender_map[\"amount\"]) < $Amount {\n            warning LangRes(\"@1amount_less_than_needed\", \"en\")\n        }\n    }\n\n    conditions {\n        checkSender()     //check the sender\n        \n        //check amount\n        if $Amount == 0 {\n            warning LangRes(\"@1amount_zero\", \"en\")\n        }\n        if $Amount < 0 {\n            warning LangRes(\"@1amount_less_zero\", \"en\")\n        }\n\n        $item = DBFind(\"@1ecosystems\").WhereId($ecosystem_id).Row()\n        if $item[\"type_withdraw\"] == 1 {\n            warning LangRes(\"@1burning_blocked\", \"en\")\n        }\n    }\n\n    action {\n        var mb map\n        var burn map arr array\n        burn[\"type\"] = \"burn\"\n        burn[\"time\"] = Str($block_time)\n        burn[\"val\"] = Money($Amount)\n        arr = JSONDecode($item[\"emission_amount\"])\n        arr = Append(arr, burn)\n        mb[\"emission_amount\"] = JSONEncode(arr)\n        DBUpdate(\"@1ecosystems\", $ecosystem_id, mb)\n\n        var m map\n        m[\"sender_id\"] = $key_id\n        m[\"recipient_id\"] = $guest_key\n        m[\"amount\"] = $Amount\n        m[\"comment\"] = \"New burn\"\n        m[\"block_id\"] = $block\n        m[\"txhash\"] = $txhash\n        m[\"ecosystem\"] = $ecosystem_id\n        m[\"type\"] = 4\n        m[\"created_at\"] = $block_time\n        DBInsert(\"@1history\", m)\n\n        DBUpdateExt(\"@1keys\", {\"id\": $key_id, \"ecosystem\": $ecosystem_id}, {\"-amount\": $Amount})\n        DBUpdateExt(\"@1keys\", {\"id\": $guest_key, \"ecosystem\": $ecosystem_id}, {\"+amount\": $Amount})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TeChange",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TeChange {\n    data {\n        TypeChange string\n        Value int\n    }\n\n    conditions {\n        AdminCondition()\n\n        $item = DBFind(\"@1ecosystems\").WhereId($ecosystem_id).Row()\n        if !$item {\n            warning LangRes(\"@1emission_not_found\", \"en\")\n        }\n\n        if $Value < 1 || $Value > 2  {\n            warning LangRes(\"@1value_between_1_and_2\", \"en\")\n        }\n    }\n\n    action {\n        var m map\n        if $TypeChange == \"emission\" {\n            m[\"type_emission\"] = $Value\n        }\n        if $TypeChange == \"withdraw\" {\n            m[\"type_withdraw\"] = $Value\n        }\n        \n        DBUpdate(\"@1ecosystems\", $ecosystem_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TeCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TeCreate {\n    data {\n        Title string \"optional\"\n        Amount money\n        TypeWithdraw int \"optional\"\n        TypeEmission int \"optional\"\n    }\n\n    func getEmissionConditionContract() string {\n        var param map contractName string contractId int\n        param = DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_id, name:\"emission_condition_contract\"}).Row()\n        if param {\n            contractName = param[\"value\"]\n            if Size(contractName) > 0 {\n                contractId = GetContractByName(contractName)\n                if contractId == 0 {\n                    warning LangRes(\"@1emission_conditions_contract_not_found\", \"en\")\n                }\n            }\n        }\n        return contractName\n    }\n\n    func createEmissionConditionParam() {\n        if !DBFind(\"@1parameters\").Where({ecosystem:$ecosystem_id, name:\"emission_condition_contract\"}).Row(){\n            @1NewParameter(\"Name,Value,Conditions\", \"emission_condition_contract\", \"AdminCondition\", \"ContractConditions(\\\"AdminCondition\\\")\")\n        }\n    }\n\n    conditions {\n        $founder = Int(EcosysParam(\"founder_account\"))\n\n        $item = DBFind(\"@1ecosystems\").WhereId($ecosystem_id).Row()\n        $SECONDARY_EMISSION = $item[\"type_emission\"] == 1 || $item[\"type_emission\"] == 2\n\n        if $SECONDARY_EMISSION {\n            if $item[\"type_emission\"] == 1 {\n                warning LangRes(\"@1emission_blocked\", \"en\")\n            }\n        } else {\n            if Size($Title) == 0 {\n                warning Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"token_title\")\n            }\n            if $TypeWithdraw < 1 || $TypeWithdraw > 2 {\n                warning Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"type_withdraw\")\n            }\n            if $TypeEmission < 1 || $TypeEmission > 2 {\n                warning Sprintf(LangRes(\"@1template_creation_error_x_unspecified\", \"en\"), \"type_emission\")\n            }\n        }\n    }\n\n    action {\n        createEmissionConditionParam()\n\n        var contract_name string\n        contract_name = getEmissionConditionContract()\n        ContractConditions(contract_name)\n\n        var m map\n        if $SECONDARY_EMISSION {\n            var emission map arr array\n            emission[\"type\"] = \"emission\"\n            emission[\"time\"] = Str($block_time)\n            emission[\"val\"] = Money($Amount)\n            arr = JSONDecode($item[\"emission_amount\"])\n            arr = Append(arr, emission)\n            m[\"emission_amount\"] = JSONEncode(arr)\n        } else {\n            var emission map arr array\n            emission[\"type\"] = \"emission\"\n            emission[\"time\"] = Str($block_time)\n            emission[\"val\"] = Money($Amount)\n            arr = Append(arr, emission)\n            m[\"emission_amount\"] = JSONEncode(arr)\n            m[\"type_emission\"] = $TypeEmission\n            m[\"token_title\"] = $Title\n            m[\"type_withdraw\"] = $TypeWithdraw\n        }\n\n        var h map\n        h[\"sender_id\"] = 0\n        h[\"recipient_id\"] = $founder\n        h[\"amount\"] = Money($Amount)\n        h[\"comment\"] = \"New emission\"\n        h[\"block_id\"] = $block\n        h[\"txhash\"] = $txhash\n        h[\"ecosystem\"] = $ecosystem_id\n        h[\"type\"] = 2\n        h[\"created_at\"] = $block_time\n\n        DBInsert(\"@1history\", h)\n        DBUpdate(\"@1ecosystems\", $ecosystem_id, m)\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"id\": $founder}, {\"+amount\": $Amount})\n    }\n}",
            "Type": "contracts"
        }
    ]
}