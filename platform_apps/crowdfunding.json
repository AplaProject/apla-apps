{
    "name": "Crowdfunding",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1cf_settings$, Page:@1cf_settings, Icon:\"icon-credit-card\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1cf_startups$, Page:@1cf_startups, Icon:\"icon-credit-card\")",
            "Type": "menu"
        },
        {
            "Name": "cf_add_company",
            "Trans": "{\"en\": \"Add company\", \"ru\": \"Добавить кампанию\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_catalog_admin",
            "Trans": "{\"en\": \"Catalog admin\", \"ru\": \"Администратор каталога\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_company",
            "Trans": "{\"en\": \"Campaign\", \"ru\": \"Кампания\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_company_wallet",
            "Trans": "{\"en\": \"The wallet for the investment\", \"ru\": \"Кошелек для инвестиций\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_created",
            "Trans": "{\"en\": \"Created\", \"ru\": \"Создано\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_escrow_name",
            "Trans": "{\"en\": \"The escrow name\", \"ru\": \"Эскроу имя\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_escrow_wallet",
            "Trans": "{\"en\": \"The escrow wallet\", \"ru\": \"Эскроу кошелек\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_estimated_amount",
            "Trans": "{\"en\": \"The estimated amount of investments\", \"ru\": \"Ожидаемый размер инвестиций\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_failed",
            "Trans": "{\"en\": \"Failed\", \"ru\": \"Ошибка\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_fee",
            "Trans": "{\"en\": \"Commission fee\", \"ru\": \"Комиссия площадки\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_fee_wallet",
            "Trans": "{\"en\": \"Wallet of fee\", \"ru\": \"Kошелек комиссии\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_finish_company",
            "Trans": "{\"en\": \"Finish Campaign\", \"ru\": \"Завершить кампанию\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_finished",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Закончено\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_invest",
            "Trans": "{\"en\": \"To invest\", \"ru\": \"Инвестировать\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_investment_offer",
            "Trans": "{\"en\": \"To offer investment\", \"ru\": \"Предложить инвестицию\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_investments",
            "Trans": "{\"en\": \"Investment\", \"ru\": \"Инвестиции\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_minimal_investment",
            "Trans": "{\"en\": \"The minimum amount of investment\", \"ru\": \"Минимальный размер инвестиции\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_published",
            "Trans": "{\"en\": \"Published\", \"ru\": \"Опубликовано\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_rejected",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_settings",
            "Trans": "{\"en\": \"Crowdfunding app settings\", \"ru\": \"Настройки приложения Crowdfunding\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_started",
            "Trans": "{\"en\": \"Active\", \"ru\": \"Активно\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_startup",
            "Trans": "{\"en\": \"Startup\", \"ru\": \"Стартап\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_startup_form",
            "Trans": "{\"en\": \"Campaign parameters\", \"ru\": \"Параметры кампании\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_startups",
            "Trans": "{\"en\": \"Startups\", \"ru\": \"Стартапы\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_stopped",
            "Trans": "{\"en\": \"Stopped\", \"ru\": \"Остановлено\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_update_statuses",
            "Trans": "{\"en\": \"Update statuses\", \"ru\": \"Обновить статусы\"}",
            "Type": "languages"
        },
        {
            "Name": "confirm",
            "Trans": "{\"en\": \"Confirm\", \"ru\": \"Подтвердить\"}",
            "Type": "languages"
        },
        {
            "Name": "reset",
            "Trans": "{\"en\": \"Reset\", \"ru\": \"Сброс\"}",
            "Type": "languages"
        },
        {
            "Name": "role_settings_description",
            "Trans": "{\"en\": \"Compliance application roles roles of ecosystem\", \"ru\": \"Соответствие ролей приложения ролям экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "stop",
            "Trans": "{\"en\": \"Stop\", \"ru\": \"Остановить\"}",
            "Type": "languages"
        },
        {
            "Name": "web_address",
            "Trans": "{\"en\": \"The link to the site\", \"ru\": \"Ссылка на сайт\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_investments",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"startup_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"investment_wallet\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"created_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartupRefund\\\")\",\n        \"name\": \"refund_at\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "cf_startups",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"name\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"description\",\n        \"type\": \"text\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"wallet\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"escrow_wallet\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"escrow_name\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"web_address\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"registered_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFAdmin\\\")\",\n        \"name\": \"published_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"started_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"finished_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"estimated_amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"minimal_investment\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"current_investment\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"token_info\",\n        \"type\": \"json\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFAdmin\\\")\",\n        \"name\": \"failed_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartupDelete\\\")\",\n        \"name\": \"deleted_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\",\\\"@1CFAdmin\\\")\",\n        \"name\": \"stopped_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"date_started\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"date_finished\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\",\\\"@1CFAdmin\\\", \\\"@1CFStartupStatusUpdate\\\")\",\n        \"name\": \"status\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "cf_catalog_admin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "cf_fee",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "5",
            "Type": "app_params"
        },
        {
            "Name": "cf_fee_wallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "xxxx-xxxx-xxxx-xxxx-xxxx",
            "Type": "app_params"
        },
        {
            "Name": "cf_status",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "cf_created,cf_published,cf_started,cf_finished,cf_failed,cf_stopped,cf_rejected",
            "Type": "app_params"
        },
        {
            "Name": "cf_status_class",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "text-muted,text-primary,text-success,text-normal,text-danger,text-warning,text-info",
            "Type": "app_params"
        },
        {
            "Name": "cf_admin_notification",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(back_page,@1cf_startups).(this_page,@1cf_admin_notification)\n\nSetVar(this_page,@1cf_invest_notification)\nIf(#back_page#==\"\"){\n    SetVar(back_page, @1cf_investments)\n}\n\nIf(#notific_id#>0){\n    SetVar(errand_id,#notific_id#)\n    DBFind(@1notifications,n).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,page_params->startup_id,page_params->amount,page_params->investor\").Vars(notific)\n}.Else{\n    SetVar(norific_id,0)\n}\n\nDBFind(@1keys).Where({\"ecosystem\": #ecosystem_id#, \"id\": #key_id#}).Vars(tokens)\nDBFind(@1ecosystems).Where({\"id\": #ecosystem_id#}).Vars(eco)\nIf(#ecosystem_id# == 1){\n    SetVar(token_title, \"APLA\")\n}.Else{\n    SetVar(token_title, #eco_token_title#)\n}\n\nIf(Or(#ecosystem_id# == 1, GetVar(eco_token_title) != \"\")){\n    Form(){\n        Div(row){\n            Div(col-sm-3 mt-sm text-right){\n                Label($@1sender$)\n            }\n            Div(col-sm-9){\n                SetVar(Sender, Address(#notific_page_params_investor#))\n                Input(Name: Sender, Disabled: 1, Value: #Sender#)\n            }\n        }\n        Div(row mt-sm){\n            Div(col-sm-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1amount$ (#token_title#))\n                }\n            }\n            Div(col-sm-9){\n                SetVar(money, Money(#notific_page_params_amount#))\n                Input(Name: Amount, Disabled: 1, Type: number, Value: #money#)\n            }\n        }\n        Div(text-right mt){\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#)\n            Button(Body: $@1reject$, Class: btn btn-danger, Page: #back_page#, Contract: @1CFInvestmentAdmin, Params: \"NotificId=#notific_id#,Action=reject\")\n            Button(Body: $@1confirm$, Class: btn btn-primary, Page: #back_page#, Contract: @1CFInvestmentAdmin, Params: \"NotificId=#notific_id#,Action=accept\")\n        }\n    }\n}.Else{\n    Form(){\n        Div(row){\n            Div(col-sm-12){\n                Span(Body: $@1ecosystem_no_tokens$)\n            }\n        }\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_company",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Crowdfunding\"}).Vars(application)\nSetVar(this_page, @1cf_company).(back_page,@1cf_startups).(startup_id,0).(TOKEN,APL)\nSetVar(isAdmin,0).(isWalletOwner,0).(isStartupAdmin,0)\nSetVar(CREATED,1).(PUBLISHED,2).(STARTED,3).(FINISHED,4).(FAILED,5).(STOPPED,6).(REJECTED,7)\nSetVar(catalogAdmin, AppParam(App:#application_id#, Name:cf_catalog_admin, Ecosystem:1))\n\nSetTitle($@1cf_company$)\nIf(#role_id#>0){\n    If(#catalogAdmin#==#role_id#){\n        SetVar(isAdmin,1)\n    }\n}\nIf(#Id#!=\"\"){\n    DBFind(@1cf_startups,s).WhereId(#Id#).Vars(startup)\n    If(#startup_wallet#==Address(#key_id#)){\n        SetVar(isWalletOwner,1)\n    }\n    SetVar(startupAdminRole_id,0)\n    DBFind(@1parameters).Where({name:\"role_admin\", ecosystem:#startup_ecosystem#}).Columns(\"id,value\").Vars(startupAdminRole)\n    If(#startupAdminRole_id#>0){\n        DBFind(@1roles_participants).Where({\"role->id\":#startupAdminRole_value#, \"member->member_id\": #key_id#, ecosystem:#ecosystem#}).Vars(startupAdmin)\n        If(#startupAdmin_id#>0){\n            SetVar(isStartupAdmin,1)\n        }\n    }\n}\nDiv(breadcrumb-sm){\n    LinkPage(Body: $@1cf_startups$, Page: @1cf_startups)\n    Span(/, mh)\n    Span($@1cf_company$, text-muted)\n}\nDiv(row){\n    Div(col-sm-12 col-lg-6 col-lg-offset-3){\n        Div(panel panel-default){\n            If(#startup_id#>0){\n                Div(panel-body){\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Ecosystem){\n                                $@1ecosystem$\n                            }\n                        }\n                        Div(col-sm-6){\n                            #startup_ecosystem#\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Ecosystem){\n                                $@1name$\n                            }\n                        }\n                        Div(col-sm-6){\n                            #startup_name#\n                        }\n                    }\n\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Description){\n                                $@1description$\n                            }\n                        }\n                        Div(col-sm-6){\n                            #startup_description#\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Wallet){\n                                $@1cf_company_wallet$\n                            }\n                        }\n                        Div(col-sm-6){\n                            #startup_wallet#\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: WalletEscrow){\n                                $@1cf_escrow_wallet$\n                            }\n                        }\n                        Div(col-sm-6){\n                            #startup_escrow_wallet#\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: WebAddress){\n                                $@1web_address$\n                            }\n                        }\n                        Div(col-sm-6){\n                            #startup_web_address#\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: StartDate){\n                                $@1date_reg$\n                            }\n                        }\n                        Div(col-sm-6){\n                            DateTime(#startup_registered_at#, Format: YYYY-MM-DD)\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: StartDate){\n                                $@1date_publish$\n                            }\n                        }\n                        Div(col-sm-6){\n                            DateTime(#startup_published_at#, Format: YYYY-MM-DD)\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: StartDate){\n                                $@1date_start$\n                            }\n                        }\n                        Div(col-sm-6){\n                            DateTime(#startup_started_at#, Format: YYYY-MM-DD)\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: EndDate){\n                                $@1date_end$\n                            }\n                        }\n                        Div(col-sm-6){\n                            DateTime(#startup_finished_at#, Format: YYYY-MM-DD)\n                        }\n                    }\n\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Estimated){\n                                $@1cf_estimated_amount$ (#TOKEN#)\n                            }\n                        }\n                        Div(col-sm-6){\n                            Money(#startup_estimated_amount#)\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Minimal){\n                                $@1cf_minimal_investment$ (#TOKEN#)\n                            }\n                        }\n                        Div(col-sm-6){\n                            Money(#startup_minimal_investment#)\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Minimal){\n                                $@1current_amount$ (#TOKEN#)\n                            }\n                        }\n                        Div(col-sm-6){\n                            Money(#startup_current_investment#)\n                        }\n                    }\n                    Div(row mb-sm){\n                        Div(col-sm-6 text-right){\n                            Label(For: Minimal){\n                                $@1status$\n                            }\n                        }\n                        SetVar(class,AppParam(App:#application_id#, Name:cf_status_class, Index:#startup_status#))\n                        Div(col-sm-6 #class#){\n                            AppParam(App:#application_id#, Name:cf_status, Index:#startup_status#)\n                        }\n                    }\n                    Div(){\n                        LinkPage(Body: $@1cf_investments$, Page: @1cf_investments, PageParams: \"Id=#Id#\")\n                    }\n                }\n            }\n\n            Form(panel-footer text-right clearfix){\n                If(And(#isAdmin#==0, #startup_status#==#STARTED#)){\n                    If(Or(#isWalletOwner#==1,#isStartupAdmin#==1)){\n                        Button(Body: $@1cf_finish_company$, Class: btn btn-primary pull-right, Page: #back_page#, Contract:@1CFAdmin, Params: \"Id=#Id#,Action=finish\")\n                    }.Else{\n                        SetVar(wallet_id,0)\n                        DBFind(@1keys).Where({id:#key_id#, ecosystem:#startup_ecosystem#}).Vars(wallet)\n                        Div(input-group mb){\n                            Div(input-group-addon){\n                                $@1cf_invest$ (#TOKEN#)\n                            }\n                            SetVar(min,Money(#startup_minimal_investment#))\n                            Input(Name: Amount, Type:number, Value: #min#)\n                            Div(input-group-btn){\n                                If(#wallet_id#==0){\n                                    Button(Body: $@1cf_investment_offer$, Class: btn btn-primary, Page: #back_page#, Contract:@1CFInvestmentOffer, Params: \"Id=#Id#,Amount=Val(Amount)\")\n                                }.Else{\n                                    Button(Body: $@1send$, Class: btn btn-default, Page: #back_page#, Contract:@1CFInvestment, Params: \"Id=#Id#,Amount=Val(Amount)\")\n                                }\n                            }\n                        }\n                    }\n                }\n                Button(Body: $@1back$, Class: btn btn-default pull-right, Page: #back_page#)\n            }\n        }\n    }\n}.Style(\n    .buttons {\n        border: 1px solid #dde6e9;\n        padding: 6px 16px;\n    }\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_invest_notification",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1cf_invest_notification)\nIf(#back_page#==\"\"){\n    SetVar(back_page, @1cf_investments)\n}\nIf(#notific_id#>0){\n    SetVar(errand_id,#notific_id#)\n    DBFind(@1notifications,n).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,page_params->startup_id,page_params->amount,page_params->wallet\").Vars(notific)\n}.Else{\n    SetVar(norific_id,0)\n}\n\nDBFind(@1keys).Where({\"ecosystem\": #ecosystem_id#, \"id\": #key_id#}).Vars(tokens)\nDBFind(@1ecosystems).Where({\"id\": #ecosystem_id#}).Vars(eco)\nIf(#ecosystem_id# == 1){\n    SetVar(token_title, \"APLA\")\n}.Else{\n    SetVar(token_title, #eco_token_title#)\n}\n\nIf(Or(#ecosystem_id#==1,#eco_token_title#!=\"\")){\n    Form(){\n        Div(row){\n            Div(col-sm-3 mt-sm text-right){\n                Label($@1sender$)\n            }\n            Div(col-sm-9){\n                SetVar(m_a, Address(#key_id#) (Money(#tokens_amount#) #token_title#))\n                Input(Name: Sender, Disabled: 1, Value: #m_a#)\n                Div(Class: m0 h6 text-muted, Body: $@1send_tokens_my_balance$)\n            }\n        }\n        Div(row mt){\n            Div(col-sm-3 mt-sm text-right){\n                Label($@1recipient$)\n            }\n            Div(col-sm-9){\n                SetVar(Recipient, #notific_page_params_wallet#)\n                Input(Name: Recipient, Disabled: 1, Value: #Recipient#)\n            }\n        }\n        Div(row mt-sm){\n            Div(col-sm-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1amount$ (#token_title#))\n                }\n            }\n            Div(col-sm-9){\n                SetVar(money, Money(#notific_page_params_amount#))\n                Input(Name: Amount, Type: number, Value: #money#)\n            }\n        }\n        Button(Body: $@1send$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1CFInvestment, Params: \"NotificId=#notific_id#\").Alert(Text: \"$@1want_send_tokens$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}.Else{\n    Form(){\n        Div(row){\n            Div(col-sm-12){\n                Span(Body: $@1ecosystem_no_tokens$)\n            }\n        }\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_investment_form",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(back_page,@1cf_startups).(startup_id,0)\n\nIf(#Id#>0){\n    DBFind(@1cf_startups).WhereId(#Id#).Vars(startup)\n}\nForm(){\n    If(#startup_id#>0){\n        Div(mb-sm text-muted){\n            $@1investment_amount$\n        }\n        Div(mb-sm){\n            SetVar(m,Money(#startup_minimal_investment#))\n            Input(Name: Amount, Value: #m#)\n        }\n    }.Else{\n        Div(text-center h4 text-muted){\n            $@1cf_startup$ $@1not_founded$\n        }\n    }\n    Div(){\n        If(#startup_id#>0){\n            Button(Body: $@1send$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1CFInvestment, Params: \"Id=#Id#\")\n        }\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_investments",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1cf_investments).(this_table, @1cf_investments)\nInclude(@1pager_header)\n\nIf(Id!=\"\"){\n    SetVar(where, {startup_id:#Id#}).(title,$@1cf_investments$ $cf_startup$ #Id#)\n}.Else{\n    SetVar(where,).(title,$@1cf_investments$)\n}\nSetTitle(#title#)\nSetVar(isAdmin,0)\nSetVar(catalogAdmin, AppParam(App:#application_id#, Name:cf_catalog_admin, Ecosystem:1))\nIf(#role_id#>0){\n    If(#catalogAdmin#==#role_id#){\n        SetVar(isAdmin,1)\n    }\n}\n\n\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_created){\n    DateTime(#created_at#, Format: YYYY-MM-DD HH:MI:SS)\n}.Custom(_wallet){\n    SetVar(kid, AddressToId(#investment_wallet#))\n    LinkPage(Class: h5 text-primary, Page: @1profile_view, PageParams: \"v_key_id=#kid#\"){\n        Div(){\n            Span(Class: fa icon-user fa-2x mr).(#investment_wallet#)\n        }.Style(display:flex; align-items:center;)\n    }\n}.Custom(_amount){\n    Money(#amount#)\n}\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1cf_startup$=startup_id,$@1wallet$=_wallet,$@1amount$=_amount,$@1date_created$=_created\")\n            }.Else{\n                Div(text-center h4 text-muted){\n                    $@1cf_investments$ $@1not_founded$\n                }\n            }\n        }.Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_notification",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Basic\"}).Vars(application)\nSetVar(type,0).(header,).(body,)\n\nIf(#notific_id#>0){\n    DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#notific_id#}).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\n    SetVar(type,#note_sender_type#)\n    SetVar(header,#note_notification_header#)\n    SetVar(body,#note_notification_body#)\n\n    Div(text-center){\n        #header#\n    }\n    Div(){\n        #body#\n    }\n    Div(text-right){\n        If(#note_closed# == 0){\n            Button(Body: $@1understood$, Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\n        }.Else{\n            Button(Body: $@1back$, Class: btn btn-default, Page: @1default_page)\n        }\n    }\n}.Else{\n    Button(Body: $@1back$, Class: btn btn-default, Page: @1default_page)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_select_ecosystem",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1ecosystems,items).Limit(250).Where({id:{$gt:1}}).Columns(\"name,id\")\nSetVar(name_column,\"name\")\nSetVar(value_column,\"id\")\nForm(){\n    Div(row){\n        Div(col-md-12 text-left){\n            Select(Name: EcosystemId, Source: items, NameColumn: #name_column#, ValueColumn: #value_column#, Value: #EcosystemId#)\n        }\n    }\n    Div(text-right mt){\n        If(GetVar(back_header)!=\"\"){\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,MemberId=#MemberId#\").Popup(Header: #back_header#, Width: 50)\n            Button(Body: LangRes(@1select), Class: btn btn-primary, Page: #back_page#, PageParams: \"EcosystemId=Val(EcosystemId),MemberId=#MemberId#\").Popup(Header: #back_header#, Width: 50)\n        }.Else{\n            Button(Body: LangRes(@1back), Class: btn btn-default, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,MemberId=#MemberId#\")\n            Button(Body: LangRes(@1select), Class: btn btn-primary, Page: #back_page#, PageParams: \"EcosystemId=Val(EcosystemId),MemberId=#MemberId#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_select_wallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1cf_select_wallet).(this_table, @1keys).(current_header, $@1member$).(pager_limit, 10)\nInclude(@1pager_header)\n\nIf(GetVar(search)){\n    SetVar(where, {ecosystem: 1, id:{\"$neq\":#guest_key#}, deleted:0, id:AddressToId(#search#)})\n}.Else{\n    SetVar(where, {ecosystem: 1, id:{\"$neq\":#guest_key#}, deleted:0}).(search,)\n}\n\nDiv(){\n    Form(input-group){\n        Div(input-group-addon){\n            LangRes(@1wallet)\n        }\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\n        Div(input-group-btn){\n            If(GetVar(search)!=\"\"){\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,#,EcoId=#EcoId#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #current_header#, Width: \"50\")\n            }\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,#,EcoId=#EcoId#,EcosystemId=#EcosystemId#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\n        }\n    }\n}.Style(\n    .buttons {\n        border: 1px solid #dde6e9;\n    }\n)\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\n    Span(Class: h6 text-muted, Body: #id#)\n    SetVar(m_id, 0)\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Vars(m)\n    If(Or(#m_id#>0,#m_id#<0)){\n        SetVar(image_id, #m_image_id#)\n        SetVar(member_name, #m_member_name#)\n    }.Else{\n        SetVar(image_id, 0)\n        SetVar(member_name, Address(#id#))\n    }\n}.Custom(_member_id){\n    If(GetVar(back_header)!=\"\"){\n        Button(Class: btn-xs btn-link pull-right, Page: #back_page#, PageParams: \"MemberId=#id#,EcoId=#EcoId#,EcosystemId=#EcosystemId#,Id=#Id#\"){\n            Span(Class: h5 text-bold, Body: Address(#id#))\n        }.Popup(Header: #back_header#, Width: 50)\n    }.Else{\n        Button(Class: btn-xs btn-link pull-right, Page: #back_page#, PageParams: \"MemberId=#id#,EcoId=#EcoId#,EcosystemId=#EcosystemId#,Id=#Id#\"){\n            Span(Class: h5 text-bold, Body: Address(#id#))\n        }\n    }\n}.Custom(_ecosystem){\n    Span(Class: text-muted h5, Body: $@1ecosystem$ #EcoId#)\n}.Custom(_username){\n    If(#image_id#>0){\n        Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n        Span(Class: h5, Body: #member_name#)\n    }.Else{\n        Div(){\n            Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n            Span(Class: h5, Body: #member_name#)\n        }.Style(display:flex; align-items:center;)\n    }\n}.Count(count)\n\nDiv(fullscreen){\n    Div(table-responsive){\n        Div(){\n            If(#count# > 0){\n                Table(src, \"=_username,=_ecosystem,=_member_id\")\n            }.Else{\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\n            }\n        }.Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(){\n    Include(@1pager_for_popup)\n    If(GetVar(back_header)!=\"\"){\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcoId=#EcoId#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #back_header#, Width: \"50\")\n    }.Else{\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcoId=#EcoId#,EcosystemId=#EcosystemId#,Id=#Id#\")\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_settings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1cf_settings)\nDBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Crowdfunding\"}).Vars(application)\n\nSetTitle($@1cf_settings$)\n\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\nSetVar(fee_wallet, AppParam(App:#application_id#, Name:cf_fee_wallet))\nSetVar(catalog_admin, AppParam(App:#application_id#, Name:cf_catalog_admin))\nSetVar(fee, AppParam(App:#application_id#, Name:cf_fee))\n\nDiv(content-wrapper){\n    Div(row mt-sm){\n        Div(col-lg-8 col-lg-offset-2){\n            DBFind(@1roles,roles).Where({ecosystem:#ecosystem_id#, deleted:0}).Columns(\"role_name,id\").Limit(100).Count(roles_count)\n\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(#row#){\n                        Div(#col_left#){\n                            $@1cf_fee_wallet$\n                        }\n                        Div(#col_right#){\n                            Div(input-group text-muted mt-sm){\n                                If(#MemberId#!=\"\"){\n                                    SetVar(AddressMemberId, Address(#MemberId#))\n                                    #AddressMemberId#\n                                }.Else{\n                                    #fee_wallet#\n                                }\n                                Div(input-group-btn){\n                                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\n                                }\n                            }\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            $@1cf_fee$ (%)\n                        }\n                        Div(#col_right#){\n                            Input(Name:Fee, Type:number, Value:#fee#)\n                        }\n                    }\n\n                    Div(#row# mt-lg){\n                        Div(col-sm-12 text-center text-muted){\n                            $@1role_settings_description$\n                        }\n                    }\n                    If(#roles_count#>0){\n                        Div(#row#){\n                            Div(#col_left#){\n                                $@1cf_catalog_admin$\n                            }\n                            Div(#col_right#){\n                                Select(Name:CatalogAdmin, Source:roles, NameColumn: role_name, ValueColumn: id, Value:#catalog_admin#)\n                            }\n                        }\n                    }.Else{\n                        Div(text-center h4 text-muted){\n                            $@1roles$ $@1not_founded$\n                        }\n                    }\n                }\n                Div(panel-footer text-center){\n                    If(#roles_count#>0){\n                        Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: @1CFSettings, Params: \"FeeWallet=#AddressMemberId#\")\n                    }\n                }\n            }\n        }\n    }\n}.Style(\n    .buttons {border: 1px solid #dde6e9;}\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_startup_filter",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1cf_startup_filter)\nIf(#back_page#==\"\"){\n    SetVar(back_page, @1cf_startups)\n}\n\nForm(){\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:StartDate){\n                $@1date_start$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: StartDate, Type:date, Value:#StartDate#)\n        }\n    }\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:EndDate){\n                $@1date_end$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: EndDate, Type:date, Value:#EndDate#)\n        }\n    }\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:Minimal){\n                $@1cf_minimal_investment$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: Minimal, Type:number, Value:#Minimal#)\n        }\n    }\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:Estimated){\n                $@1cf_estimated_amount$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: Estimated, Type:number, Value:#Estimated#)\n        }\n    }\n\n    Div(mt pull-right){\n        Button(Class: btn btn-default, Page: #back_page#, Body:$@1reset$)\n        Button(Class: btn btn-primary, Page: #back_page#, PageParams: \"StartDate=Val(StartDate),EndDate=Val(EndDate),Minimal=Val(Minimal),Estimated=Val(Estimated)\", Body: $@1filter$)\n    }\n}\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_startup_form",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1cf_startup_form).(back_page,@1cf_startups)\n\nIf(#EcosystemId#!=\"\"){\n    DBFind(@1ecosystems).Columns(\"id,name\").Where({id:#EcosystemId#}).Columns(\"id,name,info->description\").Vars(eco)\n\n}.Else{\n    SetVar(EcosystemId,).(eco_info_description,).(eco_name,).(eco_id,1)\n}\nSetTitle($@1cf_startup_form$)\nDiv(breadcrumb){\n    LinkPage(Body: $@1cf_startups$, Page: @1cf_startups)\n    Span(/, mh)\n    Span($@1cf_startup_form$, text-muted)\n}\nDiv(row){\n    Div(col-sm-12 col-lg-6 col-lg-offset-3){\n        Form(panel panel-default){\n            Div(panel-body){\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: Ecosystem){\n                            $@1ecosystem$\n                            Span(*, text-danger)\n                        }\n                    }\n                    Div(col-sm-9){\n                        Div(input-group){\n                            Div(text-muted mt list-group-item fake-input){\n                                If(#EcosystemId#!=\"\"){\n                                    #eco_name#\n                                }.Else{\n                                    $@1ecosystem_select$\n                                }\n                            }\n                            Div(input-group-btn){\n                                Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1cf_select_ecosystem, PageParams:\"back_page=@1cf_startup_form,EcosystemId=#EcosystemId#,MemberId=#MemberId#\").Popup(50, $@1ecosystem$)\n                            }\n                        }\n                    }\n                }\n\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: Description){\n                            $@1description$\n                        }\n                    }\n                    Div(col-sm-9){\n                        Input(Name: Description, Type: textarea, Value:#eco_info_description#)\n                    }\n                }\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: Wallet){\n                            $@1cf_company_wallet$\n                            Span(*, text-danger)\n                        }\n                    }\n                    Div(col-sm-9){\n                        SetVar(wallet, Address(#key_id#))\n                        Input(Name: Wallet, Value: #wallet#)\n                    }\n                }\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: WalletEscrow){\n                            $@1cf_escrow_wallet$\n                        }\n                    }\n                    Div(col-sm-9){\n                        Div(input-group){\n                            Div(text-muted mt list-group-item fake-input){\n                                If(#MemberId#!=\"\"){\n                                    SetVar(AddressMemberId, Address(#MemberId#))\n                                    #AddressMemberId#\n                                }.Else{\n                                    xxxx-xxxx-xxxx-xxxx-xxxx\n                                }\n                            }\n                            Div(input-group-btn){\n                                Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1cf_select_wallet, PageParams:\"back_page=#this_page#,EcoId=#EcosystemId#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: $@1member$, Width: \"50\")\n                            }\n                        }\n                    }\n                }\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: WebAddress){\n                            $@1web_address$\n                        }\n                    }\n                    Div(col-sm-9){\n                        Input(Name: WebAddress)\n                    }\n                }\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: StartDate){\n                            $@1date_start$\n                            Span(*, text-danger)\n                        }\n                    }\n                    Div(col-sm-9){\n                        Div(row){\n                            Div(col-sm-6){\n                                Input(Name: StartDate, Type:date)\n                            }\n                            Div(col-sm-6){\n                                Input(Name: StartTime, Type:time, Value: \"00:00\")\n                            }\n                        }\n                    }\n                }\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: EndDate){\n                            $@1date_end$\n                            Span(*, text-danger)\n                        }\n                    }\n                    Div(col-sm-9){\n                        Div(row){\n                            Div(col-sm-6){\n                                Input(Name: EndDate, Type:date)\n                            }\n                            Div(col-sm-6){\n                                Input(Name: EndTime, Type:time, Value: \"00:00\")\n                            }\n                        }\n                    }\n                }\n\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: Estimated){\n                            $@1cf_estimated_amount$\n                            Span(*, text-danger)\n                        }\n                    }\n                    Div(col-sm-9){\n                        Input(Name: Estimated, Type:money)\n                    }\n                }\n                Div(row mb){\n                    Div(col-sm-3 text-right){\n                        Label(For: Minimal){\n                            $@1cf_minimal_investment$\n                        }\n                    }\n                    Div(col-sm-9){\n                        Input(Name: Minimal, Type:money)\n                    }\n                }\n            }\n            Div(panel-footer text-right){\n                Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#)\n                Button(Body: $@1send$, Class: btn btn-primary, Page: #back_page#, Contract: @1CFStartup, Params: \"WalletEscrow=#AddressMemberId#,Ecosystem=#EcosystemId#,Name=#eco_name#\")\n            }\n        }\n    }\n}.Style(\n    .buttons {\n        border: 1px solid #dde6e9;\n        padding: 6px 16px;\n    }\n    .fake-input {\n        height: 35px;\n        top: -5px;\n    }\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_startups",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({ecosystem:1, name:\"Crowdfunding\"}).Vars(application)\nSetVar(this_page, @1cf_startups).(this_table, @1cf_startups).(pager_limit,10)\nSetVar(isAdmin,0).(CREATED,1).(PUBLISHED,2).(STARTED,3).(FINISHED,4).(FAILED,5).(STOPPED,6).(REJECTED,7)\nInclude(@1pager_header)\n\nSetVar(digits,10000000000000000000)\n\nIf(GetVar(StartDate)!=\"\"){\n    SetVar(where_started, \"{date_started:{$gte:#StartDate#}},\")\n}.Else{\n    SetVar(where_started,).(StartDate,)\n}\nIf(GetVar(EndDate)!=\"\"){\n    SetVar(where_finished, \"{date_finished:{$lte:#EndDate#}},\")\n}.Else{\n    SetVar(where_finished,).(EndDate,)\n}\nIf(GetVar(Minimal)!=\"\"){\n    SetVar(min,Calculate(#digits#*#Minimal#, Type:money))\n    SetVar(where_min, \"{minimal_investment:{$lte:#min#}},\")\n}.Else{\n    SetVar(where_min,).(Minimal,)\n}\nIf(GetVar(Estimated)!=\"\"){\n    SetVar(est,Calculate(#digits#*#Estimated#, Type:money))\n    SetVar(where_est, \"{estimated_amount:{$lte:#est#}},\")\n}.Else{\n    SetVar(where_est,).(Estimated,)\n}\n\nSetVar(catalogAdmin, AppParam(App:#application_id#, Name:cf_catalog_admin, Ecosystem:1))\nIf(#role_id#>0){\n    If(#catalogAdmin#==#role_id#){\n        SetVar(isAdmin,1)\n    }\n}\nIf(#isAdmin#==1){\n    SetVar(where, {published_at:{$gte:0}, deleted_at:0, #where_started# #where_finished# #where_min# #where_est#}).(order,{published_at: 1})\n}.Else{\n    SetVar(where, {published_at:{$gt:0}, deleted_at:0, #where_started# #where_finished# #where_min# #where_est#}).(order,{id: -1})\n}\n\nSetTitle($@1cf_startups$)\nIf(#isAdmin#==1){\n    Div(btn-group ml-lg){\n        Button(Body: Em(Class: fa fa-refresh) $@1cf_update_statuses$, Class: btn bg-gray ml-sm, Page: #this_page#, Contract: @1CFStartupStatusUpdate)\n    }\n}\nDiv(mr-lg text-right){\n    Button(Page: @1cf_startup_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"StartDate=#StartDate#,EndDate=#EndDate#,Minimal=#Minimal#,Estimated=#Estimated#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"50\")\n}\n\n\nDBFind(#this_table#, src).Where(#where#).Order(#order#).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_name){\n    LinkPage(Page: @1cf_company, PageParams: \"Id=#id#\", Body: #name#)\n}.Custom(_dates){\n    DateTime(#started_at#, Format: YYYY-MM-DD)/DateTime(#finished_at#, Format: YYYY-MM-DD)\n}.Custom(_money){\n    Money(#minimal_investment#)/Money(#estimated_amount#)\n}.Custom(_current){\n    Money(#current_investment#)\n}.Custom(_actions){\n    SetVar(isOwner,0).(startupAdminRole_id,0).(startupAdmin_id,0)\n    DBFind(@1parameters).Where({name:\"role_admin\", ecosystem:#ecosystem#}).Columns(\"id,value\").Vars(ecoAdminRole)\n    If(#startupAdminRole_id#>0){\n        DBFind(@1roles_participants).Where({\"role->id\":#startupAdminRole_value#, \"member->member_id\": #key_id#, ecosystem:#ecosystem#}).Vars(startupAdmin)\n    }\n    Div(text-right){\n        If(#status#!=#FINISHED#){\n            If(#isAdmin#==1){\n                If(#published_at#==0){\n                    Button(Body:$@1accept$, Page:#this_page#, Contract: @1CFAdmin, Params: \"Id=#id#,Action=accept\", Class:btn btn-success)\n                    Button(Body:$@1reject$, Page:#this_page#, Contract: @1CFAdmin, Params: \"Id=#id#,Action=reject\", Class:btn btn-danger)\n                }\n                If(#published_at#>0){\n                    If(#stopped_at#>0){\n                        Button(Body:$@1start$, Page:#this_page#, Contract: @1CFAdmin, Params: \"Id=#id#,Action=start\", Class:btn btn-default)\n                    }.Else{\n                        Button(Body:$@1stop$, Page:#this_page#, Contract: @1CFAdmin, Params: \"Id=#id#,Action=stop\", Class:btn btn-default)\n                    }\n                }\n                Button(Body:$@1delete$, Page:#this_page#, Class:btn btn-danger, Contract: @1CFStartupDelete, Params: \"Id=#id#\").Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }.Else{\n                If(#startupAdmin_id#>0){\n                    Button(Body:$@1delete$, Page:#this_page#, Class:btn btn-danger, Contract: @1CFStartupDelete, Params: \"Id=#id#\").Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }.ElseIf(#status#==#STARTED#){\n                    Button(Body:$@1cf_invest$, Page:@1cf_investment_form, PageParams: \"Id=#id#\", Class:btn btn-default).Popup(50, $@1cf_invest$)\n                }\n            }\n        }\n    }\n}.Custom(_status){\n    SetVar(class,AppParam(App:#application_id#, Name:cf_status_class, Index:#status#))\n    Div(Class:#class#){\n        AppParam(App:#application_id#, Name:cf_status, Index:#status#\n    }\n}\nDiv(fullscreen){\n    AddToolButton(Title:$@1cf_add_company$, Page: @1cf_startup_form, Icon: icon-plus)\n    AddToolButton(Title:$@1cf_investments$, Page:@1cf_investments, Icon:icon-credit-card)\n\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1name$=_name,$@1date_start$/$@1date_end$=_dates,$@1current_amount$=_current,$@1minimum_amount$/$@1estimated_amount$=_money,$@1status$=_status,=_actions\")\n            }.Else{\n                Div(text-center h4 text-muted){\n                    If(#isAdmin#==1){\n                        $@1cf_startups$ $@1not_founded$\n                    }.Else{\n                        $@1cf_published$ $@1cf_startups$ $@1not_founded$\n                    }\n                }\n            }\n        }\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #f8f9fc;\n    }\n)\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "CFStartupRefund",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFStartupRefund {\n    data {\n        Id int\n    }\n    func checkPrevContract(contracts array) {\n        var i lenContracts int prev string\n        prev = $stack[0]\n        if Len($stack) > 2 {\n            prev = $stack[Len($stack) - 2]\n        }\n        lenContracts = Len(contracts)\n        while i < lenContracts {\n            if prev == contracts[i]{\n                return\n            }\n            i = i + 1\n        }\n        warning \"The validation error of the previous contract in the stack\"\n    }\n    conditions{\n        checkPrevContract([\"@1CFStartupStatusUpdate\", \"@1CFAdmin\"])\n\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n\n        $startup = DBFind(\"@1cf_startups\").Where({id:$Id, status:$FINISHED, deleted_at:0}).Row()\n        if !$startup{\n            warning \"Startup with finished status not found\"\n        }\n        var appId admin int feeWallet string\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Crowdfunding\"}).One(\"id\"))\n        admin = Int(AppParam(appId, \"cf_catalog_admin\", 1))\n        if !RoleAccess(admin){\n            var ecoAdmin eco int\n            eco = Int($startup[\"ecosystem\"])\n            ecoAdmin = Int(DBFind(\"@1parameters\").Where({name:\"role_admin\", ecosystem:eco}).One(\"value\"))\n\n            if !DBFind(\"@1roles_participants\").Where({\"role->id\":ecoAdmin, \"member->member_id\": $key_id, ecosystem:eco, deleted:0}).Row(){\n                if $startup[\"wallet\"] != IdToAddress($key_id){\n                    warning \"You must be Admin in target ecosystem or owner of wallet investments\"\n                }\n            }else{\n                warning \"This action allowed only for startup catalog admin role\"\n            }\n        }\n        var currentAmount estimatedAmount money\n        currentAmount = Money($startup[\"current_investment\"])\n        estimatedAmount = Money($startup[\"estimated_amount\"])\n\n        if currentAmount >= estimatedAmount {\n            warning \"Can not refund tokens\"\n        }\n    }\n    func refund(){\n        // TODO: алгоритм уточнить\n        var items array i lenIns limit int it map recipient sender int\n        sender = AddressToId($startup[\"wallet\"])\n        limit = 10000\n        items = DBFind(\"@1cf_investments\").Where({startup_id: $Id, refund_at:0}).Limit(limit)\n        lenIns = Len(items)\n        while i < lenIns{\n            it = items[i]\n            recipient = AddressToId(it[\"investment_wallet\"])\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment\", Money(it[\"amount\"]), sender, recipient, \"startup investment refund\")\n            DBUpdate(\"@1cf_investments\", Int(it[\"id\"]), {refund_at:$block_time})\n            i = i + 1\n        }\n        if lenIns == limit{\n            refund()\n        }\n    }\n    action {\n        refund()\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFInvestment",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFInvestment {\n    data {\n        NotificId int\n        Amount money\n        Id int \"optional\"\n    }\n\n    conditions{\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n        if $Id == 0{\n            // получить стартап из оповещения\n            $note = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$NotificId}).Columns(\"id,page_params->startup_id\").Row()\n            if !$note{\n                warning \"Notification not found\"\n            }\n            $Id = Int($note[\"page_params.startup_id\"])\n        }\n        $startup = DBFind(\"@1cf_startups\").Where({id:$Id, deleted_at:0, status:$STARTED}).Row()\n        if !$startup{\n            warning \"Startup not found\"\n        }\n        if $Amount < $startup[\"minimal_investment\"]{\n            warning \"Too small amount\"\n        }\n        $recipient = AddressToId($startup[\"wallet\"])\n        if $recipient == 0{\n            warning \"Startup wallet not found\"\n        }\n    }\n    func updateCurrentInvestment(startupId int){\n        var items array total money i lenItems int item map\n        items = DBFind(\"@1cf_investments\").Where({startup_id:startupId}).Columns(\"amount\").Limit(10000)\n        lenItems = Len(items)\n        while i < lenItems{\n            item = items[i]\n            total = total + Money(item[\"amount\"])\n            i = i + 1\n        }\n        if total > 0{\n            DBUpdate(\"@1cf_startups\", startupId, {current_investment:total})\n        }\n    }\n    action {\n        if $NotificId > 0{\n            @1NotificationsClose(\"notific_id\", $NotificId)\n        }\n\n        var m map\n        m[\"startup_id\"] = $startup[\"id\"]\n        m[\"investment_wallet\"] = $key_id\n        m[\"amount\"] = $Amount\n        m[\"created_at\"] = $block_time\n        DBInsert(\"@1cf_investments\", m)\n\n        updateCurrentInvestment(Int($startup[\"id\"]))\n\n        @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment\", $Amount, $key_id, $recipient, \"startup investment\")\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFInvestmentAdmin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFInvestmentAdmin {\n    data {\n        Action string\n        NotificId int\n    }\n\n    conditions{\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n       // получить стартап из оповещения\n        $note = DBFind(\"@1notifications\").Where({ecosystem:$ecosystem_id, id:$NotificId}).Columns(\"id,page_params->startup_id,page_params->investor,page_params->amount\").Row()\n        if !$note{\n            warning \"Notification not found\"\n        }\n        var startupId int\n        startupId = Int($note[\"page_params.startup_id\"])\n        $startup = DBFind(\"@1cf_startups\").Where({id:startupId, deleted_at:0}).Row()\n        if !$startup{\n            warning \"Startup not found\"\n        }\n        if !$startup[\"status\"] != $PUBLISHED{\n            warning \"Startup is not published\"\n        }\n        // проверить права доступа - админ экосистемы стартапа\n        var ecoAdmin eco int\n        eco = Int($startup[\"ecosystem\"])\n        ecoAdmin = Int(EcosysParam(\"role_admin\"))\n        if !RoleAccess(ecoAdmin){\n            warning \"This action allowed only for ecosystem admin role\"\n        }\n\n    }\n\n    action {\n        if $NotificId > 0{\n            @1NotificationsProcess(\"notific_id\", $NotificId)\n            @1NotificationsClose(\"notific_id\", $NotificId)\n        }\n\n        var params m map investor int\n        investor = Int($note[\"page_params.investor\"])\n        params[\"startup_id\"] = $startup[\"id\"]\n        params[\"wallet\"] = $startup[\"wallet\"]\n        params[\"amount\"] = $note[\"page_params.amount\"]\n        m[\"params_map\"] = JSONEncode(params)\n        m[\"member_id\"] = investor\n        m[\"closure_type\"] = 1\n        m[\"sender\"] = 1\n        m[\"eco_id\"] = 1\n        m[\"popup\"] = \"true\"\n        m[\"text_body\"] = Sprintf(\"Startup #%v, amount: %v\", $startup[\"id\"], $startup[\"amount\"])\n\n        if $Action == \"accept\"{\n            // создать кошелек в целевой экосистеме (если нет)\n            if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:investor}){\n                var pub string\n                pub = PubToHex(DBFind(\"@1keys\").Where({ecosystem:1, id:investor}).One(\"pub\"))\n                Println(\"pub:\", pub)\n                @1MembershipAdd(\"memberskeys\", pub)\n            }\n            m[\"page_name\"] = \"@1cf_invest_notification\"\n            m[\"text_header\"] = \"Accept investment offer\"\n\n        }elif $Action == \"reject\"{\n            m[\"page_name\"] = \"@1notifications_show\"\n            m[\"text_header\"] = \"Reject investment offer\"\n        }\n        CallContract(\"@1NotificationsSend\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFInvestmentOffer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFInvestmentOffer {\n    data {\n        Id int\n        Amount money\n    }\n\n    conditions{\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n        $startup = DBFind(\"@1cf_startups\").Where({id:$Id, deleted_at:0, status:$STARTED}).Row()\n        if !$startup{\n            warning \"Startup not found\"\n        }\n        if $Amount < $startup[\"minimal_investment\"]{\n            warning \"Too small amount\"\n        }\n        var eco int\n        eco = Int($startup[\"ecosystem\"])\n        $rid = Int(DBFind(\"@1parameters\").Where({name:\"role_admin\", ecosystem:eco}).Columns(\"value\").One(\"value\"))\n        if $rid == 0{\n            warning \"Admin role in Ecosystem of startup not assigned\"\n        }\n    }\n\n    action {\n        // оповещение админу целевой экосистемы\n        var closure sender int header body page params eco popup string m map\n        closure = 1\n        sender = 1\n        header = \"Investment offer\"\n        body = Sprintf(\"Startup #%v, amount: %v\", $Id, $Amount)\n        page = \"@1cf_admin_notification\"\n        m[\"startup_id\"] = $Id\n        m[\"amount\"] = $Amount\n        m[\"investor\"] = $key_id\n        params = JSONEncode(m)\n        eco = $startup[\"ecosystem\"]\n        popup = \"true\"\n\n        @1NotificationsSend(\"rid,closure_type,sender,text_header,text_body,page_name,params_map,eco_id,popup\", $rid, closure, sender, header, body, page, params, eco, popup)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFSettings{\n    data {\n        CatalogAdmin int\n        FeeWallet string\n        Fee int\n    }\n\n    conditions{\n        ContractConditions(\"@1AdminCondition\")\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Crowdfunding\"}).One(\"id\"))\n        if $Fee < 0 || $Fee > 100 {\n            warning \"Fee: Incorrect value\"\n        }\n        var kid int\n        kid = AddressToId($FeeWallet)\n        if kid == 0 {\n            warning \"Fee wallet not found\"\n        }\n    }\n    func updateAppParam(name, value string){\n        var paramId int\n        paramId = Int(DBFind(\"@1app_params\").Where({app_id:$appId, ecosystem:$ecosystem_id, name:name}).One(\"id\"))\n        @1EditAppParam(\"Id,Value\", paramId, value)\n    }\n    action {\n        updateAppParam(\"cf_catalog_admin\", Str($CatalogAdmin))\n        updateAppParam(\"cf_fee_wallet\", $FeeWallet)\n        updateAppParam(\"cf_fee\", Str($Fee))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFStartup",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFStartup {\n    data {\n        Id int \"optional\"\n        Ecosystem int\n        Name string\n        Description string\n        Wallet string\n        WalletEscrow string\n        WebAddress string\n        StartDate string\n        StartTime string\n        EndDate string\n        EndTime string\n        Estimated money\n        Minimal money\n    }\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Contains(d, \"T00:00:00Z\") {\n            d = Replace(d, \"T00:00:00Z\", \"\")\n        }\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", d, t)\n        }\n        return dt\n    }\n    conditions{\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n\n        if $Id > 0 {\n            $startup = DBFind(\"@1cf_startups\").Where({id:$Id, deleted_at:0}).Row()\n            if !$startup{\n                warning \"Startup not found\"\n            }\n            if Int($startup[\"status\"]) == $PUBLISHED{\n                warning \"Editing a published company is not available\"\n            }\n        }\n\n        // $key_id - админ $Ecosystem\n        var adminRoleId int admin map\n        adminRoleId = Int(DBFind(\"@1parameters\").Where({name:\"role_admin\", ecosystem:$Ecosystem}).One(\"value\"))\n        if adminRoleId == 0{\n            warning \"Admin role not defined in target ecosystem\"\n        }\n        admin = DBFind(\"@1roles_participants\").Where({\"role->id\":adminRoleId, \"member->member_id\": $key_id, ecosystem:$Ecosystem, deleted:0}).Row()\n        if !admin{\n            warning \"You must be Admin in target ecosystem\"\n        }\n        \n        $Wallet = AddressToId($Wallet)\n        if DBFind(\"@1keys\").Where({ecosystem:$Ecosystem, id:$Wallet, multi:0}).Row(){\n            // $Wallet - кошелек с мультиподписями\n            warning \"Wallet for investment in target ecosystem  must be multisigned\"\n        }\n        $Wallet = IdToAddress($Wallet)\n        $WalletEscrow = IdToAddress(AddressToId($WalletEscrow))\n\n        var eco token map\n        eco = DBFind(\"@1ecosystems\").WhereId($Ecosystem).Row()\n        // токен $Ecosystem - без дополнительной эмиссии и без сжигания\n        if eco[\"type_withdraw\"] != 1 {\n            warning \"Ecosystem token must be with out withdraw\"\n        }\n        if eco[\"type_emission\"] != 1 {\n            warning \"Ecosystem additional emission must be blocked\"\n        }\n\n        token[\"token_title\"] = eco[\"token_title\"]\n        token[\"emission_amount\"] = eco[\"emission_amount\"]\n        // TODO: наличие токена на бирже\n        $token = token\n\n        $dateStartString = dateAddTime($StartDate, $StartTime)\n        $dateStart = UnixDateTime($dateStartString)\n        if $dateStart == 0 {\n            warning \"Invalid starting date\"\n        }\n        $dateEndString = dateAddTime($EndDate, $EndTime)\n        $dateEnd = UnixDateTime($dateEndString)\n        if $dateEnd == 0 {\n            warning \"Invalid ending date\"\n        }\n        if $dateStart  >= $dateEnd {\n            warning \"Invalid starting date. Must be earler then ending date\"\n        }\n        if  $Estimated < $Minimal {\n            warning \"Estimated amount less then minimal amount\"\n        }\n        if  $Estimated == 0 {\n            warning \"Estimated amount must be greater then zero\"\n        }\n    }\n\n    action {\n        var escrowName string\n        escrowName = DBFind(\"@1members\").Where({ecosystem:$Ecosystem}).Columns(\"member_name\").One(\"member_name\")\n        if !escrowName{\n            escrowName = $WalletEscrow\n        }\n        var m map\n        m[\"ecosystem\"] = $Ecosystem\n        m[\"name\"] = $Name\n        m[\"description\"] = $Description\n        m[\"wallet\"] = $Wallet\n        m[\"escrow_wallet\"] = $WalletEscrow\n        m[\"escrow_name\"] = escrowName\n        m[\"web_address\"] = $WebAddress\n        m[\"registered_at\"] = $block_time\n        m[\"started_at\"] = $dateStart\n        m[\"finished_at\"] = $dateEnd\n        m[\"estimated_amount\"] = $Estimated\n        m[\"minimal_investment\"] = $Minimal\n        m[\"token_info\"] = $token\n        m[\"date_started\"] = $dateStartString\n        m[\"date_finished\"] = $dateEndString\n\n        if $Id > 0{\n            DBUpdate(\"@1cf_startups\", $Id, m)\n        }else{\n            m[\"status\"] = $CREATED\n            DBInsert(\"@1cf_startups\", m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFStartupDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFStartupDelete {\n    data {\n        Id int\n    }\n    conditions{\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n\n\n        $startup = DBFind(\"@1cf_startups\").Where({id:$Id, deleted_at:0}).Row()\n        if !$startup{\n            warning \"Startup not found\"\n        }\n        if Int($startup[\"status\"]) == $PUBLISHED{\n            warning \"Editing a published company is not available\"\n        }\n\n\n        // $key_id - админ $Ecosystem\n        var ecoAdminRoleId adminRoleId ecoId int admin map\n        ecoId = Int($startup[\"ecosystem\"])\n        ecoAdminRoleId = Int(DBFind(\"@1parameters\").Where({name:\"role_admin\", ecosystem:ecoId}).One(\"value\"))\n        if ecoAdminRoleId == 0{\n            warning \"Admin role not defined in target ecosystem\"\n        }\n        admin = DBFind(\"@1roles_participants\").Where({\"role->id\":ecoAdminRoleId, \"member->member_id\": $key_id, ecosystem:ecoId, deleted:0}).Row()\n        if !admin{\n            adminRoleId = EcosysParam(\"role_admin\")\n            admin = DBFind(\"@1roles_participants\").Where({\"role->id\":adminRoleId, \"member->member_id\": $key_id, ecosystem:$ecosystem_id, deleted:0}).Row()\n            if !admin{\n                warning \"Your role must be Admin in target ecosystem or Admin crowdfunding platform\"\n            }\n        }\n\n    }\n\n    action {\n        DBUpdate(\"@1cf_startups\", $Id,{deleted_at:$block_time})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFAdmin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFAdmin {\n    data {\n        Id int\n        Action string\n    }\n    conditions{\n        $startup = DBFind(\"@1cf_startups\").Where({id: $Id, deleted_at:0}).Row()\n        if !$startup{\n            warning \"Startup not found\"\n        }\n\n        // проверка прав на администрирование (role_id == cf_catalog_admin) или\n        // если Action==finish проверить что я админ стартапа или владелец кошелька для инвестиций\n        if $Action == \"finish\"{\n            var ecoAdmin eco int\n            eco = Int($startup[\"ecosystem\"])\n            ecoAdmin = Int(DBFind(\"@1parameters\").Where({name:\"role_admin\", ecosystem:eco}).One(\"value\"))\n            if ecoAdmin == 0{\n                warning \"Admin role not defined in target ecosystem\"\n            }\n            if !DBFind(\"@1roles_participants\").Where({\"role->id\":ecoAdmin, \"member->member_id\": $key_id, ecosystem:eco, deleted:0}).Row(){\n                if $startup[\"wallet\"] != IdToAddress($key_id){\n                    warning \"You must be Admin in target ecosystem or owner of wallet investments\"\n                }\n            }\n        }else{\n            var appId admin int\n            appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Crowdfunding\"}).One(\"id\"))\n            admin = Int(AppParam(appId, \"cf_catalog_admin\", 1))\n            if !RoleAccess(admin){\n                warning \"This action allowed only for startup catalog admin role\"\n            }\n        }\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n        $appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Crowdfunding\"}).One(\"id\"))\n        $fee = AppParam($appId, \"cf_fee\", 1)\n        var feeWallet string\n        feeWallet = AppParam($appId, \"cf_fee_wallet\", 1)\n        $feeKey = AddressToId(feeWallet)\n        if $feeKey == 0{\n            $feeKey = Int(DBFind(\"@parameters\").Where({ecosystem:1, name:\"founder_account\"}).One(\"value\"))\n        }\n        $startupKey = AddressToId($startup[\"wallet\"])\n    }\n    func notify(body string){\n        // оповещение wallet экосистемы стартапа\n        var sender int header page eco popup string params map\n        sender = 1\n        header = Sprintf(\"Startup (%v, %v) notification\", $startup[\"id\"], $startup[\"name\"])\n        page = \"@1cf_notification\"\n        eco = $startup[\"ecosystem\"]\n        popup = \"true\"\n        @1NotificationsSend(\"member_id,sender,text_header,text_body,page_name,params_map,eco_id,popup\", $startupKey, sender, header, body, page, params, eco, popup)\n    }\n    action {\n        var m map\n        if $Action == \"stop\"{\n            m[\"stopped_at\"] = $block_time\n            m[\"status\"] = $STOPPED\n            notify(\"Your startup compaign was stopped\")\n\n        }elif $Action == \"accept\"{\n            m[\"published_at\"] = $block_time\n            m[\"status\"] = $PUBLISHED\n            notify(\"Your request for startup compaign creation was accepted\")\n\n        }elif $Action == \"reject\"{\n            m[\"published_at\"] = -1\n            m[\"status\"] = $REJECTED\n            notify(\"Your request for startup compaign creation was rejected\")\n\n        }elif $Action == \"delete\"{\n            m[\"deleted_at\"] = $block_time\n            m[\"status\"] = $STOPPED\n            notify(\"Your startup compaign was deleted\")\n\n        }elif $Action == \"finish\" && $startup[\"status\"] == $STARTED{\n            m[\"status\"] = $FINISHED\n            notify(\"Your startup compaign was finished\")\n\n        }elif $Action == \"start\"{\n            m[\"stopped_at\"] = 0\n            m[\"status\"] = $PUBLISHED\n            notify(\"Your startup compaign was published\")\n        }\n\n        if m {\n            DBUpdate(\"@1cf_startups\", $Id, m)\n        }\n\n        if m[\"status\"] == $FINISHED{\n            var feeAmount currentAmount estimatedAmount money\n            currentAmount = Money($startup[\"current_investment\"])\n            estimatedAmount = Money($startup[\"estimated_amount\"])\n\n            if currentAmount < estimatedAmount {\n                // если не набрана сумма - возврат токенов\n                @1CFStartupRefund(\"Id\", $Id)\n            }else{\n                // переводится комиссия площадки\n                feeAmount = currentAmount / Money(100) * Money($fee)\n                @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment\", feeAmount, $startupKey, $feeKey, \"crowdfunding fee\")\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFStartupStatusUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract CFStartupStatusUpdate {\n    data {}\n\n    func changeStatus(from, to map) {\n        var items array i lenItems int it map\n        from[\"deleted_at\"] = 0\n        items = DBFind($table).Columns(\"id,started_at,finished_at,name,current_investment,estimated_amount,wallet\").Where(from).Limit(10000)\n\n        lenItems = Len(items)\n        while i < lenItems{\n            it = items[i]\n            DBUpdate($table, Int(it[\"id\"]), to)\n            if to[\"status\"] == $FINISHED {\n                var feeAmount currentAmount estimatedAmount money\n                currentAmount = Money(it[\"current_investment\"])\n                estimatedAmount = Money(it[\"estimated_amount\"])\n\n                if currentAmount < estimatedAmount {\n                    // если не набрана сумма - возврат токенов\n                    @1CFStartupRefund(\"Id\", it[\"id\"])\n                }else{\n                    // переводится комиссия площадки\n                    feeAmount = currentAmount / Money(100) * Money($fee)\n                    @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment\", feeAmount, AddressToId(it[\"wallet\"]), $feeKey, \"crowdfunding fee\")\n                }\n            }\n            i = i + 1\n        }\n    }\n    conditions{\n        var appId admin int feeWallet string\n        appId = Int(DBFind(\"@1applications\").Where({ecosystem:1, name:\"Crowdfunding\"}).One(\"id\"))\n        admin = Int(AppParam(appId, \"cf_catalog_admin\", 1))\n        if !RoleAccess(admin){\n            warning \"This action allowed only for startup catalog admin role\"\n        }\n        $CREATED = 1\n        $PUBLISHED = 2\n        $STARTED = 3\n        $FINISHED = 4\n        $FAILED = 5\n        $STOPPED = 6\n        $REJECTED = 7\n        $table = \"@1cf_startups\"\n\n        $fee = AppParam(appId, \"cf_fee\", 1)\n        feeWallet = AppParam(appId, \"cf_fee_wallet\", 1)\n        $feeKey = AddressToId(feeWallet)\n        if $feeKey == 0{\n            $feeKey = Int(DBFind(\"@parameters\").Where({ecosystem:1, name:\"founder_account\"}).One(\"value\"))\n        }\n    }\n\n    action {\n        changeStatus({status:$PUBLISHED, started_at:{\"$lte\":$block_time}}, {status:$STARTED})\n        changeStatus({status:$STARTED, finished_at:{\"$lte\":$block_time}}, {status:$FINISHED})\n    }\n}",
            "Type": "contracts"
        }
    ]
}