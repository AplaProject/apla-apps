{
    "name": "Crowdfunding",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1cf_startups$, Page:@1cf_startups, Icon:\"icon-credit-card\")\nMenuItem(Title:$@1cf_investments$, Page:@1cf_investments, Icon:\"icon-credit-card\")",
            "Type": "menu"
        },
        {
            "Name": "cf_startups",
            "Trans": "{\"en\": \"Startups\", \"ru\": \"Стартапы\"}",
            "Type": "languages"
        },
        {
            "Name": "cf_investments",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"startup_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"investment_wallet\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"created_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFInvestment\\\")\",\n        \"name\": \"refund_at\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "cf_startups",
            "Columns": "[\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"name\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"description\",\n        \"type\": \"text\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"wallet\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"escrow_wallet\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"escrow_name\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"web_address\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"registered_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"published_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"started_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"finished_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"estimated_amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"minimal_investment\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"current_investment\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"token_info\",\n        \"type\": \"json\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"failed_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"deleted_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"stopped_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"date_started\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1CFStartup\\\")\",\n        \"name\": \"date_finished\",\n        \"type\": \"varchar\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "cf_company",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "TODO: this",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_investment_form",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1cf_investment_form).(back_page,@1cf_startups)\n\nForm(){\n    Div(mb-sm text-muted){\n        $@1investment_amount$\n    }\n    Div(mb-sm){\n        Input(Name: Amount, Value: #min#)\n        TODO: валидация минимальной суммы\n    }\n    Div(){\n        If(GetVar(Id)!=\"\"){\n            Button(Body: $@1send$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1CFInvestment, Params: \"Id=#Id#\")\n        }\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_investments",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1cf_investments).(this_table, @1cf_investments)\nInclude(@1pager_header)\n\nIf(GetVar(search)!=\"\"){\n    SetVar(where, {investment_wallet:{$like:#search#}})\n}.Else{\n    SetVar(where, {investment_wallet:{#search#}})\n\n}\n\nSetTitle($@1cf_investments$)\n\nSpan(Class: h5 m0 mb ml-lg){\n    LinkPage(Class: ml-sm, Body: $@1r_rating$, Page: @1r_ratings)\n    Span(/,text-muted mh)\n    Span($@1r_accruals$, text-muted)\n}.Style(\n    display: inline-block;\n)\nDiv(list-group-item ml-lg mr-lg pt-lg){\n    SetVar(search_name, $@1wallet$)\n    Include(@1search)\n}\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_created){\n    DateTime(#created_at#, Format: YYYY-MM-DD HH:MI:SS)\n}.Custom(_wallet){\n    SetVar(kid, AddressToId(#investment_wallet#))\n    LinkPage(Class: h5 text-primary, Page: @1profile_view, PageParams: \"v_key_id=#kid#\"){\n        Div(){\n            Span(Class: fa icon-user fa-2x mr).(#investment_wallet#)\n        }.Style(display:flex; align-items:center;)\n    }\n}.Custom(_amount){\n    Money(#amount#)\n}\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1wallet$=_wallet,$@1amount$=_amount,$@1date_created$=_created\")\n            }.Else{\n                Div(text-center h4 text-muted){\n                    $@1cf_investments$ $@1not_founded$\n                }\n            }\n        }.Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_startup_filter",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1cf_startup_filter)\nIf(GetVar(back_page)==\"\"){\n    SetVar(back_page, @1cf_startups)\n}\n\nForm(){\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:StartDate){\n                $@1starting_date$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: StartDate, Type:date, Value:#StartDate#)\n        }\n    }\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:EndDate){\n                $@1ending_date$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: EndDate, Type:date, Value:#EndDate#)\n        }\n    }\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:Minimal){\n                $@1cf_minimal_investment$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: Minimal, Type:number, Value:#Minimal#)\n        }\n    }\n    Div(row mb-sm){\n        Div(col-md-3 mt-sm text-right){\n            Label(For:Estimated){\n                $@1cf_estimated_amount$\n            }\n        }\n        Div(col-md-9){\n            Input(Name: Estimated, Type:number, Value:#Estimated#)\n        }\n    }\n\n    Div(mt pull-right){\n        Button(Class: btn btn-default, Page: #back_page#, Body:$@1e_reset$)\n        Button(Class: btn btn-primary, Page: #back_page#, PageParams: \"StartDate=Val(StartDate),EndDate=Val(EndDate),Minimal=Val(Minimal),Estimated=Val(Estimated)\", Body: $@1filter$)\n    }\n}\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_startup_form",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1cf_startup_form).(back_page,@1cf_startups)\n\nIf(GetVar(EcosystemId)!=\"\"){\n    DBFind(@1ecosystems, ecosystems).Columns(\"id,name\").Where({id:#EcosystemId#}).Columns(\"id,name,info->description\").Vars(eco)\n\n}.Else{\n    SetVar(EcosystemId,).(eco_info_description,).(eco_name,)\n}\nForm(){\n    Div(){\n        Label(For: Ecosystem){\n            $@1ecosystem$\n        }\n        Span(*, text-danger)\n    }\n    Div(mb){\n        Input(Name: Ecosystem, Type: hidden, Value: #EcosystemId#)\n        If(GetVar(EcosystemId)!=\"\"){\n            Input(Name: Name, Value: #eco_name#, Disabled: true)\n        }.Else{\n            Div(input-group){\n                Input(Name: Name, Value: $@1ecosystem_select$, Disabled: true)\n                Div(input-group-btn){\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_ecosystem, PageParams:\"back_page=@1cf_startup_form,back_header=$@1cf_startup_form$,EcosystemId=#Ecosystem#,Type=ALL_LIST\").Popup(50, $@1ecosystem$)\n                }\n            }\n        }\n    }\n\n    Div(){\n        Label(For: Description){\n            $@1description$\n        }\n    }\n    Div(mb){\n        Input(Name: Description, Type: textarea, Value:#eco_info_description#)\n    }\n\n    Div(){\n        Label(For: Wallet){\n            $@1cf_company_wallet$\n        }\n    }\n    Div(mb){\n        Input(Name: Wallet)\n    }\n\n    Div(){\n        Label(For: WalletEscrow){\n            $@1cf_escrow_wallet$\n        }\n    }\n    Div(mb){\n        Input(Name: WalletEscrow)\n    }\n\n    Div(){\n        Label(For: NameEscrow){\n            $@1cf_escrow_name$\n        }\n    }\n    Div(mb){\n        Input(Name: NameEscrow)\n    }\n\n    Div(){\n        Label(For: WebAddress){\n            $@1web_address$\n        }\n    }\n    Div(mb){\n        Input(Name: WebAddress)\n    }\n\n    Div(){\n        Label(For: StartDate){\n            $@1date_start$\n        }\n    }\n    Div(mb row){\n        Div(col-sm-6){\n            Input(Name: StartDate, Type:date)\n        }\n        Div(col-sm-6){\n            Input(Name: StartTime, Type:time, Value: \"00:00\")\n        }\n    }\n\n    Div(){\n        Label(For: EndDate){\n            $@1date_end$\n        }\n    }\n    Div(mb row){\n        Div(col-sm-6){\n            Input(Name: EndDate, Type:date)\n        }\n        Div(col-sm-6){\n            Input(Name: EndTime, Type:time, Value: \"00:00\")\n        }\n    }\n\n    Div(){\n        Label(For: EndDate){\n            $@1cf_estimated_amount$\n        }\n    }\n    Div(mb row){\n        Input(Name: Estimated, Type:money)\n    }\n\n    Div(){\n        Label(For: Minimal){\n            $@1cf_minimal_investment$\n        }\n    }\n    Div(mb row){\n        Input(Name: Minimal, Type:money)\n    }\n    Div(){\n        Button(Body: $@1send$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1CFStartup)\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}.Style(\n    .buttons {\n        border: 1px solid #dde6e9;\n        padding: 6px 16px;\n    }\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "cf_startups",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1cf_startups).(this_table, @1cf_startups)\nInclude(@1pager_header)\n\nIf(GetVar(StartDate)!=\"\"){\n    SetVar(where_started, {date_started:{$gte:#StartDate#}})\n}.Else{\n    SetVar(where_started, {}).(StartDate,)\n}\nIf(GetVar(EndDate)!=\"\"){\n    SetVar(where_finished, {date_finished:{$lte:#EndDate#}})\n}.Else{\n    SetVar(where_finished, {}).(EndDate,)\n}\nIf(GetVar(Minimal)!=\"\"){\n    SetVar(where_min, {minimal_investment:{$lte:#Minimal#}})\n}.Else{\n    SetVar(where_min, {}).(Minimal,)\n}\nIf(GetVar(Estimated)!=\"\"){\n    SetVar(where_est, {estimated_amount:{$lte:#Estimated#}})\n}.Else{\n    SetVar(where_est, {}).(Estimated,)\n}\n\nSetVar(where, {$or:[#where_started#, #where_finished#, #where_min#, #where_est#]})\n\nSetTitle($@1cf_startups$)\nDiv(mr-lg text-right){\n    Button(Page: @1cf_startup_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"StartDate=#StartDate#,EndDate=#EndDate#,Minimal=#Minimal#,Estimated=#Estimated#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"50\")\n}\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_name){\n    LinkPage(Page: @1cf_company, PageParams: \"Id=#id#\", Body: #name#)\n}.Custom(_started){\n    DateTime(#started_at#, Format: YYYY-MM-DD HH:MI:SS)\n}.Custom(_finished){\n    DateTime(#finished_at#, Format: YYYY-MM-DD HH:MI:SS)\n}.Custom(_minimal){\n    Money(#minimal_investment#)\n}.Custom(_estimated){\n    Money(#estimated_amount#)\n}.Custom(_current){\n    Money(#current_investment#)\n}.Custom(_actions){\n    Button(Body:$@1invest$, Page:@1cf_investment_form, PageParams: \"Id=#id#,StartDate=#StartDate#,EndDate=#EndDate#,Minimal=#Minimal#,Estimated=#Estimated#\", Class:btn btn-default).Popup(50, $@1investment$)\n}\nDiv(fullscreen){\n    AddToolButton(Title:$@1cf_add_company$, Page: @1cf_startup_form, Icon: icon-plus).Popup(Header: $@1cf_startup_form$, Width: \"50\")\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1name$=_name,$@1date_start$=_started,$@1date_end$=_finished,$@1minimum_amount$=_minimal,$@1estimated_amount$=_estimated,$@1current_amount$=_current\")\n            }.Else{\n                Div(text-center h4 text-muted){\n                    $@1cf_startups$ $@1not_founded$\n                }\n            }\n        }\n    }\n}.Style(\n    tbody > tr:nth-of-type(odd) {\n        background-color: #f8f9fc;\n    }\n)\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "CFInvestment",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CFInvestment {\n    data {\n        Id int\n        Amount money\n    }\n\n    conditions{\n        $startup = DBFind(\"@1startups\").WhereId($Id).Row()\n        if !$startup{\n            warning \"Startup not found\"\n        }\n        if $Amount < $startup[\"minimal_investment\"]{\n            warning \"Too small amount\"\n        }\n        if $Amount < $startup[\"minimal_investment\"]{\n            warning \"Too small amount\"\n        }\n        $recipient = AddressToId($startup[\"wallet\"])\n        if $recipient == 0{\n            warning \"Startup wallet not found\"\n        }\n    }\n\n    action {\n        var m map\n        m[\"startup_id\"] = $Id\n        m[\"investment_wallet\"] = $key_id\n        m[\"amount\"] = $Amount\n        m[\"created_at\"] = $block_time\n        DBInsert(\"@1investments\", m)\n\n        var comment string ecosystem int\n        comment = \"startup investment\"\n        ecosystem = Int($startup[\"ecosystem\"])\n        @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", $Amount, $key_id, $recipient, comment, ecosystem)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CFStartup",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CFStartup {\n    data {\n        Id int \"optional\"\n        Ecosystem int\n        Name string\n        Description string\n        Wallet string\n        WalletEscrow string\n        NameEscrow string\n        WebAddress string\n        StartDate string\n        StartTime string\n        EndDate string\n        EndTime string\n        Estimated money\n        Minimal money\n    }\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Contains(d, \"T00:00:00Z\") {\n            d = Replace(d, \"T00:00:00Z\", \"\")\n        }\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", d, t)\n        }\n        return dt\n    }\n    conditions{\n        if $Id > 0 {\n            $startup = DBFind(\"@1startups\").WhereId($Id).Row()\n            if !$startup{\n                warning \"Startup not found\"\n            }\n            if Int($startup[\"published_at\"]) > 0{\n                warning \"Editing a published company is not available\"\n            }\n        }\n\n        // $key_id - админ $Ecosystem\n        var adminRoleId int admin map\n        adminRoleId = Int(DBFind(\"@1parameters\").Where({name:\"role_admin\", ecosystem:$Ecosystem}).One(\"value\"))\n        if adminRoleId == 0{\n            warning \"Admin role not defined in target ecosystem\"\n        }\n        admin = DBFind(\"@1roles_particiants\").Where({\"role->id\":adminRoleId, \"member->member_id\": $key_id, ecosystem:$Ecosystem}).Row()\n        if !admin{\n            warning \"You must be Admin in target ecosystem\"\n        }\n        \n        if DBFind(\"@1keys\").Where({ecosystem:$Ecosystem, id:$Wallet, multi:0}).Row(){\n            // $Wallet - кошелек с мультиподписями\n            warning \"Wallet must be multisigned\"\n        }\n\n        var eco token map\n        eco = DBFind(\"@1ecosystem\").WhereId($Ecosystem).Row()\n        // токен $Ecosystem - без дополнительной эмиссии и без сжигания\n        if eco[\"type_withdraw\"] != 1 {\n            warning \"Ecosystem token must be with out withdraw\"\n        }\n        if eco[\"type_emission\"] != 1 {\n            warning \"Ecosystem additional emission must be blocked\"\n        }\n        \n        token[\"token_title\"] = eco[\"token_title\"]\n        token[\"emission_amount\"] = eco[\"emission_amount\"]\n        // TODO: наличие токена на бирже\n        $token = token\n\n        $dateStartString = dateAddTime($StartDate, $StartTime)\n        $dateStart = UnixDateTime($dateStartString)\n        if $dateStart == 0 {\n            warning \"Invalid starting date\"\n        }\n        $dateEndString = dateAddTime($EndDate, $EndTime)\n        $dateEnd = UnixDateTime($dateEndString)\n        if $dateEnd == 0 {\n            warning \"Invalid ending date\"\n        }\n    }\n\n    action {\n        var m map\n        m[\"ecosystem\"] = $Ecosystem\n        m[\"name\"] = $Name\n        m[\"description\"] = $Description\n        m[\"wallet\"] = $Wallet\n        m[\"escrow_wallet\"] = $WalletEscrow\n        m[\"escrow_name\"] = $NameEscrow\n        m[\"web_address\"] = $WebAddress\n        m[\"registered_at\"] = $block_time\n        m[\"started_at\"] = $dateStart\n        m[\"finished_at\"] = $dateEnd\n        m[\"estimated_amount\"] = $Estimated\n        m[\"minimal_investment\"] = $Minimal\n        m[\"token_info\"] = $token\n        m[\"date_started\"] = $dateStartString\n        m[\"date_finished\"] = $dateEndString\n\n        if $Id > 0{\n            DBUpdate(\"@1startups\", $Id, m)\n        }else{\n            DBInsert(\"@1startups\", m)\n        }\n    }\n}",
            "Type": "contracts"
        }
    ]
}