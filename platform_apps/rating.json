{
    "name": "Ratings",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1r_rating$, Page:@1r_ratings, Icon:\"icon-credit-card\")",
            "Type": "menu"
        },
        {
            "Name": "r_accruals",
            "Trans": "{\"en\": \"History of accruals\", \"ru\": \"История начислений\"}",
            "Type": "languages"
        },
        {
            "Name": "r_amount",
            "Trans": "{\"en\": \"Amount\", \"ru\": \"Количество\"}",
            "Type": "languages"
        },
        {
            "Name": "r_change_rating",
            "Trans": "{\"en\": \"Change rating\", \"ru\": \"Изменить рейтинг\"}",
            "Type": "languages"
        },
        {
            "Name": "r_created",
            "Trans": "{\"en\": \"Created at\", \"ru\": \"Дата начисления\"}",
            "Type": "languages"
        },
        {
            "Name": "r_errand",
            "Trans": "{\"en\": \"Errand\", \"ru\": \"Поручение\"}",
            "Type": "languages"
        },
        {
            "Name": "r_event",
            "Trans": "{\"en\": \"Event\", \"ru\": \"Мероприятие\"}",
            "Type": "languages"
        },
        {
            "Name": "r_event_id",
            "Trans": "{\"en\": \"Event ID\", \"ru\": \"Идентификатор мероприятия\"}",
            "Type": "languages"
        },
        {
            "Name": "r_event_type",
            "Trans": "{\"en\": \"Event type\", \"ru\": \"Тип мероприятия\"}",
            "Type": "languages"
        },
        {
            "Name": "r_last_events",
            "Trans": "{\"en\": \"Last events\", \"ru\": \"Последние мероприятия\"}",
            "Type": "languages"
        },
        {
            "Name": "r_manager",
            "Trans": "{\"en\": \"Manager\", \"ru\": \"Менеджер\"}",
            "Type": "languages"
        },
        {
            "Name": "r_member",
            "Trans": "{\"en\": \"Member wallet\", \"ru\": \"Кошелек пользователя\"}",
            "Type": "languages"
        },
        {
            "Name": "r_offline",
            "Trans": "{\"en\": \"Offline\", \"ru\": \"Оффлайн\"}",
            "Type": "languages"
        },
        {
            "Name": "r_rating",
            "Trans": "{\"en\": \"Rating\", \"ru\": \"Рейтинг\"}",
            "Type": "languages"
        },
        {
            "Name": "r_rating_group",
            "Trans": "{\"en\": \"Group change rating\", \"ru\": \"Групповое изменение рейтинга\"}",
            "Type": "languages"
        },
        {
            "Name": "r_rating_group_description",
            "Trans": "{\"en\": \"Format: [address, amount, event ID, event type]. Address - XXXX-XXXX-XXXX-XXXX-XXXX; Amount - number; event ID - number; event type - number. A new entry on a new line, values separated by commas\", \"ru\": \"Формат: [адрес, количество, идентификатор мероприятия, тип мероприятия]. Адрес - xxxx-xxxx-xxxx-xxxx-xxxx; Количество - число; Идентификатор мероприятия - число; Тип мероприятия - число. Новая запись с новой строки, значения разделены запятыми\"}",
            "Type": "languages"
        },
        {
            "Name": "r_ratings_form",
            "Trans": "{\"en\": \"Mass rating entry\", \"ru\": \"Массовый ввод рейтинга\"}",
            "Type": "languages"
        },
        {
            "Name": "r_survey",
            "Trans": "{\"en\": \"Survey\", \"ru\": \"Опрос\"}",
            "Type": "languages"
        },
        {
            "Name": "r_voting",
            "Trans": "{\"en\": \"Voting\", \"ru\": \"Голосование\"}",
            "Type": "languages"
        },
        {
            "Name": "r_accruals",
            "Columns": "[\n    {\n        \"conditions\": \"false\",\n        \"name\": \"member\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"false\",\n        \"name\": \"amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"false\",\n        \"name\": \"manager\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"false\",\n        \"name\": \"created_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"false\",\n        \"name\": \"event_id\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"false\",\n        \"name\": \"event_type\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"false\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"@1RUpdate\\\")\",\"update\":\"false\",\"new_column\":\"ContractConditions(\\\"@1DeveloperCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "r_ratings",
            "Columns": "[\n    {\n        \"conditions\": \"false\",\n        \"name\": \"member\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1RUpdate\\\")\",\n        \"name\": \"amount\",\n        \"type\": \"money\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1RUpdate\\\")\",\n        \"name\": \"updated_at\",\n        \"type\": \"number\"\n    },\n    {\n        \"conditions\": \"ContractAccess(\\\"@1RUpdate\\\")\",\n        \"name\": \"ecosystem\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"@1RUpdate\\\")\",\"update\":\"ContractAccess(\\\"@1RUpdate\\\")\",\"new_column\":\"ContractConditions(\\\"@1DeveloperCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "r_accruals",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1r_accruals).(this_table, @1r_accruals)\nInclude(@1pager_header)\n\nIf(GetVar(Id)!=\"\"){\n    SetVar(member, Address(#Id#))\n}.Else{\n    SetVar(member, Address(#key_id#))\n}\n\nSetVar(where, {member:#member#, ecosystem:#ecosystem_id#})\n\nSetTitle($@1r_accruals$ #member#)\nSpan(Class: h5 m0 mb ml-lg){\n    LinkPage(Class: ml-sm, Body: $@1r_rating$, Page: @1r_ratings)\n    Span(/,text-muted mh)\n    Span($@1r_accruals$, text-muted)\n}.Style(\n    display: inline-block;\n)\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_type){\n    SetVar(t_name,)\n    DBFind(@1e_types).Where({ecosystem:#ecosystem_id#, id:#event_type#}).Columns(\"name\").Vars(t)\n    Span(#t_name#,ml-sm text-muted)\n}.Custom(_created){\n    DateTime(#created_at#, Format: YYYY-MM-DD HH:MI:SS)\n}.Custom(_manager){\n    SetVar(manager_key_id, AddressToId(#manager#))\n    LinkPage(Class: h5 text-primary, Page: @1profile_view, PageParams: \"v_key_id=#manager_key_id#\"){\n        Div(){\n            Span(Class: fa icon-user fa-2x mr).(#manager#)\n        }.Style(display:flex; align-items:center;)\n    }\n}\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1id$=id,$@1r_amount$=amount,$@1r_manager$=_manager,$@1r_created$=_created,$@1r_event_type$=_type,$@1r_event_id$=event_id\")\n            }.Else{\n                Div(text-center h4 text-muted){\n                    $@1r_accruals$ $@1not_founded$\n                }\n            }\n        }.Style(\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "r_rating_group",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1r_rating_group).(back_page,@1r_ratings)\nDBFind(@1applications).Where({ecosystem:1, name:\"Ratings\"}).Columns(\"name,id\").Vars(application)\n\nSetVar(isManager,0)\nSetVar(admin_role_id, EcosysParam(Name:role_admin))\nIf(#role_id#>0){\n    If(#admin_role_id#==#role_id#){\n        SetVar(isManager,1)\n    }\n}\n\nForm(){\n    Div(mb-sm text-muted){\n        $@1r_rating_group_description$\n    }\n    Div(mb-sm){\n        Input(Name: Ratings, Type: textarea)\n    }\n    Div(){\n        If(#isManager#==1){\n            Button(Body: $@1send$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1RUpdateGroup)\n        }\n        Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "r_rating_member",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1r_rating_member).(back_page, @1r_ratings)\nDBFind(@1applications).Where({ecosystem:1, name:\"Ratings\"}).Columns(\"name,id\").Vars(application)\nDBFind(@1e_types, types).Where({ecosystem:#ecosystem_id#}).Columns(\"id,name\")\n\nSetVar(isManager,0)\nSetVar(admin_role_id, EcosysParam(Name:role_admin))\nIf(#role_id#>0){\n    If(#admin_role_id#==#role_id#){\n        SetVar(isManager,1)\n    }\n}\n\nForm(){\n    If(#isManager#==1){\n        Div(row){\n            Div(col-sm-4 mt-sm text-bold text-right){\n                Label(For:Member){\n                    $@1r_member$\n                }\n            }\n            Div(col-sm-8 text-left){\n                Div(input-group){\n                    If(GetVar(MemberId)!=\"\"){\n                        SetVar(Member, Address(#MemberId#))\n                        Input(Name: Member, Disabled: 1, Value: #Member#)\n                    }.Else{\n                        Input(Name: Member, Disabled: 1, Value: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\n                    }\n                    Div(input-group-btn){\n                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#ecosystem_id#,Id=#Id#\").Popup(Header: $@1member$, Width: \"50\")\n                    }\n                }\n            }\n        }\n        If(GetVar(MemberId)!=\"\"){\n            Div(row mt-sm){\n                Div(col-sm-4 mt-sm text-right){\n                    Label(For:Amount){\n                        $@1r_amount$\n                    }\n                }\n                Div(col-sm-8 text-left){\n                    Input(Name: Amount, Type: number)\n                }\n            }\n            DBFind(@1e_events, events).Where({ecosystem:#ecosystem_id#}).Limit(10).Order(\"created_at\").Columns(\"name,id\")\n            Div(row mt-sm){\n                Div(col-sm-4 mt-sm text-right){\n                    Label(For:LastEvent){\n                        $@1r_last_events$\n                    }\n                }\n                Div(col-sm-8 mt-sm text-left){\n                    Input(Name: LastEvent, Type: \"checkbox\", Value: \"true\", Class: m0 ml-sm)\n                }\n            }\n            Div(row mt-sm){\n                Div(col-sm-4 mt-sm text-right){\n                    Label(For:EventId){\n                        $@1r_event$\n                    }\n                }\n                Div(col-sm-8 text-left){\n                    Select(Name: EventId, Source: events, NameColumn: name, ValueColumn: id)\n                }\n            }.Hide(LastEvent=false)\n\n            Div(row mt-sm){\n                Div(col-sm-4 mt-sm text-right){\n                    Label(For:EventType){\n                        $@1r_event_type$\n                    }\n                }\n                Div(col-sm-8 text-left){\n                    Select(Name: EventType, Source: types, NameColumn: name, ValueColumn: id)\n                }\n            }.Hide(LastEvent=true)\n            Div(row mt-sm){\n                Div(col-sm-4 mt-sm text-right){\n                    Label(For:EventId){\n                        $@1r_event_id$\n                    }\n                }\n                Div(col-sm-8 text-left){\n                    Input(Name: EventId, Type: number)\n                }\n            }.Hide(LastEvent=true)\n            Button(Body: $@1send$, Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1RUpdate)\n        }\n    }\n    Button(Body: $@1back$, Class: btn btn-default pull-right mt, Page: #back_page#)\n}.Style(\n    .buttons {\n        border: 1px solid #dde6e9;\n        padding: 6px 16px;\n    }\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "r_ratings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1r_ratings).(this_table, @1keys)\nInclude(@1pager_header)\n\nSetTitle($@1r_rating$)\nSpan(Class: text-muted h5 m0 mb ml-lg){\n    $@1ecosystem_members_list_desc$\n}\n\nSetVar(isManager,0)\nSetVar(admin_role_id, EcosysParam(Name:role_admin))\nIf(#role_id#>0){\n    If(#admin_role_id#==#role_id#){\n        SetVar(isManager,1)\n    }\n}\nIf(#isManager#==1){\n    AddToolButton(Title:$@1r_rating_group$, Page: @1r_rating_group, Icon: icon-calendar).Popup(Header: $@1r_rating_group$, Width: \"50\")\n}\n\nIf(GetVar(search)!=\"\"){\n    SetVar(where, {ecosystem:#ecosystem_id#, id:{\"$neq\":#guest_key#}, deleted:0, id:AddressToId(#search#)})\n}.Else{\n    SetVar(where, {ecosystem:#ecosystem_id#, id:{\"$neq\":#guest_key#}, deleted:0}).(search,)\n}\n\nDiv(list-group-item ml-lg mr-lg pt-lg){\n    SetVar(search_name, $@1wallet$)\n    Include(@1search)\n}\n\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Count(count).Custom(_id){\n    SetVar(Name: style_text, Value: \"text-normal\")\n    SetVar(Name: style_link, Value: \"text-primary\")\n    Span(Class: h6 text-muted, Body: #id#)\n    SetVar(m_id, 0)\n    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Vars(m)\n    If(Or(#m_id#>0,#m_id#<0)){\n        SetVar(image_id, #m_image_id#)\n        SetVar(member_name, #m_member_name#)\n    }.Else{\n        SetVar(image_id, 0)\n        SetVar(member_name, Address(#id#))\n    }\n}.Custom(_member_id){\n    Button(Class: btn-xs btn-link, Page: @1r_accruals, PageParams: \"Id=#id#\"){\n        Span(Class: h5, Body: $@1view$)\n    }\n}.Custom(_rating){\n    SetVar(rating_amount, 0).(member, Address(#id#))\n    DBFind(@1r_ratings, r).Where({ecosystem:#ecosystem_id#, member:#member#}).Vars(rating)\n    Span(#rating_amount#)\n}.Custom(_username){\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\"){\n        If(#image_id#>0){\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n            Span(#member_name#)\n        }.Else{\n            Div(){\n                Span(Em(Class: fa icon-user fa-2x mr)).(#member_name#)\n            }.Style(display:flex; align-items:center;)\n        }\n    }\n}.Custom(_actions){\n    If(#isManager#==1){\n        Button(Page:@1r_rating_member, PageParams: \"MemberId=#id#\", Class: btn btn-default fa fa-plus pull-right).Popup(Header:$@1r_change_rating$, Width: 50)\n    }\n}\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src, \"$@1name$=_username,$@1r_accruals$=_member_id,$@1r_rating$=_rating,=_actions\")\n            }.Else{\n                Div(text-center h4 text-muted){\n                    $@1members$ $@1not_founded$\n                }\n            }\n        }.Style(\n            margin-top:-15px;\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "RUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RUpdate {\n    data {\n        Member string\n        Amount int\n        EventType int \"optional\"\n        EventId int\n        LastEvent string \"optional\"\n    }\n\n    func updateRating(){\n        var accruals array total money offset limit i accrualsLen int acc map\n        limit = 250\n        while true {\n            accruals = DBFind(\"@1r_accruals\").Where({ecosystem:$ecosystem_id, member:$Member}).Limit(limit).Offset(offset)\n            accrualsLen = Len(accruals)\n            if accrualsLen == 0 {\n                break\n            }\n            i = 0\n            while i < accrualsLen {\n                acc = accruals[i]\n                total = total + Money(acc[\"amount\"])\n                i = i + 1\n            }\n            offset = offset + limit\n        }\n        var rating m map\n        rating = DBFind(\"@1r_ratings\").Where({member:$Member, ecosystem:$ecosystem_id}).Row()\n        m = {amount:total, updated_at:$block_time}\n        if rating {\n            if Money(rating[\"amount\"]) != total {\n                DBUpdate(\"@1r_ratings\", Int(rating[\"id\"]), m)\n            }\n        } else {\n            m[\"member\"] = $Member\n            m[\"ecosystem\"] = $ecosystem_id\n            DBInsert(\"@1r_ratings\", m)\n        }\n    }\n\n    conditions{\n        var adminId int\n        adminId = Int(EcosysParam(\"role_admin\"))\n        if !RoleAccess(adminId){\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        if $Amount == 0 {\n            warning \"Invalid amount\"\n        }\n\n        var id int\n        id = AddressToId($Member)\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:id}).Row(){\n            warning \"Wallet not founded\"\n        }\n\n        if $LastEvent == \"true\" {\n            var event map\n            event = DBFind(\"@1e_events\").WhereId($EventId).Row()\n            if !event {\n                warning \"Event not founded\"\n            }\n            $EventType = Int(event[\"type\"])\n        }\n    }\n\n    action {\n        var m map manager string\n        manager = IdToAddress($key_id)\n        m = {member:$Member, amount:$Amount, manager:manager, created_at:$block_time, event_id:$EventId, event_type:$EventType, ecosystem:$ecosystem_id}\n        DBInsert(\"@1r_accruals\", m)\n        updateRating()\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RUpdateGroup",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RUpdateGroup {\n    data {\n        Ratings string\n    }\n\n    conditions{\n        $ratings = Split(Replace($Ratings, \"\\r\", \"\"), \"\\n\")\n    }\n\n    action {\n        var i lenRatings amount eventId eventType int r array member string\n        lenRatings = Len($ratings)\n        while i < lenRatings{\n            r = Split($ratings[i], \",\")\n            if Len(r) != 4 {\n                error Sprintf(\"Invalid data string (%v)\", i)\n            }\n            member = TrimSpace(r[0])\n            amount = Int(TrimSpace(r[1]))\n            eventId = Int(TrimSpace(r[2]))\n            eventType = Int(TrimSpace(r[3]))\n            @1RUpdate(\"Member,Amount,EventType,EventId\", member, amount, eventType, eventId)\n            i = i + 1\n        }\n    }\n}",
            "Type": "contracts"
        }
    ]
}