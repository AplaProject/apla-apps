{
    "name": "Crowdfunding",
    "conditions": "ContractConditions(\"AdminCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "MenuItem(Title:$crowdfunding_settings$, Page:crowdfunding_settings, Icon: \"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "MenuItem(Title:$@1startups$, Page:@1startup_list, Icon:\"icon-star\")",
            "Type": "menu"
        },
        {
            "Name": "collected_funds",
            "Trans": "{\"en\": \"Collected funds\", \"ru\": \"Собранная сумма\"}\n",
            "Type": "languages"
        },
        {
            "Name": "crowdfunding_settings",
            "Trans": "{\"en\": \"Crowdfunding settings\", \"ru\": \"Настройки  Краудфандинга\"}\n",
            "Type": "languages"
        },
        {
            "Name": "crowdfunding_settings_description",
            "Trans": "{\"en\": \"Correspondence of Crowdfunding application roles to ecosystem roles\", \"ru\": \"Соответствие ролей приложения Краудфандинг ролям экосистемы\"}\n",
            "Type": "languages"
        },
        {
            "Name": "description_empty",
            "Trans": "{\"en\": \"Description cannot be empty\"}\n",
            "Type": "languages"
        },
        {
            "Name": "investor_list",
            "Trans": "{\"en\": \"Investor list\", \"ru\": \"Список инвесторов\"}\n",
            "Type": "languages"
        },
        {
            "Name": "less_investment",
            "Trans": "{\"en\": \"Amount less than minimum investment\", \"ru\": \"Сумма меньше минимальной инвестиции\"}\n",
            "Type": "languages"
        },
        {
            "Name": "link_empty",
            "Trans": "{\"en\": \"Link cannot be empty\"}\n",
            "Type": "languages"
        },
        {
            "Name": "min_investment",
            "Trans": "{\"en\": \"Minimum scale of investment\", \"ru\": \"Минимальная инвестиция\"}\n",
            "Type": "languages"
        },
        {
            "Name": "minimum_amount_empty",
            "Trans": "{\"en\": \"Minimum amount cannot be empty\"}\n",
            "Type": "languages"
        },
        {
            "Name": "percent",
            "Trans": "{\"en\": \"Percent\", \"ru\": \"Процент\"}\n",
            "Type": "languages"
        },
        {
            "Name": "required_amount",
            "Trans": "{\"en\": \"Required amount\", \"ru\": \"Необходимая сумма\"}\n",
            "Type": "languages"
        },
        {
            "Name": "required_amount_empty",
            "Trans": "{\"en\": \"Required amount cannot be empty\"}\n",
            "Type": "languages"
        },
        {
            "Name": "share_capital",
            "Trans": "{\"en\": \"Share of capital\", \"ru\": \"Доля капитала\"}\n",
            "Type": "languages"
        },
        {
            "Name": "share_capital_empty",
            "Trans": "{\"en\": \"Share capital cannot be empty\"}\n",
            "Type": "languages"
        },
        {
            "Name": "startup_attention",
            "Trans": "{\"en\": \"Use the role of Startup, Investor or Administrator to access\", \"ru\": \"Используйте роль Стартап, Инвестор или Администратор для доступа\"}\n",
            "Type": "languages"
        },
        {
            "Name": "startup_creation_error_x_unspecified",
            "Trans": "{\"en\": \"Startup creation error: %v is not specified\", \"ru\": \"Ошибка создания стартапа: не задано поле %v\"}\n",
            "Type": "languages"
        },
        {
            "Name": "startup_filter_desc",
            "Trans": "{\"en\": \"Select the status of the requests you want to see\", \"ru\": \"Выберите статус заявок, которые вы хотите увидеть\"}\n",
            "Type": "languages"
        },
        {
            "Name": "startups",
            "Trans": "{\"en\": \"Startups\", \"ru\": \"Стартапы\"}\n",
            "Type": "languages"
        },
        {
            "Name": "startups_not_found",
            "Trans": "{\"en\": \"Startups not found\", \"ru\": \"Стартапы не найдены\"}\n",
            "Type": "languages"
        },
        {
            "Name": "investment_participants",
            "Columns": "[\n    {\n        \"name\": \"amount\",\n        \"conditions\": \"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"money\"\n    },\n    {\n        \"name\": \"ecosystem_id\",\n        \"conditions\": \"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"account\",\n        \"conditions\": \"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"name\": \"investment_date\",\n        \"conditions\": \"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"startup_id\",\n        \"conditions\": \"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"text\"\n    }\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1InvestStartup\\\")\", \"update\": \"false\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "startups",
            "Columns": "[\n    {\n        \"name\": \"collected_amount\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1InvestStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"money\"\n    },\n    {\n        \"name\": \"collected_percent\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1InvestStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"creator\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"json\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"date_ended\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"date_started\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1DelStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"ecosystem\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"informations\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"json\"\n    },\n    {\n        \"name\": \"min_investment\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"money\"\n    },\n    {\n        \"name\": \"required_amount\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"money\"\n    },\n    {\n        \"name\": \"share_capital\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"status\",\n        \"conditions\": \"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1StartupsStatusUpdate\\\\\\\",\\\\\\\"@1DelStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1CreateStartup\\\")\", \"update\": \"ContractAccess(\\\"@1CreateStartup\\\",\\\"@1InvestStartup\\\",\\\"@1StartupsStatusUpdate\\\",\\\"@1DelStartup\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "crowdfunding_admin_role",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "crowdfunding_investor_role",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "crowdfunding_startup_role",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "create_startup",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "If(#stid# > 0){\n    DBFind(\"@1startups\").WhereId(#stid#).Columns(\"id,informations,informations->name,informations->description,informations->link,date_started,date_ended,required_amount,min_investment,share_capital,ecosystem,deleted,creator,creator->member_name,creator->account,status\").Vars(edit)\n}\nForm(){     \n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1name$)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){   \n                If(#edit_id# > 0){\n                    Input(Name: StartupName,Value: #edit_informations_name#)\n                }.Else{\n                    Input(Name: StartupName)\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1description$)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){ \n                If(#edit_id# > 0){\n                    Input(Name: Description, Value: #edit_informations_description#)\n                }.Else{  \n                    Input(Name: Description)\n                }\n            }\n        }.Style(padding-top:10px;)\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1link$)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){   \n                If(#edit_id# > 0){\n                    Input(Name: SiteLink, Value: #edit_informations_link#)\n                }.Else{\n                    Input(Name: SiteLink)\n                }\n            }\n        }.Style(padding-top:10px;)\n        Div(Class: mt-sm){\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        LangRes(@1date_start)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Div(row){\n                        If(#stid# > 0){\n                            SetVar(st_d, DateTime(DateTime: #edit_date_started#, Format: \"YYYY-MM-DD\"))\n                            SetVar(st_t, DateTime(DateTime: #edit_date_started#, Format: \"HH:MI\"))\n                        }\n                        If(#stid# > 0){\n                            Div(col-md-6){\n                                Input(Name: StartDate, Type: date,Value: #st_d#)\n                            }\n                            Div(col-md-6){\n                                Input(Name: StartTime, Type: time,Value: #st_t#)\n                            }\n                        }.Else{\n                            Div(col-md-6){\n                                Input(Name: StartDate, Type: date)\n                            }\n                            Div(col-md-6){\n                                Input(Name: StartTime, Type: time, Value: \"00:00\")\n                            }\n                        }\n                    }\n                }\n            }\n            Div(row mt-sm){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        LangRes(@1date_end)\n                        Span(*,text-danger)\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Div(row){\n                        If(#stid# > 0){\n                            SetVar(et_d, DateTime(DateTime: #edit_date_ended#, Format: \"YYYY-MM-DD\"))\n                            SetVar(et_t, DateTime(DateTime: #edit_date_ended#, Format: \"HH:MI\"))\n                        }\n                        If(#stid# > 0){\n                            Div(col-md-6){\n                                Input(Name: EndDate, Type: date,Value: #et_d#)\n                            }\n                            Div(col-md-6){\n                                Input(Name: EndTime, Type: time, Value: #et_t#)\n                            }\n                        }.Else{\n                            Div(col-md-6){\n                                Input(Name: EndDate, Type: date)\n                            }\n                            Div(col-md-6){\n                                Input(Name: EndTime, Type: time, Value: \"00:00\")\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1required_amount$)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){   \n                If(#edit_id# > 0){\n                    SetVar(r_a,Money(#edit_required_amount#))\n                    Input(Name: RequiredAmount, Type: number, Value: #r_a#)\n                }.Else{\n                    Input(Name: RequiredAmount, Type: number)\n                }\n            }\n        }.Style(padding-top:10px;)\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1min_investment$)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){   \n                If(#edit_id# > 0){\n                    SetVar(m_a,Money(#edit_min_investment#))\n                    Input(Name: MinAmount, Type: number, Value: #m_a#)\n                }.Else{\n                    Input(Name: MinAmount, Type: number)\n                }\n            }\n        }.Style(padding-top:10px;)\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1share_capital$)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){  \n                If(#edit_id# > 0){\n                    Input(Name: ShareCapital, Type: number, Value: #edit_share_capital#)\n                }.Else{\n                    Input(Name: ShareCapital, Type: number)\n                }\n            }\n        }.Style(padding-top:10px;)\n    }\n    Div(row mt){\n        Div(col-md-12 text-right){\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#)\n            If(#edit_id# > 0){\n                Button(Body: $@1edit$, Class: btn btn-primary, Contract: CreateStartup, Params: \"StId=#stid#,Action=edit\", Page: #back_page#)\n            }.Else{\n                Button(Body: $@1create$, Class: btn btn-primary, Contract: CreateStartup, Page: #back_page#)\n            }\n        }\n    }\n}\n                ",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "crowdfunding_settings",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crowdfunding\"}).Vars(app)\nDBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Columns(\"role_name,id\").Limit(100)\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\n\nSetVar(this_page, \"crowdfunding_settings\").(role_admin,0).(role_startup,0).(role_investor,0)\nSetVar(role_admin, AppParam(App: #app_id#, Name: \"crowdfunding_admin_role\"))\nSetVar(role_startup, AppParam(App: #app_id#, Name: \"crowdfunding_startup_role\"))\nSetVar(role_investor, AppParam(App: #app_id#, Name: \"crowdfunding_investor_role\"))\n\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(text-center text-bold h4 m0){\n                        LangRes(@1crowdfunding_settings)\n                    }\n                    Div(text-center text-muted){\n                        LangRes(@1crowdfunding_settings_description)\n                    }\n                    Div(row mt-lg){\n                        Div(#col_left#){\n                            Label(){\n                                \"Admin\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Select(Name: RoleAdmin, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_admin#)\n                            Div(m0 h6 text-muted){\n                                SetVar(r_name, $@1role_not_found$)\n                                If(#role_admin# > 0){\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_admin#\"}).Columns(\"role_name\").Vars(r)\n                                    SetVar(r_name, #r_role_name#)\n                                }\n                                LangRes(@1current_value): #r_name#\n                            }\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            Label(){\n                                \"Startup\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Select(Name: RoleStartup, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_startup#)\n                            Div(m0 h6 text-muted){\n                                SetVar(r_name, $@1role_not_found$)\n                                If(#role_startup# > 0){\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_startup#\"}).Columns(\"role_name\").Vars(r)\n                                    SetVar(r_name, #r_role_name#)\n                                }\n                                LangRes(@1current_value): #r_name#\n                            }\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            Label(){\n                                \"Investor\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Select(Name: RoleInvestor, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_investor#)\n                            Div(m0 h6 text-muted){\n                                SetVar(r_name, $@1role_not_found$)\n                                If(#role_investor# > 0){\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_investor#\"}).Columns(\"role_name\").Vars(r)\n                                    SetVar(r_name, #r_role_name#)\n                                }\n                                LangRes(@1current_value): #r_name#\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: @1CrowdfundingSettings)\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "startup_filter",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crowdfunding\"}).Vars(application)\nSetVar(admin_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_admin_role))\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#admin_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(admin_access)\n\nIf(#admin_access_id# > 0){\n    Data(type_status, \"value,name\"){\n        -1,$@1deleted$\n        0,$@1waiting$\n        1,$@1started$\n        2,$@1finished$\n    }\n}.Else{\n    Data(type_status, \"value,name\"){\n        0,$@1waiting$\n        1,$@1started$\n        2,$@1finished$\n    }\n}\nForm(text-center){\n    Label(Class: m0){\n        Span(Body: LangRes(startup_filter_desc))\n    }\n    Div(row text-left){\n        Div(col-md-5){}\n        Div(col-md-7){\n            RadioGroup(Name: Filter, Source: type_status, NameColumn: name, ValueColumn: value)\n        }\n    }\n    Button(Body: LangRes(@1filter), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"page_par=Val(Filter),search=#search#\")\n    Button(Body: LangRes(@1clear), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"page_par=NULL,search=#search#\")\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "startup_list",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "SetVar(this_page, @1startup_list).(this_table, @1startups)\nInclude(@1pager_header)\n\nSetTitle(Startups list)\n\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crowdfunding\"}).Vars(application)\nSetVar(admin_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_admin_role))\nSetVar(startup_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_startup_role))\nSetVar(investor_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_investor_role))\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#admin_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(admin_access)\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#startup_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(startup_access)\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#investor_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(investor_access)\n\nIf(#page_par# == 0){\n    SetVar(type_filter, `\"status\": 0`)\n}.ElseIf(#page_par# == 1){\n    SetVar(type_filter, `\"status\": 1`)\n}.ElseIf(#page_par# == 2){\n    SetVar(type_filter, `\"status\": {\"$gte\": 2}`)\n}.ElseIf(#page_par# == -1){\n    SetVar(type_filter, `\"status\": \"-1\"`)\n}\n\nIf(#startup_access_id# > 0){\n    AddToolButton(Title: $@1create$, Page: create_startup, Icon: icon-plus, PageParams: \"back_page = #this_page#\").Popup(50, \"New startup\")\n}\nIf(Or(#startup_access_id# > 0,#admin_access_id# > 0, #investor_access_id# > 0)){\n    SetVar(global_access,1)\n}\nIf(#global_access# == 1){\n    Div(mr-lg text-right){\n        If(#admin_access_id# > 0){\n            Button(Body: Em(Class: fa fa-refresh) $@1update_statuses$, Class: btn bg-gray mr-lg, Page: #this_page#, Contract: @1StartupsStatusUpdate)\n        }\n        Button(Page: startup_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"page_par=#page_par#,search=#search#,back_page=#this_page#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"30\")\n        If(#type_filter#){\n            Button(Page: #this_page#, PageParams: \"page_par=NULL,search=#search#\", Class: btn bg-gray-lighter mr-sm, Body: Em(Class: fa fa-close))\n        }\n    }\n    Div(list-group-item ml-lg mr-lg pt-lg){\n        SetVar(search_name, LangRes(@1name)).(search, #search#)\n        Include(@1search)\n    }\n\n    If(#search#){\n        If(#startup_access_id# > 0){\n            SetVar(where, {\"deleted\": 0, \"#type_filter#\", \"informations->name\": {\"$ilike\": \"#search#\"}})\n        }.ElseIf(#investor_access_id# > 0){\n            SetVar(where, {\"deleted\": 0, \"#type_filter#\", \"informations->name\": {\"$ilike\": \"#search#\"}})\n        }.ElseIf(#admin_access_id# > 0){\n            SetVar(where, {\"#type_filter#\", \"informations->name\": {\"$ilike\": \"#search#\"}})\n        }.Else{\n            SetVar(where, {\"status\": 10})\n        }\n    }.Else{\n        If(#startup_access_id# > 0){\n            SetVar(where, {\"#type_filter#\", \"deleted\": 0})\n        }.ElseIf(#investor_access_id# > 0){\n            SetVar(where, {\"#type_filter#\", \"deleted\": 0})\n        }.ElseIf(#admin_access_id# > 0){\n            SetVar(where, {\"#type_filter#\"})\n        }.Else{\n            SetVar(where, {\"status\": 10})\n        }\n    }\n\n    DBFind(#this_table#, src_start).Where(#where#).Columns(\"id,collected_amount,informations,informations->name,informations->description,informations->link,date_started,date_ended,required_amount,min_investment,share_capital,ecosystem,deleted,creator,creator->member_name,creator->account,status,date_created,collected_percent\").Offset(#pager_offset#).Limit(#pager_limit#).Custom(_name){\n        Div(button-group text-nowrap){\n            LinkPage(Class: text-primary h5 text-bold, Page: @1startup_view, PageParams: \"stid=#id#,back_page=#this_page#\"){\n                Span(Class: text-primary ml-sm, Body: #informations.name#)\n            }\n        }\n    }.Custom(_creator){ \n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#creator.account#\"){\n            Div(){\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                Span(){\n                    If(#creator.member_name#){\n                        Span(Body: #creator.member_name#)\n                    }.Else{\n                        Span(Body: #creator.account#)\n                    }\n                }\n            }.Style(display:flex; align-items:center;)  \n        }  \n    }.Custom(_collected){\n        If(#status# > 0){\n            If(#collected_percent# > 0){\n                Span(Class: h5 text-bold, Body: #collected_percent# %)\n            }.Else{\n                Span(Class: h5 text-bold, Body: 0 %) \n            }\n        }.Else{\n            Span(Class: h5 text-bold, Body: 0 %)\n        }\n    }.Custom(_date){\n        P(Class: h6 m0, Body: DateTime(DateTime: #date_started#, Format: HH:MI DD.MM.YYYY))\n        P(Class: h6 m0, Body: DateTime(DateTime: #date_ended#, Format: HH:MI DD.MM.YYYY))\n    }.Custom(req_amount){\n        Span(Class: text-bold, Body: Money(#required_amount#) APLA)\n    }.Custom(min_amount){\n        Span(Body: Money(#min_investment#))\n    }.Custom(_edit){\n        Div(pull-right){\n            If(And(#startup_access_id# > 0, #creator.account# == #account_id#)){\n                If(#status# == 0){\n                    Button(Class: btn bg-gray-lighter mh-sm buttons, PageParams: \"stid=#id#,back_page=#this_page#\", Page: @1create_startup){\n                        Em(Class: text-default fa fa-1x fa-edit)\n                    }.Popup(50, $@1edit$)\n                    Button(Class: btn bg-gray-lighter mh-sm buttons, Contract: @1DelStartup, Params: \"StId=#id#\", Page: @1startup_list){\n                        Em(Class: text-danger fa fa-1x fa-trash)\n                    }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }\n            }.ElseIf(#admin_access_id# > 0){\n                If(And(#status# < 2,#status# != -1)){\n                    Button(Class: btn bg-gray-lighter buttons, Contract: @1DelStartup, Params: \"StId=#id#\", Page: @1startup_list){\n                        Em(Class: text-danger fa fa-1x fa-trash)\n                    }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                }\n            }\n        }.Style(\n            .buttons{border: 1px solid #dde6e9;}\n        )\n    }.Custom(_status){\n        If(#status# == 0){\n            Span(Class: text-warning, Body: $@1waiting$)\n        }.ElseIf(#status# == 1){\n            Span(Class: text-primary, Body: $@1started$)\n        }.ElseIf(#status# == 2){\n            Span(Class: text-success, Body: $@1finished$)\n        }.ElseIf(#status# == 3){\n            Span(Class: text-danger, Body: $@1finished$)\n        }.ElseIf(#status# == -1){\n            Span(Class: text-danger, Body: $@1deleted$)\n        }\n    }.Custom(_date_created){\n        P(Class: h6 m0, Body: DateTime(DateTime: #date_created#, Format: HH:MI DD.MM.YYYY))\n    }.Order({\"status\": \"-1\", \"date_started\": \"-1\"}).Count(check_comp)\n\n    Div(fullscreen){\n        Div(table-responsive ml-lg mr-lg){\n            Div(list-group-item){\n                If(#check_comp# > 0){\n                    Table(Source: src_start, Columns: \"$@1name$=_name,$@1required_amount$=req_amount,$@1creator$=_creator,$@1date_start$ / $@1date_end$=_date,$@1date_created$=_date_created,$@1collected_funds$=_collected,$@1status$=_status,=_edit\")\n                }.Else{\n                    Div(Class: text-center h4 text-muted, Body: $@1startups_not_found$)\n                }\n            }.Style(\n                margin-top:-15px;\n                tbody > tr:nth-of-type(odd) {\n                    background-color: #f8f9fc;\n                }\n            )\n        }\n    }\n    Div(mt-sm ml-lg mr-sm mb-sm){\n        Include(@1pager)\n    }\n}.Else{\n    Div(row ml-lg mr-lg){\n        Div(md-12 alert h4 text-bold text-center){\n            Span(Body: LangRes(startup_attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "startup_view",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1startups\").WhereId(#stid#).Columns(\"id,collected_percent,date_created,collected_amount,informations,informations->name,informations->description,informations->link,date_started,date_ended,required_amount,min_investment,share_capital,ecosystem,deleted,creator,creator->member_name,creator->account,status\").Vars(view)\nDBFind(\"@1roles\").Where({\"role_name\": \"Investor\", \"deleted\": 0,\"ecosystem\": \"#ecosystem_id#\"}).Columns(\"id,role_name,deleted,ecosystem\").Vars(check_role_invest)\n\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-10 col-lg-offset-1){\n            Form(panel panel-primary){\n                Div(list-group-item text-center){\n                    P(Class: h3 text-bold m0, Body: #view_informations_name#)\n                    Div(row){\n                        Div(col-md-12){\n                            Div(Class: t5 text-muted m0, Body: #view_informations_description#)\n                        }\n                    }\n                }\n                Div(list-group-item text-center){\n                    P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $@1information$)\n                    Div(row mb mt-lg t5){\n                        Div(col-md-6 mt-sm text-right){\n                            LangRes($@1creator$)\n                        }\n                        Div(col-md-6 text-left){\n                            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#view_creator_account#\"){\n                                Div(){\n                                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                                    If(#view_creator_member_name#){\n                                        Span(Class: h5 m0, Body: #view_creator_member_name#)\n                                    }.Else{\n                                        Span(Class: h5 m0, Body: #view_creator_account#)\n                                    }\n                                }.Style(display:flex; align-items:center;)\n                            } \n                        }\n                    }\n                    Div(row t6 mt-lg){\n                        Div(col-md-6 text-right){\n                            Span(Class: h6, Body: LangRes($@1link$))\n                        }\n                        Div(col-md-6 text-left){\n                            Span(Class: h6, Body: #view_informations_link#)\n                        }\n                    }\n                    Div(row t6){\n                        Div(col-md-6 text-right){\n                            Span(Class: h6, Body: LangRes($@1share_capital$))\n                        }\n                        Div(col-md-6 text-left){\n                            Span(Class: h6, Body: #view_share_capital#)\n                        }\n                    }\n                    Div(row t6){\n                        Div(col-md-6 text-right){\n                            Span(Class: h6, Body: LangRes($@1date_created$))\n                        }\n                        Div(col-md-6 text-left){\n                            Span(Class: h6, Body: DateTime(DateTime: #view_date_created#, Format: HH:MI DD.MM.YYYY))\n                        }\n                    }\n                    Div(row t6){\n                        Div(col-md-6 text-right){\n                            Span(Class: h6, Body: LangRes($@1date_start$))\n                        }\n                        Div(col-md-6 text-left){\n                            Span(Class: h6, Body: DateTime(DateTime: #view_date_started#, Format: HH:MI DD.MM.YYYY))\n                        }\n                    }\n                    Div(row t6){\n                        Div(col-md-6 text-right){\n                            Span(Class: h6, Body: LangRes($@1date_end$))\n                        }\n                        Div(col-md-6 text-left){\n                            Span(Class: h6, Body: DateTime(DateTime: #view_date_ended#, Format: HH:MI DD.MM.YYYY))\n                        }\n                    }\n                    Div(row mt-lg t5){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes($@1collected_funds$))\n                        }\n                        Div(col-md-6 text-left){\n                            Span(Body: Money(#view_collected_amount#) APLA / Money(#view_required_amount#) APLA)\n                        }\n                    }\n                    Div(row t5){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes($@1status$))\n                        }\n                        Div(col-md-6 text-left){\n                            If(#view_status# == 0){\n                                Span(Class: text-warning, Body: $@1waiting$)\n                            }.ElseIf(#view_status# == 1){\n                                Span(Class: text-primary, Body: $@1started$)\n                            }.ElseIf(#view_status# == 2){\n                                Span(Class: text-success, Body: $@1finished$)\n                            }.ElseIf(#view_status# == 3){\n                                Span(Class: text-danger, Body: $@1finished$)\n                            }.ElseIf(#view_status# == -1){\n                                Span(Class: text-danger, Body: $@1deleted$)\n                            }\n                        }\n                    }\n                    Div(row mb-sm t5){\n                        Div(col-md-6 text-right){\n                            Span(Body: LangRes($@1percent$))\n                        }\n                        Div(col-md-6 text-left){\n                            If(#view_collected_percent# >= 100) {\n                                Span(Class: text-success, Body: #view_collected_percent# %)\n                            }.Else{\n                                If(#view_collected_percent# == \" \"){\n                                    Span(Class: text-danger, Body: 0%)\n                                }.Else{\n                                    Span(Class: text-danger, Body: #view_collected_percent#%)\n                                }\n                            }\n                        }\n                    }\n                }\n                If(And(#check_role_invest_id# == #role_id#,#view_status# == 1)){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-lg-8 col-lg-offset-2 text-center){\n                                Span(Class: h5 mr, Body: LangRes($@1min_investment$):)\n                                Span(Class: h5, Body: Money(#view_min_investment#) APLA)\n                                Div(input-group){\n                                    Div(input-group-addon){\n                                        $@1amount$\n                                    }\n                                    Input(Name: Invest, Type: number)\n                                    Div(input-group-btn){\n                                        Button(Class: btn btn-success mtl buttons, Page: @1startup_view, Body: $@1investment_amount$, Contract: InvestStartup, Params: \"StartupId=#stid#\", PageParams: \"stid=#stid#\")\n                                    }\n                                }\n                            }.Style(\n                                .buttons{border: 1px solid #dde6e9;}\n                            )\n                        }.Style(padding-bottom:10px;)\n                    }\n                }\n                DBFind(\"@1investment_participants\", src_investment).Where({\"startup_id\": \"#stid#\"}).Custom(_investor){\n                    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#account#\"}).Vars(c)\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#c_account#\"){\n                        Div(){\n                            Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\n                            Span(){\n                                If(#c_member_name#){\n                                    P(Class: h6 m0, Body: #c_member_name#)\n                                }.Else{\n                                    #account#\n                                }\n                            }\n                        }.Style(display:flex; align-items:center;)\n                    }\n                }.Custom(_date){\n                    Span(Class: h6 text-muted, Body: DateTime(DateTime: #investment_date#, Format: HH:MI DD.MM.YYYY))\n                }.Custom(_amount){\n                    Span(Class: h5, Body: Money(#amount#) APLA)\n                }.Count(count_investment)\n                If(#count_investment# > 0){\n                    Div(list-group-item){\n                        P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $@1investor_list$)\n                        Div(row mt){\n                            Div(col-lg-7 col-lg-offset-3){\n                                Table(Source: src_investment,Columns: \"$@1name$=_investor,$@1date_created$=_date,$@1amount$=_amount\")\n                            }\n                        }\n                    }\n                }\n                Div(list-group-item){\n                    Button(Class: btn bg-gray-lighter ml-sm buttons, Page: @1startup_list){\n                        Span(Em(Class: fa fa-chevron-left fa-1x)\n                        Span(Class: ml-sm, Body: LangRes($@1back$))\n                    }\n                }\n            }.Style(\n                .buttons{border: 1px solid #dde6e9;}\n            )\n        }\n    }\n}.Style(\n    .preview {\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n    }\n    .t3 {font-size:24px;}\n    .t4 {font-size:18px;}\n    .t5 {font-size:14px;}\n    .t6 {font-size:12px;}\n    .break {word-break: break-all;}\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "CreateStartup",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreateStartup {\n    data {\n        StartupName string\n        Description string\n        SiteLink string\n        StartDate string\n        StartTime string\n        EndDate string\n        EndTime string\n        RequiredAmount money\n        MinAmount money\n        ShareCapital int\n        Action string \"optional\"\n        StId int \"optional\"\n    }\n\n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n\n    func isCalledFromPage() bool {\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\n    }\n\n    func fixDatetimes() {\n        $date_started = UnixDateTime(dateAddTime($StartDate, $StartTime))\n        $date_ended = UnixDateTime(dateAddTime($EndDate, $EndTime))\n\n        if $date_started == 0 || $date_ended == 0 { // invalid datetimes\n            if isCalledFromPage() {\n                var errs array\n                if Size($StartDate) < 10 {\n                    errs = Append(errs, \"starting date\")\n                }\n                if Size($StartTime) < 5 {\n                    errs = Append(errs, \"starting time\")\n                }\n                if Size($EndDate) < 10 {\n                    errs = Append(errs, \"ending date\")\n                }\n                if Size($EndTime) < 5 {\n                    errs = Append(errs, \"ending time\")\n                }\n                warning Sprintf(LangRes(\"@1startup_creation_error_x_unspecified\", \"en\"), Join(errs, \", \"))\n            } else {\n                $date_started = $block_time\n                $Interval = Int($Interval)\n                if $Interval == 0 {\n                    $Interval = 3\n                }\n                $date_ended = $date_started + 3600 * 24 * $Interval\n            }\n        }\n        if $date_started < $block_time {\n            warning LangRes(\"@1starting_date_invalid\", \"en\")\n        }\n        if $date_started >= $date_ended {\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\n        }\n    }\n\n    conditions {\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crowdfunding_startup_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        if !$StartupName {\n            warning LangRes(\"@1empty_name\", \"en\")\n        }\n        if !$Description {\n            warning LangRes(\"@1description_empty\", \"en\")\n        }\n        if !$SiteLink {\n            warning LangRes(\"@1link_empty\", \"en\")\n        }\n        if Money($RequiredAmount) <= Money(0) {\n            warning LangRes(\"@1required_amount_empty\", \"en\")\n        }\n        if Money($MinAmount) <= Money(0) {\n            warning LangRes(\"@1minimum_amount_empty\", \"en\")\n        }\n        if !$ShareCapital {\n            warning LangRes(\"@1share_capital_empty\", \"en\")\n        }\n        \n        $startup = DBFind(\"@1startups\").WhereId($StId).Row()\n        if $StartDate || $StartTime || $EndDate || $EndTime {\n            fixDatetimes()\n        }\n    }\n\n    action { \n        var information creator m map\n        information[\"name\"] = $StartupName\n        information[\"description\"] = $Description\n        information[\"link\"] = $SiteLink\n\n        $member_name = DBFind(\"@1members\").Where(\"ecosystem\": $ecosystem_id, \"account\": $account_id).One(\"member_name\")\n        creator[\"account\"] = $account_id\n        if $member_name {\n            creator[\"member_name\"] = $member_name\n        } else {\n            creator[\"member_name\"] = $account_id\n        }\n\n        m[\"informations\"] = information\n        m[\"creator\"] = creator\n        m[\"date_started\"] = $date_started\n        m[\"date_ended\"] = $date_ended\n        m[\"required_amount\"] = $RequiredAmount\n        m[\"min_investment\"] = $MinAmount\n        m[\"share_capital\"] = $ShareCapital\n        m[\"ecosystem\"] = $ecosystem_id\n        \n        if $Action == \"edit\" {\n            DBUpdate(\"@1startups\", $StId, m)\n        } else {\n            m[\"date_created\"] = $block_time\n            DBInsert(\"@1startups\", m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CrowdfundingSettings",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CrowdfundingSettings {\n    data {\n        RoleAdmin int\n        RoleStartup int\n        RoleInvestor int\n    }\n\n    conditions {\n        MainCondition()\n    }\n\n    func updateParam(name string, value string) {\n        var param paramsNew map\n        if $app_id > 0 {\n            param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": $app_id, \"name\": name}).Row()\n            if param {\n                paramsNew[\"Id\"] = Int(param[\"id\"])\n                paramsNew[\"Value\"] = Str(value)\n                paramsNew[\"Conditions\"] = param[\"conditions\"]\n                CallContract(\"@1EditAppParam\", paramsNew)\n            } else {\n                paramsNew[\"ApplicationId\"] = $app_id\n                paramsNew[\"Name\"] = name\n                paramsNew[\"Value\"] = Str(value)\n                paramsNew[\"Conditions\"] = \"ContractConditions(\\\"AdminCondition\\\")\"\n                CallContract(\"@1NewAppParam\", paramsNew)\n            }\n        } else {\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n    }\n\n    action {\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n        updateParam(\"crowdfunding_admin_role\", Str($RoleAdmin))\n        updateParam(\"crowdfunding_startup_role\", Str($RoleStartup))\n        updateParam(\"crowdfunding_investor_role\", Str($RoleInvestor))\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestTransfer",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract InvestTransfer {\n    data {\n        RowId int\n        Action string\n        Summ money \"optional\"\n    }\n\n    conditions {}\n\n    action {\n        var s map\n        if $Action == \"Invest\" {\n            @1TokensIncDeposit(\"Amount\",$Summ)\n        }\n        if $Action == \"Finished\" {\n            $check_startup = DBFind(\"@1startups\").WhereId($RowId).Columns(\"id,creator,creator->account,status\").Row()\n            var participants array i int req d s map\n            participants = DBFind(\"@1investment_participants\").Where({\"startup_id\": $RowId})\n            if Int($check_startup[\"status\"]) == 2 {\n                while i < Len(participants) { \n                    req = participants[i]\n                    @1TokensDecDeposit(\"MemberAccount,Amount\", req[\"account\"], Money(req[\"amount\"]))\n                    @1TokensTransfer(\"Amount,SenderAccount,RecipientAccount\", Money(req[\"amount\"]), req[\"account\"], $check_startup[\"creator.account\"])\n                    i = i + 1\n                }\n            } else {\n                while i < Len(participants) { \n                    req = participants[i]\n                    @1TokensDecDeposit(\"MemberAccount,Amount\", req[\"account\"], Money(req[\"amount\"]))\n                    i = i + 1\n                }\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelStartup",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract DelStartup {\n    data {\n        StId int\n    }\n\n    conditions {\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n        $check_creator = DBFind(\"@1startups\").WhereId($StId).Columns(\"id,creator,creator->account\").Row()\n        $check_access_admin = AppParam(Int($app), \"crowdfunding_admin_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access_admin+\"]\")\n        if $check_creator[\"creator.account\"] != $account_id {\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n                warning LangRes(\"@1access_denied\", \"en\")\n            }\n        }  \n    }\n\n    action {\n        $startup = DBFind(\"@1startups\").WhereId($StId).Row()\n        if $startup[\"status\"] == 1 && Money($startup[\"collected_amount\"]) > 0 {\n            @1InvestTransfer(\"RowId,Action\", $StId, \"Finished\")\n        }\n\n        var m map\n        m[\"deleted\"] = 1\n        m[\"status\"] = -1\n        DBUpdate(\"@1startups\", $StId, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestStartup",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract InvestStartup {\n    data {\n        StartupId int\n        Invest money\n    }\n\n    conditions {\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crowdfunding_investor_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        $info_startup= DBFind(\"@1startups\").WhereId($StartupId).Row()\n        if Money($info_startup[\"min_investment\"]) > Money($Invest) {\n            warning LangRes(\"@1less_investment\", \"en\")\n        }\n    }\n\n    action { \n        var m t map\n        m[\"account\"] = $account_id\n        m[\"ecosystem_id\"] = $ecosystem_id\n        m[\"startup_id\"] = $StartupId\n        m[\"amount\"] = $Invest\n        m[\"investment_date\"] = $block_time\n        \n        @1InvestTransfer(\"Action,RowId,Summ\", \"Invest\", $StartupId,$Invest)\n        \n        t[\"+collected_amount\"] = $Invest\n        var percent invested summ int\n        summ = Money($info_startup[\"required_amount\"]) / Money(1000000000000000000)\n        invested = (Money($info_startup[\"collected_amount\"]) + Money($Invest)) / Money(1000000000000000000)\n        percent = (Money(invested)*Money(100))/Money(summ)\n        t[\"collected_percent\"] = percent\n\n        DBInsert(\"@1investment_participants\", m)\n        DBUpdate(\"@1startups\", $StartupId, t)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "StartupsStatusUpdate",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract StartupsStatusUpdate {\n    data {}\n\n    func changeStatus(from, to map) {\n        var requests array i int req map\n        requests = DBFind(\"@1startups\").Where(from)\n        if to[\"status\"] == 1 {\n            while i < Len(requests) {\n                req = requests[i]\n                DBUpdate(\"@1startups\", Int(req[\"id\"]), to)\n                i = i + 1\n            }\n        }\n        if to[\"status\"] == 2 {\n            while i < Len(requests) {\n                var check_st map\n                req = requests[i]\n                check_st = DBFind(\"@1startups\").WhereId(Int(req[\"id\"])).Row()\n                if Money(check_st[\"collected_amount\"]) >= Money(check_st[\"required_amount\"]) {\n                    DBUpdate(\"@1startups\", Int(req[\"id\"]), to)\n                    @1InvestTransfer(\"Action,RowId\",\"Finished\",Int(req[\"id\"]))\n                } else {\n                    to[\"status\"] = 3\n                    DBUpdate(\"@1startups\", Int(req[\"id\"]), to)\n                    @1InvestTransfer(\"Action,RowId\",\"Finished\",Int(req[\"id\"]))\n                }\n                i = i + 1\n            }\n        }\n    }\n\n    conditions {\n        $WAITING = 0\n        $START = 1\n        $FINISHED = 2\n    }\n\n    action {\n        //setting status $START\n        changeStatus({\"status\": $WAITING, \"deleted\": 0, \"date_started\": {\"$lte\": $block_time}}, {\"status\": $START})\n\n        //setting status $FINISHED\n        changeStatus({\"status\": $START, \"deleted\": 0, \"date_ended\": {\"$lte\": $block_time}}, {\"status\": $FINISHED})\n    }\n}",
            "Type": "contracts"
        }
    ]
}