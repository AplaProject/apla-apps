{
    "name": "Crediting",
    "conditions": "ContractConditions(\"AdminCondition\")",
    "data": [
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "MenuItem(Title:$crediting_settings$, Page:crediting_settings, Icon: \"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "MenuItem(Title: \"$crediting$\", Page: crediting_list, Icon: \"icon-calculator\")",
            "Type": "menu"
        },
        {
            "Name": "crediting",
            "Trans": "{\"en\": \"P2P loans\", \"ru\": \"P2P кредиты\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_add",
            "Trans": "{\"en\": \"Add a request\", \"ru\": \"Добавить заявку\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_attention",
            "Trans": "{\"en\": \"Use the role of Borrower, Creditor or Administrator to access\", \"ru\": \"Используйте роль Заемщик, Кредитор или Администратор для доступа\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_auction",
            "Trans": "{\"en\": \"Auction\", \"ru\": \"Аукцион\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_bid",
            "Trans": "{\"en\": \"Place a bid\", \"ru\": \"Сделать ставку\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_bid_date",
            "Trans": "{\"en\": \"Bid date\", \"ru\": \"Дата ставки\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_bid_list",
            "Trans": "{\"en\": \"Auction bid list\", \"ru\": \"Список ставок аукциона\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_blocked",
            "Trans": "{\"en\": \"Blocked\", \"ru\": \"Заблокировано\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_borrower",
            "Trans": "{\"en\": \"Borrower\", \"ru\": \"Заемщик\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_creation_error",
            "Trans": "{\"en\": \"Request creation error: %v is not specified\", \"ru\": \"Ошибка создания запроса: не задано поле %v\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_creditor",
            "Trans": "{\"en\": \"Creditor\", \"ru\": \"Кредитор\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_desc",
            "Trans": "{\"en\": \"This page is used to manage your crediting\", \"ru\": \"Эта страница используется для управления вашим кредитованием\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_edit",
            "Trans": "{\"en\": \"Edit a request\", \"ru\": \"Редактировать заявку\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_filter_desc",
            "Trans": "{\"en\": \"Select the status of the requests you want to see\", \"ru\": \"Выберите статус заявок, которые вы хотите увидеть\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_finished",
            "Trans": "{\"en\": \"Finished\", \"ru\": \"Завершено\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_offer",
            "Trans": "{\"en\": \"Offer\", \"ru\": \"Предложение\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_offer_date",
            "Trans": "{\"en\": \"Offer date\", \"ru\": \"Дата предложения\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_rate",
            "Trans": "{\"en\": \"Percentage rate\", \"ru\": \"Процентная ставка\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_rejected",
            "Trans": "{\"en\": \"Rejected\", \"ru\": \"Отклонено\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_removed",
            "Trans": "{\"en\": \"Removed\", \"ru\": \"Удалено\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_settings",
            "Trans": "{\"en\": \"Crediting settings\", \"ru\": \"Настройки Кредитования\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_settings_description",
            "Trans": "{\"en\": \"Correspondence of Crediting application roles to ecosystem roles\", \"ru\": \"Соответствие ролей приложения Кредитования ролям экосистемы\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_signature",
            "Trans": "{\"en\": \"Signature\", \"ru\": \"Подпись\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_signing",
            "Trans": "{\"en\": \"Signing\", \"ru\": \"Подписание\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_subscribe",
            "Trans": "{\"en\": \"Subscribe\", \"ru\": \"Подписаться\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_term",
            "Trans": "{\"en\": \"Loan term\", \"ru\": \"Срок займа\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_unsubscribe",
            "Trans": "{\"en\": \"Unsubscribe\", \"ru\": \"Отписаться\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_waiting",
            "Trans": "{\"en\": \"Waiting\", \"ru\": \"Ожидание\"}",
            "Type": "languages"
        },
        {
            "Name": "crediting_offers",
            "Columns": "[\n    {\n        \"name\": \"creditor\",\n        \"conditions\": \"false\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"conditions\": \"false\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"rate\",\n        \"conditions\": \"false\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"request_id\",\n        \"conditions\": \"false\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"CreditingBid\\\")\", \"update\": \"false\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "crediting_requests",
            "Columns": "[\n    {\n        \"name\": \"amount\",\n        \"conditions\": \"ContractAccess(\\\"CreditingAdd\\\")\",\n        \"type\": \"money\"\n    },\n    {\n        \"name\": \"borrower\",\n        \"conditions\": \"false\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"name\": \"creditor\",\n        \"conditions\": \"ContractAccess(\\\"CreditingStatusUpdate\\\")\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"name\": \"date_created\",\n        \"conditions\": \"false\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"date_ended\",\n        \"conditions\": \"ContractAccess(\\\"CreditingAdd\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"date_started\",\n        \"conditions\": \"ContractAccess(\\\"CreditingAdd\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"conditions\": \"ContractAccess(\\\"CreditingBlock\\\",\\\"CreditingDel\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"rate\",\n        \"conditions\": \"ContractAccess(\\\"CreditingStatusUpdate\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"sign_borrower\",\n        \"conditions\": \"ContractAccess(\\\"CreditingSignAccept\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"sign_creditor\",\n        \"conditions\": \"ContractAccess(\\\"CreditingSignAccept\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"status\",\n        \"conditions\": \"ContractAccess(\\\"CreditingStatusUpdate\\\", \\\"CreditingSignReject\\\", \\\"CreditingSignAccept\\\", \\\"CreditingBlock\\\", \\\"CreditingDel\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"term\",\n        \"conditions\": \"ContractAccess(\\\"CreditingAdd\\\")\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"description\",\n        \"conditions\": \"ContractAccess(\\\"CreditingAdd\\\")\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"offer_id\",\n        \"conditions\": \"ContractAccess(\\\"CreditingStatusUpdate\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"offer_date\",\n        \"conditions\": \"ContractAccess(\\\"CreditingStatusUpdate\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"pub_borrower\",\n        \"conditions\": \"ContractAccess(\\\"CreditingSignAccept\\\")\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"pub_creditor\",\n        \"conditions\": \"ContractAccess(\\\"CreditingSignAccept\\\")\",\n        \"type\": \"text\"\n    }\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"CreditingAdd\\\")\", \"update\": \"true\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "crediting_subs",
            "Columns": "[\n    {\n        \"name\": \"creditor\",\n        \"conditions\": \"false\",\n        \"type\": \"varchar\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"conditions\": \"ContractAccess(\\\"CreditingSubscribe\\\")\",\n        \"type\": \"number\"\n    },\n    {\n        \"name\": \"request_id\",\n        \"conditions\": \"false\",\n        \"type\": \"number\"\n    }\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"CreditingSubscribe\\\")\", \"update\": \"ContractAccess(\\\"CreditingSubscribe\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "crediting_admin_role",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "crediting_borrower_role",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "crediting_commission_wallet",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "crediting_creditor_role",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "type_term",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "1 day, 7 days, 30 days",
            "Type": "app_params"
        },
        {
            "Name": "crediting_add",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crediting\"}).Columns(\"name,id\").Vars(application)\nIf(#Id#>0){\n    DBFind(\"crediting_requests\").Where({\"id\": \"#Id#\"}).Vars(request)\n}\nForm(){\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(crediting_borrower)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                SetVar(borrower, #account_id#)\n                Input(Name: Borrower, Disabled: 1, Value: #borrower#)\n            }\n        }\n        Div(row mt-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1amount)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                If(#request_amount#){\n                    SetVar(request_amount, Money(#request_amount#))\n                    Input(Name: Amount, Type: number, Value: #request_amount#)\n                }.Else{\n                    Input(Name: Amount, Type: number)\n                }\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt text-right){\n                Label(){\n                    LangRes(crediting_term)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: type_term, Source: src_term)\n                If(#request_term#){\n                    RadioGroup(Name: Term, Source: src_term, NameColumn: name, ValueColumn: name, Value: #request_term#)\n                }.Else{\n                    RadioGroup(Name: Term, Source: src_term, NameColumn: name, ValueColumn: name)\n                }\n                \n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1date_start)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Div(row){\n                    If(#request_date_started#){\n                        SetVar(st_d, DateTime(DateTime: #request_date_started#, Format: \"YYYY-MM-DD\"))\n                        SetVar(st_t, DateTime(DateTime: #request_date_started#, Format: \"HH:MI\"))\n                        Div(col-md-6){\n                            Input(Name: StartDate, Type: date, Value: #st_d#)\n                        }\n                        Div(col-md-6){\n                            Input(Name: StartTime, Type: time, Value: #st_t#)\n                        }\n                    }.Else{\n                        Div(col-md-6){\n                            Input(Name: StartDate, Type: date)\n                        }\n                        Div(col-md-6){\n                            Input(Name: StartTime, Type: time, Value: \"00:00\")\n                        }\n                    }\n                }\n            }\n        }\n        Div(row mt-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1date_end)\n                    Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                Div(row){\n                    If(#request_date_ended#){\n                        SetVar(ed_d, DateTime(DateTime: #request_date_ended#, Format: \"YYYY-MM-DD\"))\n                        SetVar(ed_t, DateTime(DateTime: #request_date_ended#, Format: \"HH:MI\"))\n                        Div(col-md-6){\n                            Input(Name: EndDate, Type: date, Value: #ed_d#)\n                        }\n                        Div(col-md-6){\n                            Input(Name: EndTime, Type: time, Value: #ed_t#)\n                        }\n                    }.Else{\n                        Div(col-md-6){\n                            Input(Name: EndDate, Type: date)\n                        }\n                        Div(col-md-6){\n                            Input(Name: EndTime, Type: time, Value: \"00:00\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n    Div(list-group-item){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1description)\n                }\n            }\n            Div(col-md-9 text-left){\n                If(#request_description#){\n                    Input(Name: Description, Type: textarea, Value: #request_description#).Style(resize:vertical)\n                }.Else{\n                    Input(Name: Description, Type: textarea).Style(resize:vertical)\n                }\n            }\n        }\n    }\n    If(#Id#>0){\n        Button(Body: LangRes(@1edit), Class: btn btn-primary pull-right mt, Page: crediting_list, Contract: CreditingAdd, Params: \"Id=#Id#\")\n    }.Else{\n        Button(Body: LangRes(@1add), Class: btn btn-primary pull-right mt, Page: crediting_list, Contract: CreditingAdd)\n    }\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: crediting_list)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "crediting_filter",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "Data(type_status, \"value,name\"){\n    0,$crediting_waiting$\n    1,$crediting_auction$\n    2,$crediting_signing$\n    3,$crediting_rejected$\n    4,$crediting_finished$\n}\nForm(text-center){\n    Label(Class: m0){\n        Span(Body: LangRes(crediting_filter_desc))\n    }\n    Div(row text-left){\n        Div(col-md-5){}\n        Div(col-md-7){\n            RadioGroup(Name: Filter, Source: type_status, NameColumn: name, ValueColumn: value)\n        }\n    }\n    Button(Body: LangRes(@1filter), Class: btn btn-primary pull-right, Page: crediting_list, PageParams: \"page_par=Val(Filter),search=#search#\")\n    Button(Body: LangRes(@1clear), Class: btn btn-default pull-right, Page: crediting_list, PageParams: \"page_par=NULL,search=#search#\")\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "crediting_history",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"crediting_offers\", offers).Where({\"request_id\": \"#Id#\"}).Order({\"rate\": 1, \"date_created\": 1}).Custom(custom_creditor){\n    DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#creditor#\"}).Columns(\"member_info->information\").Vars(c)\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#c_account#\"){\n        Div(){\n            Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n            Span(){\n                P(Class: h5 m0 text-bold, Body: #creditor#)\n                P(Class: h6 m0, Body: #c_member_info_information#)\n            }\n        }.Style(display:flex; align-items:center;)\n    }\n}.Custom(custom_date){\n    Span(Class: h6 text-muted, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n}.Custom(custom_rate){\n    Span(Class: pull-right, Body: $crediting_rate$ - Strong(#rate# %))\n}.Count(cnt)\n\nForm(){\n    Div(list-group-item){\n        Div(row){\n            Div(col-lg-10 col-lg-offset-1){\n                Table(offers, \"$crediting_creditor$=custom_creditor,$crediting_bid_date$=custom_date,=custom_rate\")\n            }\n        }\n    }\n    Div(text-center mt-lg){\n        Button(Class: btn bg-gray-lighter ml-sm, Page: crediting_view, PageParams: \"Id=#Id#\"){\n            Span(Class: ml-sm, Body: LangRes(@1back))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "crediting_list",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "SetVar(this_page, crediting_list).(this_table, crediting_requests)\nInclude(@1pager_header)\n\nSetTitle(\"$crediting$\")\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$crediting_desc$\"))\n\nDBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crediting\"}).Vars(application)\nSetVar(admin_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crediting_admin_role))\nSetVar(creditor_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crediting_creditor_role))\nSetVar(borrower_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crediting_borrower_role))\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#admin_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(admin_access)\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#creditor_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(creditor_access)\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#borrower_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(borrower_access)\n\nIf(#borrower_access_id# > 0){\n    AddToolButton(Title: $@1add$, Page: crediting_add, Icon: icon-plus).Popup(60, $crediting_add$)\n}\n\nIf(#page_par# == 0){\n    SetVar(type_filter, `, {\"status\": 0}`)\n}.ElseIf(#page_par# == 1){\n    SetVar(type_filter, `, {\"status\": 1}`)\n}.ElseIf(#page_par# == 2){\n    SetVar(type_filter, `, {\"status\": 2}`)\n}.ElseIf(#page_par# == 3){\n    SetVar(type_filter, `, {\"status\": 3}`)\n}.ElseIf(#page_par# == 4){\n    SetVar(type_filter, `, {\"status\": 4}`)\n}\n\nIf(#creditor_access_id# > 0){\n    SetVar(global_access, 1)\n    SetVar(role_where, `, {\"deleted\": 0}`)\n}.ElseIf(#borrower_access_id# > 0){\n    SetVar(global_access, 1)\n    SetVar(role_where, `, {\"borrower\": \"#account_id#\"}`)\n}.ElseIf(#admin_access_id# > 0){\n    SetVar(global_access, 1)\n}\n\nIf(#global_access# == 1){\n    If(#search#){\n        SetVar(where, {\"$and\": [{\"borrower\": {\"$ilike\": \"#search#\"}} #role_where# #type_filter#]})\n    }.Else{\n        SetVar(where, {\"$and\": [#role_where# #type_filter#]})\n    }\n\n    Div(mr-lg text-right){\n        If(#admin_access_id# > 0){\n            Button(Body: Em(Class: fa fa-refresh) $@1update_statuses$, Class: btn bg-gray mr-lg, Page: #this_page#, Contract: CreditingStatusUpdate)\n        }\n        Button(Page: crediting_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"page_par=#page_par#,search=#search#,current_page=#current_page#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"30\")\n        If(#type_filter#){\n            Button(Page: #this_page#, PageParams: \"page_par=NULL,search=#search#\", Class: btn bg-gray-lighter mr-sm, Body: Em(Class: fa fa-close))\n        }\n    }.Style(margin-top: -28px; z-index: 1001;)\n\n    Div(list-group-item ml-lg mr-lg pt-lg){\n        SetVar(search_name, LangRes(crediting_borrower))\n        Include(@1search)\n    }\n\n    DBFind(#this_table#, src).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\n        If(#deleted# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_borrower){\n        DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#borrower#\"}).Columns(\"member_info->information\").Vars(member)\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#member_account#\"){\n            Div(){\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                Span(){\n                    P(Class: h5 m0 text-bold, Body: #borrower#)\n                    P(Class: h6 m0, Body: #member_member_info_information#)\n                }\n            }.Style(display:flex; align-items:center;)\n        }\n    }.Custom(custom_amount){\n        Span(Class: #style_text#, Body: Money(#amount#))\n    }.Custom(custom_term){\n        Span(Class: #style_text#, Body: #term#)\n    }.Custom(custom_date){\n        P(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        P(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_created){\n        P(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_status){\n        If(#status#==-2){\n            Span(Class: text-muted, Body: LangRes(crediting_blocked))\n        }.ElseIf(#status# == -1){\n            Span(Class: text-muted, Body: LangRes(crediting_removed))\n        }.ElseIf(#status# == 0){\n            Span(Class: text-warning, Body: LangRes(crediting_waiting))\n        }.ElseIf(#status# == 1){\n            Span(Class: text-success, Body: LangRes(crediting_auction))\n        }.ElseIf(#status# == 2){\n            Span(Class: text-primary, Body: LangRes(crediting_signing))\n        }.ElseIf(#status# == 3){\n            Span(Class: text-danger, Body: LangRes(crediting_rejected))\n        }.ElseIf(#status# == 4){\n            Span(Class: text-normal, Body: LangRes(crediting_finished))\n        }\n    }.Custom(custom_view){\n        Div(button-group text-nowrap){\n            Button(Class: btn bg-gray-lighter ml-sm buttons, PageParams: \"Id=#id#\", Page: crediting_view){\n                Em(Class: #style_link# fa fa-1x fa-info)\n                Span(Class: #style_link# ml-sm, Body: $@1view$)\n            }\n        }.Style(\n            .buttons{border: 1px solid #dde6e9;}\n        )\n    }.Custom(actions){\n        Div(text-right button-group text-nowrap){\n            If(And(#deleted# == 0, #status# == 0, #borrower# == #account_id#)){\n                Button(Class: btn bg-gray-lighter buttons, Contract: CreditingDel, Params: \"Id=#id#\", Page: #this_page#){\n                    Em(Class: text-danger fa fa-1x fa-trash)\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n                Button(Class: btn bg-gray-lighter ml-sm buttons, PageParams: \"Id=#id#\", Page: crediting_add){\n                    Em(Class: text-default fa fa-1x fa-edit)\n                }.Popup(60, $crediting_edit$)\n            }\n            If(And(#deleted#==0,#admin_access_id#>0)){\n                Button(Class: btn btn-danger ml-sm buttons, Contract: CreditingBlock, Params: \"Id=#id#\", Page: #this_page#){\n                    Em(Class: fa fa-1x fa-unlock-alt)\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }\n        }.Style(\n            .buttons{border: 1px solid #dde6e9;}\n        )\n    }.Count(count)\n\n    Div(fullscreen){\n        Div(table-responsive ml-lg mr-lg){\n            Div(list-group-item){\n                If(#count# > 0){\n                    Table(src, \"$@1id$=custom_id,$@1view$=custom_view,$crediting_borrower$=custom_borrower,$amount$=custom_amount,$crediting_term$=custom_term,$@1date_start$ / $@1date_end$=custom_date,$@1created$=custom_created,$@1status$=custom_status,=actions\")\n                }.Else{\n                    Div(Class: text-center h4 text-muted, Body: \"$crediting$ $@1not_founded$\")\n                }\n            }.Style(\n                margin-top:-15px;\n                tbody > tr:nth-of-type(odd) {\n                    background-color: #f8f9fc;\n                }\n            )\n        }\n    }\n    Div(mt-sm ml-lg mr-sm mb-sm){\n        Include(@1pager)\n    }\n}.Else{\n    Div(row ml-lg mr-lg){\n        Div(md-12 alert h4 text-bold text-center){\n            Span(Body: LangRes(crediting_attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "crediting_settings",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crediting\"}).Vars(app)\nDBFind(\"@1roles\", src_roles).Where({\"ecosystem\": \"#ecosystem_id#\", \"deleted\": 0}).Columns(\"role_name,id\").Limit(100)\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\n\nSetVar(this_page, \"crediting_settings\").(role_admin,0).(role_borrower,0).(role_creditor,0).(commission_wallet,0)\nSetVar(role_admin, AppParam(App: #app_id#, Name: \"crediting_admin_role\"))\nSetVar(role_borrower, AppParam(App: #app_id#, Name: \"crediting_borrower_role\"))\nSetVar(role_creditor, AppParam(App: #app_id#, Name: \"crediting_creditor_role\"))\nSetVar(commission_wallet, AppParam(App: #app_id#, Name: \"crediting_commission_wallet\"))\n\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(text-center text-bold h4 m0){\n                        LangRes(@1crediting_settings)\n                    }\n                    Div(text-center text-muted){\n                        LangRes(@1crediting_settings_description)\n                    }\n                    Div(row mt-lg){\n                        Div(#col_left#){\n                            Label(){\n                                \"Admin\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Select(Name: RoleAdmin, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_admin#)\n                            Div(m0 h6 text-muted){\n                                SetVar(r_name, $@1role_not_found$)\n                                If(#role_admin# > 0){\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_admin#\"}).Columns(\"role_name\").Vars(r)\n                                    SetVar(r_name, #r_role_name#)\n                                }\n                                LangRes(@1current_value): #r_name#\n                            }\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            Label(){\n                                \"Borrower\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Select(Name: RoleBorrower, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_borrower#)\n                            Div(m0 h6 text-muted){\n                                SetVar(r_name, $@1role_not_found$)\n                                If(#role_borrower# > 0){\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_borrower#\"}).Columns(\"role_name\").Vars(r)\n                                    SetVar(r_name, #r_role_name#)\n                                }\n                                LangRes(@1current_value): #r_name#\n                            }\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            Label(){\n                                \"Creditor\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Select(Name: RoleCreditor, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_creditor#)\n                            Div(m0 h6 text-muted){\n                                SetVar(r_name, $@1role_not_found$)\n                                If(#role_creditor# > 0){\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#role_creditor#\"}).Columns(\"role_name\").Vars(r)\n                                    SetVar(r_name, #r_role_name#)\n                                }\n                                LangRes(@1current_value): #r_name#\n                            }\n                        }\n                    }\n                    Div(#row#){\n                        Div(#col_left#){\n                            Label(){\n                                \"Commission wallet\"\n                            }\n                        }\n                        Div(#col_right#){\n                            Input(Name: CommissionWallet, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #commission_wallet#)\n                            Div(m0 h6 text-muted){\n                                LangRes(@1current_value): #commission_wallet#\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-right){\n                    Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: CreditingSettings)\n                }\n            }\n        }\n    }\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "crediting_view",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"name\": \"Crediting\"}).Columns(\"name,id\").Vars(application)\nSetVar(creditor_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crediting_creditor_role))\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": \"#ecosystem_id#\", \"$and\": [{\"role->id\": {\"$in\": [#creditor_role#]}}, {\"role->id\": \"#role_id#\"}], \"member->account\": \"#account_id#\", \"deleted\": 0}).Vars(creditor_access)\n\nIf(#notific_id#>0){\n    DBFind(\"@1notifications\").Where({\"ecosystem\": \"#ecosystem_id#\", \"id\": \"#notific_id#\"}).Columns(\"page_params->crediting_id,page_params->optional\").Vars(notific)\n    SetVar(Id, #notific_page_params_crediting_id#)\n    SetVar(notific_optional, #notific_page_params_optional#)\n}\n\nIf(#Id#>0){\n    DBFind(\"crediting_requests\").Where({\"id\": \"#Id#\"}).Vars(request)\n    SetVar(borrower_account, #request_borrower#)\n    SetVar(creditor_account, #request_creditor#)\n}\n\nDiv(content-wrapper){\n    If(#request_id# > 0){\n        Div(row){\n            Div(col-lg-10 col-lg-offset-1){\n                Form(panel panel-primary){\n                    Div(list-group-item text-center){\n                        P(Class: h3 text-bold m0, Body: $crediting$)\n                        Div(row){\n                            Div(col-md-12){\n                                Div(Class: t5 text-muted m0, Body: #request_description#)\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $@1information$)\n                        Div(row mb mt-lg t6){\n                            Div(col-md-6 mt-sm text-right){\n                                LangRes(crediting_borrower)\n                            }\n                            Div(col-md-6 text-left){\n                                DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#borrower_account#\"}).Columns(\"member_info->information\").Vars(borrower)\n                                LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#borrower_account#\"){\n                                    Div(){\n                                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\n                                        Span(){\n                                            P(Class: h5 m0 text-bold, Body: #request_borrower#)\n                                            P(Class: h6 m0, Body: #borrower_member_info_information#)\n                                        }\n                                    }.Style(display:flex; align-items:center;)\n                                }\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes($@1r_rating$)\n                            }\n                            Div(col-md-6 text-left){\n                                SetVar(rating_amount, 0)\n                                DBFind(\"@1r_ratings\", r).Where({\"ecosystem\": \"#ecosystem_id#\", \"member\": \"#request_borrower#\"}).Vars(rating)\n                                Span(#rating_amount#)\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes($@1amount$)\n                            }\n                            Div(col-md-6 text-left){\n                                 Span(Body: Money(#request_amount#))\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes($crediting_term$)\n                            }\n                            Div(col-md-6 text-left){\n                                Span(Body: #request_term#)\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes(@1date_start)\n                            }\n                            Div(col-md-6 text-left){\n                                DateTime(DateTime: #request_date_started#, Format: \"DD.MM.YYYY HH:MI\")\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes(@1date_end)\n                            }\n                            Div(col-md-6 text-left){\n                                DateTime(DateTime: #request_date_ended#, Format: \"DD.MM.YYYY HH:MI\")\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes(@1created)\n                            }\n                            Div(col-md-6 text-left){\n                                DateTime(DateTime: #request_date_created#, Format: \"DD.MM.YYYY HH:MI\")\n                            }\n                        }\n                        Div(row t6){\n                            Div(col-md-6 text-right){\n                                LangRes(@1status)\n                            }\n                            Div(col-md-6 text-left){\n                                If(#request_status#==-2){\n                                    Span(Class: text-muted, Body: LangRes(crediting_blocked))\n                                }.ElseIf(#request_status#==-1){\n                                    Span(Class: text-muted, Body: LangRes(crediting_removed))\n                                }.ElseIf(#request_status#==0){\n                                    Span(Class: text-warning, Body: LangRes(crediting_waiting))\n                                }.ElseIf(#request_status#==1){\n                                    Span(Class:  text-success, Body: LangRes(crediting_auction))\n                                }.ElseIf(#request_status#==2){\n                                    Span(Class: text-primary, Body: LangRes(crediting_signing))\n                                }.ElseIf(#request_status#==3){\n                                    Span(Class: text-danger, Body: LangRes(crediting_rejected))\n                                }.ElseIf(#request_status#==4){\n                                    Span(Class: text-normal, Body: LangRes(crediting_finished))\n                                }\n                            }\n                        }\n                    }\n                    If(#request_status# == 1){\n                        DBFind(\"crediting_offers\", offers).Where({\"request_id\": \"#Id#\"}).Order({\"rate\": 1, \"date_created\": 1}).Custom(custom_creditor){\n                            DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#creditor#\"}).Columns(\"member_info->information\").Vars(c)\n                            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#c_account#\"){\n                                Div(){\n                                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\n                                    Span(){\n                                        P(Class: h5 m0 text-bold, Body: #creditor#)\n                                        P(Class: h6 m0, Body: #c_member_info_information#)\n                                    }\n                                }.Style(display:flex; align-items:center;)\n                            }\n                        }.Custom(custom_date){\n                            Span(Class: h6 text-muted, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n                        }.Custom(custom_rate){\n                            Span(Class: pull-right, Body: $crediting_rate$ - Strong(#rate# %))\n                        }.Count(cnt)\n\n                        If(Or(#creditor_access_id#>0,#cnt#>0)){\n                            Div(list-group-item){\n                                P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $crediting_bid_list$)\n                                If(#creditor_access_id# > 0){\n                                    Div(row mt-lg){\n                                        Div(col-lg-8 col-lg-offset-2){\n                                            Div(input-group){\n                                                Div(input-group-addon){\n                                                    $crediting_rate$\n                                                }\n                                                Input(Name: Rate, Type: number)\n                                                Div(input-group-btn){\n                                                    Button(Class: btn btn-primary mtl buttons, Page: crediting_view, PageParams: \"Id=#Id#\", Body: Em(Class: fa fa-search) $crediting_bid$, Contract: CreditingBid, Params: \"RequestId=#Id#\")\n                                                }\n                                            }\n                                        }.Style(\n                                            .buttons{border: 1px solid #dde6e9;}\n                                        )\n                                    }\n                                }\n                                Div(row mt){\n                                    Div(col-lg-8 col-lg-offset-2){\n                                        Table(offers, \"$crediting_creditor$=custom_creditor,$crediting_bid_date$=custom_date,=custom_rate\")\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    If(Or(#request_status#==2,#request_status#==4)){\n                        If(Or(And(#creditor_account#==#account_id#,#request_sign_borrower#>0,#request_sign_creditor#==0),And(#borrower_account#==#account_id#,#request_sign_borrower#==0,#request_sign_creditor#==0))){\n                            SetVar(hh, 210)\n                        }.Else{\n                             SetVar(hh, 160)  \n                        }\n                        Div(list-group-item){\n                            P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $crediting_offer$)\n                            Div(row t6){\n                                Div(col-md-6 text-right){\n                                    LangRes($crediting_rate$)\n                                }\n                                Div(col-md-6 text-left){\n                                    Span(Body: #request_rate# % )\n                                }\n                            }\n                            Div(row t6){\n                                Div(col-md-6 text-right){\n                                    LangRes(crediting_offer_date)\n                                }\n                                Div(col-md-6 text-left){\n                                    DateTime(DateTime: #request_offer_date#, Format: \"DD.MM.YYYY HH:MI\")\n                                }\n                            }\n                            Div(row t6){\n                                Div(col-md-12 text-center){\n                                    Button(Class: btn btn-link, Page: crediting_history, PageParams: \"Id=#Id#\"){\n                                        Div(Class: h5 m0, Body: LangRes(crediting_bid_list))\n                                    }.Popup(Header: $crediting_bid_list$, Width: 50)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-6){\n                                    P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $crediting_borrower$)\n                                    Div(list-group-item text-center mb-lg ml-lg){\n                                        Div(row mb mt-sm t6){\n                                            Div(col-sm-8 col-sm-offset-4 text-left){\n                                                DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#borrower_account#\"}).Columns(\"member_info->information\").Vars(borrower)\n                                                LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#borrower_account#\"){\n                                                    Div(){\n                                                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\n                                                        Span(){\n                                                            P(Class: h5 m0 text-bold, Body: #request_borrower#)\n                                                            P(Class: h6 m0, Body: #borrower_member_info_information#)\n                                                        }\n                                                    }.Style(display:flex; align-items:center;)\n                                                }\n                                                \n                                            }\n                                        }\n                                        Div(row t6 mt-lg){\n                                            Div(col-md-12 text-center){\n                                                Div(Class: text-bold, Body: LangRes(crediting_signature))\n                                                If(#request_pub_borrower# != \"\"){\n                                                    Div(Class: preview, Body: #request_pub_borrower#)\n                                                }.Else{\n                                                     Div(Class: preview, Body: LangRes(crediting_waiting))\n                                                }\n                                            }\n                                        }\n                                        Div(row t6 mt){\n                                            Div(col-md-12 text-center){\n                                                Div(Class: text-bold, Body: LangRes(@1signed_at))\n                                                If(#request_sign_borrower# != 0){\n                                                    Div(Body: DateTime(DateTime: #request_sign_borrower#, Format: \"DD.MM.YYYY HH:MI\")) \n                                                }.Else{\n                                                     Div(Class: preview, Body: LangRes(crediting_waiting))\n                                                }\n                                            }\n                                        }\n                                        If(#request_status#==2){\n                                            If(And(#borrower_account#==#account_id#,#request_sign_borrower#==0,#request_sign_creditor#==0)){\n                                                Div(row mt-lg){\n                                                    Div(col-sm-12){\n                                                        Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: CreditingSignReject, Params: \"Id=#Id#\", Page: crediting_view, PageParams: \"Id=#Id#\")\n                                                        Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: CreditingSignAccept, Params: \"Id=#Id#\", Page: crediting_view, PageParams: \"Id=#Id#\")\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }.Style(\n                                        height: #hh#px;\n                                    )\n                                }\n                                Div(col-md-6){\n                                    P(Class: h5 text-center text-bold m0 mb mt-sm, Body: $crediting_creditor$)\n                                    Div(list-group-item text-center mb-lg ml-lg){\n                                        Div(row mb mt-sm t6){\n                                            Div(col-sm-8 col-sm-offset-4 text-left){\n                                                DBFind(\"@1members\").Where({\"ecosystem\": \"#ecosystem_id#\", \"account\": \"#creditor_account#\"}).Columns(\"member_info->information\").Vars(creditor)\n                                                LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_account=#creditor_account#\"){\n                                                    Div(){\n                                                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right: 10px;)\n                                                        Span(){\n                                                            P(Class: h5 m0 text-bold, Body: #request_creditor#)\n                                                            P(Class: h6 m0, Body: #creditor_member_info_information#)\n                                                        }\n                                                    }.Style(display:flex; align-items:center;)\n                                                }\n                                            }\n                                        }\n                                        Div(row t6 mt-lg){\n                                            Div(col-md-12 text-center){\n                                                Div(Class: text-bold, Body: LangRes(crediting_signature))\n                                                If(#request_pub_creditor# != \"\"){\n                                                    Div(Class: preview, Body: #request_pub_creditor#)\n                                                }.Else{\n                                                    Div(Class: preview, Body: LangRes(crediting_waiting))\n                                                }\n                                            }\n                                        }\n                                        Div(row t6 mt){\n                                            Div(col-md-12 text-center){\n                                                Div(Class: text-bold, Body: LangRes(@1signed_at))\n                                                If(#request_sign_creditor# != 0){\n                                                    Div(Body: DateTime(DateTime: #request_sign_creditor#, Format: \"DD.MM.YYYY HH:MI\"))\n                                                }.Else{\n                                                    Div(Class: preview, Body: LangRes(crediting_waiting))\n                                                }\n                                            }\n                                        }\n                                        If(#request_status#==2){\n                                            If(And(#creditor_account#==#account_id#,#request_sign_borrower#>0,#request_sign_creditor#==0)){\n                                                Div(row mt-lg){\n                                                    Div(col-sm-12){\n                                                        Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: CreditingSignReject, Params: \"Id=#Id#\", Page: crediting_view, PageParams: \"Id=#Id#\")\n                                                        Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: CreditingSignAccept, Params: \"Id=#Id#\", Page: crediting_view, PageParams: \"Id=#Id#\")\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }.Style(\n                                        height: #hh#px;\n                                    )\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Button(Class: btn bg-gray-lighter ml-sm buttons, Page: crediting_list){\n                            Span(Em(Class: fa fa-chevron-left fa-1x)\n                            Span(Class: ml-sm, Body: LangRes(@1back))\n                        }\n                        If(#notific_optional# == 1){\n                            Button(Class: btn bg-gray-lighter ml-sm buttons pull-right, Contract: @1NotificationsClose, Params: \"NotificId=#notific_id#\", Page: crediting_view, PageParams: \"Id=#Id#\"){\n                                Span(Em(Class: fa fa-flag fa-1x)\n                                Span(Class: ml-sm, Body: LangRes(@1mark_read))\n                            }\n                        }\n                        If(#creditor_access_id# > 0){\n                            DBFind(\"crediting_subs\").Where({\"request_id\": \"#Id#\", \"creditor\": \"#account_id#\", \"deleted\": 0}).Vars(sub)\n                            If(#sub_id#>0){\n                                Button(Class: btn bg-gray-lighter ml-sm buttons pull-right, Page: crediting_view, PageParams: \"Id=#Id#\", Contract: CreditingSubscribe, Params: \"Id=#Id#\"){\n                                    Span(Em(Class: fa fa-close fa-1x)\n                                    Span(Class: ml-sm, Body: LangRes(crediting_unsubscribe))\n                                }\n                            }.Else{\n                                Button(Class: btn bg-gray-lighter ml-sm buttons pull-right, Page: crediting_view, PageParams: \"Id=#Id#\", Contract: CreditingSubscribe, Params: \"Id=#Id#\"){\n                                    Span(Em(Class: fa fa-check fa-1x)\n                                    Span(Class: ml-sm, Body: LangRes(crediting_subscribe))\n                                }\n                            }\n                        } \n                    }\n                }.Style(\n                    .buttons{border: 1px solid #dde6e9;}\n                )\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(@1attention)\n        }\n    }\n}.Style(\n    .preview {\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n    }\n    .t3 {font-size:24px;}\n    .t4 {font-size:18px;}\n    .t5 {font-size:14px;}\n    .t6 {font-size:12px;}\n    .break {word-break: break-all;}\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "CreditingAdd",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingAdd {\n    data {\n        Id int \"optional\"\n        Amount money\n        Term string\n        StartDate string\n        StartTime string\n        EndDate string\n        EndTime string\n        Description string \"optional\"\n    }\n\n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n\n    func fixDatetimes() {\n        $date_started = UnixDateTime(dateAddTime($StartDate, $StartTime))\n        $date_ended = UnixDateTime(dateAddTime($EndDate, $EndTime))\n\n        if $date_started == 0 || $date_ended == 0 { // invalid datetimes\n            var errs array\n            if Size($StartDate) < 10 {\n                errs = Append(errs, \"starting date\")\n            }\n            if Size($StartTime) < 5 {\n                errs = Append(errs, \"starting time\")\n            }\n            if Size($EndDate) < 10 {\n                errs = Append(errs, \"ending date\")\n            }\n            if Size($EndTime) < 5 {\n                errs = Append(errs, \"ending time\")\n            }\n            warning Sprintf(LangRes(\"crediting_creation_error\", \"en\"), Join(errs, \", \"))\n        }\n        if $date_started < $block_time {\n            warning LangRes(\"@1starting_date_invalid\", \"en\")\n        }\n        if $date_started >= $date_ended {\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\n        }\n    }\n\n    conditions {\n        // check_access\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crediting\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crediting_borrower_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        var request map borrower string status int\n        request = DBFind(\"crediting_requests\").Where({\"id\": $Id}).Row()\n        borrower = request[\"borrower\"]\n        status = Int(request[\"status\"])\n\n        //check status\n        if status != 0 {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        //check borrower\n        if Int($Id) > 0 {\n            if borrower != $account_id {\n                 warning LangRes(\"@1access_denied\", \"en\")\n            }\n        }\n\n        //check amount\n        if $Amount == 0 {\n            warning LangRes(\"@1amount_zero\", \"en\")\n        }\n        if $Amount < 0 {\n            warning LangRes(\"@1amount_less_zero\", \"en\")\n        }\n\n        //check date\n        fixDatetimes()\n    }\n\n    action {\n        var m map\n        if Int($Id) == 0 {\n            m[\"borrower\"] = $account_id\n            m[\"status\"] = 0\n            m[\"deleted\"] = 0\n            m[\"date_created\"] = $block_time       \n        }\n\n        m[\"amount\"] = $Amount\n        m[\"term\"] = $Term\n        m[\"date_started\"] = $date_started\n        m[\"date_ended\"] = $date_ended\n        m[\"description\"] = $Description\n\n        if Int($Id) == 0 {\n            DBInsert(\"crediting_requests\", m)\n        } else {\n            DBUpdate(\"crediting_requests\", Int($Id), m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingBid",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingBid {\n    data {\n        RequestId int\n        Rate int\n    }\n\n    func closeMyNotes() {\n        var notes array i int\n        notes = DBFind(\"@1notifications\").Where({\"closed\": 0, \"ecosystem\": $ecosystem_id, \"recipient->account\": $account_id, \"page_name\": \"crediting_view\", \"page_params->crediting_id\": $RequestId})\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            @1NotificationsClose(\"NotificId\", Int(note[\"id\"]))\n            i = i + 1\n        }\n    }\n\n    func sendNotesNewBid() {\n        var i int subs_arr array\n        subs_arr = DBFind(\"crediting_subs\").Where({\"creditor\": {\"$neq\": $account_id}, \"request_id\": $RequestId, \"deleted\": 0}).Columns(\"creditor\").Limit(10000)\n        while i < Len(subs_arr) {\n            var sub_map int memberAccount string\n            sub_map = subs_arr[i]\n            memberAccount = sub_map[\"creditor\"]\n\n            var header body string params map \n            header = \"New bid on auction №\" + Str($RequestId)\n            body = \"Check auction for information\"\n            params[\"crediting_id\"] = $RequestId\n            params[\"optional\"] = 1\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", memberAccount, 1, \"fa-fire\", header, body, \"crediting_view\", params)\n            i = i + 1\n        }\n    }\n\n    conditions {\n        // check_access\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crediting\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crediting_creditor_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        var request map status int\n        request = DBFind(\"crediting_requests\").Where({\"id\": $RequestId}).Row()\n        status = Int(request[\"status\"])\n\n        //check status\n        if status != 1 {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n    }\n\n    action {\n        closeMyNotes()\n        sendNotesNewBid()\n\n        var m map\n        m[\"creditor\"] = $account_id\n        m[\"date_created\"] = $block_time  \n        m[\"rate\"] = $Rate\n        m[\"request_id\"] = $RequestId\n        DBInsert(\"crediting_offers\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingBlock",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingBlock {\n    data {\n        Id int\n    }\n\n    conditions {\n        // check_access\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crediting\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crediting_admin_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n    }\n\n    action {\n        var m map\n\t\tm[\"status\"] = -2\n\t\tm[\"deleted\"] = $block_time    \n        DBUpdate(\"crediting_requests\", Int($Id), m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingDel",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingDel {\n    data {\n        Id int\n    }\n\n    conditions {\n        var request map borrower string status int\n        request = DBFind(\"crediting_requests\").Where({\"id\": $Id}).Row()\n        borrower = request[\"borrower\"]\n        status = Int(request[\"status\"])\n\n        //check status\n        if status != 0 {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        //check borrower\n        if borrower != $account_id {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n    }\n\n    action {\n        var m map\n\t\tm[\"status\"] = -1\n\t\tm[\"deleted\"] = $block_time    \n        DBUpdate(\"crediting_requests\", Int($Id), m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingSettings",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingSettings {\n    data {\n        RoleAdmin int\n        RoleBorrower int\n        RoleCreditor int\n        CommissionWallet string\n    }\n\n    conditions {\n        MainCondition()\n    }\n\n    func updateParam(name string, value string) {\n        var param paramsNew map\n        if $app_id > 0 {\n            param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": $app_id, \"name\": name}).Row()\n            if param {\n                paramsNew[\"Id\"] = Int(param[\"id\"])\n                paramsNew[\"Value\"] = Str(value)\n                paramsNew[\"Conditions\"] = param[\"conditions\"]\n                CallContract(\"@1EditAppParam\", paramsNew)\n            } else {\n                paramsNew[\"ApplicationId\"] = $app_id\n                paramsNew[\"Name\"] = name\n                paramsNew[\"Value\"] = Str(value)\n                paramsNew[\"Conditions\"] = \"ContractConditions(\\\"AdminCondition\\\")\"\n                CallContract(\"@1NewAppParam\", paramsNew)\n            }\n        } else {\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n    }\n\n    action {\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crediting\"}).One(\"id\")\n        updateParam(\"crediting_admin_role\", Str($RoleAdmin))\n        updateParam(\"crediting_borrower_role\", Str($RoleBorrower))\n        updateParam(\"crediting_creditor_role\", Str($RoleCreditor))\n        updateParam(\"crediting_commission_wallet\", $CommissionWallet)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingInstall",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingInstall {\n    data {}\n\n    conditions {}\n\n    action {\n        $role_admin = Int(DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"role_name\": \"Admin\"}).One(\"id\"))\n\n        $role_borrower = Int(DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"role_name\": \"Borrower\"}).One(\"id\"))\n        if $role_borrower == 0 {\n            $role_borrower = RolesCreate(\"Name,Type\", \"Borrower\", 1)\n        }\n\n        $role_creditor = Int(DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"role_name\": \"Creditor\"}).One(\"id\"))\n        if $role_creditor == 0 {\n            $role_creditor = RolesCreate(\"Name,Type\", \"Creditor\", 1)\n        }\n\n        $commission_wallet = EcosysParam(\"founder_account\")\n        $commission_wallet = IdToAddress(Int($commission_wallet))\n\n        CreditingSettings(\"RoleAdmin,RoleBorrower,RoleCreditor,CommissionWallet\", $role_admin, $role_borrower, $role_creditor, $commission_wallet)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingSignAccept",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingSignAccept {\n    data {\n        Id int\n    }\n\n    func closeMyNotes() {\n        var notes array i int\n        notes = DBFind(\"@1notifications\").Where({\"closed\": 0, \"ecosystem\": $ecosystem_id, \"recipient->account\": $account_id, \"page_name\": \"crediting_view\", \"page_params->crediting_id\": $Id})\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            @1NotificationsClose(\"NotificId\", Int(note[\"id\"]))\n            i = i + 1\n        }\n    }\n\n    conditions {\n        var request map status int\n        request = DBFind(\"crediting_requests\").Where({\"id\": $Id}).Row()\n        $borrower = request[\"borrower\"]\n        $creditor = request[\"creditor\"]\n        $rate = request[\"rate\"]\n        $amount = request[\"amount\"]\n\n        $sign_creditor = request[\"sign_creditor\"]\n        $sign_borrower = request[\"sign_borrower\"]\n        status = Int(request[\"status\"])\n\n        //check status\n        if status != 2 {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        //check borrower && creditor\n        if $borrower != $account_id && $creditor != $account_id {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        $pub = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"account\": $account_id, \"deleted\": 0}).One(\"pub\")\n        $pub = PubToHex($pub) \n    }\n\n    action {\n        closeMyNotes()\n\n        var m map\n        if $borrower == $account_id && $sign_borrower == 0 {\n            m[\"sign_borrower\"] = $block_time\n            m[\"pub_borrower\"] = $pub\n            $sign_borrower = $block_time\n\n            var header body string params map\n            header = \"Signature for auction №\" + Str($Id)\n            body = \"Your signature is required!\"\n            params[\"crediting_id\"] = $Id\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", $creditor, 1, \"fa-edit\", header, body, \"crediting_view\", params)\n        } elif $creditor == $account_id && $sign_creditor == 0 {\n            m[\"sign_creditor\"] = $block_time\n            m[\"pub_creditor\"] = $pub\n            $sign_creditor = $block_time\n        }\n\n        if $sign_borrower > 0 && $sign_creditor > 0 {\n            $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crediting\"}).One(\"id\")\n            $commission_wallet = AppParam(Int($app), \"crediting_commission_wallet\", $ecosystem_id)\n\n            if $commission_wallet != \"0\" {\n                var commission money\n                commission = Money($amount) * Money($rate) / Money(100) / Money(10)\n                @1TokensSend(\"Recipient,Amount\", Str($commission_wallet), Money(commission))\n            }\n\n            @1TokensSend(\"Recipient,Amount\", Str($borrower), Money($amount))\n\t\t    m[\"status\"] = 4\n        }\n        DBUpdate(\"crediting_requests\", Int($Id), m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingSignReject",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingSignReject {\n    data {\n        Id int\n    }\n\n    func closeMyNotes() {\n        var notes array i int\n        notes = DBFind(\"@1notifications\").Where({\"closed\": 0, \"ecosystem\": $ecosystem_id, \"recipient->account\": $account_id, \"page_name\": \"crediting_view\", \"page_params->crediting_id\": $Id})\n        while i < Len(notes){\n            var note map\n            note = notes[i]\n            @1NotificationsClose(\"NotificId\", Int(note[\"id\"]))\n            i = i + 1\n        }\n    }\n\n    conditions {\n        var request map status int\n        request = DBFind(\"crediting_requests\").Where({\"id\": $Id}).Row()\n        $borrower = request[\"borrower\"]\n        $creditor = request[\"creditor\"]\n        status = Int(request[\"status\"])\n\n        //check status\n        if status != 2 {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        //check borrower && creditor\n        if $borrower != $account_id && $creditor != $account_id {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n    }\n\n    action {\n        closeMyNotes()\n\n        var m map\n\t\tm[\"status\"] = 3  \n        DBUpdate(\"crediting_requests\", Int($Id), m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingStatusUpdate",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingStatusUpdate {\n    data {}\n\n    func findWinner(request map) int {\n        var request_id int offers map\n        request_id = Int(request[\"id\"])\n        offers = DBFind(\"crediting_offers\").Where({\"request_id\": request_id}).Order({\"rate\": 1, \"date_created\": 1}).Row()\n\n        var creditor string rate offer_id offer_date int\n        if offers {\n            offer_id = offers[\"id\"]\n            creditor = offers[\"creditor\"]\n            rate = offers[\"rate\"]\n            offer_date = offers[\"date_created\"]\n            DBUpdate(\"crediting_requests\", request_id, {\"creditor\": creditor, \"rate\": rate, \"offer_id\": offer_id, \"offer_date\": offer_date})\n\n            var header body memberAccount string params map \n            memberAccount = request[\"borrower\"]\n            header = \"Signature for auction №\" + Str(request_id)\n            body = \"Your signature is required!\"\n            params[\"crediting_id\"] = request_id\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", memberAccount, 1, \"fa-edit\", header, body, \"crediting_view\", params)\n        }\n        return offer_id\n    }\n\n    func sendNotesAuctionStarted(request map) {\n        var request_id i int subs_arr array\n        request_id = Int(request[\"id\"])\n        subs_arr = DBFind(\"crediting_subs\").Where({\"request_id\": request_id, \"deleted\": 0}).Columns(\"creditor\").Limit(10000)\n        while i < Len(subs_arr) {\n            var sub_map int memberAccount string\n            sub_map = subs_arr[i]\n            memberAccount = sub_map[\"creditor\"]\n\n            var header body string params map \n            header = \"Auction №\" + Str(request_id) + \" started\"\n            body = \"You can bid now!\"\n            params[\"crediting_id\"] = request_id\n            params[\"optional\"] = 1\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", memberAccount, 1, \"fa-check\", header, body, \"crediting_view\", params)\n            i = i + 1\n        }\n    }\n\n    func sendNotesAuctionFinished(request map) {\n        var request_id i int subs_arr array\n        request_id = Int(request[\"id\"])\n        subs_arr = DBFind(\"crediting_subs\").Where({\"request_id\": request_id, \"deleted\": 0}).Columns(\"creditor\").Limit(10000)\n        while i < Len(subs_arr) {\n            var sub_map int memberAccount string\n            sub_map = subs_arr[i]\n            memberAccount = sub_map[\"creditor\"]\n\n            var header body string params map \n            header = \"Auction №\" + Str(request_id) + \" finished\"\n            body = \"You can't bid anymore!\"\n            params[\"crediting_id\"] = request_id\n            params[\"optional\"] = 1\n            @1NotificationsSend(\"MemberAccount,Sender,Icon,Header,Body,Page,Params\", memberAccount, 1, \"fa-close\", header, body, \"crediting_view\", params)\n            i = i + 1\n        }\n    }\n\n    func changeStatus(from, to map) {\n        var requests array i int req map\n        requests = DBFind(\"crediting_requests\").Where(from)\n\n        while i < Len(requests) {\n            req = requests[i]\n            if to[\"status\"] == $SIGNING {\n                sendNotesAuctionFinished(req)\n                if findWinner(req) == 0 {\n                    to[\"status\"] = $REJECTED\n                }\n            }\n            if to[\"status\"] == $AUCTION {\n                sendNotesAuctionStarted(req)\n            }\n            DBUpdate(\"crediting_requests\", Int(req[\"id\"]), to)\n            i = i + 1\n        }\n    }\n\n    conditions {\n        $BLOCKED = -2\n        $REMOVED = -1\n        $WAITING = 0\n        $AUCTION = 1\n        $SIGNING = 2\n        $REJECTED = 3\n        $FINISHED = 4\n\n        // check_access\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crediting\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crediting_admin_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->account\": $account_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n    }\n\n    action {\n        //setting status AUCTION\n        changeStatus({\"status\": $WAITING, \"deleted\": 0, \"date_started\": {\"$lte\": $block_time}}, {\"status\": $AUCTION})\n\n        //setting status SIGNING\n        changeStatus({\"status\": $AUCTION, \"deleted\": 0, \"date_ended\": {\"$lte\": $block_time}}, {\"status\": $SIGNING})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CreditingSubscribe",
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreditingSubscribe {\n    data {\n        Id int\n    }\n\n    conditions {\n        $request = DBFind(\"crediting_subs\").Where({\"request_id\": $Id, \"creditor\": $account_id, \"deleted\": 0}).One(\"id\")\n    }\n\n    action {\n        var m map\n        if $request {\n            m[\"deleted\"] = $block_time\n            DBUpdate(\"crediting_subs\", Int($request), m)\n        } else {\n            m[\"request_id\"] = $Id\n            m[\"creditor\"] = $account_id\n            DBInsert(\"crediting_subs\", m)\n        }\n    }\n}",
            "Type": "contracts"
        }
    ]
}