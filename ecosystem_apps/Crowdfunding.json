{
    "name": "Crowdfunding",
    "data": [
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "MenuItem(Title:$crowdfunding_settings$, Page:crowdfunding_settings, Icon: \"icon-wrench\")",
            "Name": "admin_menu",
            "Type": "menu"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "MenuItem(Title:$@1startups$, Page:@1startup_list, Icon:\"icon-docs\"",
            "Name": "default_menu",
            "Type": "menu"
        },
        {
            "Name": "collected_funds",
            "Trans": "{\"en\": \"Collected funds\", \"ru\": \"Собранная сумма\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "crowdfunding_settings",
            "Trans": "{\"en\": \"Crowdfunding settings\", \"ru\": \"Настройки  Краудфандинга\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "crowdfunding_settings_description",
            "Trans": "{\"en\": \"Correspondence of Crowdfunding application roles to ecosystem roles\", \"ru\": \"Соответствие ролей приложения Краудфандинг ролям экосистемы\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "description_empty",
            "Trans": "{\"en\": \"Description cannot be empty\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "link_empty",
            "Trans": "{\"en\": \"Link cannot be empty\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "min_investment",
            "Trans": "{\"en\": \"Minimum scale of investment\", \"ru\": \"Минимальная инвестиция\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "minimum_amount_empty",
            "Trans": "{\"en\": \"Minimum amount cannot be empty\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "percent",
            "Trans": "{\"en\": \"Percent\", \"ru\": \"Процент\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "required_amount",
            "Trans": "{\"en\": \"Required amount\", \"ru\": \"Необходимая сумма\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "required_amount_empty",
            "Trans": "{\"en\": \"Required amount cannot be empty\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "share_capital_empty",
            "Trans": "{\"en\": \"Share capital cannot be empty\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "startup_attention",
            "Trans": "{\"en\": \"Use the role of Startup, Investor or Administrator to access\", \"ru\": \"Используйте роль Стартап, Инвестор или Администратор для доступа\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "startups",
            "Trans": "{\"en\": \"Startups\", \"ru\": \"Стартапы\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "startups_not_found",
            "Trans": "{\"en\": \"Startups not found\", \"ru\": \"Стартапы не найдены\"}\r\n",
            "Type": "languages"
        },
        {
            "Name": "investment_participants",
            "Columns": "[{\"name\":\"amount\",\"conditions\":\"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"money\"},{\"name\":\"ecosystem_id\",\"conditions\":\"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"text\"},{\"name\":\"member_id\",\"conditions\":\"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"startup_id\",\"conditions\":\"{\\\"update\\\":\\\"false\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"text\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1InvestStartup\\\")\", \"update\": \"false\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "startups",
            "Columns": "[{\"name\":\"collected_amount\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1InvestStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"money\"},{\"name\":\"collected_percent\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1InvestStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"text\"},{\"name\":\"creator\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"json\"},{\"name\":\"date_created\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"date_ended\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"date_started\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"deleted\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"ecosystem\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"informations\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"json\"},{\"name\":\"min_investment\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"money\"},{\"name\":\"required_amount\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"money\"},{\"name\":\"share_capital\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1CreateStartup\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"status\",\"conditions\":\"{\\\"update\\\":\\\"ContractAccess(\\\\\\\"@1StartupsStatusUpdate\\\\\\\")\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1CreateStartup\\\")\", \"update\": \"ContractAccess(\\\"@1CreateStartup\\\",\\\"@1InvestStartup\\\",\\\"@1StartupsStatusUpdate\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "1",
            "Name": "crowdfunding_admin_role",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "10",
            "Name": "crowdfunding_investor_role",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "8",
            "Name": "crowdfunding_startup_role",
            "Type": "app_params"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "If(#stid# > 0){\r\n    DBFind(\"@1startups\").WhereId(#stid#).Columns(\"id,informations,informations->name,informations->description,informations->link,date_started,date_ended,required_amount,min_investment,share_capital,ecosystem,deleted,creator,creator->member_address,creator->member_name,creator->member_id,status\").Vars(edit)\r\n}\r\nForm(){     \r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1name$)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){   \r\n                If(#edit_id# > 0){\r\n                    Input(Name: StartupName,Value: #edit_informations_name#)\r\n                }.Else{\r\n                    Input(Name: StartupName)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1description$)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){ \r\n                If(#edit_id# > 0){\r\n                    Input(Name: Description,Value:#edit_informations_description#)\r\n                }.Else{  \r\n                    Input(Name: Description)\r\n                }\r\n            }\r\n        }.Style(padding-top:10px;)\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1link$)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){   \r\n                If(#edit_id# > 0){\r\n                    Input(Name: SiteLink,Value: #edit_informations_link#)\r\n                }.Else{\r\n                    Input(Name: SiteLink)\r\n                }\r\n            }\r\n        }.Style(padding-top:10px;)\r\n        Div(Class: mt-sm){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1date_start)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        If(#stid# > 0){\r\n                            SetVar(st_d, DateTime(DateTime: #edit_date_started#, Format: \"YYYY-MM-DD\"))\r\n                            SetVar(st_t, DateTime(DateTime: #edit_date_started#, Format: \"HH:MI\"))\r\n                        }\r\n                        If(#stid# > 0){\r\n                            Div(col-md-6){\r\n                                Input(Name: StartDate, Type: date,Value: #st_d#)\r\n                            }\r\n                            Div(col-md-6){\r\n                                Input(Name: StartTime, Type: time,Value: #st_t#)\r\n                            }\r\n                        }.Else{\r\n                            Div(col-md-6){\r\n                                Input(Name: StartDate, Type: date)\r\n                            }\r\n                            Div(col-md-6){\r\n                                Input(Name: StartTime, Type: time, Value: \"00:00\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1date_end)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        If(#stid# > 0){\r\n                            SetVar(et_d, DateTime(DateTime: #edit_date_ended#, Format: \"YYYY-MM-DD\"))\r\n                            SetVar(et_t, DateTime(DateTime: #edit_date_ended#, Format: \"HH:MI\"))\r\n                        }\r\n                        If(#stid# > 0){\r\n                            Div(col-md-6){\r\n                                Input(Name: EndDate, Type: date,Value: #et_d#)\r\n                            }\r\n                            Div(col-md-6){\r\n                                Input(Name: EndTime, Type: time, Value: #et_t#)\r\n                            }\r\n                        }.Else{\r\n                            Div(col-md-6){\r\n                                Input(Name: EndDate, Type: date)\r\n                            }\r\n                            Div(col-md-6){\r\n                                Input(Name: EndTime, Type: time, Value: \"00:00\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1required_amount$)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){   \r\n                If(#edit_id# > 0){\r\n                    SetVar(r_a,Money(#edit_required_amount#))\r\n                    Input(Name: RequiredAmount,Type: number,Value: #r_a#)\r\n                }.Else{\r\n                    Input(Name: RequiredAmount,Type: number)\r\n                }\r\n            }\r\n        }.Style(padding-top:10px;)\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1min_investment$)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){   \r\n                If(#edit_id# > 0){\r\n                    SetVar(m_a,Money(#edit_min_investment#))\r\n                    Input(Name: MinAmount,Type: number,Value: #m_a#)\r\n                }.Else{\r\n                    Input(Name: MinAmount,Type: number)\r\n                }\r\n            }\r\n        }.Style(padding-top:10px;)\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1share_capital$)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){  \r\n                If(#edit_id# > 0){\r\n                    Input(Name: ShareCapital,Type: number,Value: #edit_share_capital#)\r\n                }.Else{\r\n                    Input(Name: ShareCapital,Type: number)\r\n                }\r\n            }\r\n        }.Style(padding-top:10px;)\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12 text-right){\r\n            Button(Body: $@1back$, Class: btn btn-default,Page: #back_page#)\r\n            If(#edit_id# > 0){\r\n                Button(Body: $@1edit$, Class: btn btn-primary,Contract:CreateStartup,Params: \"StId=#stid#,Action=edit\",Page: #back_page#)\r\n            }.Else{\r\n                Button(Body: $@1create$, Class: btn btn-primary,Contract:CreateStartup,Page: #back_page#)\r\n            }\r\n        }\r\n    }\r\n}\r\n                ",
            "Name": "create_startup",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"Crowdfunding\"}).Vars(\"app\")\r\nDBFind(\"@1roles\", src_roles).Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Columns(\"role_name,id\").Limit(100)\r\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\r\n\r\nSetVar(this_page, \"crowdfunding_settings\").(role_admin,0).(role_startup,0).(role_investor,0)\r\nSetVar(role_admin, AppParam(App: #app_id#, Name: \"crowdfunding_admin_role\"))\r\nSetVar(role_startup, AppParam(App: #app_id#, Name: \"crowdfunding_startup_role\"))\r\nSetVar(role_investor, AppParam(App: #app_id#, Name: \"crowdfunding_investor_role\"))\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(@1crowdfunding_settings)\r\n                    }\r\n                    Div(text-center text-muted){\r\n                        \r\n                        LangRes(@1crowdfunding_settings_description)\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Admin\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleAdmin, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_admin#)\r\n                            Div(m0 h6 text-muted){\r\n                                SetVar(r_name, $@1role_not_found$)\r\n                                If(#role_admin# > 0){\r\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": #ecosystem_id#, \"id\": #role_admin#}).Columns(\"role_name\").Vars(r)\r\n                                    SetVar(r_name, #r_role_name#)\r\n                                }\r\n                                LangRes(@1current_value): #r_name#\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Startup\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleStartup, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_startup#)\r\n                            Div(m0 h6 text-muted){\r\n                                SetVar(r_name, $@1role_not_found$)\r\n                                If(#role_startup# > 0){\r\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": #ecosystem_id#, \"id\": #role_startup#}).Columns(\"role_name\").Vars(r)\r\n                                    SetVar(r_name, #r_role_name#)\r\n                                }\r\n                                LangRes(@1current_value): #r_name#\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Investor\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleInvestor, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_investor#)\r\n                            Div(m0 h6 text-muted){\r\n                                SetVar(r_name, $@1role_not_found$)\r\n                                If(#role_investor# > 0){\r\n                                    DBFind(\"@1roles\").Where({\"ecosystem\": #ecosystem_id#, \"id\": #role_investor#}).Columns(\"role_name\").Vars(r)\r\n                                    SetVar(r_name, #r_role_name#)\r\n                                }\r\n                                LangRes(@1current_value): #r_name#\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: @1CrowdfundingSettings)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Name": "crowdfunding_settings",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "SetVar(this_page, @1startup_list).(this_table, @1startups)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(Startups list)\r\n\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"Crowdfunding\"}).Vars(application)\r\nSetVar(admin_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_admin_role))\r\nSetVar(startup_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_startup_role))\r\nSetVar(investor_role, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: crowdfunding_investor_role))\r\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": #ecosystem_id#, \"$and\": [\"role->id\": {\"$in\": [#admin_role#]}, \"role->id\": #role_id#], \"member->member_id\": #key_id#, \"deleted\": 0}).Vars(admin_access)\r\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": #ecosystem_id#, \"$and\": [\"role->id\": {\"$in\": [#startup_role#]}, \"role->id\": #role_id#], \"member->member_id\": #key_id#, \"deleted\": 0}).Vars(startup_access)\r\nDBFind(\"@1roles_participants\").Where({\"ecosystem\": #ecosystem_id#, \"$and\": [\"role->id\": {\"$in\": [#investor_role#]}, \"role->id\": #role_id#], \"member->member_id\": #key_id#, \"deleted\": 0}).Vars(investor_access)\r\n\r\nIf(#page_par#==0){\r\n    SetVar(type_filter, {\"status\": 0})\r\n}.ElseIf(#page_par#==1){\r\n    SetVar(type_filter, {\"status\": 1})\r\n}.ElseIf(#page_par#==2){\r\n    SetVar(type_filter, {\"status\": {\"$gte\": 2}})\r\n}.ElseIf(#page_par#==-1){\r\n    SetVar(type_filter, {\"status\": -1})\r\n}\r\n\r\nIf(#startup_access_id# > 0){\r\n    AddToolButton(Title: $@1create$, Page: create_startup, Icon: icon-plus, PageParams: \"back_page = #this_page#\").Popup(50, \"New startup\")\r\n}\r\nIf(Or(#startup_access_id# > 0,#admin_access_id# > 0, #investor_access_id# > 0)){\r\n    SetVar(global_access,1)\r\n}\r\nIf(#global_access# == 1){\r\n    Div(mr-lg text-right){\r\n        If(#admin_access_id# > 0){\r\n            Button(Body: Em(Class: fa fa-refresh) $@1update_statuses$, Class: btn bg-gray mr-lg, Page: #this_page#, Contract: @1StartupsStatusUpdate)\r\n        }\r\n        Button(Page: startup_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"page_par=#page_par#,search=#search#,back_page=#this_page#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"30\")\r\n        If(#type_filter#){\r\n            Button(Page: #this_page#, PageParams: \"page_par=NULL,search=#search#\", Class: btn bg-gray-lighter mr-sm, Body: Em(Class: fa fa-close))\r\n        }\r\n    }\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1name)).(search, #search#)\r\n        Include(@1search)\r\n    }\r\n\r\n    If(GetVar(search)){\r\n        If(#startup_access_id# > 0){\r\n            SetVar(where, {\"deleted\":0,#type_filter#,\"creator->member_id\":#key_id#,\"informations->name\": {\"$ilike\": \"#search#\"}})\r\n        }.ElseIf(#investor_access_id# > 0){\r\n            SetVar(where, {\"deleted\":0,#type_filter#,\"informations->name\": {\"$ilike\": \"#search#\"}})\r\n        }.ElseIf(#admin_access_id# > 0){\r\n            SetVar(where, {#type_filter#,\"informations->name\": {\"$ilike\": \"#search#\"}})\r\n        }.Else{\r\n            SetVar(where, {\"status\":10})\r\n        }\r\n    }.Else{\r\n        If(#startup_access_id# > 0){\r\n            SetVar(where, {\"deleted\":0,#type_filter#,\"creator->member_id\":#key_id#})\r\n        }.ElseIf(#investor_access_id# > 0){\r\n            SetVar(where, {\"deleted\":0,#type_filter#})\r\n        }.ElseIf(#admin_access_id# > 0){\r\n            SetVar(where, {#type_filter#})\r\n        }.Else{\r\n            SetVar(where, {\"status\":10})\r\n        }\r\n    }\r\n\r\n    DBFind(#this_table#,Source: src_start).Columns(\"id,informations,informations->name,informations->description,informations->link,date_started,date_ended,required_amount,min_investment,share_capital,ecosystem,deleted,creator,creator->member_address,creator->member_name,creator->member_id,status,date_created\").Where(#where#).Offset(#pager_offset#).Limit(#pager_limit#).Custom(_name){\r\n        Span(Body: #informations.name#)\r\n    }.Custom(_creator){\r\n        If(#creator.member_name# == \"\"){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\r\n                Span(Body: #creator.member_address#)\r\n            }\r\n        }.Else{\r\n            Div(Class: row){\r\n                LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\r\n                    Span(Body: #creator.member_name#)\r\n                }\r\n            }\r\n            Div(Class: row){\r\n                Span(Class: text-muted h5,Body: #creator.member_address#)\r\n            }\r\n        }\r\n    }.Custom(_date_start){\r\n        DateTime(DateTime: #date_started#, Format: HH:MI DD.MM.YYYY)\r\n    }.Custom(_date_end){\r\n        DateTime(DateTime: #date_ended#, Format: HH:MI DD.MM.YYYY)\r\n    }.Custom(req_amount){\r\n        Span(Body: Money(#required_amount#))\r\n    }.Custom(min_amount){\r\n        Span(Body: Money(#min_investment#))\r\n    }.Custom(_edit){\r\n        Div(pull-right){\r\n            If(And(#startup_access_id# > 0,#creator.member_id# == #key_id#)){\r\n                If(#status# == 0){\r\n                    Button(Class: btn bg-gray-lighter mh-sm, PageParams: \"stid=#id#,back_page=#this_page#\", Page: @1create_startup){\r\n                        Em(Class: text-default fa fa-1x fa-edit)\r\n                    }.Popup(50, $@1edit$)\r\n                    Button(Class: btn bg-gray-lighter mh-sm, Contract: @1CreateStartup, Params: \"StId=#id#,Action=delete\", Page: @1startup_list){\r\n                        Em(Class: text-danger fa fa-1x fa-trash)\r\n                    }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }\r\n                Button(Class: btn bg-gray-lighter mh-sm, Page: @1startup_view,PageParams: \"stid=#id#,back_page=#this_page#\"){\r\n                    Em(Class: text-default fa fa-1x icon-eye)\r\n                }\r\n            }.ElseIf(#investor_access_id# > 0){\r\n                Button(Class: btn bg-gray-lighter, Page: @1startup_view,PageParams: \"stid=#id#,back_page=#this_page#\"){\r\n                    Em(Class: text-default fa fa-1x icon-eye)\r\n                }\r\n            }.ElseIf(#admin_access_id# > 0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Page: @1startup_view,PageParams: \"stid=#id#,back_page=#this_page#\"){\r\n                    Em(Class: text-default fa fa-1x icon-eye)\r\n                }\r\n                If(And(#status# < 2,#status# != -1)){\r\n                    Button(Class: btn bg-gray-lighter, Contract: @1CreateStartup, Params: \"StId=#id#,Action=delete\", Page: @1startup_list){\r\n                        Em(Class: text-danger fa fa-1x fa-trash)\r\n                    }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }.Custom(_status){\r\n        If(#status# == 0){\r\n            Span(Class:text-warning,Body: $@1waiting$)\r\n        }.ElseIf(#status# == 1){\r\n            Span(Class:text-primary,Body: $@1started$)\r\n        }.ElseIf(#status# == 2){\r\n            Span(Class:text-success,Body: $@1finished$)\r\n        }.ElseIf(#status# == 3){\r\n            Span(Class:text-danger,Body: $@1finished$)\r\n        }.ElseIf(#status# == -1){\r\n            Span(Class:text-danger,Body: $@1deleted$)\r\n        }\r\n    }.Custom(_date_created){\r\n        DateTime(DateTime: #date_created#, Format: HH:MI DD.MM.YYYY)\r\n    }.Order({\"status\": \"-1\",\"date_started\": \"-1\"}).Count(check_comp)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#check_comp# > 0){\r\n                    Table(Source: src_start,Columns: \"$@1name$=_name,$@1creator$=_creator,$@1date_start$=_date_start,$@1date_end$=_date_end,$@1date_created$=_date_created,$@1required_amount$=req_amount,$@1min_investment$=min_amount,$@1share_capital$=share_capital,$@1status$=_status,=_edit\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: $@1startups_not_found$)\r\n                }\r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(row ml-lg mr-lg){\r\n        Div(md-12 alert h4 text-bold text-center){\r\n            Span(Body: LangRes(startup_attention))\r\n        }\r\n    }\r\n}",
            "Name": "startup_list",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "DBFind(\"@1startups\").WhereId(#stid#).Columns(\"id,collected_percent,date_created,collected_amount,informations,informations->name,informations->description,informations->link,date_started,date_ended,required_amount,min_investment,share_capital,ecosystem,deleted,creator,creator->member_address,creator->member_name,creator->member_id,status\").Vars(view)\r\nDBFind(\"@1roles\").Columns(\"id,role_name,deleted,ecosystem\").Where({\"role_name\":\"Investor\",\"deleted\":0,\"ecosystem\":#ecosystem_id#}).Vars(check_role_invest)\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-lg-10 col-lg-offset-1){\r\n            Form(panel panel-primary){\r\n                Div(list-group-item text-center){\r\n                    P(Class: h3 text-bold m0, Body: #view_informations_name#)\r\n                    Div(row){\r\n                        Div(col-md-12){\r\n                            Div(Class: t5 text-muted m0, Body: #view_informations_description#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item text-center){\r\n                    P(Class: h4 text-center text-bold m0 mb mt-sm, Body: $@1information$)\r\n                    Div(row mb mt-lg t6){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4,Body:$@1creator$)\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            LinkPage(Class: text-primary text-bold h4, Page: @1profile_view, PageParams: \"v_key_id=#view_creator_member_id#\"){\r\n                                If(#view_creator_member_name# == \"\"){\r\n                                    Span(Body: #view_creator_member_address#)\r\n                                }.Else{\r\n                                    Span(Body: #view_creator_member_name#)\r\n                                }\r\n                            }  \r\n                        }.Style(padding-top:5px;)\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1link$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class: h4,Body: #view_informations_link#)\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1required_amount$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class: h4,Body: Money(#view_required_amount#))\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1min_investment$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class:h4,Body: Money(#view_min_investment#))\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1share_capital$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class:h4,Body: #view_share_capital#)\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1date_created$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class:h4,Body:DateTime(DateTime: #view_date_created#, Format: HH:MI DD.MM.YYYY))\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1date_start$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class:h4,Body:DateTime(DateTime: #view_date_started#, Format: HH:MI DD.MM.YYYY))\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1date_end$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class:h4,Body:DateTime(DateTime: #view_date_ended#, Format: HH:MI DD.MM.YYYY))\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class: h4,Body:LangRes($@1status$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            If(#view_status# == 0){\r\n                                Span(Class:text-warning h4,Body: $@1waiting$)\r\n                            }.ElseIf(#view_status# == 1){\r\n                                Span(Class:text-primary h4,Body: $@1started$)\r\n                            }.ElseIf(#view_status# == 2){\r\n                                Span(Class:text-success h4,Body: $@1finished$)\r\n                            }.ElseIf(#view_status# == 3){\r\n                                Span(Class:text-danger h4,Body: $@1finished$)\r\n                            }.ElseIf(#view_status# == -1){\r\n                                Span(Class:text-danger h4,Body: $@1deleted$)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class:h4,Body:LangRes($@1collected_funds$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            Span(Class:h4,Body:Money(#view_collected_amount#) / Money(#view_required_amount#))\r\n                        }\r\n                    }\r\n                    Div(row t6){\r\n                        Div(col-md-6 text-right){\r\n                            Span(Class:h4,Body:LangRes($@1percent$))\r\n                        }\r\n                        Div(col-md-6 text-left){\r\n                            If(#view_collected_percent# >= 100) {\r\n                                Span(Class: h4 text-success, Body: #view_collected_percent#% / 100%)\r\n                            }.Else{\r\n                                If(#view_collected_percent# == \" \"){\r\n                                    Span(Class: h4 text-danger, Body: 0% / 100%)\r\n                                }.Else{\r\n                                    Span(Class: h4 text-danger, Body: #view_collected_percent#% / 100%)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(And(#check_role_invest_id# == #role_id#,#view_status# == 1)){\r\n                    Div(list-group-item text-center){\r\n                        Div(row mb mt-lg t6){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Span(Class: h4,Body:$@1amount$)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                Input(Name:Invest,Type: number)\r\n                            }\r\n                            Div(col-md-1 text-right){\r\n                                Button(Body: $@1investment_amount$, Class: btn btn-success,Contract: InvestStartup,Params:\"StartupId=#stid#\",Page: #back_page#) \r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item){\r\n                    Button(Class: btn bg-gray-lighter ml-sm buttons, Page: #back_page#){\r\n                        Span(Em(Class: fa fa-chevron-left fa-1x)\r\n                        Span(Class: ml-sm, Body: LangRes(@1back))\r\n                    }\r\n                }\r\n            }.Style(\r\n                .buttons{border: 1px solid #dde6e9;}\r\n            )\r\n        }\r\n    }\r\n}.Style(\r\n    .preview {\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        white-space: nowrap;\r\n    }\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Name": "startup_view",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract InvestTransfer {\n    data {\n        RowId int\n        Action string\n        Summ money \"optional\"\n    }\n    conditions {\n\n    }\n    action {\n        var s map\n        if $Action == \"Invest\" {\n            s[\"+deposit\"] = $Summ\n            DBUpdate(\"@1keys\",$key_id,s)\n        }\n        if $Action == \"Finished\" {\n            $check_startup = DBFind(\"@1startups\").WhereId($RowId).Columns(\"id,creator,creator->member_id,status\").Row()\n            var participants array i int req d s map\n            participants = DBFind(\"@1investment_participants\").Where({\"startup_id\":$RowId})\n            if Int($check_startup[\"status\"]) == 2 {\n                while i < Len(participants) { \n                    req = participants[i]\n                    @1TokensTransfer(\"Amount,SenderId,RecipientId\",Money(req[\"amount\"]),Int(req[\"member_id\"]),Int($check_startup[\"creator.member_id\"]))\n                    d[\"-deposit\"] = Money(req[\"amount\"])\n                    DBUpdate(\"@1keys\",Int(req[\"member_id\"]),d) \n                    i = i + 1\n                }\n            } else {\n                while i < Len(participants) { \n                    req = participants[i]\n                    d[\"-deposit\"] = Money(req[\"amount\"])\n                    DBUpdate(\"@1keys\",Int(req[\"member_id\"]),d) \n                    i = i + 1\n                }\n            }\n        }\n    }\n}",
            "Name": "InvestTransfer",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CrowdfundingSettings {\n    data {\n        RoleAdmin int\n        RoleStartup int\n        RoleInvestor int\n    }\n\n    conditions {\n        MainCondition()\n    }\n\n    func updateParam(name string, value string) {\n        var param paramsNew map\n        if $app_id > 0 {\n            param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": $app_id, \"name\": name}).Row()\n            if param {\n                paramsNew[\"Id\"] = Int(param[\"id\"])\n                paramsNew[\"Value\"] = Str(value)\n                paramsNew[\"Conditions\"] = param[\"conditions\"]\n                CallContract(\"@1EditAppParam\", paramsNew)\n            } else {\n                paramsNew[\"ApplicationId\"] = $app_id\n                paramsNew[\"Name\"] = name\n                paramsNew[\"Value\"] = Str(value)\n                paramsNew[\"Conditions\"] = \"ContractConditions(\\\"AdminCondition\\\")\"\n                CallContract(\"@1NewAppParam\", paramsNew)\n            }\n        } else {\n            warning LangRes(\"@1app_not_found\", \"en\")\n        }\n    }\n\n    action {\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n        updateParam(\"crowdfunding_admin_role\", Str($RoleAdmin))\n        updateParam(\"crowdfunding_startup_role\", Str($RoleStartup))\n        updateParam(\"crowdfunding_investor_role\", Str($RoleInvestor))\n    }\n}",
            "Name": "CrowdfundingSettings",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract CreateStartup {\n    data {\n        StartupName string\n        Description string\n        SiteLink string\n        StartDate string\n        StartTime string\n        EndDate string\n        EndTime string\n        RequiredAmount money\n        MinAmount money\n        ShareCapital int\n        Action string \"optional\"\n        StId int \"optional\"\n    }\n    func trimZeroTime(s string) string {\n        if Contains(s, \"T00:00:00Z\") {\n            s = Replace(s, \"T00:00:00Z\", \"\")\n        }\n        return s\n    }\n\n    func dateAddTime(d, t string) string {\n        var dt string\n        if Size(t) == 5 {\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\n        }\n        return dt\n    }\n\n    func isCalledFromPage() bool {\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\n    }\n\n    func fixDatetimes() {\n        $date_started = UnixDateTime(dateAddTime($StartDate, $StartTime))\n        $date_ended = UnixDateTime(dateAddTime($EndDate, $EndTime))\n\n        if $date_started == 0 || $date_ended == 0 { // invalid datetimes\n            if isCalledFromPage() {\n                var errs array\n                if Size($StartDate) < 10 {\n                    errs = Append(errs, \"starting date\")\n                }\n                if Size($StartTime) < 5 {\n                    errs = Append(errs, \"starting time\")\n                }\n                if Size($EndDate) < 10 {\n                    errs = Append(errs, \"ending date\")\n                }\n                if Size($EndTime) < 5 {\n                    errs = Append(errs, \"ending time\")\n                }\n                warning Sprintf(LangRes(\"@1voting_creation_error_x_unspecified\", \"en\"), Join(errs, \", \"))\n            } else {\n                $date_started = $block_time\n                $Interval = Int($Interval)\n                if $Interval == 0 {\n                    $Interval = 3\n                }\n                $date_ended = $date_started + 3600 * 24 * $Interval\n            }\n        }\n        if $date_started < $block_time {\n            warning LangRes(\"@1starting_date_invalid\", \"en\")\n        }\n        if $date_started >= $date_ended {\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\n        }\n    }\n    conditions {\n        if $Action == \"delete\" {\n            $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n            $check_access = AppParam(Int($app), \"crowdfunding_startup_role\", $ecosystem_id)\n            $check_access_admin = AppParam(Int($app), \"crowdfunding_admin_role\", $ecosystem_id)\n            var rids array\n            rids = JSONDecode(\"[\"+$check_access+\",\"+$check_access_admin+\"]\")\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\n                warning LangRes(\"@1access_denied\", \"en\")\n            }\n        } else {\n            $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n            $check_access = AppParam(Int($app), \"crowdfunding_startup_role\", $ecosystem_id)\n            var rids array\n            rids = JSONDecode(\"[\"+$check_access+\"]\")\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\n                warning LangRes(\"@1access_denied\", \"en\")\n            }\n        }\n        if !$StartupName {\n            warning LangRes(\"@1empty_name\", \"en\")\n        }\n        if !$Description {\n            warning LangRes(\"@1description_empty\", \"en\")\n        }\n        if !$SiteLink {\n            warning LangRes(\"@1link_empty\", \"en\")\n        }\n        if Money($RequiredAmount) <= Money(0) {\n            warning LangRes(\"@1required_amount_empty\", \"en\")\n        }\n        if Money($MinAmount) <= Money(0) {\n            warning LangRes(\"@1minimum_amount_empty\", \"en\")\n        }\n        if !$ShareCapital {\n            warning LangRes(\"@1share_capital_empty\", \"en\")\n        }\n        \n        $startup = DBFind(\"@1startups\").WhereId($StId).Row()\n        if $StartDate || $StartTime || $EndDate || $EndTime {\n            fixDatetimes()\n        }\n    }\n    action {\n        if $Action == \"delete\" {\n            var m map\n            m[\"deleted\"] = 1\n            m[\"status\"] = -1\n            if $startup[\"status\"] == 1 && Money($startup[\"collected_amount\"]) > 0 {\n                var participants array i int\n                participants = DBFind(\"@1investment_participants\").Where({\"startup_id\": $StId, \"ecosystem_id\": $ecosystem_id}).Columns(\"id\")\n                while i < Len(participants) {\n                    var p map\n                    p = participants[i]\n                    @1InvestTransfer(\"RowId\", Int(p[\"id\"]))\n                    i = i + 1\n                }\n                DBUpdate(\"@1startups\",$StId,m)\n            } else {\n                DBUpdate(\"@1startups\",$StId,m)\n            }\n        } else {\n            var information creator m map\n            information[\"name\"] = $StartupName\n            information[\"description\"] = $Description\n            information[\"link\"] = $SiteLink\n\n            $member_name = DBFind(\"@1members\").WhereId($key_id).One(\"member_name\")\n            creator[\"member_id\"] = $key_id\n            if $member_name {\n                creator[\"member_name\"] = $member_name\n            } else {\n                creator[\"member_name\"] = IdToAddress($key_id)\n            }\n            creator[\"member_address\"] = IdToAddress($key_id)\n\n            m[\"informations\"] = information\n            m[\"creator\"] = creator\n            m[\"date_started\"] = $date_started\n            m[\"date_ended\"] = $date_ended\n            m[\"required_amount\"] = $RequiredAmount\n            m[\"min_investment\"] = $MinAmount\n            m[\"share_capital\"] = $ShareCapital\n            m[\"ecosystem\"] = $ecosystem_id\n            if $Action == \"edit\" {\n                DBUpdate(\"@1startups\",$StId,m)\n            } else {\n                m[\"date_created\"] = $block_time\n                DBInsert(\"@1startups\",m)\n            }\n        }\n  \n    }\n}",
            "Name": "CreateStartup",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract InvestStartup {\n    data {\n        StartupId int\n        Invest money\n    }\n    conditions {\n        $app = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Crowdfunding\"}).One(\"id\")\n        $check_access = AppParam(Int($app), \"crowdfunding_investor_role\", $ecosystem_id)\n        var rids array\n        rids = JSONDecode(\"[\"+$check_access+\"]\")\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\n            warning LangRes(\"@1access_denied\", \"en\")\n        }\n\n        $info_startup= DBFind(\"@1startups\").WhereId($StartupId).Row()\n        if Money($info_startup[\"min_investment\"]) > Money($Invest) {\n            info(\"Amount less than minimum investment\")\n        }\n        $amount = DBFind(\"@1keys\").WhereId($key_id).One(\"amount\")\n        if Money($Invest) > Money($amount) {\n            info(\"Insufficient funds\")\n        }\n    }\n    action { \n        var m t map\n        m[\"member_id\"] = $key_id\n        m[\"ecosystem_id\"] = $ecosystem_id\n        m[\"startup_id\"] = $StartupId\n        m[\"amount\"] = $Invest\n        \n        @1InvestTransfer(\"Action,RowId,Summ\",\"Invest\",$StartupId,$Invest)\n        t[\"+collected_amount\"] = $Invest\n        var percent invested summ int\n        summ = Money($info_startup[\"required_amount\"]) / Money(1000000000000000000)\n        invested = (Money($info_startup[\"collected_amount\"]) + Money($Invest)) / Money(1000000000000000000)\n        percent = (Money(invested)*Money(100))/Money(summ)\n        t[\"collected_percent\"] = percent\n        DBInsert(\"@1investment_participants\",m)\n        DBUpdate(\"@1startups\",$StartupId,t)\n    }\n}",
            "Name": "InvestStartup",
            "Type": "contracts"
        },
        {
            "Conditions": "ContractConditions(\"AdminCondition\")",
            "Value": "contract StartupsStatusUpdate {\n    data {\n\n    }\n    func changeStatus(from, to map) {\n        var requests array i int req map\n        requests = DBFind(\"@1startups\").Where(from)\n        if to[\"status\"] == 1 {\n            while i < Len(requests) {\n                req = requests[i]\n                DBUpdate(\"@1startups\", Int(req[\"id\"]), to)\n                i = i + 1\n            }\n        }\n        if to[\"status\"] == 2 {\n            while i < Len(requests) {\n                var check_st map\n                req = requests[i]\n                check_st = DBFind(\"@1startups\").WhereId(Int(req[\"id\"])).Row()\n                if Money(check_st[\"collected_amount\"]) >= Money(check_st[\"required_amount\"]) {\n                    DBUpdate(\"@1startups\", Int(req[\"id\"]), to)\n                    @1InvestTransfer(\"Action,RowId\",\"Finished\",Int(req[\"id\"]))\n                } else {\n                    to[\"status\"] = 3\n                    DBUpdate(\"@1startups\", Int(req[\"id\"]), to)\n                    @1InvestTransfer(\"Action,RowId\",\"Finished\",Int(req[\"id\"]))\n                }\n                i = i + 1\n            }\n        }\n    }\n    conditions {\n        $WAITING = 0\n        $START = 1\n        $FINISHED = 2\n    }\n    action {\n          //setting status $START\n        changeStatus({\"status\": $WAITING, \"deleted\": 0, \"date_started\": {\"$lte\": $block_time}}, {\"status\": $START})\n\n        //setting status $FINISHED\n        changeStatus({\"status\": $START, \"deleted\": 0, \"date_ended\": {\"$lte\": $block_time}}, {\"status\": $FINISHED})\n    }\n}",
            "Name": "StartupsStatusUpdate",
            "Type": "contracts"
        }
    ]
}