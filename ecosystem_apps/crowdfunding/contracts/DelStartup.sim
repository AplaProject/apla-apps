contract DelStartup {
    data {
        StId int
    }

    conditions {
        $app = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Crowdfunding"}).One("id")
        $check_creator = DBFind("@1startups").WhereId($StId).Columns("id,creator,creator->member_id").Row()
        $check_access_admin = AppParam(Int($app), "crowdfunding_admin_role", $ecosystem_id)
        var rids array
        rids = JSONDecode("["+$check_access_admin+"]")
        if Int($check_creator["creator.member_id"]) != $key_id {
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": {"$in": rids}, "member->member_id": $key_id, "deleted": 0}).Row() {
                warning LangRes("@1access_denied", "en")
            }
        }  
    }
    
    action {
        $startup = DBFind("@1startups").WhereId($StId).Row()
        var m map
        m["deleted"] = 1
        m["status"] = -1
        if $startup["status"] == 1 && Money($startup["collected_amount"]) > 0 {
            var participants array i int
            participants = DBFind("@1investment_participants").Where({"startup_id": $StId, "ecosystem_id": $ecosystem_id}).Columns("id")
            while i < Len(participants) {
                var p map
                p = participants[i]
                @1InvestTransfer("RowId", Int(p["id"]))
                i = i + 1
            }
            DBUpdate("@1startups",$StId,m)
        } else {
            DBUpdate("@1startups",$StId,m)
        }
    }
}