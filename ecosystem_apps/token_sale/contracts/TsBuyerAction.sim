contract TsBuyerAction {
    data {
        Action string
    }

    conditions {
        $system_app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "System"}).One("id")
        var basicAppId int
        basicAppId = Int(DBFind("@1applications").Where({"ecosystem": 1, "name": "Basic"}).One("id"))
        if basicAppId == 0 {
            warning LangRes("@1app_not_found", "en")
        }
        $roleConsortiumMember = Int(AppParam(Int($system_app_id), "role_consortium_member", $ecosystem_id))
        if $roleConsortiumMember == 0 {
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), "role_consortium_member")
        }
        $wallet = DBFind("ts_wallets").Where({"buyer_account": $account_id, "rejected_at": 0}).Row()
        if !$wallet {
            warning "Buyer wallet not found"
        }
    }

    action {
        if $Action == "accept" {
            DBUpdate("ts_wallets", Int($wallet["id"]), {"signed_at": $time})
            var params map title string
            title = Sprintf("Buyer %v signed contract", $account_id)
            params["wallet_id"] = $wallet["id"]
            @1NotificationsSend("Rid,Sender,Header,Page,Params,Closure", $roleConsortiumMember, 1, title, "ts_consortium_member_contract", params, 1)

        } elif $Action == "reject" {
            DBUpdate("ts_wallets", Int($wallet["id"]), {"rejected_at": $time})
        }

        var notes array i int note map
        notes = DBFind("@1notifications").Where({"ecosystem": $ecosystem_id, "recipient->account": $account_id, "page_name": "@1ts_buyer_contract", "closed": 0}).Columns("id")
        while i < Len(notes) {
            note = notes[i]
            @1NotificationsClose("NotificId",Int(note["id"]))
            i = i + 1
        }
    }
}
