contract TsConsortiumMemberAction {
    data {
        Action string
        WalletId int
        NotificId int
    }

    conditions{
        $system_app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "System"}).One("id")
        var basicAppId int
        basicAppId = Int(DBFind("@1applications").Where({"ecosystem": 1, "name": "Basic"}).One("id"))
        if basicAppId == 0{
            warning LangRes("@1app_not_found", "en")
        }
        $roleConsortiumMember = Int(AppParam(Int($system_app_id), "role_consortium_member", $ecosystem_id))
        if $roleConsortiumMember == 0 {
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), "role_consortium_member")
        }
        if !RoleAccess($roleConsortiumMember) {
            warning "this action allowed only for role id #" + $roleConsortiumMember
        }
        $wallet = DBFind("ts_wallets").Where({"id": $WalletId, "rejected_at": 0}).Row()
        if !$wallet {
            warning "Buyer wallet not found"
        }
        if Int($wallet["signed_at"]) == 0 {
            warning "Buyer wallet not signed"
        }
        if $wallet["signer_account"] != 0 {
            if $wallet["signer_account"] != $account_id {
                warning "This wallet was signed earlier"
            }
        }
    }

    action {
        if $Action == "accept" {
            DBUpdate("ts_wallets", Int($wallet["id"]), {"signer_account": $account_id})
            // buyer notification
            var params map
            params["wallet_id"] = $wallet["id"]
            @1NotificationsSend("MemberAccount,Sender,Header,Page,Params,Closure", $wallet["buyer_account"], 1, "Your wallet approved", "ts_buyer_congratulation", params, 1)

        } elif $Action == "reject" {
            DBUpdate("ts_wallets", Int($wallet["id"]), {"rejected_at": $time})
        }
        @1NotificationsClose("NotificId", $NotificId)
    }
}