contract TsTransferReject {
    data {
        Comment string
        RoleParam string
        NotificId int
    }

    func getRoleId(name string) int {
        var rid int
        rid = Int(AppParam(Int($app_id), name, $ecosystem_id))
        if rid == 0 {
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), name)
        }
        return rid
    }

    conditions {
        $WAITING_MANAGER = 1
        $WAITING_SELLER = 2
        $FINISHED = 3
        $REJECTED = 4

        if !($RoleParam == "ts_role_sale_manager" || $RoleParam == "ts_role_sale_seller") {
            warning "Invalid role parameter"
        }
        $app_id = Int(DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Token sale"}).One("id"))
        var role noteSaleId int note map
        role = getRoleId($RoleParam)
        if !RoleAccess(role) {
            warning "This action is allowed only for the role id #" + role
        }
        note = DBFind("@1notifications").Where({"id": $NotificId}).Columns("page_params->sale_id,date_start_processing,notification->type").Row()
        if !note {
            warning "Notification is not found"
        }
        $needProcessing = 0
        if note["date_start_processing"] == 0 {
            $needProcessing = 1
        }
        noteSaleId = Int(note["page_params.sale_id"])
        $sale = DBFind("ts_sales").Where({"id": noteSaleId}).Row()
        if !$sale {
            warning "Sale is not found"
        }
        $saleId = Int($sale["id"])
    }

    action {
        if $needProcessing == 1 {
            @1NotificationsProcess("NotificId", $NotificId)
        }
        @1NotificationsClose("NotificId", $NotificId)
        var sale params map title body string prevAccount string
        title = Sprintf("Sale %v rejected", $saleId)
        body = $Comment
        params["sale_id"] = $saleId
        sale["status"] = $REJECTED
        if $RoleParam == "ts_role_sale_manager" {
            sale["sale_apl_manager"] = $account_id
            sale["manager_reject_comment"] = $Comment
            sale["manager_rejected_at"] = $time
            prevAccount = $sale["sale_apl_admin"]

        } elif $RoleParam == "ts_role_sale_seller" {
            sale["seller_account"] = $account_id
            sale["seller_reject_comment"] = $Comment
            sale["seller_rejected_at"] = $time
            prevAccount = $sale["sale_apl_manager"]
        }

        DBUpdate("ts_sales", $saleId, sale)
        @1NotificationsSend("MemberAccount,Sender,Header,Body,Page,Params,Closure", prevAccount, 1, title, body, "ts_notification", params, 1)

    }
}