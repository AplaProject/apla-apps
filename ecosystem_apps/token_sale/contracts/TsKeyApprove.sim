contract TsKeyApprove {
    data {
        PublicKey string
        KeyType string
        CurrentRoleId int
    }

    func getFreeWallet() int {
        var count_wallets int wallet_map map wallet_arr array
        wallet_arr = DBFind("ts_wallets").Where({"key_id_buyer": 0, "deleted": 0}).Order({"id": 1})

        count_wallets = Len(wallet_arr)
        if count_wallets == 0 {
            warning LangRes("@1ts_free_wallet_not_found", "en")
        }

        if count_wallets == 1 {
            var managerRoleId int
            managerRoleId = Int(AppParam(Int($app_id), "ts_role_sale_manager", $ecosystem_id))
            if managerRoleId > 0 {
                var params map title page body string
                title = LangRes("@1ts_free_wallets_ended", "en")
                body = LangRes("@1ts_free_wallets_need", "en")
                page = "@1ts_notification"
                @1NotificationsSend("Rid,Sender,Header,Body,Page,Params,Closure,CurrentRid", managerRoleId, 2, title, body, page, params, 1, $CurrentRoleId)
            }
        }

        wallet_map = wallet_arr[0]
        return Int(wallet_map["id"])
    }

    conditions {
        $app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Token sale"}).One("id")
        if $PublicKey == "" {
            warning LangRes("@1public_key_empty", "en")
        }

        $PublicKey = Replace($PublicKey, " ", "")
        if Size($PublicKey) < 128 {
            warning LangRes("@1key_too_short", "en")
        }
        if Size($PublicKey) > 130 {
            warning LangRes("@1key_too_long", "en")
        }

        $userKey = PubToID($PublicKey)
        if $userKey == 0 {
            warning LangRes("@1public_key_invalid", "en")
        }

        if DBFind("ts_wallets").Where({"key_id_buyer": $userKey}).One("id") {
            warning LangRes("@1investor_added_already", "en")
        }

        if DBFind("@1keys").Where({"id": $userKey, "ecosystem": 1}).One("id") {
            warning LangRes("@1key_added_already", "en")
        }

        var snapSwapRoleId int snapSwapRoleName string
        snapSwapRoleId = Int(AppParam(Int($app_id), "ts_role_snapswap", $ecosystem_id))
        snapSwapRoleName = DBFind("@1roles").Where({"id": snapSwapRoleId}).One("role_name")

        if snapSwapRoleId == 0 {
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), "ts_role_snapswap")
        }

        if !RoleAccess(snapSwapRoleId) {
            warning Sprintf(LangRes("x_role_only_action", "en"), snapSwapRoleName)
        }
    }

    action {
        var pub_bytes bytes
        pub_bytes = HexToPub($PublicKey)
        DBInsert("@1keys", {"id": $userKey, "pub": pub_bytes, "ecosystem": 1})
        var start_balance money
        start_balance = Money(1000000000000000)
        @1TokensSend("Recipient,Amount", IdToAddress($userKey), start_balance)

        if $KeyType == "investor" {
            $wallet_id = getFreeWallet()
            $pub_short_buyer = Substr($PublicKey, 0, 12) + "..." + Substr($PublicKey, Size($PublicKey) - 12, 12)
            DBUpdate("ts_wallets", $wallet_id, {"key_id_buyer": $userKey, "created_at": $block_time, "pub_buyer": $PublicKey, "pub_short_buyer": $pub_short_buyer})

            // new user notification
            var params map title page body string
            title = LangRes("@1ts_hello_user_description", "en")
            body = LangRes("@1ts_read_contract", "en")
            page = "@1ts_buyer_contract"
            @1NotificationsSend("MemberId,Sender,Header,Body,Page,Params,Closure,CurrentRid", $userKey, 2, title, body, page, params, 1, $CurrentRoleId)
        }
    }
}