contract TsTransferSeller {
    data {
        SaleId int
        NotificId int
    }

    func getRoleId(name string) int{
        var rid int
        rid = Int(AppParam(Int($app_id), name, $ecosystem_id))
        if rid == 0 {
            warning Sprintf(LangRes("@1role_not_set_application_parameter", "en"), name)
        }
        return rid
    }

    conditions{
        $WAITING_MANAGER = 1
        $WAITING_SELLER = 2
        $FINISHED = 3
        $REJECTED = 4
        $app_id = Int(DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Token sale"}).One("id"))
        if $app_id == 0 {
            warning LangRes("@1app_not_found", "en")
        }
        $currentRole = getRoleId("ts_role_sale_seller")
        if !RoleAccess($currentRole) {
            warning "this action allowed only for role id #" + $currentRole
        }

        $sale = DBFind("ts_sales").Where({"id": $SaleId}).Row()
        if !$sale{
            warning "sale not found"
        }
    }

    action {
        @1NotificationsClose("NotificId", $NotificId)
        var s transfer map
        s["seller_account"] = $account_id
        s["seller_transferred_at"] = $time
        s["status"] = $FINISHED
        DBUpdate("ts_sales", Int($sale["id"]), s)

        @1TokensSend("Recipient,Amount", $sale["buyer_account"], Money($sale["amount_apl"]))
    }
}