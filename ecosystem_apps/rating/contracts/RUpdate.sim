contract RUpdate {
    data {
        Member string
        Amount int
        EventType int "optional"
        EventId int
        LastEvent string "optional"
    }

    func updateRating(){
        var accruals array total money offset limit i accrualsLen int acc map
        limit = 250
        while true {
            accruals = DBFind("r_accruals").Where({member:$Member}).Limit(limit).Offset(offset)
            accrualsLen = Len(accruals)
            if accrualsLen == 0 {
                break
            }
            i = 0
            while i < accrualsLen {
                acc = accruals[i]
                total = total + Money(acc["amount"])
                i = i + 1
            }
            offset = offset + limit
        }
        var rating m map
        rating = DBFind("r_ratings").Where({member:$Member}).Row()
        m = {amount:total, updated_at:$block_time}
        if rating {
            if Money(rating["amount"]) != total {
                DBUpdate("r_ratings", Int(rating["id"]), m)
            }
        } else {
            m["member"] = $Member
            DBInsert("r_ratings", m)
        }
    }

    conditions{
        var adminId int
        adminId = Int(EcosysParam("role_admin"))
        if !RoleAccess(adminId){
            warning LangRes("@1access_denied", "en")
        }

        if $Amount == 0{
            warning "Invalid amount"
        }

        var id int
        id = AddressToId($Member)
        if !DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:id}).Row(){
            warning "Wallet not founded"
        }

        if $LastEvent == "true" {
            var event map
            event = DBFind("e_events").WhereId($EventId).Row()
            if !event{
                warning "Event not founded"
            }
            $EventType = Int(event["type"])
        }
    }

    action {
        var m map manager string
        manager = IdToAddress($key_id)
        m = {member:$Member, amount:$Amount, manager:manager, created_at:$block_time, event_id:$EventId, event_type:$EventType}

        DBInsert("r_accruals", m)
        updateRating()
    }
}