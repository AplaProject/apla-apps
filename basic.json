{
    "name": "Basic",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "notifications_roles",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1notifications_list).(this_table, @1notifications)\r\nInclude(@1pager_header)\r\n\r\nIf(#role_id#>0){\r\n    DBFind(@1roles).Where({\"id\": #role_id#}).Vars(my)\r\n    SetTitle($@1role_notifics$ (#my_role_name#))\r\n}.Else{\r\n    SetTitle($@1role_notifics$)\r\n}\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# == 1)){\r\n    DBFind(@1ecosystems).Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $@1broadcast$, Page: @1notifications_broadcast, Icon: icon-plus).Popup(Header: $@1notifications_broadcast$, Width: \"50\")\r\n    }\r\n}\r\nAddToolButton(Title: $@1send$, Page: @1notifications_roles_send, Icon: icon-plus).Popup(Header: $@1send$, Width: \"50\")\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"recipient->role_id\": #role_id#, {\"$and\": [{\"notification->type\":2}, {\"$or\": [{\"sender->member_name\":{\"$ilike\": \"#search#\"}}, {\"sender->role_name\":{\"$ilike\": \"#search#\"}}]}]}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"notification->type\": 2, \"recipient->role_id\": #role_id#})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1sender)).(page_par, #type#)\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order([{closed:\"1\"},{id:\"-1\"}]).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,notification->popup,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\r\n    If(#closed# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #recipient.role_name#\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_arrow){\r\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\r\n}.Custom(_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sender.member_id#\"){#sender.member_name#}\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\r\n    }\r\n}.Custom(_icon){\r\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(_page){\r\n    If(#notification.popup#==1){\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n    }.Else{\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# h6 m0){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n    Div(#style_text# h6 m0){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\r\n}.Custom(_processing){\r\n    Div(Class: #style_text# h6 m0){\r\n        If(#date_start_processing# == NULL){\r\n           $@1not_started$\r\n        }.Else{\r\n            Span(LangRes(@1started_by) #processing_info.member_name#)\r\n            Div(){DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#){\r\n            If(#date_start_processing# == NULL){\r\n                LangRes(@1active)\r\n            }.Else{\r\n                LangRes(@1processing)\r\n            }\r\n        }\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(@1closed))\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(#closed# == 0){\r\n            If(#date_start_processing# == NULL){\r\n                Button(Class: btn btn-default fa fa-play, Contract: @1NotificationsProcess, Params: \"notific_id=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.Else{\r\n                Button(Class: btn btn-default fa fa-trash, Contract: @1NotificationsClose, Params: \"notific_id=#id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton:$@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1icon$=_icon,$@1page$=_page,$@1sender$=_sender,=custom_arrow,$@1recipient$=_recipient,$@1processing$=_processing,$@1sent$ / $@1closed$=_date,$@1status$=_status,=_actions\")\r\n            }.ElseIf(#role_id#>0){\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1role_notifics$ $@1not_founded$\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1role_not_selected$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_single",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1notifications_list).(this_table, @1notifications)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1personal_notifics$\")\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# == 1)){\r\n    DBFind(@1ecosystems).Count(ecos_count)\r\n    If(#ecos_count#>1){\r\n        AddToolButton(Title: $@1broadcast$, Page: @1notifications_broadcast, Icon: icon-plus).Popup(Header: $@1notifications_broadcast$, Width: \"50\")\r\n    }\r\n}\r\nAddToolButton(Title: $@1send$, Page: @1notifications_single_send, Icon: icon-plus).Popup(Header: $@1send$, Width: \"50\")\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"recipient->member_id\": #key_id#, {\"$and\": [{\"notification->type\":1}, {\"$or\": [{\"sender->member_name\":{\"$ilike\": \"#search#\"}}, {\"sender->role_name\":{\"$ilike\": \"#search#\"}}]}]}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"notification->type\": 1, \"recipient->member_id\": #key_id#})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1sender)).(page_par, #type#)\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order([{closed:\"1\"}, {id:\"-1\"}]).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,notification->popup,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\r\n    If(#closed# == 0){\r\n        SetVar(Name: style_text, Value: \"text-normal\")\r\n        SetVar(Name: style_link, Value: \"text-primary\")\r\n    }.Else{\r\n        SetVar(Name: style_text, Value: \"text-muted\")\r\n        SetVar(Name: style_link, Value: \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(custom_recipient){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#recipient.member_id#\"){\r\n        If(#recipient.image_id#>0){\r\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#recipient.member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#recipient.member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(custom_arrow){\r\n    Em(Class: fa fa-long-arrow-right fa-1x #style_text#)\r\n}.Custom(custom_sender){\r\n    If(#sender.type#==1){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#sender.member_id#\"){\r\n            Span(Body: #sender.member_name#)\r\n        }\r\n    }\r\n    If(#sender.type#==2){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\r\n            Span(Body: #sender.role_name#)\r\n        }\r\n    }\r\n}.Custom(custom_icon){\r\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\r\n}.Custom(custom_page){\r\n    If(#notification.popup#==1){\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n    }.Else{\r\n        Button(Class: btn-link h5 text-bold m0, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n            Span(Class: #style_link#, Body: #page_name#)\r\n        }\r\n    }\r\n}.Custom(custom_date){\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(custom_status){\r\n    If(#closed# == 0){\r\n        Span(Class: #style_text#, Body: LangRes(@1active))\r\n    }.Else{\r\n        Span(Class: #style_text#, Body: LangRes(@1closed))\r\n    }\r\n}.Custom(actions){\r\n    Div(pull-right){\r\n        If(#closed# == 0){\r\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"notific_id=#id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1icon$=custom_icon,$@1page$=custom_page,$@1sender$=custom_sender,=custom_arrow,$@1recipient$=custom_recipient,$@1sent$ / $@1closed$=custom_date,$@1status$=custom_status,=actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1personal_notifics$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "profile",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    If(Or(#v_key_id#>0,#v_key_id#<0)){\r\n    }.Else{\r\n        SetVar(v_key_id,#key_id#)\r\n    }\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_key_id#}).Columns(\"id,image_id,member_name,member_info->information\").Vars(member)\r\n\r\n    If(Or(#member_id#>0,#member_id#<0)){\r\n        SetVar(member_name, #member_member_name#).(member_info, #member_member_info_information#)\r\n    }.Else{\r\n        SetVar(member_name,).(member_info,)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(@1user_info)\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(col-md-12 text-center){\r\n                            If(Or(#member_id#>0,#member_id#<0)){\r\n                                If(#member_id# == #key_id#){\r\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\r\n                                        If(#member_image_id#>0){\r\n                                            Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-5x text-primary)\r\n                                        }\r\n                                        Div(m0 h4 text-bold){\r\n                                            #member_name#\r\n                                            If(#role_id# > 0){\r\n                                                DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #role_id#}).Columns(\"role_name\").Vars(role)\r\n                                                Span(Body: \" (#role_role_name#)\")\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }.Else{\r\n                                    If(#member_image_id#>0){\r\n                                        Image(Src: Binary().ById(#member_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#member_name#}\r\n                                }\r\n                                Div(Class: h5 text-muted m0, Body: #member_info#)\r\n                            }.Else{\r\n                                If(#v_key_id# == #key_id#){\r\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\r\n                                        Div(Class: h4 m0, Body: LangRes(@1editing_profile))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(col-md-12 text-center){\r\n                            Div(text-bold m0 h5, Body: LangRes(@1wallet_address))\r\n                            Span(Class: h5, Body: Address(#v_key_id#))\r\n                        }\r\n                    }\r\n                    If(#v_key_id# == #key_id#){\r\n                        Div(row){\r\n                            Div(col-md-12 mt text-center){\r\n                                DBFind(@1keys).Where({\"ecosystem\": 1, \"id\": #v_key_id#}).Vars(apl)\r\n                                If(#ecosystem_id#>1){\r\n                                    DBFind(\"@1keys\").Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_key_id#}).Vars(\"tokens\")\r\n                                    DBFind(\"@1ecosystems\").Where({\"id\": #ecosystem_id#}).Vars(\"custom\")\r\n                                }\r\n                                Div(text-bold m0 h5, Body: LangRes(@1balance))\r\n                                Div(Class: m0 h5, Body: Money(#apl_amount#) APLA)\r\n                                If(And(#ecosystem_id# > 1, #custom_token_title# != \"\")){\r\n                                    Div(Class: m0 h5, Body: Money(#tokens_amount#) #custom_token_title#)\r\n                                }\r\n                                If(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n                                    Button(Class: btn-xs btn-link, Page: @1profile_transactions, Body: LangRes(@1transactions_history))\r\n                                    Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"back_page=@1profile_view\", Body: LangRes(@1tokens_send)).Popup(Header: $@1tokens_send$, Width: \"50\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center mt-lg){\r\n                        Div(text-bold m0 h5, Body: LangRes(@1roles))\r\n                        DBFind(@1roles_participants).Where({\"ecosystem\": #ecosystem_id#, \"member->member_id\": #v_key_id#, \"deleted\": 0}).Columns(\"id\").Vars(check)\r\n                        If(#check_id#>0){\r\n                            DBFind(@1roles_participants,src_roles).Where({\"ecosystem\": #ecosystem_id#, \"member->member_id\":#v_key_id#, \"deleted\": 0}).Columns(\"role->id,role->name\").Order(\"id\")\r\n                            ForList(src_roles){\r\n                                Span(){\r\n                                    LinkPage(Class: h6 m0 text-primary, Page: @1roles_view, PageParams: \"v_role_id=#role.id#\", Body: \"#role.name#\")\r\n                                }.Style(margin-right: 5px; margin-left: 5px;)\r\n                            }\r\n                        }.Else{\r\n                            Span(LangRes(@1role_none))\r\n                        }\r\n                        If(#v_key_id# == #key_id#){\r\n                            SetVar(founder_account, EcosysParam(\"founder_account\"))\r\n                            If(#founder_account# != #key_id#){\r\n                                Div(row){\r\n                                    Div(col-md-12 text-center){\r\n                                        Button(Class: btn-xs btn-link, Page: @1roles_request, Body: LangRes(@1request)).Popup(Header: $@1request_to_role$, Width: \"50\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "voting_charts",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(row){\r\n    If(#instance_voting_count_type_voters# == 1){\r\n        Div(col-md-2)\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1voted$)\r\n            SetVar(p1, Calculate(Exp:#instance_progress_number_voters#*100/#instance_progress_number_participants#, Type:int, Prec:0))\r\n            Div(Class: c100 center p#p1# orange){\r\n                Span(Body:#instance_progress_number_voters# / #instance_progress_number_participants#)\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-4){\r\n            If(Or(#type_decision#==3,#type_decision#==4)){\r\n                Div(Class: text-center t4, Body: $@1result$)\r\n                If(#subject_results_percent_accepted# == \"\"){\r\n                    SetVar(subject_results_percent_accepted,0)\r\n                }\r\n                SetVar(p1, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:0))\r\n                SetVar(p2, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:2))\r\n                Div(Class: c100 center p#p1# green){\r\n                    Span(Body: #p2#%)\r\n                    Div(Class: slice){\r\n                        Div(Class: bar)\r\n                        Div(Class: fill)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1progress$)\r\n            Div(Class: c100 center p#instance_progress_percent_success# orange){\r\n                Span(Body: #instance_progress_percent_success#%)\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2)\r\n    }.Else{\r\n        Div(col-md-2)\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1voted$)\r\n            Div(Class: c100 center p#instance_progress_percent_voters# orange){\r\n                Span(Body:#instance_progress_percent_voters#% (#instance_progress_number_voters#))\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-4){\r\n            If(Or(#type_decision#==3,#type_decision#==4)){\r\n                Div(Class: text-center t4, Body: $@1result$)\r\n                If(#subject_results_percent_accepted# == \"\"){\r\n                    SetVar(subject_results_percent_accepted,0)\r\n                }\r\n                SetVar(p1, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:0))\r\n                SetVar(p2, Calculate(Exp:\"#subject_results_percent_accepted#\", Type:float, Prec:2))\r\n                Div(Class: c100 center p#p1# green){\r\n                    Span(Body: #p2#%)\r\n                    Div(Class: slice){\r\n                        Div(Class: bar)\r\n                        Div(Class: fill)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2){\r\n            Div(Class: text-center t4, Body: $@1progress$)\r\n            Div(Class: c100 center p#instance_progress_percent_success# orange){\r\n                Span(Body: #instance_progress_percent_success#%)\r\n                Div(Class: slice){\r\n                    Div(Class: bar)\r\n                    Div(Class: fill)\r\n                }\r\n            }\r\n        }\r\n        Div(col-md-2)\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n    .rect-auto,\r\n    .c100.p51 .slice,\r\n    .c100.p52 .slice,\r\n    .c100.p53 .slice,\r\n    .c100.p54 .slice,\r\n    .c100.p55 .slice,\r\n    .c100.p56 .slice,\r\n    .c100.p57 .slice,\r\n    .c100.p58 .slice,\r\n    .c100.p59 .slice,\r\n    .c100.p60 .slice,\r\n    .c100.p61 .slice,\r\n    .c100.p62 .slice,\r\n    .c100.p63 .slice,\r\n    .c100.p64 .slice,\r\n    .c100.p65 .slice,\r\n    .c100.p66 .slice,\r\n    .c100.p67 .slice,\r\n    .c100.p68 .slice,\r\n    .c100.p69 .slice,\r\n    .c100.p70 .slice,\r\n    .c100.p71 .slice,\r\n    .c100.p72 .slice,\r\n    .c100.p73 .slice,\r\n    .c100.p74 .slice,\r\n    .c100.p75 .slice,\r\n    .c100.p76 .slice,\r\n    .c100.p77 .slice,\r\n    .c100.p78 .slice,\r\n    .c100.p79 .slice,\r\n    .c100.p80 .slice,\r\n    .c100.p81 .slice,\r\n    .c100.p82 .slice,\r\n    .c100.p83 .slice,\r\n    .c100.p84 .slice,\r\n    .c100.p85 .slice,\r\n    .c100.p86 .slice,\r\n    .c100.p87 .slice,\r\n    .c100.p88 .slice,\r\n    .c100.p89 .slice,\r\n    .c100.p90 .slice,\r\n    .c100.p91 .slice,\r\n    .c100.p92 .slice,\r\n    .c100.p93 .slice,\r\n    .c100.p94 .slice,\r\n    .c100.p95 .slice,\r\n    .c100.p96 .slice,\r\n    .c100.p97 .slice,\r\n    .c100.p98 .slice,\r\n    .c100.p99 .slice,\r\n    .c100.p100 .slice {\r\n    clip: rect(auto, auto, auto, auto);\r\n    }\r\n    .pie,\r\n    .c100 .bar,\r\n    .c100.p51 .fill,\r\n    .c100.p52 .fill,\r\n    .c100.p53 .fill,\r\n    .c100.p54 .fill,\r\n    .c100.p55 .fill,\r\n    .c100.p56 .fill,\r\n    .c100.p57 .fill,\r\n    .c100.p58 .fill,\r\n    .c100.p59 .fill,\r\n    .c100.p60 .fill,\r\n    .c100.p61 .fill,\r\n    .c100.p62 .fill,\r\n    .c100.p63 .fill,\r\n    .c100.p64 .fill,\r\n    .c100.p65 .fill,\r\n    .c100.p66 .fill,\r\n    .c100.p67 .fill,\r\n    .c100.p68 .fill,\r\n    .c100.p69 .fill,\r\n    .c100.p70 .fill,\r\n    .c100.p71 .fill,\r\n    .c100.p72 .fill,\r\n    .c100.p73 .fill,\r\n    .c100.p74 .fill,\r\n    .c100.p75 .fill,\r\n    .c100.p76 .fill,\r\n    .c100.p77 .fill,\r\n    .c100.p78 .fill,\r\n    .c100.p79 .fill,\r\n    .c100.p80 .fill,\r\n    .c100.p81 .fill,\r\n    .c100.p82 .fill,\r\n    .c100.p83 .fill,\r\n    .c100.p84 .fill,\r\n    .c100.p85 .fill,\r\n    .c100.p86 .fill,\r\n    .c100.p87 .fill,\r\n    .c100.p88 .fill,\r\n    .c100.p89 .fill,\r\n    .c100.p90 .fill,\r\n    .c100.p91 .fill,\r\n    .c100.p92 .fill,\r\n    .c100.p93 .fill,\r\n    .c100.p94 .fill,\r\n    .c100.p95 .fill,\r\n    .c100.p96 .fill,\r\n    .c100.p97 .fill,\r\n    .c100.p98 .fill,\r\n    .c100.p99 .fill,\r\n    .c100.p100 .fill {\r\n        position: absolute;\r\n        border: 0.08em solid #307bbb;\r\n        width: 0.84em;\r\n        height: 0.84em;\r\n        clip: rect(0em, 0.5em, 1em, 0em);\r\n        border-radius: 50%;\r\n        -webkit-transform: rotate(0deg);\r\n        -moz-transform: rotate(0deg);\r\n        -ms-transform: rotate(0deg);\r\n        -o-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    .pie-fill,\r\n    .c100.p51 .bar:after,\r\n    .c100.p51 .fill,\r\n    .c100.p52 .bar:after,\r\n    .c100.p52 .fill,\r\n    .c100.p53 .bar:after,\r\n    .c100.p53 .fill,\r\n    .c100.p54 .bar:after,\r\n    .c100.p54 .fill,\r\n    .c100.p55 .bar:after,\r\n    .c100.p55 .fill,\r\n    .c100.p56 .bar:after,\r\n    .c100.p56 .fill,\r\n    .c100.p57 .bar:after,\r\n    .c100.p57 .fill,\r\n    .c100.p58 .bar:after,\r\n    .c100.p58 .fill,\r\n    .c100.p59 .bar:after,\r\n    .c100.p59 .fill,\r\n    .c100.p60 .bar:after,\r\n    .c100.p60 .fill,\r\n    .c100.p61 .bar:after,\r\n    .c100.p61 .fill,\r\n    .c100.p62 .bar:after,\r\n    .c100.p62 .fill,\r\n    .c100.p63 .bar:after,\r\n    .c100.p63 .fill,\r\n    .c100.p64 .bar:after,\r\n    .c100.p64 .fill,\r\n    .c100.p65 .bar:after,\r\n    .c100.p65 .fill,\r\n    .c100.p66 .bar:after,\r\n    .c100.p66 .fill,\r\n    .c100.p67 .bar:after,\r\n    .c100.p67 .fill,\r\n    .c100.p68 .bar:after,\r\n    .c100.p68 .fill,\r\n    .c100.p69 .bar:after,\r\n    .c100.p69 .fill,\r\n    .c100.p70 .bar:after,\r\n    .c100.p70 .fill,\r\n    .c100.p71 .bar:after,\r\n    .c100.p71 .fill,\r\n    .c100.p72 .bar:after,\r\n    .c100.p72 .fill,\r\n    .c100.p73 .bar:after,\r\n    .c100.p73 .fill,\r\n    .c100.p74 .bar:after,\r\n    .c100.p74 .fill,\r\n    .c100.p75 .bar:after,\r\n    .c100.p75 .fill,\r\n    .c100.p76 .bar:after,\r\n    .c100.p76 .fill,\r\n    .c100.p77 .bar:after,\r\n    .c100.p77 .fill,\r\n    .c100.p78 .bar:after,\r\n    .c100.p78 .fill,\r\n    .c100.p79 .bar:after,\r\n    .c100.p79 .fill,\r\n    .c100.p80 .bar:after,\r\n    .c100.p80 .fill,\r\n    .c100.p81 .bar:after,\r\n    .c100.p81 .fill,\r\n    .c100.p82 .bar:after,\r\n    .c100.p82 .fill,\r\n    .c100.p83 .bar:after,\r\n    .c100.p83 .fill,\r\n    .c100.p84 .bar:after,\r\n    .c100.p84 .fill,\r\n    .c100.p85 .bar:after,\r\n    .c100.p85 .fill,\r\n    .c100.p86 .bar:after,\r\n    .c100.p86 .fill,\r\n    .c100.p87 .bar:after,\r\n    .c100.p87 .fill,\r\n    .c100.p88 .bar:after,\r\n    .c100.p88 .fill,\r\n    .c100.p89 .bar:after,\r\n    .c100.p89 .fill,\r\n    .c100.p90 .bar:after,\r\n    .c100.p90 .fill,\r\n    .c100.p91 .bar:after,\r\n    .c100.p91 .fill,\r\n    .c100.p92 .bar:after,\r\n    .c100.p92 .fill,\r\n    .c100.p93 .bar:after,\r\n    .c100.p93 .fill,\r\n    .c100.p94 .bar:after,\r\n    .c100.p94 .fill,\r\n    .c100.p95 .bar:after,\r\n    .c100.p95 .fill,\r\n    .c100.p96 .bar:after,\r\n    .c100.p96 .fill,\r\n    .c100.p97 .bar:after,\r\n    .c100.p97 .fill,\r\n    .c100.p98 .bar:after,\r\n    .c100.p98 .fill,\r\n    .c100.p99 .bar:after,\r\n    .c100.p99 .fill,\r\n    .c100.p100 .bar:after,\r\n    .c100.p100 .fill {\r\n    -webkit-transform: rotate(180deg);\r\n    -moz-transform: rotate(180deg);\r\n    -ms-transform: rotate(180deg);\r\n    -o-transform: rotate(180deg);\r\n    transform: rotate(180deg);\r\n    }\r\n    .c100 {\r\n        position: relative;\r\n        font-size: 100px;\r\n        width: 1em;\r\n        height: 1em;\r\n        border-radius: 50%;\r\n        float: left;\r\n        margin: 0 0.1em 0.1em 0;\r\n        background-color: #cccccc;\r\n    }\r\n    .c100 *,\r\n    .c100 *:before,\r\n    .c100 *:after {\r\n        -webkit-box-sizing: content-box;\r\n        -moz-box-sizing: content-box;\r\n        box-sizing: content-box;\r\n    }\r\n    .c100.center {\r\n        float: none;\r\n        margin: 0 auto;\r\n    }\r\n    .c100.big {\r\n        font-size: 240px;\r\n    }\r\n    .c100.small {\r\n        font-size: 80px;\r\n    }\r\n    .c100 > span {\r\n        position: absolute;\r\n        width: 100%;\r\n        z-index: 1;\r\n        left: 0;\r\n        top: 0;\r\n        width: 5em;\r\n        line-height: 5em;\r\n        font-size: 0.2em;\r\n        color: #cccccc;\r\n        display: block;\r\n        text-align: center;\r\n        white-space: nowrap;\r\n        -webkit-transition-property: all;\r\n        -moz-transition-property: all;\r\n        -o-transition-property: all;\r\n        transition-property: all;\r\n        -webkit-transition-duration: 0.2s;\r\n        -moz-transition-duration: 0.2s;\r\n        -o-transition-duration: 0.2s;\r\n        transition-duration: 0.2s;\r\n        -webkit-transition-timing-function: ease-out;\r\n        -moz-transition-timing-function: ease-out;\r\n        -o-transition-timing-function: ease-out;\r\n        transition-timing-function: ease-out;\r\n    }\r\n    .c100:after {\r\n        position: absolute;\r\n        top: 0.08em;\r\n        left: 0.08em;\r\n        display: block;\r\n        content: \" \";\r\n        border-radius: 50%;\r\n        background-color: #f5f5f5;\r\n        width: 0.84em;\r\n        height: 0.84em;\r\n        -webkit-transition-property: all;\r\n        -moz-transition-property: all;\r\n        -o-transition-property: all;\r\n        transition-property: all;\r\n        -webkit-transition-duration: 0.2s;\r\n        -moz-transition-duration: 0.2s;\r\n        -o-transition-duration: 0.2s;\r\n        transition-duration: 0.2s;\r\n        -webkit-transition-timing-function: ease-in;\r\n        -moz-transition-timing-function: ease-in;\r\n        -o-transition-timing-function: ease-in;\r\n        transition-timing-function: ease-in;\r\n    }\r\n    .c100 .slice {\r\n        position: absolute;\r\n        width: 1em;\r\n        height: 1em;\r\n        clip: rect(0em, 1em, 1em, 0.5em);\r\n    }\r\n    .c100.p1 .bar {\r\n        -webkit-transform: rotate(3.6deg);\r\n        -moz-transform: rotate(3.6deg);\r\n        -ms-transform: rotate(3.6deg);\r\n        -o-transform: rotate(3.6deg);\r\n        transform: rotate(3.6deg);\r\n    }\r\n    .c100.p2 .bar {\r\n        -webkit-transform: rotate(7.2deg);\r\n        -moz-transform: rotate(7.2deg);\r\n        -ms-transform: rotate(7.2deg);\r\n        -o-transform: rotate(7.2deg);\r\n        transform: rotate(7.2deg);\r\n    }\r\n    .c100.p3 .bar {\r\n        -webkit-transform: rotate(10.8deg);\r\n        -moz-transform: rotate(10.8deg);\r\n        -ms-transform: rotate(10.8deg);\r\n        -o-transform: rotate(10.8deg);\r\n        transform: rotate(10.8deg);\r\n    }\r\n    .c100.p4 .bar {\r\n        -webkit-transform: rotate(14.4deg);\r\n        -moz-transform: rotate(14.4deg);\r\n        -ms-transform: rotate(14.4deg);\r\n        -o-transform: rotate(14.4deg);\r\n        transform: rotate(14.4deg);\r\n    }\r\n    .c100.p5 .bar {\r\n        -webkit-transform: rotate(18deg);\r\n        -moz-transform: rotate(18deg);\r\n        -ms-transform: rotate(18deg);\r\n        -o-transform: rotate(18deg);\r\n        transform: rotate(18deg);\r\n    }\r\n    .c100.p6 .bar {\r\n        -webkit-transform: rotate(21.6deg);\r\n        -moz-transform: rotate(21.6deg);\r\n        -ms-transform: rotate(21.6deg);\r\n        -o-transform: rotate(21.6deg);\r\n        transform: rotate(21.6deg);\r\n    }\r\n    .c100.p7 .bar {\r\n        -webkit-transform: rotate(25.2deg);\r\n        -moz-transform: rotate(25.2deg);\r\n        -ms-transform: rotate(25.2deg);\r\n        -o-transform: rotate(25.2deg);\r\n        transform: rotate(25.2deg);\r\n    }\r\n    .c100.p8 .bar {\r\n        -webkit-transform: rotate(28.8deg);\r\n        -moz-transform: rotate(28.8deg);\r\n        -ms-transform: rotate(28.8deg);\r\n        -o-transform: rotate(28.8deg);\r\n        transform: rotate(28.8deg);\r\n    }\r\n    .c100.p9 .bar {\r\n        -webkit-transform: rotate(32.4deg);\r\n        -moz-transform: rotate(32.4deg);\r\n        -ms-transform: rotate(32.4deg);\r\n        -o-transform: rotate(32.4deg);\r\n        transform: rotate(32.4deg);\r\n    }\r\n    .c100.p10 .bar {\r\n        -webkit-transform: rotate(36deg);\r\n        -moz-transform: rotate(36deg);\r\n        -ms-transform: rotate(36deg);\r\n        -o-transform: rotate(36deg);\r\n        transform: rotate(36deg);\r\n    }\r\n    .c100.p11 .bar {\r\n        -webkit-transform: rotate(39.6deg);\r\n        -moz-transform: rotate(39.6deg);\r\n        -ms-transform: rotate(39.6deg);\r\n        -o-transform: rotate(39.6deg);\r\n        transform: rotate(39.6deg);\r\n    }\r\n    .c100.p12 .bar {\r\n        -webkit-transform: rotate(43.2deg);\r\n        -moz-transform: rotate(43.2deg);\r\n        -ms-transform: rotate(43.2deg);\r\n        -o-transform: rotate(43.2deg);\r\n        transform: rotate(43.2deg);\r\n    }\r\n    .c100.p13 .bar {\r\n        -webkit-transform: rotate(46.800000000000004deg);\r\n        -moz-transform: rotate(46.800000000000004deg);\r\n        -ms-transform: rotate(46.800000000000004deg);\r\n        -o-transform: rotate(46.800000000000004deg);\r\n        transform: rotate(46.800000000000004deg);\r\n    }\r\n    .c100.p14 .bar {\r\n        -webkit-transform: rotate(50.4deg);\r\n        -moz-transform: rotate(50.4deg);\r\n        -ms-transform: rotate(50.4deg);\r\n        -o-transform: rotate(50.4deg);\r\n        transform: rotate(50.4deg);\r\n    }\r\n        .c100.p15 .bar {\r\n        -webkit-transform: rotate(54deg);\r\n        -moz-transform: rotate(54deg);\r\n        -ms-transform: rotate(54deg);\r\n        -o-transform: rotate(54deg);\r\n        transform: rotate(54deg);\r\n    }\r\n        .c100.p16 .bar {\r\n        -webkit-transform: rotate(57.6deg);\r\n        -moz-transform: rotate(57.6deg);\r\n        -ms-transform: rotate(57.6deg);\r\n        -o-transform: rotate(57.6deg);\r\n        transform: rotate(57.6deg);\r\n    }\r\n        .c100.p17 .bar {\r\n        -webkit-transform: rotate(61.2deg);\r\n        -moz-transform: rotate(61.2deg);\r\n        -ms-transform: rotate(61.2deg);\r\n        -o-transform: rotate(61.2deg);\r\n        transform: rotate(61.2deg);\r\n    }\r\n    .c100.p18 .bar {\r\n        -webkit-transform: rotate(64.8deg);\r\n        -moz-transform: rotate(64.8deg);\r\n        -ms-transform: rotate(64.8deg);\r\n        -o-transform: rotate(64.8deg);\r\n        transform: rotate(64.8deg);\r\n    }\r\n        .c100.p19 .bar {\r\n        -webkit-transform: rotate(68.4deg);\r\n        -moz-transform: rotate(68.4deg);\r\n        -ms-transform: rotate(68.4deg);\r\n        -o-transform: rotate(68.4deg);\r\n        transform: rotate(68.4deg);\r\n    }\r\n    .c100.p20 .bar {\r\n        -webkit-transform: rotate(72deg);\r\n        -moz-transform: rotate(72deg);\r\n        -ms-transform: rotate(72deg);\r\n        -o-transform: rotate(72deg);\r\n        transform: rotate(72deg);\r\n    }\r\n    .c100.p21 .bar {\r\n        -webkit-transform: rotate(75.60000000000001deg);\r\n        -moz-transform: rotate(75.60000000000001deg);\r\n        -ms-transform: rotate(75.60000000000001deg);\r\n        -o-transform: rotate(75.60000000000001deg);\r\n        transform: rotate(75.60000000000001deg);\r\n    }\r\n    .c100.p22 .bar {\r\n        -webkit-transform: rotate(79.2deg);\r\n        -moz-transform: rotate(79.2deg);\r\n        -ms-transform: rotate(79.2deg);\r\n        -o-transform: rotate(79.2deg);\r\n        transform: rotate(79.2deg);\r\n    }\r\n    .c100.p23 .bar {\r\n        -webkit-transform: rotate(82.8deg);\r\n        -moz-transform: rotate(82.8deg);\r\n        -ms-transform: rotate(82.8deg);\r\n        -o-transform: rotate(82.8deg);\r\n        transform: rotate(82.8deg);\r\n    }\r\n    .c100.p24 .bar {\r\n        -webkit-transform: rotate(86.4deg);\r\n        -moz-transform: rotate(86.4deg);\r\n        -ms-transform: rotate(86.4deg);\r\n        -o-transform: rotate(86.4deg);\r\n        transform: rotate(86.4deg);\r\n    }\r\n    .c100.p25 .bar {\r\n        -webkit-transform: rotate(90deg);\r\n        -moz-transform: rotate(90deg);\r\n        -ms-transform: rotate(90deg);\r\n        -o-transform: rotate(90deg);\r\n        transform: rotate(90deg);\r\n    }\r\n    .c100.p26 .bar {\r\n        -webkit-transform: rotate(93.60000000000001deg);\r\n        -moz-transform: rotate(93.60000000000001deg);\r\n        -ms-transform: rotate(93.60000000000001deg);\r\n        -o-transform: rotate(93.60000000000001deg);\r\n        transform: rotate(93.60000000000001deg);\r\n    }\r\n    .c100.p27 .bar {\r\n        -webkit-transform: rotate(97.2deg);\r\n        -moz-transform: rotate(97.2deg);\r\n        -ms-transform: rotate(97.2deg);\r\n        -o-transform: rotate(97.2deg);\r\n        transform: rotate(97.2deg);\r\n    }\r\n    .c100.p28 .bar {\r\n        -webkit-transform: rotate(100.8deg);\r\n        -moz-transform: rotate(100.8deg);\r\n        -ms-transform: rotate(100.8deg);\r\n        -o-transform: rotate(100.8deg);\r\n        transform: rotate(100.8deg);\r\n    }\r\n    .c100.p29 .bar {\r\n        -webkit-transform: rotate(104.4deg);\r\n        -moz-transform: rotate(104.4deg);\r\n        -ms-transform: rotate(104.4deg);\r\n        -o-transform: rotate(104.4deg);\r\n        transform: rotate(104.4deg);\r\n    }\r\n    .c100.p30 .bar {\r\n        -webkit-transform: rotate(108deg);\r\n        -moz-transform: rotate(108deg);\r\n        -ms-transform: rotate(108deg);\r\n        -o-transform: rotate(108deg);\r\n        transform: rotate(108deg);\r\n    }\r\n    .c100.p31 .bar {\r\n        -webkit-transform: rotate(111.60000000000001deg);\r\n        -moz-transform: rotate(111.60000000000001deg);\r\n        -ms-transform: rotate(111.60000000000001deg);\r\n        -o-transform: rotate(111.60000000000001deg);\r\n        transform: rotate(111.60000000000001deg);\r\n    }\r\n    .c100.p32 .bar {\r\n        -webkit-transform: rotate(115.2deg);\r\n        -moz-transform: rotate(115.2deg);\r\n        -ms-transform: rotate(115.2deg);\r\n        -o-transform: rotate(115.2deg);\r\n        transform: rotate(115.2deg);\r\n    }\r\n    .c100.p33 .bar {\r\n        -webkit-transform: rotate(118.8deg);\r\n        -moz-transform: rotate(118.8deg);\r\n        -ms-transform: rotate(118.8deg);\r\n        -o-transform: rotate(118.8deg);\r\n        transform: rotate(118.8deg);\r\n    }\r\n    .c100.p34 .bar {\r\n        -webkit-transform: rotate(122.4deg);\r\n        -moz-transform: rotate(122.4deg);\r\n        -ms-transform: rotate(122.4deg);\r\n        -o-transform: rotate(122.4deg);\r\n        transform: rotate(122.4deg);\r\n    }\r\n    .c100.p35 .bar {\r\n        -webkit-transform: rotate(126deg);\r\n        -moz-transform: rotate(126deg);\r\n        -ms-transform: rotate(126deg);\r\n        -o-transform: rotate(126deg);\r\n        transform: rotate(126deg);\r\n    }\r\n    .c100.p36 .bar {\r\n        -webkit-transform: rotate(129.6deg);\r\n        -moz-transform: rotate(129.6deg);\r\n        -ms-transform: rotate(129.6deg);\r\n        -o-transform: rotate(129.6deg);\r\n        transform: rotate(129.6deg);\r\n    }\r\n    .c100.p37 .bar {\r\n        -webkit-transform: rotate(133.20000000000002deg);\r\n        -moz-transform: rotate(133.20000000000002deg);\r\n        -ms-transform: rotate(133.20000000000002deg);\r\n        -o-transform: rotate(133.20000000000002deg);\r\n        transform: rotate(133.20000000000002deg);\r\n    }\r\n    .c100.p38 .bar {\r\n        -webkit-transform: rotate(136.8deg);\r\n        -moz-transform: rotate(136.8deg);\r\n        -ms-transform: rotate(136.8deg);\r\n        -o-transform: rotate(136.8deg);\r\n        transform: rotate(136.8deg);\r\n    }\r\n    .c100.p39 .bar {\r\n        -webkit-transform: rotate(140.4deg);\r\n        -moz-transform: rotate(140.4deg);\r\n        -ms-transform: rotate(140.4deg);\r\n        -o-transform: rotate(140.4deg);\r\n        transform: rotate(140.4deg);\r\n    }\r\n    .c100.p40 .bar {\r\n        -webkit-transform: rotate(144deg);\r\n        -moz-transform: rotate(144deg);\r\n        -ms-transform: rotate(144deg);\r\n        -o-transform: rotate(144deg);\r\n        transform: rotate(144deg);\r\n    }\r\n    .c100.p41 .bar {\r\n        -webkit-transform: rotate(147.6deg);\r\n        -moz-transform: rotate(147.6deg);\r\n        -ms-transform: rotate(147.6deg);\r\n        -o-transform: rotate(147.6deg);\r\n        transform: rotate(147.6deg);\r\n    }\r\n    .c100.p42 .bar {\r\n        -webkit-transform: rotate(151.20000000000002deg);\r\n        -moz-transform: rotate(151.20000000000002deg);\r\n        -ms-transform: rotate(151.20000000000002deg);\r\n        -o-transform: rotate(151.20000000000002deg);\r\n        transform: rotate(151.20000000000002deg);\r\n    }\r\n    .c100.p43 .bar {\r\n        -webkit-transform: rotate(154.8deg);\r\n        -moz-transform: rotate(154.8deg);\r\n        -ms-transform: rotate(154.8deg);\r\n        -o-transform: rotate(154.8deg);\r\n        transform: rotate(154.8deg);\r\n    }\r\n    .c100.p44 .bar {\r\n        -webkit-transform: rotate(158.4deg);\r\n        -moz-transform: rotate(158.4deg);\r\n        -ms-transform: rotate(158.4deg);\r\n        -o-transform: rotate(158.4deg);\r\n        transform: rotate(158.4deg);\r\n    }\r\n    .c100.p45 .bar {\r\n        -webkit-transform: rotate(162deg);\r\n        -moz-transform: rotate(162deg);\r\n        -ms-transform: rotate(162deg);\r\n        -o-transform: rotate(162deg);\r\n        transform: rotate(162deg);\r\n    }\r\n    .c100.p46 .bar {\r\n        -webkit-transform: rotate(165.6deg);\r\n        -moz-transform: rotate(165.6deg);\r\n        -ms-transform: rotate(165.6deg);\r\n        -o-transform: rotate(165.6deg);\r\n        transform: rotate(165.6deg);\r\n    }\r\n    .c100.p47 .bar {\r\n        -webkit-transform: rotate(169.20000000000002deg);\r\n        -moz-transform: rotate(169.20000000000002deg);\r\n        -ms-transform: rotate(169.20000000000002deg);\r\n        -o-transform: rotate(169.20000000000002deg);\r\n        transform: rotate(169.20000000000002deg);\r\n    }\r\n    .c100.p48 .bar {\r\n        -webkit-transform: rotate(172.8deg);\r\n        -moz-transform: rotate(172.8deg);\r\n        -ms-transform: rotate(172.8deg);\r\n        -o-transform: rotate(172.8deg);\r\n        transform: rotate(172.8deg);\r\n    }\r\n    .c100.p49 .bar {\r\n        -webkit-transform: rotate(176.4deg);\r\n        -moz-transform: rotate(176.4deg);\r\n        -ms-transform: rotate(176.4deg);\r\n        -o-transform: rotate(176.4deg);\r\n        transform: rotate(176.4deg);\r\n    }\r\n    .c100.p50 .bar {\r\n        -webkit-transform: rotate(180deg);\r\n        -moz-transform: rotate(180deg);\r\n        -ms-transform: rotate(180deg);\r\n        -o-transform: rotate(180deg);\r\n        transform: rotate(180deg);\r\n    }\r\n    .c100.p51 .bar {\r\n        -webkit-transform: rotate(183.6deg);\r\n        -moz-transform: rotate(183.6deg);\r\n        -ms-transform: rotate(183.6deg);\r\n        -o-transform: rotate(183.6deg);\r\n        transform: rotate(183.6deg);\r\n    }\r\n    .c100.p52 .bar {\r\n        -webkit-transform: rotate(187.20000000000002deg);\r\n        -moz-transform: rotate(187.20000000000002deg);\r\n        -ms-transform: rotate(187.20000000000002deg);\r\n        -o-transform: rotate(187.20000000000002deg);\r\n        transform: rotate(187.20000000000002deg);\r\n    }\r\n    .c100.p53 .bar {\r\n        -webkit-transform: rotate(190.8deg);\r\n        -moz-transform: rotate(190.8deg);\r\n        -ms-transform: rotate(190.8deg);\r\n        -o-transform: rotate(190.8deg);\r\n        transform: rotate(190.8deg);\r\n    }\r\n    .c100.p54 .bar {\r\n        -webkit-transform: rotate(194.4deg);\r\n        -moz-transform: rotate(194.4deg);\r\n        -ms-transform: rotate(194.4deg);\r\n        -o-transform: rotate(194.4deg);\r\n        transform: rotate(194.4deg);\r\n    }\r\n    .c100.p55 .bar {\r\n        -webkit-transform: rotate(198deg);\r\n        -moz-transform: rotate(198deg);\r\n        -ms-transform: rotate(198deg);\r\n        -o-transform: rotate(198deg);\r\n        transform: rotate(198deg);\r\n    }\r\n    .c100.p56 .bar {\r\n        -webkit-transform: rotate(201.6deg);\r\n        -moz-transform: rotate(201.6deg);\r\n        -ms-transform: rotate(201.6deg);\r\n        -o-transform: rotate(201.6deg);\r\n        transform: rotate(201.6deg);\r\n    }\r\n    .c100.p57 .bar {\r\n        -webkit-transform: rotate(205.20000000000002deg);\r\n        -moz-transform: rotate(205.20000000000002deg);\r\n        -ms-transform: rotate(205.20000000000002deg);\r\n        -o-transform: rotate(205.20000000000002deg);\r\n        transform: rotate(205.20000000000002deg);\r\n    }\r\n    .c100.p58 .bar {\r\n        -webkit-transform: rotate(208.8deg);\r\n        -moz-transform: rotate(208.8deg);\r\n        -ms-transform: rotate(208.8deg);\r\n        -o-transform: rotate(208.8deg);\r\n        transform: rotate(208.8deg);\r\n    }\r\n    .c100.p59 .bar {\r\n        -webkit-transform: rotate(212.4deg);\r\n        -moz-transform: rotate(212.4deg);\r\n        -ms-transform: rotate(212.4deg);\r\n        -o-transform: rotate(212.4deg);\r\n        transform: rotate(212.4deg);\r\n    }\r\n    .c100.p60 .bar {\r\n        -webkit-transform: rotate(216deg);\r\n        -moz-transform: rotate(216deg);\r\n        -ms-transform: rotate(216deg);\r\n        -o-transform: rotate(216deg);\r\n        transform: rotate(216deg);\r\n    }\r\n    .c100.p61 .bar {\r\n        -webkit-transform: rotate(219.6deg);\r\n        -moz-transform: rotate(219.6deg);\r\n        -ms-transform: rotate(219.6deg);\r\n        -o-transform: rotate(219.6deg);\r\n        transform: rotate(219.6deg);\r\n    }\r\n    .c100.p62 .bar {\r\n        -webkit-transform: rotate(223.20000000000002deg);\r\n        -moz-transform: rotate(223.20000000000002deg);\r\n        -ms-transform: rotate(223.20000000000002deg);\r\n        -o-transform: rotate(223.20000000000002deg);\r\n        transform: rotate(223.20000000000002deg);\r\n    }\r\n    .c100.p63 .bar {\r\n        -webkit-transform: rotate(226.8deg);\r\n        -moz-transform: rotate(226.8deg);\r\n        -ms-transform: rotate(226.8deg);\r\n        -o-transform: rotate(226.8deg);\r\n        transform: rotate(226.8deg);\r\n    }\r\n    .c100.p64 .bar {\r\n        -webkit-transform: rotate(230.4deg);\r\n        -moz-transform: rotate(230.4deg);\r\n        -ms-transform: rotate(230.4deg);\r\n        -o-transform: rotate(230.4deg);\r\n        transform: rotate(230.4deg);\r\n    }\r\n    .c100.p65 .bar {\r\n        -webkit-transform: rotate(234deg);\r\n        -moz-transform: rotate(234deg);\r\n        -ms-transform: rotate(234deg);\r\n        -o-transform: rotate(234deg);\r\n        transform: rotate(234deg);\r\n    }\r\n    .c100.p66 .bar {\r\n        -webkit-transform: rotate(237.6deg);\r\n        -moz-transform: rotate(237.6deg);\r\n        -ms-transform: rotate(237.6deg);\r\n        -o-transform: rotate(237.6deg);\r\n        transform: rotate(237.6deg);\r\n    }\r\n    .c100.p67 .bar {\r\n        -webkit-transform: rotate(241.20000000000002deg);\r\n        -moz-transform: rotate(241.20000000000002deg);\r\n        -ms-transform: rotate(241.20000000000002deg);\r\n        -o-transform: rotate(241.20000000000002deg);\r\n        transform: rotate(241.20000000000002deg);\r\n    }\r\n    .c100.p68 .bar {\r\n        -webkit-transform: rotate(244.8deg);\r\n        -moz-transform: rotate(244.8deg);\r\n        -ms-transform: rotate(244.8deg);\r\n        -o-transform: rotate(244.8deg);\r\n        transform: rotate(244.8deg);\r\n    }\r\n    .c100.p69 .bar {\r\n        -webkit-transform: rotate(248.4deg);\r\n        -moz-transform: rotate(248.4deg);\r\n        -ms-transform: rotate(248.4deg);\r\n        -o-transform: rotate(248.4deg);\r\n        transform: rotate(248.4deg);\r\n    }\r\n    .c100.p70 .bar {\r\n        -webkit-transform: rotate(252deg);\r\n        -moz-transform: rotate(252deg);\r\n        -ms-transform: rotate(252deg);\r\n        -o-transform: rotate(252deg);\r\n        transform: rotate(252deg);\r\n    }\r\n    .c100.p71 .bar {\r\n        -webkit-transform: rotate(255.6deg);\r\n        -moz-transform: rotate(255.6deg);\r\n        -ms-transform: rotate(255.6deg);\r\n        -o-transform: rotate(255.6deg);\r\n        transform: rotate(255.6deg);\r\n    }\r\n    .c100.p72 .bar {\r\n        -webkit-transform: rotate(259.2deg);\r\n        -moz-transform: rotate(259.2deg);\r\n        -ms-transform: rotate(259.2deg);\r\n        -o-transform: rotate(259.2deg);\r\n        transform: rotate(259.2deg);\r\n    }\r\n    .c100.p73 .bar {\r\n        -webkit-transform: rotate(262.8deg);\r\n        -moz-transform: rotate(262.8deg);\r\n        -ms-transform: rotate(262.8deg);\r\n        -o-transform: rotate(262.8deg);\r\n        transform: rotate(262.8deg);\r\n    }\r\n    .c100.p74 .bar {\r\n        -webkit-transform: rotate(266.40000000000003deg);\r\n        -moz-transform: rotate(266.40000000000003deg);\r\n        -ms-transform: rotate(266.40000000000003deg);\r\n        -o-transform: rotate(266.40000000000003deg);\r\n        transform: rotate(266.40000000000003deg);\r\n    }\r\n    .c100.p75 .bar {\r\n        -webkit-transform: rotate(270deg);\r\n        -moz-transform: rotate(270deg);\r\n        -ms-transform: rotate(270deg);\r\n        -o-transform: rotate(270deg);\r\n        transform: rotate(270deg);\r\n    }\r\n    .c100.p76 .bar {\r\n        -webkit-transform: rotate(273.6deg);\r\n        -moz-transform: rotate(273.6deg);\r\n        -ms-transform: rotate(273.6deg);\r\n        -o-transform: rotate(273.6deg);\r\n        transform: rotate(273.6deg);\r\n    }\r\n    .c100.p77 .bar {\r\n        -webkit-transform: rotate(277.2deg);\r\n        -moz-transform: rotate(277.2deg);\r\n        -ms-transform: rotate(277.2deg);\r\n        -o-transform: rotate(277.2deg);\r\n        transform: rotate(277.2deg);\r\n    }\r\n    .c100.p78 .bar {\r\n        -webkit-transform: rotate(280.8deg);\r\n        -moz-transform: rotate(280.8deg);\r\n        -ms-transform: rotate(280.8deg);\r\n        -o-transform: rotate(280.8deg);\r\n        transform: rotate(280.8deg);\r\n    }\r\n    .c100.p79 .bar {\r\n        -webkit-transform: rotate(284.40000000000003deg);\r\n        -moz-transform: rotate(284.40000000000003deg);\r\n        -ms-transform: rotate(284.40000000000003deg);\r\n        -o-transform: rotate(284.40000000000003deg);\r\n        transform: rotate(284.40000000000003deg);\r\n    }\r\n    .c100.p80 .bar {\r\n        -webkit-transform: rotate(288deg);\r\n        -moz-transform: rotate(288deg);\r\n        -ms-transform: rotate(288deg);\r\n        -o-transform: rotate(288deg);\r\n        transform: rotate(288deg);\r\n    }\r\n    .c100.p81 .bar {\r\n        -webkit-transform: rotate(291.6deg);\r\n        -moz-transform: rotate(291.6deg);\r\n        -ms-transform: rotate(291.6deg);\r\n        -o-transform: rotate(291.6deg);\r\n        transform: rotate(291.6deg);\r\n    }\r\n    .c100.p82 .bar {\r\n        -webkit-transform: rotate(295.2deg);\r\n        -moz-transform: rotate(295.2deg);\r\n        -ms-transform: rotate(295.2deg);\r\n        -o-transform: rotate(295.2deg);\r\n        transform: rotate(295.2deg);\r\n    }\r\n    .c100.p83 .bar {\r\n        -webkit-transform: rotate(298.8deg);\r\n        -moz-transform: rotate(298.8deg);\r\n        -ms-transform: rotate(298.8deg);\r\n        -o-transform: rotate(298.8deg);\r\n        transform: rotate(298.8deg);\r\n    }\r\n    .c100.p84 .bar {\r\n        -webkit-transform: rotate(302.40000000000003deg);\r\n        -moz-transform: rotate(302.40000000000003deg);\r\n        -ms-transform: rotate(302.40000000000003deg);\r\n        -o-transform: rotate(302.40000000000003deg);\r\n        transform: rotate(302.40000000000003deg);\r\n    }\r\n    .c100.p85 .bar {\r\n        -webkit-transform: rotate(306deg);\r\n        -moz-transform: rotate(306deg);\r\n        -ms-transform: rotate(306deg);\r\n        -o-transform: rotate(306deg);\r\n        transform: rotate(306deg);\r\n    }\r\n    .c100.p86 .bar {\r\n        -webkit-transform: rotate(309.6deg);\r\n        -moz-transform: rotate(309.6deg);\r\n        -ms-transform: rotate(309.6deg);\r\n        -o-transform: rotate(309.6deg);\r\n        transform: rotate(309.6deg);\r\n    }\r\n    .c100.p87 .bar {\r\n        -webkit-transform: rotate(313.2deg);\r\n        -moz-transform: rotate(313.2deg);\r\n        -ms-transform: rotate(313.2deg);\r\n        -o-transform: rotate(313.2deg);\r\n        transform: rotate(313.2deg);\r\n    }\r\n    .c100.p88 .bar {\r\n        -webkit-transform: rotate(316.8deg);\r\n        -moz-transform: rotate(316.8deg);\r\n        -ms-transform: rotate(316.8deg);\r\n        -o-transform: rotate(316.8deg);\r\n        transform: rotate(316.8deg);\r\n    }\r\n    .c100.p89 .bar {\r\n        -webkit-transform: rotate(320.40000000000003deg);\r\n        -moz-transform: rotate(320.40000000000003deg);\r\n        -ms-transform: rotate(320.40000000000003deg);\r\n        -o-transform: rotate(320.40000000000003deg);\r\n        transform: rotate(320.40000000000003deg);\r\n    }\r\n    .c100.p90 .bar {\r\n        -webkit-transform: rotate(324deg);\r\n        -moz-transform: rotate(324deg);\r\n        -ms-transform: rotate(324deg);\r\n        -o-transform: rotate(324deg);\r\n        transform: rotate(324deg);\r\n    }\r\n    .c100.p91 .bar {\r\n        -webkit-transform: rotate(327.6deg);\r\n        -moz-transform: rotate(327.6deg);\r\n        -ms-transform: rotate(327.6deg);\r\n        -o-transform: rotate(327.6deg);\r\n        transform: rotate(327.6deg);\r\n    }\r\n    .c100.p92 .bar {\r\n        -webkit-transform: rotate(331.2deg);\r\n        -moz-transform: rotate(331.2deg);\r\n        -ms-transform: rotate(331.2deg);\r\n        -o-transform: rotate(331.2deg);\r\n        transform: rotate(331.2deg);\r\n    }\r\n    .c100.p93 .bar {\r\n        -webkit-transform: rotate(334.8deg);\r\n        -moz-transform: rotate(334.8deg);\r\n        -ms-transform: rotate(334.8deg);\r\n        -o-transform: rotate(334.8deg);\r\n        transform: rotate(334.8deg);\r\n    }\r\n    .c100.p94 .bar {\r\n        -webkit-transform: rotate(338.40000000000003deg);\r\n        -moz-transform: rotate(338.40000000000003deg);\r\n        -ms-transform: rotate(338.40000000000003deg);\r\n        -o-transform: rotate(338.40000000000003deg);\r\n        transform: rotate(338.40000000000003deg);\r\n    }\r\n    .c100.p95 .bar {\r\n        -webkit-transform: rotate(342deg);\r\n        -moz-transform: rotate(342deg);\r\n        -ms-transform: rotate(342deg);\r\n        -o-transform: rotate(342deg);\r\n        transform: rotate(342deg);\r\n    }\r\n    .c100.p96 .bar {\r\n        -webkit-transform: rotate(345.6deg);\r\n        -moz-transform: rotate(345.6deg);\r\n        -ms-transform: rotate(345.6deg);\r\n        -o-transform: rotate(345.6deg);\r\n        transform: rotate(345.6deg);\r\n    }\r\n    .c100.p97 .bar {\r\n        -webkit-transform: rotate(349.2deg);\r\n        -moz-transform: rotate(349.2deg);\r\n        -ms-transform: rotate(349.2deg);\r\n        -o-transform: rotate(349.2deg);\r\n        transform: rotate(349.2deg);\r\n    }\r\n    .c100.p98 .bar {\r\n        -webkit-transform: rotate(352.8deg);\r\n        -moz-transform: rotate(352.8deg);\r\n        -ms-transform: rotate(352.8deg);\r\n        -o-transform: rotate(352.8deg);\r\n        transform: rotate(352.8deg);\r\n    }\r\n    .c100.p99 .bar {\r\n        -webkit-transform: rotate(356.40000000000003deg);\r\n        -moz-transform: rotate(356.40000000000003deg);\r\n        -ms-transform: rotate(356.40000000000003deg);\r\n        -o-transform: rotate(356.40000000000003deg);\r\n        transform: rotate(356.40000000000003deg);\r\n    }\r\n    .c100.p100 .bar {\r\n        -webkit-transform: rotate(360deg);\r\n        -moz-transform: rotate(360deg);\r\n        -ms-transform: rotate(360deg);\r\n        -o-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n    .c100:hover {\r\n        cursor: default;\r\n    }\r\n    .c100:hover > span {\r\n        width: 3.33em;\r\n        line-height: 3.33em;\r\n        font-size: 0.3em;\r\n        color: #307bbb;\r\n    }\r\n    .c100:hover:after {\r\n        top: 0.04em;\r\n        left: 0.04em;\r\n        width: 0.92em;\r\n        height: 0.92em;\r\n    }\r\n    .c100.dark {\r\n        background-color: #777777;\r\n    }\r\n    .c100.dark .bar,\r\n    .c100.dark .fill {\r\n        border-color: #c6ff00 !important;\r\n    }\r\n    .c100.dark > span {\r\n        color: #777777;\r\n    }\r\n    .c100.dark:after {\r\n        background-color: #666666;\r\n    }\r\n    .c100.dark:hover > span {\r\n        color: #c6ff00;\r\n    }\r\n    .c100.green .bar,\r\n    .c100.green .fill {\r\n        border-color: #4db53c !important;\r\n    }\r\n    .c100.green:hover > span {\r\n        color: #4db53c;\r\n    }\r\n    .c100.green.dark .bar,\r\n    .c100.green.dark .fill {\r\n        border-color: #5fd400 !important;\r\n    }\r\n    .c100.green.dark:hover > span {\r\n        color: #5fd400;\r\n    }\r\n    .c100.orange .bar,\r\n    .c100.orange .fill {\r\n        border-color: #dd9d22 !important;\r\n    }\r\n    .c100.orange:hover > span {\r\n        color: #dd9d22;\r\n    }\r\n    .c100.orange.dark .bar,\r\n    .c100.orange.dark .fill {\r\n        border-color: #e08833 !important;\r\n    }\r\n    .c100.orange.dark:hover > span {\r\n        color: #e08833;\r\n    }\r\n)",
            "Type": "blocks"
        },
        {
            "Name": "welcome",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(panel panel-primary){\r\n        Div(list-group-item text-center){\r\n            P(Class: h3 m0 text-bold, Body: $@1welcome_title$)\r\n        }\r\n        Div(list-group-item){\r\n            Span(Class: h4, Body: $@1welcome_text$)\r\n            Span(Class: h4 text-primary, Body: \" https://genesiskernel.readthedocs.io\")\r\n        }\r\n    }\r\n}",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1member_management$, Page:@1members_list_admin, Icon:\"icon-people\")\r\nMenuItem(Title:$@1ecosystems$, Page:@1ecosystems_list, Icon:\"icon-layers\")\r\nMenuItem(Title:$@1platform_parameters$, Page:@1sysparams_list, Icon:\"icon-settings\")\r\nMenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\"icon-pie-chart\")\r\nMenuItem(Title:$@1groups$, Page:@1groups_list, Icon:\"icon-user-following\")\r\nMenuItem(Title:$@1tokens_refund$, Page:@1tokenrefund_list, Icon:\"icon-shuffle\")\r\nMenuItem(Title:$@1validators$, Page:@1validator_candidates_list, Icon:\"icon-graduation\")\r\nMenuItem(Title:$@1pa_settings$, Page:@1platform_apps_settings, Icon: \"icon-wrench\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\"icon-wallet\")\r\nMenuItem(Title:$@1messenger$, Page:@1messages_list, Icon:\"icon-speech\")\r\nMenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\"icon-flag\")\r\nMenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\"icon-people\")\r\nMenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\"icon-note\")",
            "Type": "menu"
        },
        {
            "Name": "groups",
            "Columns": "[\r\n    {\r\n        \"name\":\"creator\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"date_created\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"date_deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsDelete\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsDelete\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"ecosystem\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"group_access\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupAccessManager\\\")\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"group_info\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsCreate\\\")\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"name\":\"group_name\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"name\":\"group_type\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"image_id\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1GroupsCreate\\\")\", \"update\": \"ContractAccess(\\\"@1GroupsCreate\\\",\\\"@1GroupsDelete\\\",\\\"@1GroupAccessManager\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "groups_participants",
            "Columns": "[\r\n    {\r\n        \"name\":\"appointed\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"date_created\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"date_deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsUnassign\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsUnassign\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"ecosystem\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"groups_info\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"member\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1GroupsAssign\\\")\", \"update\": \"ContractAccess(\\\"@1GroupsUnassign\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "tokens_refund",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"amount\",\r\n        \"type\":\"money\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\",\r\n        \"name\":\"status\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"victim_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"attacker_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"validator_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"note\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\",\r\n        \"name\":\"result\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\",\r\n        \"name\":\"closed_at\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"blocked_at\",\r\n        \"type\":\"number\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingRunTokenRefund\\\")\", \"update\": \"ContractAccess(\\\"@1TokensRefundAccept\\\",\\\"@1TokensRefundReject\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "validator_candidates",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"date_created\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"candidate_key_id\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"comment\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"ContractAccess(\\\"@1ValidatorDelete\\\")\",\r\n        \"name\":\"deleted\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"tcp_address\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"api_address\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"pub_key\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"description\",\r\n        \"type\":\"text\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1ValidatorRequest\\\")\", \"update\": \"ContractAccess(\\\"@1ValidatorDelete\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\": \"voting\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\": \"optional\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\": \"subject\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\":\"false\",\r\n        \"name\":\"ecosystem\",\r\n        \"type\":\"number\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingTemplateCreate\\\",\\\"@1VotingTemplatesInstall\\\")\", \"update\": \"false\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "votings",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingInvite\\\")\",\r\n        \"name\": \"voting\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingSubjectCandidates\\\", \\\"@1VotingSubjectDocument\\\", \\\"@1VotingSubjectContract\\\", \\\"@1VotingSubjectSettings\\\")\",\r\n        \"name\": \"optional\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingUpdate\\\",\\\"@1VotingInvite\\\")\",\r\n        \"name\": \"progress\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"date_ended\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingDecisionCheck\\\", \\\"@1VotingNotificationSend\\\", \\\"@1VotingStatusUpdate\\\", \\\"@1VotingSubjectCheck\\\", \\\"@1VotingUpdate\\\")\",\r\n        \"name\": \"flags\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingStatusUpdate\\\",\\\"@1VotingUpdate\\\")\",\r\n        \"name\": \"status\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"creator\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingDelete\\\")\",\r\n        \"name\": \"deleted\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"ecosystem\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"date_started\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingCreate\\\")\", \"update\": \"ContractAccess(\\\"@1VotingDecisionCheck\\\",\\\"@1VotingDelete\\\",\\\"@1VotingInvite\\\",\\\"@1VotingNotificationSend\\\",\\\"@1VotingStatusUpdate\\\",\\\"@1VotingSubjectCandidates\\\",\\\"@1VotingSubjectCheck\\\",\\\"@1VotingSubjectDocument\\\",\\\"@1VotingSubjectContract\\\",\\\"@1VotingSubjectSettings\\\",\\\"@1VotingUpdate\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"member\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"decision\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"ecosystem\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"decision_date\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingStatusUpdate\\\")\",\r\n        \"name\": \"rating\",\r\n        \"type\": \"number\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingInvite\\\")\", \"update\": \"ContractAccess(\\\"@1VotingDecisionReject\\\",\\\"@1VotingDecisionAccept\\\",\\\"@1VotingCandidateAccept\\\",\\\"@1VotingStatusUpdate\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\")\",\r\n        \"name\": \"number_accept\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingSubjectContract\\\", \\\"@1VotingSubjectDocument\\\")\",\r\n        \"name\": \"subject\",\r\n        \"type\": \"json\"\r\n    },\r\n    {\r\n        \"conditions\": \"false\",\r\n        \"name\": \"ecosystem\",\r\n        \"type\": \"number\"\r\n    },\r\n    {\r\n        \"conditions\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\", \\\"@1VotingDecisionAccept\\\", \\\"@1VotingDecisionReject\\\")\",\r\n        \"name\": \"results\",\r\n        \"type\": \"json\"\r\n    }\r\n]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"@1VotingSubjectCandidates\\\",\\\"@1VotingSubjectContract\\\",\\\"@1VotingSubjectDocument\\\")\", \"update\": \"ContractAccess(\\\"@1VotingCandidateAccept\\\",\\\"@1VotingDecisionAccept\\\",\\\"@1VotingDecisionReject\\\",\\\"@1VotingSubjectContract\\\",\\\"@1VotingSubjectDocument\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "config",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "{\r\n    \"name\": \"Basic\",\r\n    \"conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n    \"data\": [\r\n        {\r\n            \"Name\": \"default_menu\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"MenuItem(Title:$@1profile$, Page:@1profile_view, Icon:\\\"icon-wallet\\\")\\nMenuItem(Title:$@1messenger$, Page:@1messages_list, Icon:\\\"icon-speech\\\")\\nMenuItem(Title:$@1notifications$, Page:@1notifications_list, Icon:\\\"icon-flag\\\")\\nMenuItem(Title:$@1ecosystem_members$, Page:@1members_list, Icon:\\\"icon-people\\\")\\nMenuItem(Title:$@1votings$, Page:@1voting_list, Icon:\\\"icon-note\\\")\",\r\n            \"Type\": \"menu\"\r\n        },\r\n        {\r\n            \"Name\": \"admin_menu\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"MenuItem(Title:$@1member_management$, Page:@1members_list_admin, Icon:\\\"icon-people\\\")\\nMenuItem(Title:$@1roles$, Page:@1roles_list, Icon:\\\"icon-pie-chart\\\")\\nMenuItem(Title:$@1groups$, Page:@1groups_list, Icon:\\\"icon-user-following\\\")\\nMenuItem(Title:$@1pa_settings$, Page:@1platform_apps_settings, Icon: \\\"icon-wrench\\\")\",\r\n            \"Type\": \"menu\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_table\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"@1r_ratings\",\r\n            \"Type\": \"app_params\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_wallet\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"member\",\r\n            \"Type\": \"app_params\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_amount\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"amount\",\r\n            \"Type\": \"app_params\"\r\n        },\r\n        {\r\n            \"Name\": \"voting_rating_weight\",\r\n            \"Conditions\": \"ContractConditions(\\\"DeveloperCondition\\\")\",\r\n            \"Value\": \"2\",\r\n            \"Type\": \"app_params\"\r\n        }\r\n    ]\r\n}",
            "Type": "app_params"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "groups_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1open_group,@1closed_group",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "notification_closure",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1single,@1multiple",
            "Type": "app_params"
        },
        {
            "Name": "notification_icon",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Type": "app_params"
        },
        {
            "Name": "notification_sender",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1notification_sender_member,@1notification_sender_role",
            "Type": "app_params"
        },
        {
            "Name": "notification_type",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1personal_type,@1role_type",
            "Type": "app_params"
        },
        {
            "Name": "roles_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1assigned_role,@1elective_role,@1system_role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types_selection",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1assigned_role,@1elective_role",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1tokenrefund_result1,@1tokenrefund_result2",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1voting,@1closed",
            "Type": "app_params"
        },
        {
            "Name": "type_tokens_transfer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1resources_fees,@1emission_tokens,@1tokens_transfer,@1tokens_burn",
            "Type": "app_params"
        },
        {
            "Name": "type_voting",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1type_voting_custom,@1type_voting_system,@1type_voting_poll",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_decisions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1candidate_requests,@1candidate_manual,@1document,@1contract_run",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_participants",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1everybody,@1manual_add,@1roles_list1,@1roles_list2,@1roles_list3",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_amount",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "amount",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_table",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "r_ratings",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_wallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "member",
            "Type": "app_params"
        },
        {
            "Name": "voting_rating_weight",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "2",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1invalid,@1waiting,@1started,@1finished",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses_classes",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "text-danger,text-warning,text-success,text-success",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_decision",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_ecosysparams",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_platformparams",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_tokenrefund",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_validators",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_template_ves",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "contract_bind_request",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({\"id\": #notific_id#, \"ecosystem\": #ecosystem_id#}).Columns(\"sender->image_id,sender->member_id,sender->member_name,closed,page_params->contract_id,page_params->contract_name\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1request_contract_binding$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1contract_binding_des))\r\n                        Span(Class: h5 text-bold, Body: LangRes(@1contract) - #notific_page_params_contract_name#)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Button(Class: btn btn-danger mr-lg, Body: LangRes(@1request_reject), Contract: NotificationsClose, Page: notifications_list, Params: \"notific_id=#notific_id#\").Alert(Text: $@1want_reject_request$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                                Button(Class: btn btn-success, Body: LangRes(@1contract_binding_accept), Contract: @1BindWallet, Page: notifications_list, Params: \"Id=#notific_page_params_contract_id#,NotificId=#notific_id#\").Alert(Text: $@1want_bind_contract$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Include(@1profile)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Label(Public Key)\r\n    P(Class: text-muted h6 m0, Body: \"$@1keys_must_be_separated$\")\r\n    Input(Name: memberskeys, Type: textarea)\r\n    Button(Contract: @1MembershipAdd, Class: btn btn-primary pull-right mt, Page:@1members_list, Body: $@1members_add$)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1members_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1ecosystems_list).(this_table, @1ecosystems)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystems$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystems_list_desc$\"))\r\nAddToolButton(Title: $@1update_metrics$, Page: @1ecosystems_metrics_update, Icon: icon-refresh).Popup(Header: $@1update_metrics$, Width: \"30\")\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"name\": {\"$ilike\": \"#search#\"}})\r\n}\r\nSetVar(where, {#w_search#})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1ecosystem_name))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1buffer_data).Where({\"ecosystem\": #ecosystem_id#, \"member_id\": #key_id#, \"key\": \"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_ves))\r\nIf(#template_id# > 0){\r\n    DBFind(@1voting_templates).Where({\"ecosystem\": #ecosystem_id#, \"id\": #template_id#}).Columns(\"subject->voters\").Vars(template)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(#id#)\r\n}.Custom(_name){\r\n    Span(#name#)\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id,#id#)\r\n        ForList(src_metrics){\r\n            If(#key#==#eco_id#){\r\n                LinkPage(Body: `#value#`, Page: @1sysparams_metrics, PageParams:\"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}.Custom(valued){\r\n    If(#is_valued# == 0){\r\n        If(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n            Button(Body: $@1start_voting_ves$, Class: btn-xs btn-link, Page: @1voting_list, Contract: @1VotingRunVes, Params: \"EcosystemId=#id#\")\r\n        }.Else{\r\n            If(#template_id# > 0){\r\n                Span($@1voting_not_participant$, text-muted)\r\n            }.Else{\r\n                Span($@1voting_template_not_found$, text-muted)\r\n            }\r\n        } \r\n    }.ElseIf(#is_valued#==1){\r\n        $@1is_valued$\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1id$=_id,$@1ecosystem_name$=_name,$@1metrics$=_metrics,$@1valued$=valued\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1ecosystems$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_metrics_update",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Data(aggregates, \"id,name\"){\r\n        max,$@1maximum$\r\n        min,$@1minimum$\r\n        avg,$@1average$\r\n    }\r\n    Div(row){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Interval){\r\n                LangRes(@1interval)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Interval, Type: number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 mt-sm text-right){\r\n            Label(For: Aggregate){\r\n                LangRes(@1sampling_type)\r\n            }\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-sm-9){\r\n            Select(Name: Aggregate, Source: aggregates, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1update_metrics), Page: @1ecosystems_list, Class: btn btn-primary pull-right mt, Contract: @1MetricsUpdate)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ecosystems_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    P(Class: text-muted h6 m0 mb-sm, Body: \"$@1keys_must_be_separated$\")\r\n    Input(Name: memberskeys, Type: textarea)\r\n    Button(Contract: @1GroupsAssignList, Class: btn btn-primary pull-right mt, Page: @1groups_view, Body: $@1members_add$, Params: \"gr_id=#v_group_id#\", PageParams: \"v_group_id=#v_group_id#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"name\": \"Basic\", \"ecosystem\": 1}).Vars(application)\r\n\r\nIf(#Id#!=\"\"){\r\n    SetVar(v_group_id, #Id#)\r\n}\r\n\r\nIf(#v_group_id#>0){\r\n    DBFind(@1groups, src_groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_group_id#}).Columns(\"id,group_name,group_type,group_access,creator->member_id,deleted\").Vars(prefix)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id, 1)\r\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#prefix_deleted#==0)){\r\n        DBFind(@1roles_participants).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #prefix_group_access#}}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1group)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Type: hidden, Name: gr_id, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_group_name, Value: LangRes(#prefix_group_name#))\r\n                Input(Name: input_prefix_group_name, Value: #var_prefix_group_name#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1type)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                SetVar(Name: var_prefix_group_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: groups_types, Index: #prefix_group_type#))\r\n                Input(Name: input_prefix_group_type, Value: #var_prefix_group_type#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1member)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                If(#MemberId# == \"\"){\r\n                    SetVar(MemberId, 0)\r\n                }\r\n                Input(Name: member_id, Type:hidden, Value: #MemberId#)\r\n                Div(input-group){\r\n                    If(Or(#MemberId#>0,#MemberId#<0)){\r\n                        SetVar(AddressMemberId, Address(#MemberId#))\r\n                    }\r\n                    Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1groups_assign,back_header=$@1assign$,Id=#v_group_id#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                    }.Style(\r\n                        .buttons {\r\n                            border: 1px solid #dde6e9;\r\n                            padding: 6px 16px;\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        If(#manager_id#>0){\r\n            Button(Body: LangRes(@1assign), Class: btn btn-primary pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\", Contract: @1GroupsAssign, Params: \"member_id=Val(member_id)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nDBFind(@1roles, src_roles).Columns(\"id,role_name\").Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Order(id)\r\nIf(#back_page#==\"\"){\r\n   SetVar(back_page, \"@1groups_list\")\r\n}\r\n\r\nIf(#gr_id#==\"\"){\r\n    SetVar(title, $@1new_group$)\r\n    DBFind(@1buffer_data).Columns(value).Where({\"ecosystem\": #ecosystem_id#, \"key\": \"group_access\", \"member_id\": #key_id#}).Columns(\"id,key,member_id,ecosystem,value->groups_access,value->group_information,value->group_type,value->group_name\").Vars(buffer)\r\n    AppParam(Source: type_group, Ecosystem: 1, App: #application_id#, Name: groups_types)\r\n    If(And(#buffer_value_groups_access#!=\"NULL\",#buffer_value_groups_access#!=\"\",#buffer_value_groups_access#!=\"[]\")){\r\n        DBFind(@1roles, src_roles_access).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #buffer_value_groups_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}.Else{\r\n    SetVar(title, $@1edit_group$)\r\n    DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #gr_id#}).Columns(\"id,group_name,group_type,group_info,group_access\").Vars(gr_e)\r\n    SetVar(type_group, AppParam(Ecosystem: 1, App: #application_id#, Name: groups_types, Index: #gr_e_group_type#))\r\n    If(And(#gr_e_group_access#!=\"NULL\",#gr_e_group_access#!=\"\",#gr_e_group_access#!=\"[]\")){\r\n        DBFind(@1roles, src_roles_access).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #gr_e_group_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#gr_id#==\"\"){\r\n                Input(Name: group_name, Value: #buffer_value_group_name#).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: group_name, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\r\n            }.Else{\r\n                Input(Name: e_group_name, Value: #gr_e_group_name#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1type)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#gr_id#==\"\"){\r\n                Select(Name: group_type, Source: type_group, NameColumn: name, ValueColumn: id, Value: #buffer_value_group_type#)\r\n            }.Else{\r\n                Input(Name: e_group_type, Value: #type_group#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt text-right){\r\n            Label(){\r\n                LangRes(@1group_info)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#gr_id#==\"\"){\r\n                Input(Name: group_information, Type: textarea, Value: #buffer_value_group_information#)\r\n            }.Else{\r\n                Input(Name: group_information, Type: textarea, Value: #gr_e_group_info#)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1group_access)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1groups_create, Contract: @1GroupAccessManager, Params: \"ManagerRid=Val(roles_managers),Action=add,gr_id=#gr_id#\", PageParams: \"gr_id=#gr_id#\").Popup(50, #title#)\r\n                }\r\n            }\r\n            If(#ra_count#>0){\r\n                ForList(src_roles_access){\r\n                    SetVar(btn_class, \"bg-gray-lighter\")\r\n                    If(#id#==#role_id#){\r\n                        SetVar(btn_class, \"bg-primary\")\r\n                    }\r\n                    Button(Class: btn-xs #btn_class# mr-sm mb-sm, Page: @1groups_create, Contract: @1GroupAccessManager, Params: \"ManagerRid=#id#,Action=remove,gr_id=#gr_id#\", PageParams: \"gr_id=#gr_id#\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    If(#gr_id#==\"\"){\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1GroupsCreate)\r\n    }.Else{\r\n        Button(Body: LangRes(@1edit), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1GroupsCreate, Params:\"gr_id=#gr_id#\")\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: #back_page#)\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1groups_list).(this_table, @1groups)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1groups$)\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1group_desc$))\r\nAddToolButton(Page: @1groups_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_group$)\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"group_name\": {\"$ilike\": \"#search#\"}})\r\n}\r\nSetVar(where, {\"ecosystem\": #ecosystem_id#, {#w_search#}})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, $@1groups$)\r\n    Include(@1search)\r\n}\r\nDBFind(@1applications).Columns(\"id,name\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nDBFind(#this_table#, src_groups).Where(#where#).Order({\"deleted\": \"1\", \"id\": \"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,group_name,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,group_access,group_info,group_type\").Custom(_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text, \"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text, \"text-muted\").(style_link, \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_creator){\r\n    If(And(#creator.member_name# != NULL, #creator.member_name# != \"\")){\r\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\r\n            #creator.member_name#\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1groups_view, PageParams: \"v_group_id=#id#\"){\r\n        If(#image_id# > 0){\r\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #group_name#\r\n        }.Else{\r\n            Div(Class: #style_link#){\r\n                Span(Class: fa icon-settings fa-2x mr-sm)\r\n            }.Style(\r\n                display: inline-block;\r\n            )\r\n            Span(Class: btn-link text-bold pb-sm){\r\n                Span(Class: #style_link#, Body: #group_name#)\r\n            }.Style(\r\n                display: inline-block;\r\n                vertical-align: top;\r\n                padding-top: 7px;\r\n                padding-left: 4px;\r\n            )\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# small){\r\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        If(#deleted# == 1){\r\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    Span(Class: #style_text#){\r\n        If(#deleted# == 0){\r\n            LangRes(@1active)\r\n        }.Else{\r\n            LangRes(@1deleted)\r\n        }\r\n    }\r\n}.Custom(_access){\r\n    If(#creator.member_id# == #key_id#){\r\n        SetVar(access,done)\r\n    }.Else{\r\n        SetVar(access,)\r\n    }\r\n    If(And(#group_access# != \"NULL\", #group_access# != \"\", #group_access# != \"[]\")){\r\n        DBFind(@1roles,src_access_list).Where({\"id\": {\"$in\": #group_access#}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n        Div(#style_text# breaker){\r\n            ForList(src_access_list){\r\n                If(#role_id# == #id#){\r\n                    SetVar(access,done)\r\n                }\r\n                If(#access_count# != #src_access_list_index#){\r\n                    Span(\"#role_name#,\",mr-sm)\r\n                }.Else{\r\n                    #role_name#\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right button-group text-nowrap){\r\n        If(#access# == \"done\"){\r\n            If(#deleted# == 0){\r\n                Button(Class: btn bg-gray-lighter, Contract: @1GroupsDelete, Params: \"ops=D,gr_id=#id#\", Page: @1groups_list){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                Button(Class: btn bg-gray-lighter mh-sm, PageParams: \"gr_id=#id#\", Page: @1groups_create){\r\n                    Em(Class: text-default fa fa-1x fa-edit)\r\n                }.Popup(50, $@1edit_group$)\r\n            }.ElseIf(#deleted# == 1){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1GroupsDelete, Params: \"ops=R,gr_id=#id#\", Page: @1groups_list){\r\n                    Em(Class: text-info fa fa-1x fa-recycle)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(type_group){\r\n    If(#deleted# == 0){\r\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: groups_types, Index:#group_type#))\r\n    }.Else{\r\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: groups_types, Index:#group_type#), Class: text-muted)\r\n    }\r\n}.Custom(join_group){\r\n    If(#deleted# == 0){\r\n        DBFind(\"@1groups_participants\").Columns(\"id,groups_info,groups_info->id,deleted,member,member->member_id\").Where({\"groups_info->id\": #id#, \"deleted\": 0, \"member->member_id\": #key_id#}).Vars(j_l).Count(check_membership)\r\n        If(And(#group_type# == 1, #check_membership# == 0)){\r\n            Button(Body: $@1join_the_group$, Class: btn btn-link pull-right, Contract: @1GroupsAssign, Page: @1groups_view, PageParams: \"v_group_id=#id#\", Params: \"gr_id=#id#,member_id=#key_id#\")\r\n        }.ElseIf(And(#group_type# == 1,#check_membership# == 1)){\r\n            Button(Body: $@1leave_the_group$, Class: btn btn-link pull-right, Contract: @1GroupsUnassign, Page: @1groups_list, Params:\"row_id=#j_l_id#\")\r\n        }.ElseIf(And(#group_type# == 2,#check_membership# == 0)){\r\n            Button(Body: $@1send_request$, Class: btn btn-link pull-right, Contract: @1GroupRequestMembership, Page: @1groups_view, PageParams:\"v_group_id=#id#\", Params: \"gr_id=#id#\")\r\n        }\r\n    }\r\n}.Custom(gr_info){\r\n    If(#deleted# == 0){\r\n        Span(Body: #group_info#)\r\n    }.Else{\r\n        Span(Body: #group_info#, Class: text-muted)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_groups, \"$@1group$=_name,$@1type$=type_group,$@1id$=_id,$@1group_info$=gr_info,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1access$=_access,=join_group,=_actions\")\r\n            }.ElseIf(#all_roles_count# > 0){\r\n                Div(Class: text-center h4 text-muted){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1groups$ $@1not_founded$\")\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1groups$ $@1not_founded$\")\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_request_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"page_params->gr_id,page_params->decide,sender->image_id,recipient->member_name,recipient->member_id,recipient->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    If(#notific_page_params_decide# == 1){\r\n                        Span(Class: h3, Body: $@1your_request_approved$)\r\n                    }.ElseIf(#notific_page_params_decide# == -1){\r\n                        Span(Class: h3, Body: $@1your_request_denied$)\r\n                    }.Else{\r\n                        Span(Class: h3, Body: $@1request_group$)\r\n                    }\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                                    If(#notific_recipient_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#notific_recipient_member_name#}\r\n                                }.Else{\r\n                                    If(#notific_sender_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                            Span(Class: h5 text-bold, Body: Address(#notific_recipient_member_id#))\r\n                        }.Else{\r\n                            Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_page_params_gr_id#}).Vars(group)\r\n                        Div(text-muted m0 h5, Body: $@1group$)\r\n                        Span(Class: h5 text-bold, Body: #group_group_name# (#group_id#))\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                                    Button(Class: btn btn-primary mh-sm, Body: $@1close$, Contract: @1NotificationsClose, Page: @1notifications_list, Params: \"notific_id=#notific_id#\")\r\n                                }.Else{\r\n                                    Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"notific_id=#notific_id#,accept=0\")\r\n                                    Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"notific_id=#notific_id#,accept=1\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#page_par#!=\"\"){\r\n    SetVar(Name: v_group_id, Value: #page_par#)\r\n}\r\n\r\nIf(#v_group_id# > 0){\r\n    SetVar(this_page, @1groups_view).(this_table, @1groups_participants)\r\n    Include(@1pager_header)\r\n\r\n    DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_group_id#}).Columns(\"group_name,group_type,deleted,group_access,creator->member_id,deleted\").Vars(prefix)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#prefix_deleted#==0)){\r\n        DBFind(@1roles_participants).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #prefix_group_access#}}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    If(#manager_id#>0){\r\n        AddToolButton(Page: @1groups_assign, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\r\n        AddToolButton(Page: @1groups_add_members, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1members_add$).Popup(50, $@1add_members_to_group$)\r\n    }\r\n\r\n    SetTitle(\"$@1group$\": #prefix_group_name#)\r\n    Span(Class: h5 m0 mb ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1groups$, Page: @1groups_list)\r\n        Span(Class: text-muted mh-sm, Body: /)\r\n        Span(Class: text-muted, Body: #prefix_group_name#)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    If(#search#){\r\n        SetVar(w_search, {\"member->member_name\": {\"$ilike\": \"#search#\"}})\r\n    }\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"groups_info->id\": #v_group_id#, {#w_search#}})\r\n\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_group_id#)\r\n        Include(@1search)\r\n    }\r\n\r\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->member_id,groups_info,groups_info->id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_appointed){\r\n        If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#appointed.member_id#\"){\r\n                Span(Body: #appointed.member_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_member){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\"){\r\n            If(#member.image_id#>0){\r\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_address){\r\n        Span(Class: #style_text#, Body: Address(#member.member_id#))\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        If(#deleted# == 1){\r\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(@1active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1GroupsUnassign, Params: \"row_id=#id#\", Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\"){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }.Count(count)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#count# > 0){\r\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\r\n                }\r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1members_list).(this_table, @1keys)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1ecosystem_members$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1ecosystem_members_list_desc$\"))\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# != 1)){\r\n    AddToolButton(Title: $@1members_add$, Page:@1ecosystem_add_members, Icon: icon-plus).Popup(50, $@1ecosystem_add_members$)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"id\": {\"$neq\":#guest_key#}, \"deleted\": 0, \"id\": AddressToId(#search#)})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"id\": {\"$neq\":#guest_key#}, \"deleted\": 0})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1wallet))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1ecosystems\").Where({\"id\": #ecosystem_id#}).Vars(\"custom\")\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    SetVar(Name: style_text, Value: \"text-normal\")\r\n    SetVar(Name: style_link, Value: \"text-primary\")\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n    SetVar(m_id, 0)\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #id#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n}.Custom(custom_member_id){\r\n    If(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n        Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"v_key_id=#id#\"){\r\n            Span(Class: h5, Body: Address(#id#))\r\n        }.Popup(Header: $@1tokens_send$, Width: \"50\")\r\n    }.Else{\r\n        Span(Class: h5, Body: Address(#id#))\r\n    }\r\n}.Custom(custom_username){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1wallet$=custom_member_id\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list_admin",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1members_list_admin).(this_table, @1keys)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1member_management$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1member_management_desc$\"))\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(And(#role_id# == #role_admin#, #ecosystem_id# != 1)){\r\n    AddToolButton(Title: $@1members_add$, Page: @1ecosystem_add_members, Icon: icon-plus).Popup(50, $@1ecosystem_add_members$)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"id\": AddressToId(#search#)})\r\n}\r\nSetVar(where, {\"ecosystem\": #ecosystem_id#, \"id\": {\"$neq\":#guest_key#}, {#w_search#}})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1wallet))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(\"@1ecosystems\").Where({\"id\": #ecosystem_id#}).Vars(\"custom\")\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text, \"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\r\n    }\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n    SetVar(m_id, 0)\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #id#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n}.Custom(custom_member_id){\r\n    If(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n        Button(Class: btn-xs btn-link, Page: @1tokens_send, PageParams: \"v_key_id=#id#,back_page=#this_page#\"){\r\n            Span(Class: h5 #style_text#, Body: Address(#id#))\r\n        }.Popup(Header: $@1tokens_send$, Width: \"50\")\r\n    }.Else{\r\n        Span(Class: h5 #style_text#, Body: Address(#id#))\r\n    }\r\n}.Custom(custom_username){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Custom(actions){\r\n    If(#deleted#==0){\r\n        Button(Body: LangRes(@1delete), Class: btn-xs btn-link pull-right, Page: #this_page#, Params:\"KeyId=#id#\", Contract: @1DeleteMember).Alert(Text: \"$@1want_delete_key$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        If(#blocked#==0){\r\n            Button(Body: LangRes(@1block_key), Class: btn-xs btn-link pull-right, Page: #this_page#, Params:\"KeyId=#id#,Value=1\", Contract: @1BlockMember).Alert(Text: \"$@1want_block_key$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }.Else{\r\n            Button(Body: LangRes(@1unblock_key), Class: btn-xs btn-link pull-right, Page: #this_page#, Params:\"KeyId=#id#,Value=0\", Contract: @1BlockMember).Alert(Text: \"$@1want_unblock_key$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }.Else{\r\n        Span(Class: h6 text-muted pull-right, Body: $@1deleted$)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1id$=custom_id,$@1wallet$=custom_member_id,=actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({\"id\": #notific_id#}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n    DBFind(@1ecosystems).Where({\"id\": #notific_page_params_ecosystem_id#}).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1membership_request$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1ecosystem))\r\n                        Span(Class: h5 text-bold, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,accept=0\")\r\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,accept=1\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\r\n    DBFind(@1ecosystems).Where({\"id\": #notific_page_params_ecosystem_id#}).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1membership_request$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_recipient_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\r\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                            Div(Class: m0 h5 text-bold, Body: $@1is_accepted$!)\r\n                        }\r\n                        If(#notific_closed# == 0){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-lg text-center){\r\n                                    Button(Class: btn btn-success, Body: $@1close$, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: \"@1default_page\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(list-group-item text-center){\r\n                            Div(Class: m0 h5 text-bold, Body: $@1request_to_membership$:)\r\n                            Div(Class: m0 h5 text-normal, Body: \"#ecosystem_name#\" (#ecosystem_id#))\r\n                            Div(Class: m0 h5 text-bold, Body: $@1is_rejected$!)\r\n                        }\r\n                        If(#notific_closed# == 0){\r\n                            Div(row){\r\n                                Div(col-md-12 mt-lg text-center){\r\n                                    Button(Class: btn btn-danger, Body: $@1close$, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "message_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1message_create)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\n\r\nIf(#MemberId# == \"\"){\r\n    SetVar(MemberId, 0)\r\n}\r\n\r\nIf(Or(#MemberId#>0,#MemberId#<0)){\r\n    SetVar(AddressMemberId, Address(#MemberId#))\r\n}.Else{\r\n    SetVar(AddressMemberId,)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1broadcast))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: \"broadcast\", Type: \"checkbox\", Value: \"false\")\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: member_id, Type:hidden, Value: #MemberId#)\r\n            Div(input-group){\r\n                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1message_create$,EcosystemId=#EcosystemId#\").Popup(Header: $@1member$, Width: \"50\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }.Show(\"broadcast=false\")\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1roles,source_roles).Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#>0){\r\n                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n            }.Else{\r\n                Div(mt-sm){\r\n                    $@1roles$ $@1not_founded$\r\n                }\r\n            }\r\n        }.Show(\"broadcast=true\")\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1message_subject)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_header, Value: \"\", Placeholder: $@1message_subject_type_here$)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1message_text)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Type: Hidden, Name: eco_id, Value: \"#ecosystem_id#\")\r\n            Input(Type: Hidden, Name: sender, Value: \"1\")\r\n            Input(Type: Hidden, Name: icon_name, Value: \"icon-speech\")\r\n            Input(Type: Hidden, Name: params_map, Value: `{\"type\": \"message\"}`)\r\n            Input(Type: Hidden, Name: page_name, Value: \"@1message_view\")\r\n            Input(Type: textarea, Name: text_body, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12){\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"rid=0,current_role_id=#role_id#\")\r\n            }.Show(\"broadcast=false\")\r\n            Div(){\r\n                Button(Body: LangRes(@1send), Class: btn btn-primary pull-right, Page: @1messages_list, Contract: @1NotificationsSend, Params: \"member_id=0,current_role_id=#role_id#,closure_type=2\")\r\n            }.Show(\"broadcast=true\")\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: @1messages_list)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "message_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed\").Vars(message)\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #message_sender_member_id#}).Vars(highlighted)\r\n    If(#highlighted_id#){\r\n        SetVar(message_sender_member_name,#highlighted_member_name#)\r\n        SetVar(message_sender_image_id,#highlighted_image_id#)\r\n    }\r\n\r\n    If(#message_page_params_thread#>0){\r\n        SetVar(thread,#message_page_params_thread#)\r\n        DBFind(@1notifications,src_thread).Where({\"ecosystem\": #ecosystem_id#, \"page_params->thread\": #message_page_params_thread#}).Order(\"id\").Count(\"thread_quantity\").Columns(\"id,sender->member_id,sender->member_name,sender->image_id,notification->body,date_created\")\r\n        DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #message_page_params_thread#}).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,notification->body,date_created\").Vars(init_message)\r\n    }.Else{\r\n        SetVar(thread,#message_id#)\r\n        DBFind(@1notifications,src_thread).Where({\"ecosystem\": #ecosystem_id#, \"page_params->thread\": #message_id#}).Order(\"id\").Count(\"thread_quantity\").Columns(\"id,sender->member_id,sender->member_name,sender->image_id,notification->body,date_created\")\r\n        DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #message_id#}).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,notification->body,date_created\").Vars(init_message)\r\n    }\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #init_message_sender_member_id#}).Vars(starter)\r\n    If(#starter_id#){\r\n        SetVar(init_message_sender_member_name,#starter_member_name#)\r\n        SetVar(init_message_sender_image_id,#starter_image_id#)\r\n    }\r\n\r\n    If(#init_message_sender_member_id#!=#key_id#){\r\n        SetVar(reply_recipient,#init_message_sender_member_id#)\r\n    }.Else{\r\n        SetVar(reply_recipient,#init_message_recipient_member_id#)\r\n    }\r\n    If(#message_notification_header#==\"\"){\r\n        SetVar(thread_name,$@1message_subject_empty$)\r\n    }.Else{\r\n        SetVar(thread_name,#message_notification_header#)\r\n    }\r\n\r\n    SetTitle($@1messenger$)\r\n    Span(Class: h5 m0 ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1messenger$, Page: @1messages_list)\r\n        Span(Class: text-muted mh, Body: /)\r\n        Span(Class: text-muted, Body: $@1message_view$)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    Form(){\r\n        Div(content-wrapper){\r\n            Div(row){\r\n                Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                    Form(panel panel-primary){\r\n                        Div(text-center pt){\r\n                            If(#message_sender_member_id#==#key_id#){\r\n                                Span(Class: h4 text-bold, Body: LangRes(@1message_from_you))\r\n                            }.Else{\r\n                                Span(Class: h4 text-bold, Body: LangRes(@1message_from) #message_sender_member_name#)\r\n                            }\r\n                        }\r\n                        Div(panel-body pt pb){\r\n                            Div(list-group-item wrapper-block){\r\n                                Div(avatar-block text-center){\r\n                                    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#message_sender_member_id#\"){\r\n                                        If(#message_sender_image_id#>0){\r\n                                            Image(Src: Binary().ById(#message_sender_image_id#), Class: img-circle avatar)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-3x)\r\n                                        }\r\n                                        Div(preview m0 h5){#message_sender_member_name#}\r\n                                    }\r\n                                }\r\n                                Div(message-block){\r\n                                    Span(Class: h5, Body: #message_notification_body#)\r\n                                }\r\n                                Div(datetime-block text-muted){\r\n                                    Span(Class: mb-sm h6, Body: DateTime(#message_date_created#,HH:MI DD.MM.YYYY))\r\n                                }\r\n                            }\r\n                            Div(row mt-lg){\r\n                                Div(col-md-12 text-left){\r\n                                    Label(){\r\n                                        If(#message_sender_member_id#!=#key_id#){\r\n                                            Span(Body: LangRes(@1reply_text))\r\n                                        }.Else{\r\n                                            Span(Body: LangRes(@1message_text))\r\n                                        }\r\n                                    }\r\n                                    Input(Type: Hidden, Name: member_id, Value: \"#reply_recipient#\")\r\n                                    Input(Type: Hidden, Name: eco_id, Value: \"#ecosystem_id#\")\r\n                                    Input(Type: Hidden, Name: sender, Value: \"1\")\r\n                                    Input(Type: Hidden, Name: icon_name, Value: \"icon-speech\")\r\n                                    Input(Type: Hidden, Name: params_map, Value: `{\"type\":\"message\",\"thread\":\"#thread#\"}`)\r\n                                    Input(Type: Hidden, Name: page_name, Value: \"@1message_view\")\r\n                                    Input(Type: Hidden, Name: text_header, Value: \"#thread_name#\")\r\n                                    Input(Type: textarea, Name: text_body, Value: \"\", Placeholder: $@1message_type_here$).Style(resize: vertical; min-height: 6em;)\r\n                                }\r\n                            }\r\n                            If(#message_sender_member_id#==#key_id#){\r\n                                SetVar(send_button, $@1send$)\r\n                            }.Else{\r\n                                SetVar(send_button, $@1reply$)\r\n                            }\r\n                            If(And(#message_closed#==0,Or(#message_sender_member_id#!=#key_id#,#message_recipient_member_id#==#key_id#))){\r\n                                Div(mt text-right){\r\n                                    Button(Body: LangRes(@1mark_read), Class: btn btn-default, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1messages_list)\r\n                                    Button(Body: #send_button#, Class: btn btn-primary, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#\", Page: @1message_view, PageParams: \"notific_id=#message_id#\").CompositeContract(@1NotificationsClose, [{\"notific_id\": #notific_id#}])\r\n                                }\r\n                            }.Else{\r\n                                Div(mt text-right){\r\n                                    Button(Body: #send_button#, Class: btn btn-primary, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#\", Page: @1message_view, PageParams: \"notific_id=#message_id#\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(#thread_quantity#>0){\r\n                Div(row){\r\n                    Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: h4 text-bold, Body: #thread_name#)\r\n                        }\r\n                        Div(list-group-item wrapper-block){\r\n                            Div(avatar-block text-center){\r\n                                LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#init_message_sender_member_id#\"){\r\n                                    If(#init_message_sender_image_id#>0){\r\n                                        Image(Src: Binary().ById(#init_message_sender_image_id#), Class: img-circle avatar)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-3x)\r\n                                    }\r\n                                    Div(preview m0 h5){#init_message_sender_member_name#}\r\n                                }\r\n                            }\r\n                            Div(message-block){\r\n                                Span(Class: h5, Body: #init_message_notification_body#)\r\n                            }\r\n                            Div(datetime-block text-muted){\r\n                                Span(Class: badge mr, Body: 1)\r\n                                Span(Class: mb-sm h6, Body: DateTime(#init_message_date_created#,HH:MI DD.MM.YYYY))\r\n                            }\r\n                        }\r\n                        ForList(src_thread){\r\n                            Div(list-group-item wrapper-block){\r\n                                Div(avatar-block text-center){\r\n                                    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #sender.member_id#}).Vars(thread_message)\r\n                                    If(#thread_message_id#==\"\"){\r\n                                        SetVar(thread_message_member_name,#sender.member_name#)\r\n                                        SetVar(thread_message_image_id,#sender.image_id#)\r\n                                    }\r\n                                    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#sender.member_id#\"){\r\n                                        If(#thread_message_image_id#>0){\r\n                                            Image(Src: Binary().ById(#thread_message_image_id#), Class: img-circle avatar)\r\n                                        }.Else{\r\n                                            Span(Class: fa icon-user fa-3x)\r\n                                        }\r\n                                        Div(preview m0 h5){#thread_message_member_name#}\r\n                                    }\r\n                                }\r\n                                Div(message-block){\r\n                                    Span(Class: h5, Body: #notification.body#)\r\n                                }\r\n                                Div(datetime-block text-muted){\r\n                                    Span(Class: badge mr, Body: Calculate(#src_thread_index#+1))\r\n                                    Span(Class: mb-sm h6, Body: DateTime(#date_created#,HH:MI DD.MM.YYYY))\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .preview {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n        .wrapper-block {min-height: 80px;}\r\n        .avatar-block {\r\n            position: absolute;\r\n            width: 70px;\r\n        }\r\n        .message-block {\r\n            margin-left: 85px;\r\n            margin-bottom: 15px;\r\n            }\r\n        .datetime-block {\r\n            position: absolute;\r\n            bottom: 5px;\r\n            right: 10px;\r\n        }\r\n        .avatar {\r\n            max-width: 42px;\r\n            max-height: 42px;\r\n            border: 1px solid #bbb;\r\n        }\r\n        .badge {margin-top: -2px;}\r\n    )\r\n}.Else{\r\n    Div(col-md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "messages_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1notifications,threads).Where({\"ecosystem\": #ecosystem_id#, \"page_params->type\": \"message\", {\"$or\": [{\"sender->member_id\": #key_id#}, {\"recipient->member_id\": #key_id#}]}}).Order({\"id\":\"-1\"}).Limit(250).Count(threads_count).Columns(\"id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed\")\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n            Div(list-group-item text-center p0){\r\n                Span(Class: h4 text-bold vc, Body: LangRes(@1message_active_threads))\r\n                Button(Class: btn-xs btn-link plus-button p0 b0, Page: @1message_create){\r\n                    Span(Class: fa fa-2x icon-plus vc)\r\n                }.Popup(50, $@1message_create$)\r\n            }.Style(\r\n                .plus-button {\r\n                    position: absolute;\r\n                    right: 10px;\r\n                }\r\n            )\r\n            If(#threads_count#>0){\r\n                ForList(threads){\r\n                    If(#page_params.thread#>0){\r\n                        DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"page_params->thread\": #page_params.thread#}).Order({\"id\":\"-1\"}).Limit(1).Columns(\"id\").Vars(last)\r\n                    }.Else{\r\n                        DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"page_params->thread\": #id#}).Count(thread_depth)\r\n                    }\r\n                    If(Or(#id#==#last_id#,#thread_depth#==0)){\r\n                        If(And(#closed#==0,Or(#sender.member_id#!=#key_id#,#recipient.member_id#==#key_id#))){\r\n                            SetVar(status, \"unread\")\r\n                        }.Else{\r\n                            SetVar(status, \"read\")\r\n                        }\r\n                        Div(list-group-item col-sm-12 thread-block #status#){\r\n                            Div(avatar-block text-center){\r\n                                DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #id#}).Columns(\"sender->member_id,recipient->member_id,sender->member_name,recipient->member_name,sender->image_id,recipient->image_id\").Vars(init_message)\r\n                                If(#init_message_sender_member_id#!=#key_id#){\r\n                                    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #init_message_sender_member_id#}).Vars(talker)\r\n                                    If(#talker_id#){\r\n                                        SetVar(talker_name,#talker_member_name#)\r\n                                        SetVar(talker_picture,#talker_image_id#)\r\n                                    }.Else{\r\n                                        SetVar(talker_id,#init_message_sender_member_id#)\r\n                                        SetVar(talker_name,#init_message_sender_member_name#)\r\n                                        SetVar(talker_picture,#init_message_sender_image_id#)\r\n                                    }\r\n                                }.Else{\r\n                                    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #init_message_recipient_member_id#}).Vars(talker)\r\n                                    If(#talker_id#){\r\n                                        SetVar(talker_name,#talker_member_name#)\r\n                                        SetVar(talker_picture,#talker_image_id#)\r\n                                    }.Else{\r\n                                        SetVar(talker_id,#init_message_recipient_member_id#)\r\n                                        SetVar(talker_name,#init_message_recipient_member_name#)\r\n                                        SetVar(talker_picture,#init_message_recipient_image_id#)\r\n                                    }\r\n                                }\r\n                                LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#talker_id#\"){\r\n                                    If(#talker_picture#>0){\r\n                                        Image(Src: Binary().ById(#talker_picture#), Class: img-circle avatar)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-3x)\r\n                                    }\r\n                                    Div(preview m0 h5){#talker_name#}\r\n                                }\r\n                            }\r\n                            Div(message-block){\r\n                                LinkPage(Page: @1message_view, PageParams: \"notific_id=#id#\"){\r\n                                    If(#notification.header#==\"\"){\r\n                                        Div(Class: preview h4 m0, Body: LangRes(@1message_subject_empty))\r\n                                    }.Else{\r\n                                        Div(Class: preview h4 m0, Body: #notification.header#)\r\n                                    }\r\n                                    If(#sender.member_id#==#key_id#){\r\n                                        Div(Class: preview text-muted, Body: $@1you$: #notification.body#)\r\n                                    }.Else{\r\n                                        Div(Class: preview text-muted, Body: #notification.body#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(datetime-block text-muted){\r\n                                If(#status#==\"unread\"){\r\n                                    Span(Class: badge mr, Body: LangRes(@1unread))\r\n                                }\r\n                                Span(Class: h6, Body: DateTime(#date_created#, HH:MI DD.MM.YYYY))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(list-group-item text-center text-muted){\r\n                    $@1messages_empty$\r\n                }\r\n            }\r\n        }\r\n    }.Style(\r\n        .thread-block {height: 80px;}\r\n        .avatar-block {\r\n            position: absolute;\r\n            width: 70px;\r\n        }\r\n        .message-block {margin-left: 85px;}\r\n        .datetime-block {\r\n            position: absolute;\r\n            bottom: 5px;\r\n            right: 10px;\r\n        }\r\n        .preview {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n        }\r\n        .avatar {\r\n            max-width: 42px;\r\n            max-height: 42px;\r\n            border: 1px solid #bbb;\r\n        }\r\n        .badge {margin-top: -2px;}\r\n        .unread {background-color: #f7fafe;}\r\n        .vc {line-height: 44px;}\r\n    )\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1notifications,notification_singles).Where({\"ecosystem\": #ecosystem_id#, \"closed\": 0, \"notification->type\": 1, \"recipient->member_id\": #key_id#}).Columns(\"id,page_name,notification->icon,notification->header,notification->popup,notification->body\").Count(count_singles)\r\n\r\nDBFind(@1notifications,notification_roles).Where({\"ecosystem\": #ecosystem_id#, \"closed\": 0, \"notification->type\": 2, \"recipient->role_id\": #role_id#, {\"$or\": [{\"date_start_processing\": \"$isnull\"}, {\"processing_info->member_id\": #key_id#}]}}).Columns(\"id,page_name,notification->icon,notification->header,notification->popup,notification->body,recipient->role_id\").Count(count_current_role)\r\n\r\nSetVar(limit,10).(limit_count,#limit#)\r\nSetVar(remaining,Calculate(#count_singles#+#count_current_role#-#limit#))\r\n\r\nIf(And(#limit_count#>0,#count_singles#>0)){\r\n    ForList(notification_singles){\r\n        If(#limit_count#>0){\r\n            SetVar(limit_count,Calculate(#limit_count#-1))\r\n            If(#notification.popup#==1){\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }.Else{\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nIf(And(#limit_count#>0,#count_current_role#>0)){\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #role_id#}).Columns(\"role_name\").Vars(role)\r\n    Div(dropdown-heading b0){\r\n        $@1role_notifics$ (#role_role_name#)\r\n    }\r\n    ForList(notification_roles){\r\n        If(#limit_count#>0){\r\n            SetVar(limit_count,Calculate(#limit_count#-1))\r\n            If(#notification.popup#==1){\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }.Popup(Header: $@1notifications_view$, Width: \"40\")\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }.Else{\r\n                Div(list-group-item){\r\n                    Button(Class: btn-link m0 p0 b0 text-left vm, Page: #page_name#, PageParams: \"notific_id=#id#\"){\r\n                        Div(media-box clearfix){\r\n                            Div(pull-left){\r\n                                Em(Class: fa #notification.icon# fa-1x text-primary)\r\n                            }\r\n                            Div(media-box-body){\r\n                                Div(Class: m0 text-normal h6, Body: #notification.header#)\r\n                                Div(Class: m0 text-muted h6, Body: #notification.body#)\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(.vm{vertical-align: middle;})\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nIf(#remaining#>0){\r\n    Button(Class: btn btn-block btn-default, Page: @1notifications_list){\r\n        $@1notifications_show_all$ (#remaining# $@1more$)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_broadcast",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nDBFind(@1ecosystems).Count(ecos_count)\r\nForm(){\r\n    If(And(#role_id# == #role_admin#, #ecosystem_id# == 1, #ecos_count# > 1)){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Value: $@1ecosystems_administrators$, Disabled: true)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Header)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1body_text)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Body, Type: textarea).Style(resize: vertical;)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1popup))\r\n                }\r\n            }.Style(line-height: 18px;)\r\n            Div(col-md-9 text-left){\r\n                Input(Name: Popup, Type: checkbox, Value: false, Class: mt-sm)\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-sm-12 alert alert-warning text-center){\r\n            If(#role_id# != #role_admin#){\r\n                LangRes(@1only_admin_action)\r\n            }\r\n            If(#ecosystem_id#!=1){\r\n                LangRes(@1only_first_ecosystem_action)\r\n            }\r\n            If(#ecos_count#==1){\r\n                LangRes(@1other_ecosystems_not_found)\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: @1notifications_list, Contract: @1NotificationsBroadcast, Params: \"RoleId=#role_id#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1notifications_list)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#page_par#!=\"\"){\r\n    SetVar(Name: type, Value: #page_par#)\r\n}\r\n\r\nIf(Or(#type#==0,#type#==1)){\r\n}.Else{\r\n    SetVar(Name: type, Value: 0)\r\n}\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1notifications_list_desc$\"))\r\nDiv(btn-group ml-lg){\r\n    If(#type#==0){\r\n        Button(Body: Em(Class: fa fa-bell-o) $@1personal_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter ml-sm)\r\n    }.Else{\r\n        Button(Body: Em(Class: fa fa-bell-o) $@1personal_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray ml-sm)\r\n    }\r\n    If(#type#==1){\r\n        Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter ml-sm)\r\n    }.Else{\r\n        Button(Body: Em(Class: fa fa-bullhorn) $@1role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray ml-sm)\r\n    }\r\n}\r\nIf(#type#==0){\r\n    Include(@1notifications_single)\r\n}\r\nIf(#type#==1){\r\n    Include(@1notifications_roles)\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_roles_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1notifications_roles_send).(back_page,@1notifications_list)\r\nDBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: eco_id, Type:hidden, Value: #EcosystemId#)\r\n            Div(input-group){\r\n                DBFind(@1ecosystems).Columns(\"id,name\").WhereId(#EcosystemId#).Vars(e)\r\n                Input(Name: e_name, Disabled: 1, Value: #e_name#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_ecosystem, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#EcosystemId#,Type=ALL_LIST\").Popup(Header: $@1ecosystem$, Width: \"40\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1roles,source_roles).Where({\"ecosystem\": #EcosystemId#, \"deleted\": 0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#>0){\r\n                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\r\n            }.Else{\r\n                Div(mt-sm){\r\n                    $@1roles$ $@1not_founded$\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1closure_type)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_closure, Source: src_closure_type)\r\n            Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\r\n            Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\r\n            Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: text_header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1body_text))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_body, Type: textarea, Value: \"Body text\").Style(resize: vertical;)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=false\")\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name_popup, Value: \"@1notifications_testpage_popup\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name_popup, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=true\")\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1params))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1popup))\r\n            }\r\n        }.Style(line-height: 18px;)\r\n        Div(col-md-9 text-left){\r\n            Input(Name: popup, Type: checkbox, Value: false, Class: mt-sm)\r\n        }\r\n    }\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name)\")\r\n    }.Show(\"popup=false\")\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"type=1\", Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name_popup)\")\r\n    }.Show(\"popup=true\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"type=1\")\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_show",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nSetTitle($@1notifications_view$)\r\n\r\nSetVar(type,0).(header,).(body,)\r\nDiv(content-wrapper){\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\r\n        SetVar(type,#note_sender_type#)\r\n        SetVar(header,#note_notification_header#)\r\n        SetVar(body,#note_notification_body#)\r\n\r\n\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Form(panel panel-primary){\r\n                    Div(panel-heading text-center){\r\n                        #header#\r\n                    }\r\n                    Div(panel-body){\r\n                        #body#\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        If(#type# == 1){\r\n                            If(#note_closed# == 0){\r\n                                Button(Body: LangRes(@1ok), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1default_page)\r\n                            }\r\n                        }.ElseIf(#type# == 2){\r\n                            If(#note_closed#==0){\r\n                                If(#note_date_start_processing#==\"\"){\r\n                                    Button(Body: LangRes(@1ok), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_show)\r\n                                }.Else{\r\n                                    Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                                }\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1default_page)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_single_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1notifications_single_send).(back_page,@1notifications_list)\r\nDBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\n\r\nIf(#MemberId# == \"\"){\r\n    SetVar(MemberId, 0)\r\n}\r\n\r\nIf(Or(#MemberId#>0,#MemberId#<0)){\r\n    SetVar(AddressMemberId, Address(#MemberId#))\r\n}.Else{\r\n    SetVar(AddressMemberId,)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1ecosystem)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: eco_id, Type:hidden, Value: #EcosystemId#)\r\n            Div(input-group){\r\n                DBFind(@1ecosystems).Columns(\"id,name\").WhereId(#EcosystemId#).Vars(e)\r\n                Input(Name: e_name, Disabled: 1, Value: #e_name#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_ecosystem, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#EcosystemId#,Type=ALL_LIST\").Popup(Header: $@1ecosystem$, Width: \"40\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1recipient)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: member_id, Type:hidden, Value: #MemberId#)\r\n            Div(input-group){\r\n                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1send$,EcosystemId=#EcosystemId#\").Popup(Header: $@1member$, Width: \"50\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1sender)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_sender, Source: src_sender)\r\n            Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1icon)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            AppParam(Ecosystem: 1, App: #application_id#, Name: notification_icon, Source: src_icon)\r\n            Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1header)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: text_header, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1body_text))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: text_body, Type: textarea, Value: \"Body text\").Style(resize: vertical;)\r\n        }\r\n    }\r\n    Div(row mt-lg){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1page)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=false\")\r\n        Div(col-md-9 text-left){\r\n            Input(Name: page_name_popup, Value: \"@1notifications_testpage_popup\").Validate(minLength:3, maxLength:255)\r\n            InputErr(Name: page_name_popup, minLength: $@1validate_name$, maxLength: $@1validate_role_name$)\r\n        }.Show(\"popup=true\")\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1params))\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1popup))\r\n            }\r\n        }.Style(line-height: 18px;)\r\n        Div(col-md-9 text-left){\r\n            Input(Name: popup, Type: checkbox, Value: false, Class: mt-sm)\r\n        }\r\n    }\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name)\")\r\n    }.Show(\"popup=false\")\r\n    Div(){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1NotificationsSend, Params: \"current_role_id=#role_id#,page_name=Val(page_name_popup)\")\r\n    }.Show(\"popup=true\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\n    If(#notific_id#>0){\r\n        DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"id,sender->type,notification->type,notification->header,notification->body,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\r\n        SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_body,#prefix_notification_body#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n        SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_body,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-6 col-md-offset-3){\r\n            Form(){\r\n                Div(list-group-item text-center){\r\n                    Span(Class: h3, Body: #notific_header#)\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1id))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_id#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1type))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            If(#notification_type# > 0){\r\n                                Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_type, Index: #notification_type#))\r\n                            }.Else{\r\n                                Span(Class: h4, Body: #notification_type#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1sender))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            If(#sender_type# > 0){\r\n                                If(#sender_type# == 1){\r\n                                    Span(Class: h4, Body: $@1member$)\r\n                                }\r\n                                If(#sender_type# == 2){\r\n                                    Span(Class: h4, Body: $@1role$)\r\n                                }\r\n                            }.Else{\r\n                                Span(Class: h4, Body: #sender_type#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1body_text))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_body#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item){\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1value_number))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_val_int#)\r\n                        }\r\n                    }\r\n                    Div(row){\r\n                        Div(col-md-6 mt-sm text-right){\r\n                            Span(Class: h4, Body: LangRes(@1value_string))\r\n                        }\r\n                        Div(col-md-6 mt-sm text-left){\r\n                            Span(Class: h4, Body: #notific_val_str#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(list-group-item text-right){\r\n                    If(#prefix_closed# == 0){\r\n                        If(#notification_type# == 1){\r\n                            Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                        }.ElseIf(#notification_type# == 2){\r\n                            If(#prefix_date_start_processing# == \"\"){\r\n                                Button(Body: LangRes(@1begin), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }.Else{\r\n                                Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        If(#notification_type# == 1){\r\n                            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=0\")\r\n                        }.ElseIf(#notification_type# == 2){\r\n                            Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage_popup",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\n\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"id,sender->type,notification->type,notification->header,notification->body,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\r\n    SetVar(sender_type,#prefix_sender_type#).(notification_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_body,#prefix_notification_body#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n    SetVar(notific_id,\"0\").SetVar(sender_type,\"0\").(notification_type,\"0\").(notific_header,\"null\").(notific_body,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\r\n}\r\n\r\nForm(){\r\n    Div(list-group-item text-center){\r\n        Span(Class: h3, Body: #notific_header#)\r\n    }\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1id))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_id#)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1type))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                If(#notification_type# > 0){\r\n                    Span(Class: h4, Body: AppParam(Ecosystem: 1, App:#application_id#, Name: notification_type, Index: #notification_type#))\r\n                }.Else{\r\n                    Span(Class: h4, Body: #notification_type#)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1sender))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                If(#sender_type# > 0){\r\n                    If(#sender_type# == 1){\r\n                        Span(Class: h4, Body: $@1member$)\r\n                    }\r\n                    If(#sender_type# == 2){\r\n                        Span(Class: h4, Body: $@1role$)\r\n                    }\r\n                }.Else{\r\n                    Span(Class: h4, Body: #sender_type#)\r\n                }\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1body_text))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_body#)\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item){\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1value_number))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_val_int#)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-6 mt-sm text-right){\r\n                Span(Class: h4, Body: LangRes(@1value_string))\r\n            }\r\n            Div(col-md-6 mt-sm text-left){\r\n                Span(Class: h4, Body: #notific_val_str#)\r\n            }\r\n        }\r\n    }\r\n    Div(list-group-item text-right){\r\n        If(#prefix_closed# == 0){\r\n            If(#notification_type# == 1){\r\n                Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list).Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.ElseIf(#notification_type# == 2){\r\n                If(#prefix_date_start_processing# == \"\"){\r\n                    Button(Body: LangRes(@1begin), Class: btn btn-primary, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_start_processing_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }.Else{\r\n                    Button(Body: LangRes(@1close), Class: btn btn-primary, Contract: @1NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: \"$@1want_close_notification$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }\r\n            }\r\n        }.Else{\r\n            If(#notification_type# == 1){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=0\")\r\n            }.ElseIf(#notification_type# == 2){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "platform_apps_settings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"app\")\r\n\r\nSetVar(this_page, \"platform_apps_settings\").(role_admin,0).(role_candidate_for_validators,0).(role_consensus,0).(role_delegate,0).(role_developer,0).(role_investor_with_voting_rights,0).(role_validator,0).(role_creates_roles,0)\r\nSetVar(role_admin, AppParam(App: #app_id#, Name: \"role_admin\"))\r\nSetVar(role_candidate_for_validators, AppParam(App: #app_id#, Name: \"role_candidate_for_validators\"))\r\nSetVar(role_consensus, AppParam(App: #app_id#, Name: \"role_consensus\"))\r\nSetVar(role_delegate, AppParam(App: #app_id#, Name: \"role_delegate\"))\r\nSetVar(role_developer, AppParam(App: #app_id#, Name: \"role_developer\"))\r\nSetVar(role_investor_with_voting_rights, AppParam(App: #app_id#, Name: \"role_investor_with_voting_rights\"))\r\nSetVar(role_validator, AppParam(App: #app_id#, Name: \"role_validator\"))\r\nSetVar(role_creates_roles, AppParam(App: #app_id#, Name: \"role_creates_roles\"))\r\n\r\nDBFind(\"@1roles\", src_roles).Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Columns(\"role_name,id\").Limit(100)\r\n\r\nSetVar(row,\"row mt-sm\").(col_left,\"col-sm-4 text-right mt-sm\").(col_right,\"col-sm-8 text-left\")\r\n\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(text-center text-bold h4 m0){\r\n                        LangRes(@1pa_settings)\r\n                    }\r\n                    Div(text-center text-muted){\r\n                        $@1pa_settings_description$\r\n                    }\r\n                    Div(row mt-lg){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Admin\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleAdmin, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_admin#)\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                \"Developer\"\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleDeveloper, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_developer#)\r\n                        }\r\n                    }\r\n                    If(#ecosystem_id# == 1){\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Candidate for validators\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleValidatorCandidate, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_candidate_for_validators#)\r\n                            }\r\n                        }\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Consensus\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleConsensus, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_consensus#)\r\n                            }\r\n                        }\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Delegate\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleDelegate, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_delegate#)\r\n                            }\r\n                        }\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Investor with voting rights\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleInvestor, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_investor_with_voting_rights#)\r\n                            }\r\n                        }\r\n                        Div(#row#){\r\n                            Div(#col_left#){\r\n                                Label(){\r\n                                    \"Validator\"\r\n                                }\r\n                            }\r\n                            Div(#col_right#){\r\n                                Select(Name: RoleValidator, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_validator#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(#row#){\r\n                        Div(#col_left#){\r\n                            Label(){\r\n                                LangRes(@1role_creates_roles)\r\n                            }\r\n                        }\r\n                        Div(#col_right#){\r\n                            Select(Name: RoleCreatesRoles, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #role_creates_roles#)\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Button(Body: $@1apply_settings$, Class: btn btn-primary, Page: #this_page#, Contract: PlatformAppsSettings)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_avatar_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        Label($@1avatar$)\r\n        Span(Class: text-danger, Body:*)\r\n        Input(Name: member_image, Type: file)\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-12){\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Contract: @1ProfileEditAvatar, Page: @1profile_edit, PageParams:\"avatar_uploaded=1\")\r\n            Button(Body: LangRes(@1close), Class: btn btn-default, Page: @1profile_edit)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_edit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle($@1editing_profile$)\r\n    Div(breadcrumb){\r\n        LinkPage($@1user_info$, @1profile_view)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $@1editing_profile$)\r\n    }\r\n\r\n    SetVar(prefix_image_id, 0)\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #key_id#}).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\r\n\r\n    DBFind(@1buffer_data).Columns(\"value->image_id\").Where({\"ecosystem\": #ecosystem_id#, \"key\": avatar, \"member_id\": #key_id#}).Vars(avatar)\r\n    If(And(#avatar_value_image_id#>0,#avatar_uploaded#==1)){\r\n        SetVar(prefix_image_id, #avatar_value_image_id#)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: LangRes(@1editing_profile))\r\n                Div(panel-body){\r\n                    Div(row){\r\n                        Div(col-md-5 mt-lg text-center){\r\n                            Button(Class: btn btn-link, Page: @1profile_avatar_edit){\r\n                                If(#prefix_image_id#>0){\r\n                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\r\n                                }\r\n                            }.Popup(Header: $@1editing_profile$, Width: 30)\r\n                        }\r\n                        Div(col-md-7 mc-sm text-left){\r\n                            Div(form-group){\r\n                                Label(){\r\n                                    Span(Body: LangRes(@1member_name))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\r\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\r\n                                }.Else{\r\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\r\n                                    InputErr(Name: member_name, minLength: $@1validate_member_name$, maxLength: $@1validate_member_name$)\r\n                                }\r\n                            }\r\n                            Div(form-group){\r\n                                If(#prefix_member_info_information#){\r\n                                    Label(){\r\n                                        Span(Body: LangRes(@1information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\r\n                                }.Else{\r\n                                    Label(){\r\n                                        Span(Body: LangRes(@1information))\r\n                                    }\r\n                                    Input(Name: information, Type: textarea)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1profile_view)\r\n                    Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1profile_view, Params:\"image_id=#prefix_image_id#\", Contract: @1ProfileEdit).Alert(Text: \"$@1want_save_changes$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_transactions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1profile_transactions).(this_table, @1history)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1transactions_history$)\r\n\r\nIf(#ecosystem_id# == 1){\r\n    SetVar(token_title, \"APLA\")\r\n}.Else{\r\n    DBFind(\"@1ecosystems\").Where({\"id\": #ecosystem_id#}).Vars(\"custom\")\r\n    SetVar(token_title, #custom_token_title#)\r\n}\r\n\r\nIf(#wallet# == \"\"){\r\n    SetVar(wallet, 0)\r\n}\r\n\r\nIf(#new_filter#){\r\n    If(#show_fees#!=\"true\"){\r\n        SetVar(filter1, {\"type\": {\"$neq\": 1}})\r\n    }\r\n    If(#wallet# != 0){\r\n        SetVar(filter2, {\"$or\": [{\"$and\": [{\"sender_id\": #key_id#}, {\"recipient_id\": #wallet#}]}, {\"$and\": [{\"sender_id\": #wallet#}, {\"recipient_id\": #key_id#}]}]})\r\n    }.Else{\r\n        SetVar(filter2, {\"$or\": [{\"sender_id\":#key_id#}, {\"recipient_id\":#key_id#}]})\r\n    }\r\n    If(#lower_limit#>0){\r\n        If(#upper_limit#>0){\r\n            SetVar(filter3, {\"amount\": [{\"$gte\": Calculate(Exp: #lower_limit#*1000000000000000000, Type: money)}, {\"$lte\": Calculate(Exp: #upper_limit#*1000000000000000000, Type: money)}]})\r\n        }.Else{\r\n            SetVar(filter3, {\"amount\": {\"$gte\": Calculate(Exp: #lower_limit#*1000000000000000000, Type: money)}})\r\n        }\r\n    }.ElseIf(#upper_limit#>0){\r\n        SetVar(filter3, {\"amount\": {\"$lte\": Calculate(Exp: #upper_limit#*1000000000000000000, Type: money)}})\r\n    }\r\n    SetVar(filters, {\"$and\": [{\"ecosystem\":#ecosystem_id#}, #filter1#, #filter2#, #filter3#]})\r\n    SetVar(page_par, #filters#)\r\n}.ElseIf(#page_par#){\r\n    SetVar(filters, #page_par#)\r\n}.Else{\r\n    SetVar(filters, {\"$and\": [{\"ecosystem\":#ecosystem_id#}, {\"type\": {\"$neq\": 1}}, {\"$or\": [{\"sender_id\":#key_id#}, {\"recipient_id\":#key_id#}]}]})\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"$and\": [#filters#, {\"comment\": {\"$ilike\": \"#search#\"}}]})\r\n}.Else{\r\n    SetVar(where, #filters#)\r\n}\r\n\r\nDiv(mr-lg text-right){\r\n    Button(Page: @1profile_transactions_filter, Class: btn bg-gray-lighter mr-sm, PageParams: \"show_fees=#show_fees#,MemberId=#wallet#,lower_limit=#lower_limit#,upper_limit=#upper_limit#\", Body: Em(Class: fa fa-filter) $@1filter$).Popup(Header: $@1filter$, Width: \"50\")\r\n    If(#page_par#){\r\n        Button(Page: #this_page#, Class: btn bg-gray-lighter mr-sm, Body: Em(Class: fa fa-close))\r\n    }\r\n}.Style(margin-top: -33px; z-index: 1001;)\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1comment))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(@1history, src_history).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(sender_wallet){\r\n    If(#sender_id# != 0){\r\n        LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#sender_id#\"){\r\n            Address(#sender_id#)\r\n        }\r\n    }\r\n}.Custom(recipient_wallet){\r\n    LinkPage(Page: @1profile_view, PageParams: \"v_key_id=#recipient_id#\"){\r\n        Address(#recipient_id#)\r\n    }\r\n}.Custom(amount_apl){\r\n    Span(Money(#amount#) #token_title#)\r\n}.Custom(_type){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name: type_tokens_transfer, Index: #type#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_history, \"$@1block$=block_id,$@1sender$=sender_wallet,$@1recipient$=recipient_wallet,$@1amount$=amount_apl,$@1comment$=comment,$@1type$=_type\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1transactions_history_empty$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_transactions_filter",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,@1profile_transactions_filter)\r\n\r\nIf(#EcosystemId# == \"\"){\r\n    SetVar(EcosystemId, #ecosystem_id#)\r\n}\r\n\r\nIf(#MemberId# == \"\"){\r\n    SetVar(MemberId, 0)\r\n}\r\n\r\nIf(Or(#MemberId#>0,#MemberId#<0)){\r\n    SetVar(AddressMemberId, Address(#MemberId#))\r\n}.Else{\r\n    SetVar(AddressMemberId,)\r\n}\r\n\r\nIf(#ecosystem_id# == 1){\r\n    SetVar(token_title, \"APLA\")\r\n}.Else{\r\n    DBFind(\"@1ecosystems\").Where({\"id\": #ecosystem_id#}).Vars(\"custom\")\r\n    SetVar(token_title, #custom_token_title#)\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1wallet))\r\n            }\r\n        }\r\n        Div(col-md-8){\r\n            Input(Name: wallet, Type:hidden, Value: #MemberId#)\r\n            Div(input-group){\r\n                Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1filter$,EcosystemId=#EcosystemId#\").Popup(Header: $@1member$, Width: \"50\")\r\n                }.Style(\r\n                    .buttons {\r\n                        border: 1px solid #dde6e9;\r\n                        padding: 6px 16px;\r\n                    }\r\n                )\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_wallet_desc))\r\n        }\r\n    }\r\n    Div(row mt){\r\n        Div(col-md-4 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: $@1amount_range$ (#token_title#))\r\n            }\r\n        }\r\n        Div(col-sm-3 pr0){\r\n            If(#lower_limit#>0){\r\n                Input(Name: lower_limit, Placeholder: \"$@1for_example$: 0.1\", Value: #lower_limit#)\r\n            }.Else{\r\n                Input(Name: lower_limit, Placeholder: \"$@1for_example$: 0.1\")\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_lower_desc))\r\n        }\r\n        Div(col-sm-2 ph0 mt-sm text-center){\r\n            Label(Body: \"< $@1amount$ <\")\r\n        }\r\n        Div(col-sm-3 pl0){\r\n            If(#upper_limit#>0){\r\n                Input(Name: upper_limit, Placeholder: \"$@1for_example$: 100\", Value: #upper_limit#)\r\n            }.Else{\r\n                Input(Name: upper_limit, Placeholder: \"$@1for_example$: 100\")\r\n            }\r\n            Div(Class: m0 h6 text-muted, Body: LangRes(@1transactions_filter_upper_desc))\r\n        }\r\n    }\r\n    Div(row){\r\n        Div(col-md-4 mt text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1resources_fees_show))\r\n            }\r\n        }\r\n        Div(col-md-8){\r\n            If(#show_fees#==\"true\"){\r\n                Input(Name: show_fees, Type: \"checkbox\", Value: \"true\")\r\n            }.Else{\r\n                Input(Name: show_fees, Type: \"checkbox\", Value: \"false\")\r\n            }\r\n        }\r\n    }\r\n    Button(Body: LangRes(@1filter), Class: btn btn-primary pull-right, Page: @1profile_transactions, PageParams: \"new_filter=1,show_fees=Val(show_fees),wallet=#MemberId#,lower_limit=Val(lower_limit),upper_limit=Val(upper_limit)\")\r\n    Button(Body: LangRes(@1clear), Class: btn btn-default pull-right, Page: @1profile_transactions)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Include(@1profile)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"name\": \"Basic\", \"ecosystem\": 1}).Vars(application)\r\n\r\nIf(#Id#!=\"\"){\r\n    SetVar(v_role_id, #Id#)\r\n}\r\n\r\nIf(#v_role_id#>0){\r\n    DBFind(@1roles, src_roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_role_id#}).Columns(\"id,role_name,role_type,roles_access,creator->member_id,deleted\").Vars(prefix)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id, 1)\r\n    }.ElseIf(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0,#prefix_deleted#==0,#prefix_role_type#!=2)){\r\n        DBFind(@1roles_participants).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #prefix_roles_access#}}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1role)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Type: hidden, Name: rid, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\r\n                Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1type)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                SetVar(Name: var_prefix_role_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\r\n                Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: 1)\r\n                If(#prefix_role_type#==2){\r\n                    P(Class: m0 text-danger h6, Body: LangRes(@1elective_role_voting_only))\r\n                }\r\n            }\r\n        }\r\n        If(#prefix_role_type#!=2){\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1member)\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#MemberId# == \"\"){\r\n                        SetVar(MemberId, 0)\r\n                    }\r\n                    Input(Name: member_id, Type:hidden, Value: #MemberId#)\r\n                    Div(input-group){\r\n                        If(Or(#MemberId#>0,#MemberId#<0)){\r\n                            SetVar(AddressMemberId, Address(#MemberId#))\r\n                        }\r\n                        Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1roles_assign,back_header=$@1assign$,Id=#v_role_id#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                        }.Style(\r\n                            .buttons {\r\n                                border: 1px solid #dde6e9;\r\n                                padding: 6px 16px;\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(And(#manager_id#>0,#prefix_role_type#!=2)){\r\n            Button(Body: LangRes(@1assign), Class: btn bg-primary pull-right mt, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: @1RolesAssign, Params: \"member_id=Val(member_id)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nDBFind(@1roles, src_roles).Columns(\"id,role_name\").Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Order(id)\r\nIf(#back_page#==\"\"){\r\n   SetVar(back_page, \"@1roles_list\")\r\n}\r\n\r\nIf(#rid#==\"\"){\r\n    SetVar(title, $@1new_role$)\r\n    DBFind(@1buffer_data).Where({\"ecosystem\": #ecosystem_id#, \"key\": \"roles_access\", \"member_id\": #key_id#}).Columns(\"id,key,member_id,ecosystem,value->roles_access,value->role_type,value->role_name\").Vars(buffer)\r\n    AppParam(Source: app_roles_types, Ecosystem: 1, App: #application_id#, Name: roles_types_selection)\r\n    If(And(#buffer_value_roles_access#!=\"NULL\",#buffer_value_roles_access#!=\"\",#buffer_value_roles_access#!=\"[]\")){\r\n        DBFind(@1roles, src_roles_access).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #buffer_value_roles_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}.Else{\r\n    SetVar(title, $@1edit_role$)\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #rid#}).Columns(\"roles_access,role_type,role_name\").Vars(r)\r\n    SetVar(role_type, AppParam(Ecosystem: 1, App: #application_id#, Name: roles_types, Index: #r_role_type#))\r\n    If(And(#r_roles_access#!=\"NULL\",#r_roles_access#!=\"\",#r_roles_access#!=\"[]\")){\r\n        DBFind(@1roles, src_roles_access).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #r_roles_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid#==\"\"){\r\n                Input(Name: role_name, Value: #buffer_value_role_name#).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: role_name, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\r\n            }.Else{\r\n                Input(Name: role_name, Value: #r_role_name#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1type)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#rid#==\"\"){\r\n                Select(Name: role_type, Source: app_roles_types, NameColumn: name, ValueColumn: id, Value: #buffer_value_role_type#)\r\n            }.Else{\r\n                Input(Name: role_type, Value: #role_type#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1roles_access)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1roles_create, PageParams: \"rid=#rid#\", Contract: @1RolesAccessManager, Params: \"Rid=#rid#,ManagerRid=Val(roles_managers),Action=add\").Popup(50, #title#)\r\n                }\r\n            }\r\n            If(#ra_count#>0){\r\n                ForList(src_roles_access){\r\n                    SetVar(btn_class, \"bg-gray-lighter\")\r\n                    If(#id#==#role_id#){\r\n                        SetVar(btn_class, \"bg-primary\")\r\n                    }\r\n                    Button(Class: btn-xs #btn_class# mr-sm mb-sm, Page: @1roles_create, PageParams: \"rid=#rid#\", Contract: @1RolesAccessManager, Params: \"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    If(#rid#==\"\"){\r\n        Button(Body: LangRes(@1create), Class: btn bg-primary pull-right mt, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1RolesCreate)\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1roles_list).(this_table, @1roles)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1roles$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1roles_list_desc$\"))\r\nAddToolButton(Page: @1roles_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_role$)\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"role_name\": {\"$ilike\": \"#search#\"}})\r\n}\r\nSetVar(where, {\"ecosystem\": #ecosystem_id#, {#w_search#}})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1role))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#).Where({\"ecosystem\": #ecosystem_id#}).Count(all_roles_count)\r\nDBFind(#this_table#, src_roles).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access\").Custom(_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text,\"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text,\"text-muted\").(style_link, \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_creator){\r\n    If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\r\n            #creator.member_name#\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #role_name#\r\n        }.Else{\r\n            Div(Class: #style_link#){\r\n                Span(Class: fa icon-settings fa-2x mr-sm)\r\n            }.Style(\r\n                display: inline-block;\r\n            )\r\n            Span(Class: btn-link text-bold pb-sm){\r\n                Span(Class: #style_link#, Body: #role_name#)\r\n            }.Style(\r\n                display: inline-block;\r\n                vertical-align: top;\r\n                padding-top: 7px;\r\n                padding-left: 4px;\r\n            )\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# small){\r\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        If(#deleted# == 1){\r\n          Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_type){\r\n    DBFind(@1applications).Where({\"name\": \"Basic\", \"ecosystem\": 1}).Columns(\"name,id\").Vars(application)\r\n    Span(Class: #style_text#, Body: AppParam(Ecosystem: 1, App: #application_id#, Name: roles_types, Index: #role_type#))\r\n}.Custom(_status){\r\n    Span(Class:#style_text#){\r\n        If(#deleted# == 0){\r\n            LangRes(@1active)\r\n        }.Else{\r\n            LangRes(@1deleted)\r\n        }\r\n    }\r\n}.Custom(_access){\r\n    If(#creator.member_id#==#key_id#){\r\n        SetVar(access,done)\r\n    }.Else{\r\n        SetVar(access,)\r\n    }\r\n    If(And(#roles_access#!=\"NULL\",#roles_access#!=\"\",#roles_access#!=\"[]\")){\r\n        DBFind(@1roles,src_access_list).Where({\"id\": {\"$in\": #roles_access#}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n        Div(#style_text# breaker){\r\n            ForList(src_access_list){\r\n                If(And(#role_id#==#id#)){\r\n                    SetVar(access,done)\r\n                }\r\n                If(#access_count#!=#src_access_list_index#){\r\n                    Span(\"#role_name#,\",mr-sm)\r\n                }.Else{\r\n                    #role_name#\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right button-group text-nowrap){\r\n        If(#access#==\"done\"){\r\n            If(And(#deleted#==0,#role_type#!=3)){\r\n                Button(Class: btn bg-gray-lighter, Contract: @1RolesDelete, Params: \"ops=D,rid=#id#\", Page: @1roles_list){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }.ElseIf(#deleted#==1){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1RolesDelete, Params: \"ops=R,rid=#id#\", Page: @1roles_list){\r\n                    Em(Class: btn-default fa fa-1x fa-recycle)\r\n                }\r\n            }\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, PageParams: \"rid=#id#\", Page: @1roles_create){\r\n                    Em(Class: text-default fa fa-1x fa-edit)\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_roles, \"$@1role$=_name,$@1type$=_type,$@1id$=_id,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1roles_access$=_access,=_actions\")\r\n            }.ElseIf(#all_roles_count# > 0){\r\n                Div(Class: text-center h4 text-muted){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1roles$ $@1not_founded$\")\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted){\r\n                    Button(Body: $@1install_default_roles$, Class: btn btn-primary, Page: @1roles_list, Contract: @1RolesInstall)\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}\r\n",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            DBFind(@1roles,src_roles).Where({\"ecosystem\": #ecosystem_id#, \"role_type\": 1, \"deleted\": 0}).Columns(\"id,role_name\").Count(roles_count)\r\n            If(#roles_count#==0){\r\n                Div(Body: LangRes(@1no_assigned_roles))\r\n            }.Else{\r\n                Select(Name: rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n            }\r\n        }\r\n    }\r\n    If(#roles_count#>0){\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Contract: @1RolesRequest, Page: @1profile_view)\r\n    }\r\n    Button(Body: LangRes(@1close), Class: btn btn-default pull-right mt, Page: @1profile_view)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"page_params->rid,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: $@1request_to_role$)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#notific_sender_image_id#>0){\r\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                }.Else{\r\n                                    Span(Class: fa icon-user fa-5x)\r\n                                }\r\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_page_params_rid#}).Columns(\"role_name\").Vars(r)\r\n                        Div(text-muted m0 h5, Body: LangRes(@1role))\r\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                Input(Name: member_id, Class: hidden, Value: #notific_sender_member_id#)\r\n                                Input(Name: rid, Class: hidden, Value: #notific_page_params_rid#)\r\n                                Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=0\")\r\n                                Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=1\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#page_par#!=\"\"){\r\n    SetVar(Name: v_role_id, Value: #page_par#)\r\n}\r\n\r\nIf(#v_role_id#>0){\r\n    SetVar(this_page, @1roles_view).(this_table, @1roles_participants)\r\n    Include(@1pager_header)\r\n\r\n    DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_role_id#}).Columns(\"role_name,role_type,deleted,roles_access,creator->member_id\").Vars(prefix)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_roles_access#!=\"NULL\",#prefix_roles_access#!=\"\",#prefix_roles_access#!=\"[]\",#role_id#>0,#prefix_deleted#==0,#prefix_role_type#!=2)){\r\n        DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": [{\"$in\": #prefix_roles_access#}, {\"$eq\": #role_id#}]}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    If(#manager_id#>0){\r\n        AddToolButton(Page: @1roles_assign, PageParams: \"v_role_id=#v_role_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\r\n    }\r\n\r\n    SetTitle(\"$@1role$\": #prefix_role_name#)\r\n    Span(Class: h5 m0 mb ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1roles$, Page: @1roles_list)\r\n        Span(Class: text-muted mh-sm, Body: /)\r\n        Span(Class: text-muted, Body: #prefix_role_name#)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    If(#search#){\r\n        SetVar(w_search, {\"member->member_name\": {\"$ilike\": \"#search#\"}})\r\n    }\r\n    SetVar(where, {\"ecosystem\":#ecosystem_id#, \"role->id\":#v_role_id#, {#w_search#}})\r\n\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_role_id#)\r\n        Include(@1search)\r\n    }\r\n\r\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_appointed){\r\n        If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#appointed.member_id#\"){\r\n                Span(Body: #appointed.member_name#)\r\n            }\r\n        }\r\n        If(#appointed.voting_id#>0){\r\n            LinkPage(Class:#style_link# h5 text-bold, Page: @1voting_view, PageParams: \"vID=#appointed.voting_id#\"){\r\n                Span(Body: #appointed.voting_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_member){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\"){\r\n            If(#member.image_id#>0){\r\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_address){\r\n        Span(Class: #style_text#, Body: Address(#member.member_id#))\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(@1active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1RolesUnassign, Params: \"row_id=#id#\", Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\"){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }.Count(count)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#count# > 0){\r\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\r\n                }\r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "select_ecosystem",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#Type#==ALL_LIST){\r\n    DBFind(@1ecosystems,items).Limit(250).Columns(\"name,id\")\r\n    SetVar(name_column,\"name\")\r\n    SetVar(value_column,\"id\")\r\n}\r\nIf(#Type#==ONLY_MY){\r\n    DBFind(@1parameters,items).Where({\"$and\": [{\"ecosystem\": {\"$neq\": 1}}, {\"$or\": [{\"$and\": [{\"name\": \"founder_account\"},{\"value\": #key_id#}]},{\"$and\": [{\"name\": \"delegate_account\"},{\"value\": #key_id#}]}]}]}).Columns(\"ecosystem\").Custom(\"custom_name\"){\r\n        DBFind(@1ecosystems).Where({\"id\": #ecosystem#}).Vars(eco)\r\n        Span(#eco_name#)\r\n    }\r\n    SetVar(name_column,\"custom_name\")\r\n    SetVar(value_column,\"ecosystem\")\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-12 text-left){\r\n            Select(Name: EcosystemId, Source: items, NameColumn: #name_column#, ValueColumn: #value_column#, Value: #EcosystemId#)\r\n        }\r\n    }\r\n    If(#back_header#!=\"\"){\r\n        Button(Body: LangRes(@1select), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=Val(EcosystemId)\").Popup(Header: #back_header#, Width: 50)\r\n        If(#go_home# == 1) {\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ec_list)\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#\").Popup(Header: #back_header#, Width: 50)\r\n        }\r\n    }.Else{\r\n        Button(Body: LangRes(@1select), Class: btn btn-primary pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=Val(EcosystemId)\")\r\n        If(#go_home# == 1) {\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1ec_list)\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#\")\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "select_role",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "SetVar(this_page, @1select_role).(this_table, @1roles).(current_header, $@1roles$).(pager_limit, 10)\r\nInclude(@1pager_header)\r\n\r\nIf(#Id#==\"\"){\r\n    SetVar(Id,)\r\n}\r\nIf(#parent_back_page#==\"\"){\r\n    SetVar(parent_back_page,)\r\n}\r\n\r\nIf(#page_par#){\r\n    SetVar(EcosystemId, #page_par#)\r\n}.Else{\r\n    SetVar(page_par, #EcosystemId#)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #EcosystemId#, \"deleted\": 0, \"role_name\": #search#})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #EcosystemId#, \"deleted\": 0})\r\n}\r\n\r\nDiv(){\r\n    Form(input-group){\r\n        Div(input-group-addon){\r\n            LangRes(@1name)\r\n        }\r\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\r\n        Div(input-group-btn){\r\n            If(GetVar(search)){\r\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #current_header#, Width: \"50\")\r\n            }\r\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons {\r\n        border: 1px solid #dde6e9;\r\n    }\r\n)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_id){\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n}.Custom(_name){\r\n    If(#back_header#!=\"\"){\r\n        Button(Class: btn-xs btn-link, Page: #back_page#, PageParams: \"RoleId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #role_name#)\r\n        }.Popup(Header: #back_header#, Width: 50)\r\n    }.Else{\r\n        Button(Class: btn-xs btn-link, Page: #back_page#, PageParams: \"RoleId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: #role_name#)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    If(#count# > 0){\r\n        Table(src,\"=_name\")\r\n    }.Else{\r\n        Div(Class: text-center h4 text-muted, Body: \"$@1roles$ $@1not_founded$\")\r\n    }\r\n}\r\nDiv(){\r\n    Include(@1pager_for_popup)\r\n    If(GetVar(back_header)!=\"\"){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\").Popup(Header: #back_header#, Width: \"50\")\r\n    }.Else{\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "select_wallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1select_wallet).(this_table, @1keys).(current_header, $@1member$).(pager_limit, 10)\r\nInclude(@1pager_header)\r\n\r\nIf(#page_par#){\r\n    SetVar(EcosystemId, #page_par#)\r\n}.Else{\r\n    SetVar(page_par, #EcosystemId#)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #EcosystemId#, \"id\": {\"$neq\":#guest_key#}, \"deleted\": 0, \"id\": AddressToId(#search#)})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #EcosystemId#, \"id\": {\"$neq\":#guest_key#}, \"deleted\": 0})\r\n}\r\n\r\nDiv(){\r\n    Form(input-group){\r\n        Div(input-group-addon){\r\n            LangRes(@1wallet)\r\n        }\r\n        Input(Name: search, Value: #search#, Placeholder: $@1text_to_search$)\r\n        Div(input-group-btn){\r\n            If(#search#){\r\n                Button(Class: btn bg-gray-lighter fa fa-close mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,Id=#Id#\").Popup(Header: #current_header#, Width: \"50\")\r\n            }\r\n            Button(Class: btn bg-gray-lighter mtl buttons, Page: #this_page#, PageParams: \"back_page=#back_page#,back_header=#back_header#,parent_back_page=#parent_back_page#,EcosystemId=#EcosystemId#,search=Val(search),Id=#Id#\", Body: Em(Class: fa fa-search) $@1search$).Popup(Header: #current_header#, Width: \"50\")\r\n        }\r\n    }\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(custom_id){\r\n    Span(Class: h6 text-muted, Body: #id#)\r\n    SetVar(m_id, 0)\r\n    DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #id#}).Vars(m)\r\n    If(Or(#m_id#>0,#m_id#<0)){\r\n        SetVar(image_id, #m_image_id#)\r\n        SetVar(member_name, #m_member_name#)\r\n    }.Else{\r\n        SetVar(image_id, 0)\r\n        SetVar(member_name, Address(#id#))\r\n    }\r\n}.Custom(custom_member_id){\r\n    If(#back_header#!=\"\"){\r\n        Button(Class: btn-xs btn-link pull-right, Page: #back_page#, PageParams: \"MemberId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: Address(#id#))\r\n        }.Popup(Header: #back_header#, Width: 50)\r\n    }.Else{\r\n        Button(Class: btn-xs btn-link pull-right, Page: #back_page#, PageParams: \"MemberId=#id#,EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\"){\r\n            Span(Class: h5 text-bold, Body: Address(#id#))\r\n        }\r\n    }\r\n}.Custom(custom_ecosystem){\r\n    Span(Class: text-muted h5, Body: $@1ecosystem$ #EcosystemId#)\r\n}.Custom(custom_username){\r\n    If(#image_id#>0){\r\n        Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n        Span(Class: h5, Body: #member_name#)\r\n    }.Else{\r\n        Div(){\r\n            Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n            Span(Class: h5, Body: #member_name#)\r\n        }.Style(display:flex; align-items:center;)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive){\r\n        Div(){\r\n            If(#count# > 0){\r\n                Table(src, \"=custom_username,=custom_ecosystem,=custom_member_id\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1members$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(){\r\n    Include(@1pager_for_popup)\r\n    If(#back_header#!=\"\"){\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\").Popup(Header: #back_header#, Width: \"50\")\r\n    }.Else{\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"EcosystemId=#EcosystemId#,Id=#Id#,parent_back_page=#parent_back_page#\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1sysparams_list).(this_table, @1system_parameters)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1platform_parameters$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1platform_params_desc$\"))\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_validator, AppParam(App: #system_app_id#, Name: \"role_validator\"))\r\nDBFind(@1roles_participants).Where({\"ecosystem\": #ecosystem_id#, \"member->member_id\": #key_id#, \"role->id\": #role_validator#, \"deleted\": 0}).Columns(\"id\").Vars(validator)\r\nIf(#validator_id#>0){\r\n    AddToolButton(Title: $@1sysparams_validator_resign$, Icon: icon-pin, Page: @1validator_resign).Popup(50, $@1sysparams_validator_resign$)\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"name\": {\"$ilike\": \"#search#\"}})\r\n}\r\nSetVar(where, {#w_search#})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1name))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_actions){\r\n    SetVar(sp_id,0)\r\n    DBFind(@1contracts).Where({\"ecosystem\": 1, \"name\": #name#}).Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        Span(Class: pull-right){\r\n            LinkPage(Class: text-primary h4, Body: Em(Class: fa fa-cogs), Page: @1sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        Span(Class: pull-right){\r\n            $@1contract_404$\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    Div(){\r\n        #name#\r\n    }.Style(min-width:200px;)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=_name,$@1value$=value,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1platform_parameters$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(@1ecosystems_list), Page: @1ecosystems_list)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(@1metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(@1metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(#Id#){\r\n            SetVar(title,\"LangRes(@1metrics): LangRes(@1ecosystem) ##Id#\")\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(@1metrics,src_metric).Where({\"key\": #Id#, \"metric\": #Metric#}).Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$@1timestam$=time,$@1value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetTitle($@1voting$: #param_name#)\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1system_params$, Page: @1sysparams_list)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    Span(Class: text-muted, Body: #param_name#)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nForm(content-wrapper){\r\n    If(#param_name#==\"\"){\r\n        Div(text-danger text-center text-bold){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n\r\n    DBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n    If(#param_name# == full_nodes){\r\n        SetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_validators))\r\n    }.Else{\r\n        SetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_platformparams))\r\n    }\r\n    If(#template_id#){\r\n        DBFind(@1voting_templates).Where({\"ecosystem\": #ecosystem_id#, \"id\": #template_id#}).Columns(\"subject->voters\").Vars(template)\r\n    }\r\n\r\n    If(#template_id# > 0){}.Else{\r\n        Div(text-danger text-center text-bold){\r\n            Div(mb-sm){\r\n                LangRes(@1voting_template_not_found)\r\n            }\r\n            LinkPage(Page: @1voting_templates_list, Class: btn btn-info){\r\n                LangRes(@1template_set)\r\n            }\r\n        }\r\n    }\r\n\r\n    If(#template_id# > 0){\r\n        If(#param_name# != full_nodes){\r\n            DBFind(@1system_parameters).Where({\"name\": #param_name#}).Vars(param)\r\n            Div(form-group){\r\n                Label($@1name$)\r\n                Input(Name: Name, Value: #param_name#, Disabled: true)\r\n            }\r\n            Div(form-group){\r\n                Label($@1value$)\r\n                Input(Name: OldValue, Value: #param_value#, Disabled: true)\r\n            }\r\n            Div(form-group){\r\n                Label($@1new_value$)            \r\n                Input(Name: Value, Type: textarea)\r\n            }\r\n            Div(text-left){\r\n                Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1sysparams_list)\r\n                If(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n                    Button(Body: LangRes(@1voting), Class: btn btn-primary pull-right, Contract: @1VotingRunEditPlatformParam, Page: @1voting_list)\r\n                }.Else{\r\n                    If(#template_id# > 0){\r\n                        Span($@1voting_not_participant$, text-muted pull-right)\r\n                    }.Else{\r\n                        Span($@1voting_template_not_found$, text-muted pull-right)\r\n                    }\r\n                }\r\n            }\r\n        }.Else{\r\n            SetVar(full_nodes, SysParam(full_nodes))\r\n            SetVar(first_node, AppParam(Ecosystem:1, App:#application_id#, Name: first_node)).(first_node_set, \"\")\r\n            If(`#full_nodes#` == \"\"){\r\n                JsonToSource(src_first_node, #first_node#)\r\n                ForList(src_first_node){\r\n                    If(#value#==\"\"){\r\n                        SetVar(first_node_set, error)\r\n                    }\r\n                }\r\n                If(#first_node_set#==error){\r\n                    Div(text-center){\r\n                        ForList(src_first_node){\r\n                            If(#value#==\"\"){\r\n                                Div(){first node: '#key#' empty}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(text-center){\r\n                        DBFind(@1app_params).Where({\"ecosystem\": #ecosystem_id#, \"name\": first_node}).Vars(first_node_param)\r\n                        Button(Page: @1app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=@1sysparams_list\", Body: $@1install_first_node$)\r\n                    }\r\n                }\r\n            }.Else{\r\n                ArrayToSource(src_full_nodes, `#full_nodes#`)\r\n                ForList(src_full_nodes){\r\n                    JsonToSource(src_node, `#value#`)\r\n                    Div(list-group-item){\r\n                        Div(row){\r\n                            Div(col-md-9 text-left){\r\n                                Label(){node #key#}\r\n                                ForList(src_node){\r\n                                    P(Class: h6 m0, Body: Strong(#key#:) #value#)\r\n                                }\r\n                            }\r\n                            Div(col-md-3 text-right mt-lg){\r\n                                If(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n                                    SetVar(Index, Calculate(#src_full_nodes_index# - 1))\r\n                                    Button(Body: $@1delete$, Class: btn btn-danger mt, Contract: @1VotingRunRemoveValidator, Params: \"Index=#Index#\" Page: @1voting_list)\r\n                                }.Else{\r\n                                    Div(mt-lg){\r\n                                        If(#template_id# > 0){\r\n                                            Span($@1voting_not_participant$, text-muted)\r\n                                        }.Else{\r\n                                            Span($@1voting_template_not_found$, text-muted)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }.Style(word-break: break-all;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: Amount){\r\n                LangRes(@1amount)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Amount, Type: number)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: VictimAccount){\r\n                LangRes(@1tokens_refund_victim)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: VictimAccount, Placeholder: $@1key_id_or_wallet$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: SuspectAccount){\r\n                LangRes(@1tokens_refund_attacker)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: SuspectAccount, Placeholder: $@1key_id_or_wallet$)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-sm-3 text-right mt-sm){\r\n            Label(For: Note){\r\n                LangRes(@1description)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Note, Type: textarea)\r\n        }\r\n    }\r\n    Button(Body: $@1request_refund$, Contract: @1VotingRunTokenRefund, Page: @1tokenrefund_list, Class: btn pull-right btn-primary mt)\r\n    Button(Body: LangRes(@1back), Class: btn pull-right btn-default mt, Page: @1tokenrefund_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1tokenrefund_list).(this_table, @1tokens_refund)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1tokens_refunds_list$\")\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(tid, AppParam(App: #application_id#, Name: voting_template_tokenrefund, Ecosystem: 1))\r\nIf(#tid# > 0){\r\n    DBFind(@1voting_templates).Where({\"ecosystem\": #ecosystem_id#, \"id\": #tid#}).Columns(\"subject->voters\").Vars(template)\r\n}\r\nIf(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n    Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1tokens_refunds_list_desc$))\r\n    AddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1tokenrefund_create).Popup(50, $@1create_request$)\r\n}.Else{\r\n    If(#template_subject_voters#>0){\r\n        Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1tokens_refunds_list_allowed_role$ #template_subject_voters#))\r\n    }.Else{\r\n        Span(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1template_id_not_found$))\r\n    }\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"note\": {\"$ilike\": \"#search#\"}})\r\n}\r\nSetVar(where, {#w_search#})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1description))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(#this_table#, src_refunds_list).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_status){\r\n    If(#status#>0){\r\n        SetVar(sta, AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n        LangRes(#sta#)\r\n    }\r\n}.Custom(_result){\r\n    If(#result# > 0){\r\n        SetVar(res,AppParam(Ecosystem:1, App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n        LangRes(#res#)\r\n    }\r\n}.Custom(_blocked){\r\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n}.Custom(_closed){\r\n    DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n}.Custom(_accounts){\r\n    Div(){$@1tokens_refund_victim$: #victim_key_id#}\r\n    Div(){$@1tokens_refund_attacker$: #attacker_key_id#}\r\n}.Custom(_amount){\r\n    Money(#amount#)\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_refunds_list, \"$@1accounts$=_accounts,$@1description$=note,$@1validator_id$=validator_id,$@1blocked_at$=_blocked,$@1closed$=_closed,$@1result$=_result,$@1amount$=_amount,$@1status$=_status\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1tokens_refunds$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokens_send",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, \"@1tokens_send\")\r\n\r\nIf(#back_page# == \"\"){\r\n    If(#parent_back_page# != \"\"){\r\n        SetVar(back_page, #parent_back_page#)\r\n    }.Else{\r\n        SetVar(back_page, \"@1members_list\")\r\n    }\r\n}\r\nIf(#MemberId# != \"\"){\r\n    SetVar(v_key_id, #MemberId#)\r\n}\r\nIf(Or(#v_key_id#>0,#v_key_id#<0)){\r\n    SetVar(Name: v_address, Value: Address(#v_key_id#))\r\n}.Else{\r\n    SetVar(Name: v_address, Value: \"\")\r\n}\r\nIf(#v_amount#==\"\"){\r\n    SetVar(Name: v_amount, Value: \"\")\r\n}\r\n\r\nDBFind(\"@1keys\").Where({\"ecosystem\": #ecosystem_id#, \"id\": #key_id#}).Vars(\"tokens\")\r\nDBFind(\"@1ecosystems\").Where({\"id\": #ecosystem_id#}).Vars(\"custom\")\r\nIf(#ecosystem_id# == 1){\r\n    SetVar(token_title, \"APLA\")\r\n}.Else{\r\n    SetVar(token_title, #custom_token_title#)\r\n}\r\n\r\nIf(Or(#ecosystem_id# == 1, #custom_token_title# != \"\")){\r\n    Form(){\r\n        Div(row){\r\n            Div(col-sm-3 mt-sm text-right){\r\n                Label($@1sender$)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n            Div(col-sm-9){\r\n                SetVar(m_a, Address(#key_id#) (Money(#tokens_amount#) #token_title#))\r\n                Input(Name: Sender, Disabled: 1, Value: #m_a#)\r\n                Div(Class: m0 h6 text-muted, Body: $@1send_tokens_my_balance$)\r\n            }\r\n        }\r\n        Div(row mt){\r\n            Div(col-sm-3 mt-sm text-right){\r\n                Label($@1recipient$)\r\n                Span(Class: text-danger, Body:*)\r\n            }\r\n            Div(col-sm-9){\r\n                Div(input-group){\r\n                    Input(Name: Recipient, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=#this_page#,back_header=$@1tokens_send$,parent_back_page=#back_page#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                    }.Style(\r\n                        .buttons {\r\n                            border: 1px solid #dde6e9;\r\n                            padding: 6px 16px;\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-sm-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: $@1amount$ (#token_title#))\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-sm-9){\r\n                Input(Name: Amount, Type: Number, Value: #v_amount#)\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1send), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract: @1TokensSend).Alert(Text: \"$@1want_send_tokens$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n    }\r\n}.Else{\r\n    Form(){\r\n        Div(row){\r\n            Div(col-sm-12){\r\n                Span(Body: $@1ecosystem_no_tokens$)\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "upload_page",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-12){\r\n            Input(Name: FileData, Type: file)\r\n        }\r\n    }\r\n    If(#app_id#==\"\"){\r\n        SetVar(app_id,)\r\n    }\r\n    If(#buffer_key#==\"\"){\r\n        SetVar(buffer_key,)\r\n    }\r\n    If(#file_name#==\"\"){\r\n        SetVar(file_name,)\r\n    }\r\n    If(#back_page_popup#==50){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 50)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 50)\r\n    }.ElseIf(#back_page_popup#==30){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 30)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 30)\r\n    }.ElseIf(Or(#back_page_popup#==40,#back_page_popup#==1)){\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\").Popup(Header: #back_page_popup_header#, Width: 40)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\").Popup(Header: #back_page_popup_header#, Width: 40)\r\n    }.Else{\r\n        Button(Body: LangRes(@1button_upload), Class: btn btn-primary pull-right mt, Contract: @1BufferFileUpload, Params: \"AppId=#app_id#,BufferKey=#buffer_key#,FileName=#file_name#\", Page: #back_page#, PageParams:\"buffered=1,uploaded=1\")\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #back_page#, PageParams: \"buffered=1\")\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "validator_candidates_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1tcp_address))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: TcpAddress, Placeholder: \"#.#.#.#:#\")\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1api_address))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: ApiAddress, Placeholder: \"#://#.#.#.#:#\")\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1node_founder_key_id))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: KeyId,Type: number, Value: #key_id#)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1node_pub_key))\r\n            Span(Class: text-danger, Body:*)\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: PubKey, Type: textarea)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1hardware_description))\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Description, Type: textarea)\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(LangRes(@1comment))\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Input(Name: Comment, Type: textarea)\r\n        }\r\n    }\r\n\r\n    Button(Contract: @1ValidatorRequest, Class: btn btn-primary pull-right mt, Page: @1validator_candidates_list, Body: $@1send_request$)\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1validator_candidates_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "validator_candidates_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1validator_candidates_list).(this_table, @1validator_candidates)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1validators$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1sysparams_candidates_list_desc$\"))\r\nAddToolButton(Title: $@1create_request$, Icon: icon-plus, Page: @1validator_candidates_create).Popup(50, $@1sysparams_candidate_validators_form$)\r\n\r\nIf(#search#){\r\n    SetVar(where, {{\"host_ip\": {\"$ilike\": \"#search#\"}}, \"deleted\": 0})\r\n}.Else{\r\n    SetVar(where, {\"deleted\": 0})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1host_ip))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(Ecosystem:1, App:#application_id#, Name: voting_template_validators))\r\nIf(#template_id# > 0){\r\n    DBFind(@1voting_templates).Where({\"ecosystem\": #ecosystem_id#, \"id\": #template_id#}).Columns(\"subject->voters\").Vars(template)\r\n}\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Custom(_actions){\r\n    If(And(#template_subject_voters#>0,#template_subject_voters#==#role_id#)){\r\n        Form(btn-group pull-right){\r\n            Button(Contract: @1VotingRunNewValidator, Params: \"ValidatorId=#id#\", Page: @1voting_list, Class: btn btn-default fa fa-play)\r\n        }\r\n    }.Else{\r\n        If(#template_id# > 0){\r\n            Span($@1voting_not_participant$, text-muted)\r\n        }.Else{\r\n            Span($@1voting_template_not_found$, text-muted)\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n}.Custom(_tcp_address){\r\n    Span(Class: h6, Body: #tcp_address#)\r\n}.Custom(_api_address){\r\n    Span(Class: h6, Body: #api_address#)\r\n}.Custom(_description){\r\n    Span(Class: h6, Body: #description#)\r\n}.Custom(_comment){\r\n    Span(Class: h6, Body: #comment#)\r\n}.Custom(custom_username){\r\n    SetVar(user_member_name, \"\")\r\n    DBFind(@1members).Where({\"id\": #candidate_key_id#, \"ecosystem\": #ecosystem_id#}).Vars(user)\r\n    If(#user_member_name##==\"\"){\r\n        SetVar(user_member_name, Address(#candidate_key_id#))\r\n    }\r\n    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#candidate_key_id#\"){\r\n        If(#user_image_id#>0){\r\n            Image(Src: Binary().ById(#user_image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n            Span(#user_member_name#)\r\n        }.Else{\r\n            Div(){\r\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                Span(#user_member_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1name$=custom_username,$@1api_address$=_api_address,$@1tcp_address$=_tcp_address,$@1hardware_description$=_description,$@1comment$=_comment,$@1date_created$=_date,$@1voting$=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1sysparams_candidates$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "validator_resign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    Div(row){\r\n        Div(col-sm-12 text-center h4){\r\n            $@1validator_removing_desc$\r\n        }\r\n    }\r\n    DBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\n    SetVar(role_validator, AppParam(App: #system_app_id#, Name: \"role_validator\"))\r\n    DBFind(@1roles_participants).Where({\"ecosystem\": #ecosystem_id#, \"member->member_id\": #key_id#, \"role->id\": #role_validator#, \"deleted\": 0}).Columns(\"id\").Vars(validator)\r\n    If(#validator_id# > 0){\r\n        Button(Body: $@1resign$, Class: btn btn-danger pull-right mt-lg, Page: @1sysparams_list, Contract: @1ValidatorResign).Alert(Text: \"$@1want_resign$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n    }\r\n    Button(Body: $@1back$, Class: btn btn-default pull-right mt-lg, Page: @1sysparams_list)\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(this_page, \"@1voting_create\")\r\n\r\nForm(){\r\n    If(#type_decision#>0){\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1number_votes$)\r\n                        Input(Name: count_type_voters, Type: hidden, Value: 1)\r\n                    }.Else{\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1percent_votes$)\r\n                        Input(Name: count_type_voters, Type: hidden, Value: 0)\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_voting_decisions, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #type_decision#))\r\n                    Input(Name: Input_TypeVotingDecisions, Disabled: 1, Value: #var_type_voting_decisions#)\r\n                    Input(Name: type_decision, Type: hidden, Value: #type_decision#)\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #type_participants#))\r\n                    Input(Name: Input_TypeParticipants, Disabled: 1, Value: #var_type_participants#)\r\n                    Input(Name: type_participants, Type: hidden, Value: #type_participants#)\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1name)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: voting_name, Value: \"New voting\")\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_quorum)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Input(Name: quorum, Value: 3, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_number_desc$\r\n                        }\r\n                    }.Else{\r\n                        Input(Name: quorum, Value: 30, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(Or(#type_participants#==1,#type_participants#==2,#type_participants#==3,#type_participants#==4)){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_rating)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mt-sm text-left){\r\n                        Input(Name: rating, Placeholder: $@1voting_rating_desc$, Type: checkbox, Value: false, Class: m0 text-muted)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(Or(#count_type_voters#==1,#type_decision#==1,#type_decision#==2)){\r\n            SetVar(hide_volume, 1)\r\n        }\r\n        If(#hide_volume# != 1){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_volume)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: volume, Value: 51, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_volume_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1date_start)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: start_date, Type: date)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: start_time, Type: time, Value: \"00:00\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1date_end)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: end_date, Type: date)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: end_time, Type: time, Value: \"00:00\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1description)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: description, Type: textarea).Style(resize:vertical)\r\n                }\r\n            }\r\n        }\r\n        Input(Name: voting_type, Type: hidden, Value: 1)\r\n        If(#type_decision# == 1){\r\n            SetVar(next_page,\"@1voting_decision_candidates\")\r\n        }.ElseIf(#type_decision# == 2){\r\n            SetVar(next_page,\"@1voting_decision_election\")\r\n        }.ElseIf(#type_decision# == 3){\r\n            SetVar(next_page,\"@1voting_decision_document\")\r\n        }.ElseIf(#type_decision# == 4){\r\n            SetVar(next_page,\"@1voting_decision_contract\")\r\n        }\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: #next_page#, Contract: @1VotingCreate, Params: \"count_type_voters=#count_type_voters#\").Popup(60, $@1voting_subject$)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #this_page#).Popup(60, $@1new_voting$)\r\n    }.Else{\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 mt-sm text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn-xs btn-default mr-lg).Popup(60, $@1new_voting$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn-xs btn-primary disabled).Popup(60, $@1new_voting$)\r\n                    }.Else{\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"count_type_voters=0\", Class: btn-xs btn-primary disabled mr-lg).Popup(60, $@1new_voting$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"count_type_voters=1\", Class: btn-xs btn-default).Popup(60, $@1new_voting$) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#count_type_voters#==1){\r\n                        Data(numbers_type_decisions, \"value,name\"){\r\n                            3,$@1document$\r\n                            4,$@1contract_run$\r\n                        }\r\n                        RadioGroup(Name: type_decision, Source: numbers_type_decisions, NameColumn: name, ValueColumn: value)\r\n                    }.Else{\r\n                        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                        RadioGroup(Name: type_decision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\n                    Select(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id, Value: 2)\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right mt, Page: #this_page#, PageParams: \"count_type_voters=#count_type_voters#,type_decision=Val(type_decision),type_participants=Val(type_participants)\").Popup(60, $@1new_voting$)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_list)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_candidates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(@1buffer_data).Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"member_id\": #key_id#, \"ecosystem\": #ecosystem_id#}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n        SetVar(toPageInvite, 1)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n    DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(@1votings_subject).Where({\"voting_id\": #vID#, \"subject->member_id\": #key_id#}).Columns(\"id\").Vars(already_candidate)\r\n    DBFind(@1roles,src_roles).Where({\"ecosystem\": #ecosystem_id#, \"role_type\": 2, \"deleted\": 0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n    If(#elective_roles_count#>0){\r\n        Form(){\r\n            If(#already_candidate_id#>0){\r\n                SetVar(hidden,hidden)\r\n            }.Else{\r\n                SetVar(hidden,)\r\n            }\r\n            Div(row mt-sm #hidden#){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1candidates))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#apply# == 1){\r\n                        Input(Name: applied, Disabled: 1, Value: $@1applied_already$)\r\n                    }.Else{\r\n                        Div(input-group){\r\n                            Input(Name: can_apply_voting, Disabled: 1, Value: $@1can_apply_voting$)\r\n                            Div(input-group-btn){\r\n                                Button(Body: LangRes(@1apply), Class: btn bg-gray-lighter buttons, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#,back_page=#back_page#,apply=1\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\r\n                            }.Style(\r\n                                .buttons{border: 1px solid #dde6e9;}\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            DBFind(@1votings_subject,src_voting_subject).Where({\"voting_id\": #vID#}).Columns(\"id,subject->member_id,subject->member_name\").Count(members_count).Custom(_address){\r\n                Address(#subject.member_id#)\r\n            }.Custom(_member){\r\n                LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#subject.member_id#\"){\r\n                    Span(Body: #subject.member_name#)\r\n                }\r\n            }\r\n            If(Or(#members_count#>0,#apply#==1)){\r\n                Div(row){\r\n                    Div(col-sm-9 col-sm-offset-3){\r\n                        Table(src_voting_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row mt-lg){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1role))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1vacancies))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_accept))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_reject))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n            }\r\n            Input(Name: memberID, Type: hidden, Value: 0)\r\n            Input(Name: votingID, Type: hidden, Value: #vID#)\r\n            If(#toPageInvite#==1){\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings).Popup(60, $@1participants_add$)\r\n            }.Else{\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\r\n            }\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n        }\r\n    }.Else{\r\n        Div(row){\r\n            Div(col-md-12 text-center h4){\r\n                P(LangRes(@1elective_roles_not_found))\r\n                Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                    Span(Class: h4, Body: LangRes(@1create_role))\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_contract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(@1buffer_data).Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"member_id\": #key_id#, \"ecosystem\": #ecosystem_id#}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n        SetVar(toPageInvite, 1)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name\").Vars(instance)\r\n    DBFind(@1votings_subject, src_subject).Where({\"voting_id\": #vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(prefix_subject_contract_accept,)\r\n        SetVar(prefix_subject_contract_accept_params,)\r\n        SetVar(prefix_subject_contract_reject,)\r\n        SetVar(prefix_subject_contract_reject_params,)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1contract_accept)).(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n            }\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    Span(Body: LangRes(@1params))\r\n                }\r\n            }\r\n            Div(col-md-9 mb-sm text-left){\r\n                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject)).(Class: text-danger, Body:*)\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n        If(#toPageInvite#==1){\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectContract).Popup(60, $@1participants_add$)\r\n        }.Else{\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectContract)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_document",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(@1buffer_data).Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"member_id\": #key_id#, \"ecosystem\": #ecosystem_id#}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n        SetVar(toPageInvite, 1)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n\r\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(@1votings_subject, src_voting_subject).Where({\"voting_id\": #vID#}).Columns(\"id,subject->text\").Vars(prefix)\r\n\r\n    If(#prefix_id#>0){\r\n    }.Else{\r\n        SetVar(Name: prefix_subject_text, Value: \"\")\r\n    }\r\n\r\n    Form(){\r\n        Div(form-group){\r\n            Div(row){\r\n                Div(col-md-12 mt-sm){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1text_document))\r\n                        Span(Class: text-danger, Body:*)\r\n                    }\r\n                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#).Style(resize: vertical;)\r\n                }\r\n            }\r\n        }\r\n        Div(form-group){\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row mb-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mc-sm text-left){\r\n                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }\r\n        Input(Name: votingID, Type: hidden, Value: #vID#)\r\n        If(#toPageInvite#==1){\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectDocument).Popup(60, $@1participants_add$)\r\n        }.Else{\r\n            Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectDocument)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_election",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#vID# == \"\"){\r\n    DBFind(@1buffer_data).Columns(\"value->voting_id\").Where({\"key\": \"voting\", \"member_id\": #key_id#, \"ecosystem\": #ecosystem_id#}).Vars(buffer)\r\n    If(#buffer_value_voting_id#>0){\r\n        SetVar(vID, #buffer_value_voting_id#)\r\n    }\r\n}\r\nIf(#vID# > 0){\r\n    If(#candidates#==\"\"){\r\n        SetVar(candidates,0)\r\n    }\r\n    If(#back_page#){}.Else{\r\n        SetVar(back_page,@1voting_view)\r\n    }\r\n    DBFind(@1votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\r\n    DBFind(@1votings_subject, src_subject).Where({\"voting_id\": #vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n        SetVar(candidates,\"#candidates#,#subject.member_id#\")\r\n        Address(#subject.member_id#)\r\n    }.Custom(_member){\r\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#subject.member_id#\"){\r\n            Span(Body: #subject.member_name#)\r\n        }\r\n    }\r\n\r\n    DBFind(@1keys,src_keys).Where({\"ecosystem\": #ecosystem_id#, {\"$and\": [{\"id\": {\"$neq\":#guest_key#}}, {\"id\": {\"$nin\":[#candidates#]}}]}}).Columns(\"id\").Count(members_count).Custom(_name){\r\n        DBFind(@1members).Where({\"ecosystem\": #ecosystem_id#, \"id\": #id#}).Columns(\"id,member_name\").Count(have_name).Vars(m)\r\n        Address(#id#)\r\n        If(#have_name#>0){\r\n            \" (#m_member_name#)\"\r\n        }\r\n    }\r\n\r\n    DBFind(@1roles,src_roles).Where({\"ecosystem\": #ecosystem_id#, \"role_type\": 2, \"deleted\": 0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n    If(#elective_roles_count#>0){\r\n        Form(){\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1candidates)).(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        If(#members_count#>0){\r\n                            Div(input-group){\r\n                                Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                                Div(input-group-btn){\r\n                                    Button(Class: btn bg-gray-lighter fa fa-plus buttons, Page: @1voting_decision_election, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingSubjectCandidates).Popup(50, $@1subject_voting$)\r\n                                }.Style(\r\n                                    .buttons{\r\n                                        border: 1px solid #dde6e9;\r\n                                        padding: 6px 16px;\r\n                                    }\r\n                                )\r\n                            }\r\n                        }.Else{\r\n                            Input(Name: voting_all_members, Class: mb, Disabled: 1, Value: \"$@1voting_all_keys_added$\")\r\n                        }\r\n                    }\r\n                }\r\n                If(Or(#members_count#>0,#candidates#!=0)){\r\n                    Div(row){\r\n                        Div(col-sm-9 col-sm-offset-3){\r\n                            Table(src_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\r\n                    }\r\n                }\r\n\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_accept))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$@1contract_accept_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_reject))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$@1contract_reject_des$\").Validate(minLength:3, maxLength:255)\r\n                        InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1params))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$@1contract_params_des$\")\r\n                    }\r\n                }\r\n            }\r\n            Input(Name: votingID, Type: hidden, Value: #vID#)\r\n            If(#toPageInvite#==1){\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: @1voting_invite, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings).Popup(60, $@1participants_add$)\r\n            }.Else{\r\n                Button(Body: LangRes(@1save), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectSettings)\r\n            }\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n        }\r\n    }.Else{\r\n        Div(row){\r\n            Div(col-md-12 text-center h4){\r\n                P(LangRes(@1elective_roles_not_found))\r\n                Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                    Span(Class: h4, Body: LangRes(@1create_role))\r\n                }.Popup(50, $@1edit_role$)\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_invite",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(#Id# > 0){\r\n    SetVar(vID, #Id#)\r\n}\r\nIf(Id==\"\"){\r\n    SetVar(Id, 0)\r\n}\r\n\r\nIf(#vID# > 0){\r\n    Form(){\r\n        If(#back_page#==\"\"){\r\n            SetVar(back_page,@1voting_view)\r\n        }\r\n        DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->name,voting->type_participants\").Vars(instance)\r\n        DBFind(@1votings_participants, src_participants).Where({\"voting_id\": #vID#}).Columns(\"id,member->member_id,member->member_name,member->role_id,member->member->member_id,member->member->member_name\").Count(participants_count).Custom(_id){\r\n            Address(#member.member_id#)\r\n        }.Custom(_name){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\", Body: #member.member_name#)\r\n        }.Custom(_sent){\r\n            $@1voting_role_added$\r\n        }.Custom(_member_roles){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                If(#rl_image_id#>0){\r\n                    Image(Src: Binary().ById(#rl_image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                    #rl_role_name#\r\n                }.Else{\r\n                    Div(){\r\n                        Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\r\n                    }.Style(display:flex; align-items:center;)\r\n                }\r\n            }\r\n        }\r\n\r\n        If(#participants_count#>0){\r\n            Div(list-group-item mb-lg){\r\n                If(#instance_voting_type_participants# == 5){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent\")\r\n                }.ElseIf(#instance_voting_type_participants# == 4){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent,$@1member$=_name,=_id,\")\r\n                }.Else{\r\n                    Table(src_participants, \"$@1member$=_name,=_id\")\r\n                }\r\n            }\r\n        }\r\n        If(#instance_voting_type_participants# != 1){\r\n            Div(row mb){\r\n                Input(Name: votingID, Type: hidden, Value: #vID#)\r\n                If(#instance_voting_type_participants# == 2){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1member)\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        If(#MemberId# == \"\"){\r\n                            SetVar(MemberId, 0)\r\n                        }.Else{\r\n                            Input(Name: var_id, Type: hidden, Value: #MemberId#)\r\n                        }\r\n                        Div(input-group){\r\n                            If(Or(#MemberId#>0,#MemberId#<0)){\r\n                                SetVar(AddressMemberId, Address(#MemberId#))\r\n                                SetVar(Id, #MemberId#)\r\n                            }\r\n                            Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                            Div(input-group-btn){\r\n                                Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1voting_invite,back_header=$@1participants_add$,Id=#v_role_id#,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1member$, Width: \"50\")\r\n                            }\r\n                        }\r\n                    }\r\n                }.ElseIf(#instance_voting_type_participants# > 2){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1role)\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        If(RoleId == \"\"){\r\n                            SetVar(RoleId, 0)\r\n                            SetVar(RoleName, \"\")\r\n                        }.Else{\r\n                            Input(Name: var_id, Type: hidden, Value: #RoleId#)\r\n                        }\r\n                        Div(input-group){\r\n                            If(#RoleId#>0){\r\n                                SetVar(Id, #RoleId#)\r\n                                DBFind(@1roles).WhereId(#RoleId#).Columns(\"role_name\").Vars(r)\r\n                            }\r\n\r\n                            Input(Name: m_name, Disabled: 1, Value: #r_role_name#)\r\n                            Div(input-group-btn){\r\n                                Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_role, PageParams:\"back_page=@1voting_invite,back_header=$@1participants_add$,EcosystemId=#ecosystem_id#,Id=#vID#\").Popup(Header: $@1role$, Width: \"50\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(text-right){\r\n            Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n            If(Or(#AddressMemberId#!=\"\",#RoleId#!=\"\")){\r\n                Button(Body: $@1send$, Class: btn btn-primary, Page: @1voting_invite, PageParams: \"vID=#vID#,back_page=#back_page#\", Contract: @1VotingInvite).Popup(50, $@1participants_add$)\r\n            }\r\n        }\r\n    }.Style(\r\n        .buttons {\r\n            border: 1px solid #dde6e9;\r\n            padding: 6px 16px;\r\n        }\r\n    )\r\n}.Else{\r\n    Div(alert alert-danger mb-lg text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_list).(this_table, @1votings)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1voting_list$\")\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: \"$@1votings_list_desc$\"))\r\nAddToolButton(Title: $@1voting_wizard$, Page: @1voting_wizard, Icon: icon-magic-wand).Popup(50, $@1voting_wizard$)\r\nAddToolButton(Title: $@1templates_list$, Page: @1voting_templates_list, Icon: icon-pin)\r\nAddToolButton(Title: $@1create$, Page: @1voting_create, Icon: icon-plus).Popup(60, $@1new_voting$)\r\nDBFind(\"@1applications\").Where({\"ecosystem\": #ecosystem_id#, \"name\": \"System\"}).Vars(\"system_app\")\r\nSetVar(role_admin, AppParam(App: #system_app_id#, Name: \"role_admin\"))\r\nIf(#role_id# == #role_admin#){\r\n    Div(btn-group ml-lg){\r\n        Button(Body: Em(Class: fa fa-refresh) $@1update_votings_statuses$, Class: btn bg-gray ml-sm, Page: #this_page#, Contract: @1VotingStatusUpdate)\r\n    }\r\n}\r\n\r\nIf(#search#){\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"deleted\": 0, \"voting->type\": {\"$in\":[1,2]}, \"voting->name\": {\"$ilike\": \"#search#\"}})\r\n}.Else{\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"deleted\": 0, \"voting->type\": {\"$in\":[1,2]}})\r\n}\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1voting))\r\n    Include(@1search)\r\n}\r\n\r\nSetVar(INVALID,1).(WAITING,2).(STARTED,3).(FINISHED,4)\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": -1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted,status,voting->count_type_voters,voting->volume,progress->number_voters\").Count(count_votings).Custom(_id){\r\n    Span(Class: h5, Body: #id#)\r\n}.Custom(_name){\r\n    LinkPage(Page: @1voting_view, PageParams: \"vID=#id#\"){\r\n        Span(Class: h5 text-bold m0, Body: #voting.name#)\r\n    }\r\n}.Custom(_subject){\r\n    SetVar(decision, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\r\n    Div(h6 m0){\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n            #decision#\r\n        }.Else{\r\n            If(#voting.type_decision# == 1){\r\n                SetVar(link_page,\"@1voting_decision_candidates\")\r\n            }.ElseIf(#voting.type_decision# == 2){\r\n                SetVar(link_page,\"@1voting_decision_election\")\r\n            }.ElseIf(#voting.type_decision# == 3){\r\n                SetVar(link_page,\"@1voting_decision_document\")\r\n            }.ElseIf(#voting.type_decision# == 4){\r\n                SetVar(link_page,\"@1voting_decision_contract\")\r\n            }\r\n            Button(Class: btn-xs btn-link p0 text-bold text-left, Page: #link_page#, PageParams: \"vID=#id#,back_page=#this_page#\"){\r\n                If(#flags.full_data# == 1){\r\n                    Span(Class: text-primary, Body: #decision#)\r\n                }.Else{\r\n                    Span(Class: text-danger, Body: #decision#)\r\n                }\r\n            }.Popup(60, $@1voting_subject$)\r\n        }\r\n    }\r\n}.Custom(_participants){\r\n    SetVar(participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\r\n    Div(h6 m0){\r\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\r\n            #participants#\r\n        }.Else{\r\n            Button(Class: btn-xs btn-link p0 text-bold text-left, Page: @1voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\"){\r\n                If(#progress.number_participants# > 0){\r\n                    Span(Class: text-primary, Body: #participants#)\r\n                }.Else{\r\n                    Span(Class: text-danger, Body: #participants#)\r\n                }\r\n            }.Popup(60, $@1participants_add$)\r\n        }\r\n    }\r\n}.Custom(_creator){\r\n    LinkPage(Class: text-primary h6, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\", Body: #creator.member_name#)\r\n}.Custom(_date){\r\n    P(Class: text-center h6 m0, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\r\n    P(Class: text-center h6 m0, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\r\n}.Custom(_type){\r\n    Div(h6 m0 p0){\r\n        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #voting.type#) /\r\n        If(#voting.count_type_voters#==1){\r\n            $@1number_votes$\r\n        }.Else{\r\n            $@1percent_votes$\r\n        }\r\n    }\r\n}.Custom(_progress){\r\n    Div(text-center h5 text-bold){\r\n        #progress.percent_success# %\r\n    }\r\n}.Custom(_decision){\r\n    Div(text-center){\r\n        If(#flags.decision# == 0){\r\n            If(And(#status#==#FINISHED#,#creator.member_id#==#key_id#)){\r\n                Button(Body: LangRes(@1decision), Class: btn btn-primary, Contract: @1VotingDecisionCheck, Params: \"votingID=#id#\", Page: #this_page#)\r\n            }.Else{\r\n                Div(text-muted){LangRes(@1no)}\r\n            }\r\n        }.ElseIf(#flags.decision# == -2){\r\n            Div(text-muted){LangRes(@1not_enough_votes)}\r\n        }.ElseIf(#flags.decision# == 1){\r\n            Div(text-success){LangRes(@1accepted)}\r\n        }.ElseIf(#flags.decision# == -1){\r\n            Div(text-danger){LangRes(@1rejected)}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#status#))\r\n    Div(text-center #status_class#){\r\n        If(#status#==#STARTED#){\r\n            Button(Class: btn btn-link icon-eye, Page: @1voting_view, PageParams: \"vID=#id#\")\r\n        }.Else{\r\n            If(And(#status# == #INVALID#, Or(#flags.full_data# == 0, #progress.number_participants# == 0))){\r\n                LangRes(@1not_filled)\r\n            }.Else{\r\n                AppParam(Ecosystem: 1, App: #application_id#, Name: voting_statuses, Index: #status#)\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right){\r\n        If(And(#creator.member_id#==#key_id#,#status#==#INVALID#)){\r\n            Button(Class: fa fa-trash btn btn-default, Contract: @1VotingDelete, Params: \"votingID=#id#\", Page: #this_page#).Alert(Text: \"$@1want_delete_voting$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1voting$=_name,$@1type$=_type,$@1voting_subject$=_subject,$@1participants$=_participants,$@1date_start$ / $@1date_end$=_date,$@1creator$=_creator,$@1progress$=_progress,$@1decision$=_decision,$@1status$=_status,=_actions\")\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1votings$ $@1not_founded$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_template_create)\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(name, \"New voting\").(typevoting, 0).(volume, 50).(quorum, 51).(vacancies, 1)\r\n\r\nIf(#TemplateId#>0){\r\n    DBFind(@1voting_templates).Where({\"id\": #TemplateId#, \"ecosystem\": #ecosystem_id#}).Columns(\"voting->count_type_voters,voting->name,voting->volume,voting->quorum,voting->type_decision,voting->type_participants,voting->type,voting->rating,subject->candidates,subject->vacancies,subject->voters,subject->contract_accept,subject->contract_reject,optional->contract_accept,optional->contract_reject,optional->init_contract,optional->contract_accept_params,optional->contract_reject_params,optional->init_contract_params\").Vars(template)\r\n\r\n    If(#CountTypeVoters# == \"\"){\r\n        SetVar(CountTypeVoters, #template_voting_count_type_voters#)\r\n    }\r\n    If(#TypeDecision# == \"\"){\r\n        SetVar(ValTypeDec, #template_voting_type_decision#)\r\n    }\r\n    If(#TypeParticipants# == \"\"){\r\n        SetVar(TypeParticipants, #template_voting_type_participants#)\r\n    }\r\n    SetVar(voters, #template_subject_voters#)\r\n    SetVar(name, #template_voting_name#)\r\n    SetVar(quorum, #template_voting_quorum#)\r\n    If(#template_voting_rating# == 1){\r\n        SetVar(rating, \"true\")\r\n    }\r\n    SetVar(volume, #template_voting_volume#)\r\n    SetVar(candidates, #template_subject_candidates#)\r\n    SetVar(vacancies, #template_subject_vacancies#)\r\n    SetVar(contract_accept, #template_subject_contract_accept#)\r\n    SetVar(contract_reject, #template_subject_contract_reject#)\r\n    SetVar(init_contract, #template_optional_init_contract#)\r\n    SetVar(init_params, #template_optional_init_contract_params#)\r\n    SetVar(optional_accept_contract, #template_optional_contract_accept#)\r\n    SetVar(optional_accept_params, #template_optional_contract_accept_params#)\r\n    SetVar(optional_reject_contract, #template_optional_contract_reject#)\r\n    SetVar(optional_reject_params, #template_optional_contract_reject_params#)\r\n}\r\n\r\nForm(){\r\n    If(#TypeDecision#>0){\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1number_votes$)\r\n                        Input(Name: CountTypeVoters, Type: hidden, Value: 1)\r\n                    }.Else{\r\n                        Input(Name: InputCountTypeVoters, Disabled: 1, Value: $@1percent_votes$)\r\n                        Input(Name: CountTypeVoters, Type: hidden, Value: 0)\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_voting_decisions, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #TypeDecision#))\r\n                    Input(Name: Input_TypeVotingDecisions, Disabled: 1, Value: #var_type_voting_decisions#)\r\n                    Input(Name: TypeDecision, Type: hidden, Value: #TypeDecision#)\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    SetVar(var_type_participants, AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #TypeParticipants#))\r\n                    Input(Name: InputTypeVotingParticipants, Disabled: 1, Value: #var_type_participants#)\r\n                    Input(Name: TypeParticipants, Type: hidden, Value: #TypeParticipants#)\r\n                }\r\n            }\r\n            If(#TypeParticipants#==3){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voters_role)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        DBFind(@1roles, src_roles1).Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Order(id).Custom(name){\r\n                            #role_name#\r\n                        }\r\n                        Select(Name: Voters, Source: src_roles1, NameColumn: name, ValueColumn: id, Value: #voters#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1name)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: VotingName, Value: #name#)\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_quorum)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Input(Name: Quorum, Value: #quorum#, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_number_desc$\r\n                        }\r\n                    }.Else{\r\n                        Input(Name: Quorum, Value: #quorum#, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_quorum_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            If(Or(#TypeParticipants#==1,#TypeParticipants#==2,#TypeParticipants#==3,#TypeParticipants#==4)){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_rating)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mt-sm text-left){\r\n                        Input(Name: Rating, Placeholder: $@1voting_rating_desc$, Type: checkbox, Value: #rating#, Class: m0 text-muted)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(Or(#CountTypeVoters#==1,#TypeDecision#==1,#TypeDecision#==2)){\r\n            SetVar(hide_volume, 1)\r\n        }\r\n        If(#hide_volume# != 1){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1voting_volume)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: Volume, Value: #volume#, Type: number)\r\n                        Div(m0 h6 text-muted){\r\n                            $@1voting_volume_desc$\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        If(Or(#TypeDecision#==1,#TypeDecision#==2)){\r\n            Div(list-group-item){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1vacancies)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: Vacancies, Value: #vacancies#, Type: number)\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1candidates_role)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        DBFind(@1roles,src_roles2).Where({\"role_type\": 2, \"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Order(id).Custom(name){\r\n                            #role_name#\r\n                        }\r\n                        Select(Name: Candidates, Source: src_roles2, NameColumn: name, ValueColumn: id, Value: #candidates#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#TypeDecision#==4){\r\n            Div(list-group-item){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1contract_accept)\r\n                            Span(*,text-danger)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Input(Name: ContractAccept, Placeholder: $@1contract$, Value: #contract_accept#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            LangRes(@1contract_reject)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Input(Name: ContractReject, Placeholder: $@1contract$, Value: #contract_reject#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_init_contract)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: InitContract, Placeholder: $@1contract$, Value: #init_contract#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: ParamsInit, Placeholder: $@1arguments$, Value: #init_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1contract_accept)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalContractAccept, Placeholder: $@1contract$, Value: #optional_accept_contract#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalParamsAccept, Placeholder: $@1arguments$, Value: #optional_accept_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1contract_reject)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Div(row){\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalContractReject, Placeholder: $@1contract$, Value: #optional_reject_contract#)\r\n                        }\r\n                        Div(col-md-6){\r\n                            Input(Name: OptionalParamsReject, Placeholder: $@1arguments$, Value: #optional_reject_params#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: @1voting_templates_list, Contract: @1VotingTemplateCreate)\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: #this_page#, PageParams: \"TemplateId=#TemplateId#\").Popup(60, $@1voting_template_create$)\r\n    }.Else{\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 mt-sm text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#\", Class: btn-xs btn-default mr-lg).Popup(60, $@1voting_template_create$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#\", Class: btn-xs btn-primary disabled).Popup(60, $@1voting_template_create$)\r\n                    }.Else{\r\n                        Button(Body: $@1percent_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=0,TemplateId=#TemplateId#\", Class: btn-xs btn-primary disabled mr-lg).Popup(60, $@1voting_template_create$)\r\n                        Button(Body: $@1number_votes$, Page: #this_page#, PageParams: \"CountTypeVoters=1,TemplateId=#TemplateId#\", Class: btn-xs btn-default).Popup(60, $@1voting_template_create$)    \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_subject)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    If(#CountTypeVoters#==1){\r\n                        Data(numbers_type_decisions, \"value,name\"){\r\n                            3,$@1document$\r\n                            4,$@1contract_run$\r\n                        }\r\n                        RadioGroup(Name: TypeDecision, Value: #ValTypeDec#, Source: numbers_type_decisions, ValueColumn: value, NameColumn: name)\r\n                    }.Else{\r\n                        AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                        RadioGroup(Name: TypeDecision, Value: #ValTypeDec#, Source: procent_type_decisions, ValueColumn: id, NameColumn: name)             \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1participants)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: src_typepart)\r\n                    Select(Name: TypeParticipants, Source: src_typepart, NameColumn: name, ValueColumn: id, Value: #TypeParticipants#)\r\n                }\r\n            }\r\n        }\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right mt, Page: #this_page#, PageParams: \"CountTypeVoters=#CountTypeVoters#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants),TemplateId=#TemplateId#\").Popup(60, $@1voting_template_create$)\r\n        If(#TemplateId#>0){\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_template_view, PageParams: \"TemplateId=#TemplateId#\")\r\n        }.Else{\r\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1voting_templates_list)\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nIf(#TemplateId#>0){\r\n    DBFind(@1voting_templates).Where({\"id\": #TemplateId#, \"ecosystem\": #ecosystem_id#}).Columns(\"voting->count_type_voters,voting->name,voting->volume,voting->quorum,voting->type_decision,voting->type_participants,voting->type,voting->rating,subject->candidates,subject->vacancies,subject->voters,subject->contract_accept,subject->contract_reject,optional->contract_accept,optional->contract_reject,optional->init_contract,optional->contract_accept_params,optional->contract_reject_params,optional->init_contract_params\").Vars(template)\r\n    If(#template_subject_voters#>0){\r\n        DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #template_subject_voters#}).Columns(\"role_name\").Vars(vid)\r\n        SetVar(v_role, \"#vid_role_name#\")\r\n    }\r\n    If(#template_subject_candidates#>0){\r\n        DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #template_subject_candidates#}).Columns(\"role_name\").Vars(cid)\r\n        SetVar(c_role, \"#cid_role_name#\")\r\n    }\r\n}\r\n\r\nSetTitle(\"$@1template$\": #template_voting_name#)\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1voting$, Page: @1voting_list)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    LinkPage(Class: ml-sm, Body: $@1voting_templates$, Page: @1voting_templates_list)\r\n    Span(Class: text-muted mh-sm, Body: /)\r\n    Span(Class: text-muted, Body: #template_voting_name#)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nDiv(content-wrapper){\r\n    If(#template_id# > 0){\r\n        Div(row){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-primary){\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #template_voting_name#)\r\n                        Div(row){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #template_voting_type_decision#))\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 text-bold m0 mb, Body: $@1voting$)\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #template_voting_type#)\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1vote_count_type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_voting_count_type_voters#==1){\r\n                                    $@1number_votes$\r\n                                }.Else{\r\n                                    $@1percent_votes$\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_rating)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_voting_rating#==1){\r\n                                    $@1yes$ Span(Class:text-muted, Body: ($@1voting_rating_desc$))\r\n                                }.Else{\r\n                                    $@1no$ Span(Class:text-muted, Body: ($@1voting_rating_not_used$))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_quorum)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_voting_count_type_voters#==1){\r\n                                    #template_voting_quorum#\r\n                                }.Else{\r\n                                    #template_voting_quorum#%\r\n                                }\r\n                            }\r\n                        }\r\n                        If(And(#template_voting_count_type_voters#!=1,#template_voting_type_decision#!=1,#template_voting_type_decision#!=2)){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voting_volume)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #template_voting_volume#%\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1participants)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Index: #template_voting_type_participants#)\r\n                            }\r\n                        }\r\n                        If(#template_voting_type_participants#==3){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voters_role)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #v_role#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(Or(#template_voting_type_decision#==1,#template_voting_type_decision#==2)){\r\n                        Div(list-group-item text-center){\r\n                            P(Class: h5 text-bold m0 mb, Body: $@1voting_subject$)\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1vacancies)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #template_subject_vacancies#\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1candidates_role)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #c_role#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#template_voting_type_decision#==4){\r\n                        Div(list-group-item text-center){\r\n                            P(Class: h5 text-bold m0 mb, Body: $@1voting_subject$)\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#template_subject_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #template_subject_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#template_subject_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #template_subject_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 m0 mb){\r\n                             Span(Class: text-bold, Body: $@1params$)\r\n                             Span(Class: text-normal text-muted ml, Body: $@1optional$)\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_init_contract)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_init_contract# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_init_contract#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1arguments)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_init_contract_params# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_init_contract_params#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1contract_accept)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_accept# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_accept#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1arguments)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_accept_params# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_accept_params#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1contract_reject)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_reject# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_reject#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1arguments)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#template_optional_contract_reject_params# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #template_optional_contract_reject_params#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#template_voting_type# == 1){\r\n                        Div(list-group-item){\r\n                            Div(row){\r\n                                Div(col-md-6 mt-sm text-right){\r\n                                    Label(){\r\n                                        $@1duration$ ($@1days$)\r\n                                    }\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    Input(Name: Duration, Type: number, Value: 3)\r\n                                }\r\n                            }\r\n                            If(#template_voting_type_decision#==3){\r\n                                Div(row mt-sm){\r\n                                    Div(col-md-6 mt-sm text-right){\r\n                                        Label(){\r\n                                            LangRes(@1text_document)\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        Input(Name: TextDocument, Type: textarea).Style(resize: vertical;)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Button(Body: LangRes(@1back), Class: btn btn-default, Page: @1voting_templates_list)\r\n                        Div(pull-right){\r\n                            Button(Class: fa fa-copy btn btn-default, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#\").Popup(60, $@1voting_template_create$)\r\n                            If(#template_voting_type# == 1){\r\n                                Button(Body: $@1voting_start_button$, Class: btn btn-primary, Page: @1voting_list, Contract: @1VotingTemplateRun, Params: \"TemplateId=#TemplateId#\")\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(col-md-12 alert alert-danger text-center){\r\n            LangRes(@1attention)\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_templates_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1voting_templates_list).(this_table, @1voting_templates)\r\nInclude(@1pager_header)\r\n\r\nSetTitle(\"$@1voting_templates$\")\r\nSpan(Class: h5 m0 mb ml-lg){\r\n    LinkPage(Class: ml-sm, Body: $@1votings$, Page: @1voting_list)\r\n    Span(Class: text-muted mh, Body: /)\r\n    Span(Class: text-muted, Body: $@1voting_templates$)\r\n}.Style(\r\n    display: inline-block;\r\n)\r\n\r\nIf(#search#){\r\n    SetVar(w_search, {\"voting->name\": {\"$ilike\": \"#search#\"}})\r\n}\r\nSetVar(where, {\"ecosystem\": #ecosystem_id#, \"voting->type\": {\"$in\": [1,2]}, {#w_search#}})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, LangRes(@1template))\r\n    Include(@1search)\r\n}\r\n\r\nDBFind(@1applications).Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\n\r\nDBFind(#this_table#, src).Where(#where#).Order({\"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"voting->name,voting->type_participants,voting->type_decision,voting->type\").Custom(_participants){\r\n    P(Class: m0 h6, Body: AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_participants, Index: #voting.type_participants#))\r\n}.Custom(_decision){\r\n    P(Class: m0 h6, Body: AppParam(Ecosystem:1, App:#application_id#, Name:type_voting_decisions, Index: #voting.type_decision#))\r\n}.Custom(_type){\r\n    AppParam(Ecosystem:1, App:#application_id#, Name:type_voting, Index: #voting.type#)\r\n}.Custom(_name){\r\n    LinkPage(Body: #voting.name#, Page: @1voting_template_view, PageParams: \"TemplateId=#id#\")\r\n}.Count(count)\r\n\r\nIf(Or(#count#>0,#ecosystem_id#>1)){\r\n    AddToolButton(Title: $@1create$, Page: @1voting_template_create, Icon: icon-plus).Popup(50, $@1voting_template_create$)\r\n}\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src, \"$@1template$=_name,$@1participants$=_participants,$@1decision$=_decision,$@1voting_type$=_type\")\r\n            }.ElseIf(#ecosystem_id#==1){\r\n                Form(Class: text-center h6){\r\n                    Data(autofill, \"value,description\"){\r\n                        yes,$@1use_default_voting_templates$\r\n                        no,$@1select_default_templates_manually$\r\n                    }\r\n                    RadioGroup(Name: fill_ids, Source: autofill, NameColumn: description, ValueColumn: value).Style(line-height: 20px;)\r\n                    Button(Body: $@1install_default_templates$, Class: btn btn-primary, Page: @1voting_templates_list, Contract: @1VotingTemplatesInstall)\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center h4 text-muted, Body: \"$@1voting_templates_not_found$\")\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"page_params->voting_id\").Vars(notific)\r\n    SetVar(vID,#notific_page_params_voting_id#)\r\n}\r\n\r\nSetVar(INVALID,1).(WAITING,2).(STARTED,3).(FINISHED,4)\r\nSetVar(date_format,\"DD.MM.YYYY HH:MI\")\r\nSetVar(this_page,\"@1voting_view\")\r\n\r\nDiv(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(@1votings).WhereId(#vID#).Columns(\"id,voting->rating,voting->name,voting->volume,voting->quorum,voting->type_participants,voting->type,voting->count_type_voters,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended,status,creator->member_id\").Vars(instance)\r\n        SetVar(type_decision,#instance_voting_type_decision#)\r\n        SetVar(type_participants,#instance_voting_type_participants#)\r\n\r\n        SetVar(isVotingAllowed,0)\r\n        SetVar(isStartProcessing,0)\r\n        If(Or(#type_participants#==1,#type_participants#==2,#type_participants#==3,#type_participants#==4)){\r\n            DBFind(@1votings_participants).Where({\"voting_id\": #vID#, \"member->member_id\": #key_id#, \"decision\": 0, \"ecosystem\": #ecosystem_id#}).Columns(\"id\").Vars(flag_participant)\r\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\r\n                DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"recipient->member_id\": #key_id#, \"page_name\": #this_page#, \"page_params->voting_id\": #vID#, \"closed\": 0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\r\n                If(#notificcc_id#>0){\r\n                    SetVar(isVotingAllowed,1)\r\n                    SetVar(notific_id,#notificcc_id#)\r\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==\"\")){\r\n                        SetVar(isStartProcessing,1)\r\n                    }\r\n                }.Else{\r\n                    DBFind(@1votings_participants).Where({\"ecosystem\": #ecosystem_id#, \"member->member_id\": #key_id#, \"voting_id\": #vID#}).Columns(\"id,decision_date\").Vars(md)\r\n                    If(And(#md_id#>0, #md_decision_date#==\"\")){\r\n                        SetVar(isVotingAllowed,1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        If(#type_participants#==5){\r\n            DBFind(@1votings_participants).Where({\"voting_id\": #vID#, \"member->role_id\": #role_id#, \"decision\": 0, \"ecosystem\": #ecosystem_id#}).Columns(\"id\").Vars(flag_participant)\r\n            If(And(#instance_status#==#STARTED#,#flag_participant_id#>0)){\r\n                DBFind(@1notifications).Where({{\"$or\":[{\"date_start_processing\": \"$isnull\"}, {\"processing_info->member_id\": #key_id#}]}, \"ecosystem\": #ecosystem_id#, \"recipient->role_id\": #role_id#, \"page_name\": #this_page#, \"page_params->voting_id\": #vID#, \"closed\": 0}).Columns(\"id,notification->type,date_start_processing\").Vars(notificcc)\r\n                If(#notificcc_id#>0){\r\n                    SetVar(isVotingAllowed,1)\r\n                    SetVar(notific_id,#notificcc_id#)\r\n                    If(And(#notificcc_notification_type#==2,#notificcc_date_start_processing#==\"\")){\r\n                        SetVar(isStartProcessing,1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Div(row mt-sm){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-primary){\r\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name# (#instance_id#))\r\n                        Div(row mt-sm){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Index: #type_decision#))\r\n                            }\r\n                        }\r\n                        If(#instance_voting_description# != \"\"){\r\n                            Div(row){\r\n                                Div(col-md-6 text-right){\r\n                                    Div(Class: t5 text-muted m0, Body: LangRes(@1description))\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 text-bold m0 mb, Body: $@1voting_subject$)\r\n                        If(Or(#type_decision#==1,#type_decision#==2)){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1role)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(@1roles).Where({\"ecosystem\": #ecosystem_id#, \"id\": #instance_optional_role_id#}).Columns(\"id,role_name\").Vars(prefix)\r\n                                        #prefix_role_name# (LangRes(@1id): #prefix_id#)\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1vacancies)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        #instance_optional_role_vacancies#\r\n                                    }.Else{\r\n                                        Span(Class: text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1candidates)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        #instance_optional_number_candidates#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({\"voting_id\": #vID#}).Order(\"id\").Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n                                Address(#subject.member_id#)\r\n                            }.Custom(_member){\r\n                                LinkPage(Class: text-primary t6 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#subject.member_id#\"){\r\n                                    #subject.member_name#\r\n                                }\r\n                            }.Custom(_voting){\r\n                                If(#isStartProcessing#==1){\r\n                                    Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                }.Else{\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Button(Body: LangRes(@1vote), Class: btn btn-success, Page: #this_page#, PageParams: \"vID=#vID#\", Contract: @1VotingCandidateAccept, Params: \"CandidateID=#subject.member_id#,RoleId=#role_id#\")\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Table(src_voting_subject, \"=_member,=_address,=_voting\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#type_decision#==1){\r\n                                            If(#instance_creator_member_id#==#key_id#){\r\n                                                Button(Class: btn btn-link, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                    Strong(LangRes(@1subject_voting_edit))\r\n                                                }.Popup(60, $@1subject_voting$)\r\n                                            }.Else{\r\n                                                DBFind(@1votings_subject).Where({\"voting_id\": #vID#, \"subject->member_id\": #key_id#}).Columns(\"id\").Vars(already_candidate)\r\n                                                If(#already_candidate_id#>0){\r\n                                                    SetVar(hidden,hidden)\r\n                                                }.Else{\r\n                                                    SetVar(hidden,)\r\n                                                }\r\n                                                Div(#hidden#){\r\n                                                    Button(Body: $@1can_apply_voting$, Class: btn btn-link, Page: #this_page#, PageParams: \"vID=#vID#\", Contract: @1VotingSubjectCandidates, Params: \"votingID=#vID#,memberID=#key_id#\")\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        If(#instance_creator_member_id#==#key_id#){\r\n                                            If(#type_decision#==2){\r\n                                                Button(Class: btn btn-link, Page: @1voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                    Strong(LangRes(@1subject_voting_edit))\r\n                                                }.Popup(60, $@1subject_voting$)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==3){\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({\"voting_id\": #vID#}).Columns(\"id,subject->text,subject->hash,results->percent_accepted\").Vars(subject)\r\n                            Div(row t6 mt-lg){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_text#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item t6 text-muted){\r\n                                        If(#subject_id# > 0){\r\n                                            Hash: #subject_subject_hash#\r\n                                        }.Else{\r\n                                            Hash: LangRes(@1empty)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#instance_creator_member_id#==#key_id#){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(@1subject_voting_edit))\r\n                                            }.Popup(60, $@1subject_voting$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#type_decision#==4){\r\n                            DBFind(@1votings_subject, src_voting_subject).Where({\"voting_id\": #vID#}).Columns(\"id,subject->contract_accept,subject->contract_accept_params,subject->contract_reject,subject->contract_reject_params,results->percent_accepted\").Vars(subject)\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_subject_contract_accept#){\r\n                                        #subject_subject_contract_accept#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(@1not_filled))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#subject_subject_contract_accept#){\r\n                                Div(row t6){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1arguments)\r\n                                    }\r\n                                    Div(col-md-6 text-left arguments){\r\n                                        If(Or(#subject_subject_contract_accept_params#==\"\",#subject_subject_contract_accept_params#=={})){\r\n                                            Span(Class: text-muted, Body: LangRes(@1no))\r\n                                        }.Else{\r\n                                            #subject_subject_contract_accept_params#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t6 mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_subject_contract_reject#){\r\n                                        #subject_subject_contract_reject#\r\n                                    }.Else{\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }\r\n                                }\r\n                            }\r\n                            If(#subject_subject_contract_reject#){\r\n                                Div(row t6){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(@1arguments)\r\n                                    }\r\n                                    Div(col-md-6 text-left arguments){\r\n                                        If(Or(#subject_subject_contract_reject_params#==\"\",#subject_subject_contract_reject_params#=={})){\r\n                                            Span(Class: text-muted, Body: LangRes(@1no))\r\n                                        }.Else{\r\n                                            #subject_subject_contract_reject_params#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-md-12){\r\n                                    If(And(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#),#instance_voting_type#==1)){\r\n                                        If(#instance_creator_member_id#==#key_id#){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(@1subject_voting_edit))\r\n                                            }.Popup(60, $@1subject_voting$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-4 col-sm-offset-4 col-lg-4 col-lg-offset-4){\r\n                                    If(#isStartProcessing#==1){\r\n                                        Button(Body: LangRes(@1process), Class: btn btn-info text-capitalize, Contract: @1NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: #this_page#, PageParams: \"notific_id=#notific_id#\")\r\n                                    }.Else{\r\n                                        If(#isVotingAllowed#==1){\r\n                                            Button(Body: LangRes(@1reject), Class: btn btn-danger pull-left, Contract: @1VotingDecisionReject, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                            Button(Body: LangRes(@1accept), Class: btn btn-success pull-right, Contract: @1VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: #this_page#, Params: \"RoleId=#role_id#\")\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center t6){\r\n                        P(Class: h5 text-bold m0 mb, Body: $@1voting$)\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1status)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                SetVar(status_class, AppParam(Ecosystem:1, App:#application_id#, Name:voting_statuses_classes, Index:#instance_status#))\r\n                                Div(#status_class#){\r\n                                    If(And(#instance_status# == #INVALID#, Or(#instance_flags_full_data# == 0, #instance_progress_number_participants# == 0))){\r\n                                        LangRes(@1not_filled)\r\n                                    }.Else{\r\n                                        AppParam(Ecosystem: 1, App: #application_id#, Name: voting_statuses, Index: #instance_status#)\r\n                                    }\r\n                                    If(#instance_flags_full_data#==0){\r\n                                        Div(Class: text-muted){(LangRes(@1voting_subject_not_filled))}\r\n                                    }\r\n                                    If(#instance_progress_number_participants#==0){\r\n                                        Div(Class: text-muted){(LangRes(@1voting_no_participants))}\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1vote_count_type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_count_type_voters#==1){\r\n                                    $@1number_votes$\r\n                                }.Else{\r\n                                    $@1percent_votes$\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_rating)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_rating#==1){\r\n                                    $@1yes$ Span(Class:text-muted, Body: ($@1voting_rating_desc$))\r\n                                }.Else{\r\n                                    $@1no$ Span(Class:text-muted, Body: ($@1voting_rating_not_used$))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1filled)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    Span(Class: text-success, Body: LangRes(@1yes))\r\n                                }.Else{\r\n                                    Span(Class: text-danger, Body: LangRes(@1no))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1decision)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    LangRes(@1not_enough_votes)\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    Span(Class:text-danger, Body: LangRes(@1rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    LangRes(@1no)\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    Span(Class:text-success, Body: LangRes(@1accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1date_start)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(Or(#instance_status#==#STARTED#,#instance_status#==#FINISHED#)){\r\n                                SetVar(date_started_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_started_class#){\r\n                                DateTime(DateTime: #instance_date_started#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1date_end)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(#instance_status#==#FINISHED#){\r\n                                SetVar(date_ended_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_ended_class#){\r\n                                DateTime(DateTime: #instance_date_ended#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1voting_quorum)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_voting_count_type_voters#==1){\r\n                                    #instance_voting_quorum#\r\n                                }.Else{\r\n                                    #instance_voting_quorum#%\r\n                                }\r\n                            }\r\n                        }\r\n                        If(And(#instance_voting_count_type_voters#!=1,#type_decision#!=1,#type_decision#!=2)){\r\n                            Div(row){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1voting_volume)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #instance_voting_volume#%\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1participants)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    #instance_progress_number_participants#\r\n                                }.Else{\r\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\r\n                                }\r\n                                If(#instance_voting_type#==1){\r\n                                    If(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#)){\r\n                                        If(#instance_creator_member_id#==#key_id#){\r\n                                            Button(Class: btn-xs btn-link text-bold ml, Page: @1voting_invite, PageParams: \"vID=#vID#\"){\r\n                                                LangRes(@1participants_add)\r\n                                            }.Popup(60, $@1participants_add$)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }.Style(margin-top: -3px;)\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h5 m0 mb){\r\n                             Span(Class: text-bold, Body: $@1params$)\r\n                             Span(Class: text-normal text-muted ml, Body: $@1optional$)\r\n                        }\r\n                        Div(row mt t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1contract_accept)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_optional_contract_accept# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #instance_optional_contract_accept#\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_optional_contract_accept#){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1arguments)\r\n                                    Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                                }\r\n                                Div(col-md-6 text-left arguments){\r\n                                    If(Or(#instance_optional_contract_accept_params#==\"\",#instance_optional_contract_accept_params#=={})){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_accept_params#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t6){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(@1contract_reject)\r\n                                Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_optional_contract_reject# == \"\"){\r\n                                    Span(Class: text-muted, Body: LangRes(@1no))\r\n                                }.Else{\r\n                                    #instance_optional_contract_reject#\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_optional_contract_reject#){\r\n                            Div(row t6){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(@1arguments)\r\n                                    Span(Class: text-muted ml, Body: LangRes(@1optional))\r\n                                }\r\n                                Div(col-md-6 text-left arguments){\r\n                                    If(Or(#instance_optional_contract_reject_params#==\"\",#instance_optional_contract_reject_params#=={})){\r\n                                        Span(Class: text-muted, Body: LangRes(@1no))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_reject_params#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item){\r\n                        Include(@1voting_charts)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(@1attention))\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n    .arguments {word-wrap: break-word;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_wizard",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page,\"@1voting_wizard\")\r\nSetVar(back_page,\"@1voting_list\")\r\nDBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").Vars(application)\r\nDBFind(\"@1buffer_data\").Where({\"key\": \"voting_wizard_buffer\", \"member_id\": #key_id#, \"ecosystem\": #ecosystem_id#}).Columns(\"value->save_time,value->voting_name,value->voting_type,value->type_participants,value->type_decision,value->volume,value->quorum,value->rating,value->count_type_voters,value->description,value->interval,value->start_date,value->start_time,value->end_date,value->end_time,value->member_participants,value->role_participants,value->execute_contract,value->contract_accept,value->contract_accept_params,value->contract_reject,value->contract_reject_params,value->text_document,value->subject_description,value->table_to_written,value->row_id,value->column_name,value->written_value,value->candidates,value->apply,value->role_id,value->vacancies\").Vars(buffer)\r\n\r\nIf(#stage# == \"\"){\r\n    If(#buffer_value_save_time# == \"\"){\r\n        SetVar(stage, 1)\r\n    }.Else{\r\n        SetVar(stage, 0)\r\n    }\r\n}\r\nSetVar(debug, 0)\r\nSetVar(square, \"fa fa-circle-o mr-sm\")\r\nSetVar(square-filled, \"fa fa-dot-circle-o mr-sm\")\r\n\r\nForm(){\r\n    If(#stage# == 0){\r\n        Div(text-center){\r\n            Div(Body: LangRes(@1voting_wizard_draft_message))\r\n            Div(h6 m0 text-muted){$@1last_save$: #buffer_value_save_time#}\r\n            Data(src_autosave, \"id,name\"){\r\n                yes,$@1voting_wizard_use_draft$\r\n                no,$@1start_over$\r\n            }\r\n            RadioGroup(Name: load_autosave, Source: src_autosave, NameColumn: name, ValueColumn: id)\r\n        }\r\n        Button(Body: LangRes(@1next), Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"stage=1\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Body: LangRes(@1cancel), Class: btn btn-default pull-right, Page: #back_page#)\r\n\r\n    }.ElseIf(#stage# == 1){\r\n        Div(row){\r\n            Div(col-md-3 mt-lg text-right){\r\n                Label(){\r\n                    LangRes(@1voting_subject)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_decisions, Source: procent_type_decisions)\r\n                RadioGroup(Name: type_decision, Source: procent_type_decisions, NameColumn: name, ValueColumn: id, Value: #buffer_value_type_decision#)\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=2\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right fa fa-pause, Page: #back_page#)\r\n        Div(progress-wrapper pull-right mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(#stage# == 2){\r\n        If(#val_contract_accept# != \"\"){\r\n            SetVar(buffer_value_contract_accept,#val_contract_accept#)\r\n        }\r\n        If(#val_contract_accept_params# != \"\"){\r\n            SetVar(buffer_value_contract_accept_params,#val_contract_accept_params#)\r\n        }\r\n        If(#val_contract_reject# != \"\"){\r\n            SetVar(buffer_value_contract_reject,#val_contract_reject#)\r\n        }\r\n        If(#val_contract_reject_params# != \"\"){\r\n            SetVar(buffer_value_contract_reject_params,#val_contract_reject_params#)\r\n        }\r\n\r\n\r\n        If(#buffer_value_type_decision# == 1){\r\n            If(#val_role_id# != \"\"){\r\n                SetVar(buffer_value_role_id,#val_role_id#)\r\n            }\r\n            If(#val_role_vacancies# != \"\"){\r\n                SetVar(buffer_value_vacancies,#val_role_vacancies#)\r\n            }\r\n            If(#val_execute_contract# != \"\"){\r\n                SetVar(buffer_value_execute_contract,#val_execute_contract#)\r\n            }\r\n            If(And(#apply# == \"\", #buffer_value_apply# == 1)){\r\n                SetVar(apply, 1)\r\n            }\r\n\r\n            DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n            If(#elective_roles_count#>0){\r\n                Div(row mt-sm){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1candidates))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Div(input-group){\r\n                            If(#apply# == 1){\r\n                                Input(Name: applied, Disabled: 1, Value: $@1applied_already$)\r\n                                Div(input-group-btn){\r\n                                    Button(Class: btn bg-gray-lighter buttons fa fa-undo, Page: #this_page#, PageParams: \"stage=2,apply=0,val_role_id=Val(role_id),val_role_vacancies=Val(vacancies),val_execute_contract=Val(execute_contract),val_contract_accept=Val(contract_accept),val_contract_accept_params=Val(contract_accept_params),val_contract_reject=Val(contract_reject),val_contract_reject_params=Val(contract_reject_params)\").Popup(50, $@1voting_wizard$)\r\n                                }\r\n                            }.Else{\r\n                                Input(Name: can_apply_voting, Disabled: 1, Value: $@1can_apply_voting$)\r\n                                Div(input-group-btn){\r\n                                    Button(Body: LangRes(@1apply), Class: btn bg-gray-lighter buttons, Page: #this_page#, PageParams: \"stage=2,apply=1,val_role_id=Val(role_id),val_role_vacancies=Val(vacancies),val_execute_contract=Val(execute_contract),val_contract_accept=Val(contract_accept),val_contract_accept_params=Val(contract_accept_params),val_contract_reject=Val(contract_reject),val_contract_reject_params=Val(contract_reject_params)\").Popup(50, $@1voting_wizard$)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#apply# == 1){\r\n                    DBFind(\"@1members\").Where({\"ecosystem\": #ecosystem_id#, \"id\": #key_id#}).Vars(my)\r\n                    If(#my_member_name# == \"\"){\r\n                        SetVar(my_member_name, Address(#key_id#))\r\n                    }\r\n                    Data(src_voting_subject,\"id,name\"){\r\n                        #key_id#,#my_member_name#\r\n                    }.Custom(_address){\r\n                        Address(#id#)\r\n                    }.Custom(_member){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\"){\r\n                            Span(Body: #name#)\r\n                        }\r\n                    }\r\n                }.Else{\r\n                    Data(src_voting_subject,\"id,name\"){}\r\n                }\r\n                If(#apply#==1){\r\n                    Div(row){\r\n                        Div(col-sm-9 col-sm-offset-3){\r\n                            Table(src_voting_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                        }\r\n                    }\r\n                }\r\n                Div(form-group){\r\n                    Div(row mt-lg){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1role))\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 text-left){\r\n                            Select(Name: role_id, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #buffer_value_role_id#)\r\n                        }\r\n                    }\r\n                    Div(row mt-sm){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1vacancies))\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 text-left){\r\n                            Input(Name: vacancies, Type: Number, Value: #buffer_value_vacancies#)\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(row){\r\n                    Div(col-md-12 text-center h4){\r\n                        P(Class: m0, Body: LangRes(@1elective_roles_not_found))\r\n                        Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                            Span(Class: h4, Body: LangRes(@1create_role))\r\n                        }.Popup(50, $@1edit_role$)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }.ElseIf(#buffer_value_type_decision# == 2){\r\n            If(#val_role_id# != \"\"){\r\n                SetVar(buffer_value_role_id,#val_role_id#)\r\n            }\r\n            If(#val_role_vacancies# != \"\"){\r\n                SetVar(buffer_value_vacancies,#val_role_vacancies#)\r\n            }\r\n            If(#val_execute_contract# != \"\"){\r\n                SetVar(buffer_value_execute_contract,#val_execute_contract#)\r\n            }\r\n            If(#new_candidate# == \"\"){\r\n                SetVar(new_candidate,0)\r\n            }\r\n            If(#candidates# == \"\"){\r\n                If(#buffer_value_candidates# != \"\"){\r\n                    SetVar(candidates,#buffer_value_candidates#)\r\n                }.Else{\r\n                    SetVar(candidates,0)\r\n                }\r\n            }\r\n            If(#new_candidate# != 0){\r\n                If(#candidates# == 0){\r\n                    SetVar(candidates,\"#new_candidate#\")\r\n                }.Else{\r\n                    SetVar(candidates,\"#candidates#,#new_candidate#\")\r\n                }\r\n            }\r\n\r\n            DBFind(@1keys, src_subject).Where({ecosystem:#ecosystem_id#, id: {$in: [#candidates#]}}).Custom(_address){\r\n                Address(#id#)\r\n            }.Custom(_member){\r\n                DBFind(@1members).WhereId(#id#).Count(have_name).Vars(participant)\r\n                If(#have_name#>0){\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\", Body: #participant_member_name#)\r\n                }.Else{\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\", Body: Address(#id#))\r\n                }\r\n            }\r\n\r\n            DBFind(@1keys,src_keys).Where({\"ecosystem\": #ecosystem_id#, {$and: [{\"id\": {$neq: #guest_key#}}, {\"id\": {$nin: [#candidates#]}}]}}).Columns(\"id\").Count(members_count).Custom(_name){\r\n                DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Count(have_name).Vars(m)\r\n                Address(#id#)\r\n                If(#have_name#>0){\r\n                    \" (#m_member_name#)\"\r\n                }\r\n            }\r\n\r\n            DBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#, role_type:2, deleted:0}).Columns(\"id,role_name\").Count(elective_roles_count)\r\n            If(#elective_roles_count#>0){\r\n                Div(form-group){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1candidates)).(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Div(input-group){\r\n                                If(#members_count#>0){\r\n                                    Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                                    Div(input-group-btn){\r\n                                        Button(Class: btn bg-gray-lighter fa fa-plus buttons, Page: #this_page#, PageParams: \"stage=2,new_candidate=Val(memberID),candidates=#candidates#,val_role_id=Val(role_id),val_role_vacancies=Val(vacancies),val_execute_contract=Val(execute_contract),val_contract_accept=Val(contract_accept),val_contract_accept_params=Val(contract_accept_params),val_contract_reject=Val(contract_reject),val_contract_reject_params=Val(contract_reject_params)\").Popup(50, $@1voting_wizard$)\r\n                                        Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=2,candidates=0,val_role_id=Val(role_id),val_role_vacancies=Val(vacancies),val_execute_contract=Val(execute_contract),val_contract_accept=Val(contract_accept),val_contract_accept_params=Val(contract_accept_params),val_contract_reject=Val(contract_reject),val_contract_reject_params=Val(contract_reject_params)\").Popup(50, $@1voting_wizard$)\r\n                                    }\r\n                                }.Else{\r\n                                    Input(Class: mb, Disabled: 1, Value: \"$@1voting_all_keys_added$\")\r\n                                    Div(input-group-btn input-group-top){\r\n                                        Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=2,candidates=0,val_role_id=Val(role_id),val_role_vacancies=Val(vacancies),val_execute_contract=Val(execute_contract),val_contract_accept=Val(contract_accept),val_contract_accept_params=Val(contract_accept_params),val_contract_reject=Val(contract_reject),val_contract_reject_params=Val(contract_reject_params)\").Popup(50, $@1voting_wizard$)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    If(Or(#members_count#>0,#candidates#!=0)){\r\n                        Div(row){\r\n                            Div(col-sm-9 col-sm-offset-3){\r\n                                Table(src_subject, \"$@1candidates$=_member,=_address\").Style(margin-bottom: 5px;)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(form-group){\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1role)).(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mb-sm text-left){\r\n                            Select(Name: role_id, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #buffer_value_role_id#)\r\n                        }\r\n                    }\r\n\r\n                    Div(row){\r\n                        Div(col-md-3 mt-sm text-right){\r\n                            Label(){\r\n                                Span(Body: LangRes(@1vacancies)).(Class: text-danger, Body:*)\r\n                            }\r\n                        }\r\n                        Div(col-md-9 mc-sm text-left){\r\n                            Input(Name: vacancies, Class: form-control, Type: Number, Value: #buffer_value_vacancies#)\r\n                        }\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(row){\r\n                    Div(col-md-12 text-center h4){\r\n                        P(Class: m0, Body: LangRes(@1elective_roles_not_found))\r\n                        Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"vID=#vID#,back_page=#back_page#\"){\r\n                            Span(Class: h4, Body: LangRes(@1create_role))\r\n                        }.Popup(50, $@1edit_role$)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }.ElseIf(#buffer_value_type_decision# == 3){\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1text_document))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 text-left){\r\n                        Input(Name: text_document, Type: textarea, Value: #buffer_value_text_document#).Style(resize: vertical;)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }.ElseIf(#buffer_value_type_decision# == 4){\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1table_to_written))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: table_to_written, Value: #buffer_value_table_to_written#)\r\n                        Div(Class: m0 h6 text-muted, Body: \"$@1table_to_written_desc$\")\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1row_id))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: row_id, Class: form-control, Type: number, Value: #buffer_value_row_id#)\r\n                        Div(Class: m0 h6 text-muted, Body: \"$@1row_id_desc$\")\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1column_name))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mb-sm text-left){\r\n                        Input(Name: column_name, Value: #buffer_value_column_name#)\r\n                        Div(Class: m0 h6 text-muted, Body: \"$@1column_name_desc$\")\r\n                    }\r\n                }\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1written_value))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Input(Name: written_value, Value: #buffer_value_written_value#)\r\n                        Div(Class: m0 h6 text-muted, Body: \"$@1written_value_desc$\")\r\n                    }\r\n                }\r\n            }\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-lg text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1description))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Input(Name: subject_description, Class: form-control, Type: textarea, Value: #buffer_value_subject_description#).Style(resize: vertical;)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        If(Or(And(#buffer_value_type_decision# == 1, #elective_roles_count# > 0), And(#buffer_value_type_decision# == 2, #elective_roles_count# > 0), #buffer_value_type_decision# == 3, #buffer_value_type_decision# == 4)){\r\n            Div(form-group){\r\n                Div(row){\r\n                    Div(col-md-3 mt-sm text-right){\r\n                        Label(){\r\n                            Span(Body: LangRes(@1contract_execute))\r\n                        }\r\n                    }\r\n                    Div(col-md-9 mc-sm text-left){\r\n                        Data(src_execute, \"id,name\"){\r\n                            no,$@1no$\r\n                            yes,$@1yes$\r\n                        }\r\n                        Select(Name: execute_contract, Source: src_execute, NameColumn: name, ValueColumn: id, Value: #buffer_value_execute_contract#)\r\n                    }\r\n                }\r\n            }\r\n        }.ElseIf(#buffer_value_type_decision# == 5){\r\n            Input(Name: execute_contract, Type: \"hidden\", Value: \"yes\")\r\n        }\r\n\r\n        Div(){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_accept))\r\n                        If(#buffer_value_type_decision# == 5){\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_accept, Value: #buffer_value_contract_accept#).Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_accept, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_accept_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_accept_params, Value: #buffer_value_contract_accept_params#)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1contract_reject))\r\n                        If(#buffer_value_type_decision# == 5){\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                    }\r\n                }\r\n                Div(col-md-9 mb-sm text-left){\r\n                    Input(Name: contract_reject, Value: #buffer_value_contract_reject#).Validate(minLength:3, maxLength:255)\r\n                    InputErr(Name: contract_reject, minLength: $@1validate_name$, maxLength: $@1validate_name$)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_reject_des$\")\r\n                }\r\n            }\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        Span(Body: LangRes(@1params))\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: contract_reject_params, Value: #buffer_value_contract_reject_params#)\r\n                    Div(Class: m0 h6 text-muted, Body: \"$@1contract_params_des$\")\r\n                }\r\n            }\r\n        }.Show(execute_contract=yes)\r\n\r\n        If(#buffer_value_type_decision# == 1){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=3\", Contract: @1VotingWizardBuffer, Params: \"apply=#apply#,role_id=Val(role_id),vacancies=Val(vacancies),execute_contract=Val(execute_contract)\").Popup(50, $@1voting_wizard$)\r\n        }.ElseIf(#buffer_value_type_decision# == 2){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=3\", Contract: @1VotingWizardBuffer, Params: \"candidates=#candidates#,role_id=Val(role_id),vacancies=Val(vacancies),execute_contract=Val(execute_contract)\").Popup(50, $@1voting_wizard$)\r\n        }.Else{\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=3\", Contract: @1VotingWizardBuffer, Params: \"execute_contract=Val(execute_contract)\").Popup(50, $@1voting_wizard$)\r\n        }\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=1\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt-sm mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n    }.ElseIf(#stage# == 3){\r\n        Div(row){\r\n            Div(col-md-3 mt-lg text-right){\r\n                Label(For: type_participants){\r\n                    LangRes(@1participants)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                AppParam(Ecosystem:1, App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\n                RadioGroup(Name: type_participants, Source: type_voting_participants, NameColumn: name, ValueColumn: id, Value: #buffer_value_type_participants#)\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=4\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=2\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(And(#stage# == 4, #buffer_value_type_participants# != 1)){\r\n        If(#new_participant# == \"\"){\r\n            SetVar(new_participant,0)\r\n        }\r\n        If(#member_participants# == \"\"){\r\n            If(#buffer_value_member_participants# != \"\"){\r\n                SetVar(member_participants,#buffer_value_member_participants#)\r\n            }.Else{\r\n                SetVar(member_participants,0)\r\n            }\r\n        }\r\n        If(#role_participants# == \"\"){\r\n            If(#buffer_value_role_participants# != \"\"){\r\n                SetVar(role_participants,#buffer_value_role_participants#)\r\n            }.Else{\r\n                SetVar(role_participants,0)\r\n            }\r\n        }\r\n\r\n        If(#buffer_value_type_participants# == 2){\r\n            If(#new_participant# != 0){\r\n                If(#member_participants# == 0){\r\n                    SetVar(member_participants,#new_participant#)\r\n                }.Else{\r\n                    SetVar(member_participants,\"#member_participants#,#new_participant#\")\r\n                }\r\n            }\r\n            DBFind(@1keys, src_participants).Where({ecosystem:#ecosystem_id#, id: {$in: [#member_participants#]}}).Count(participants_count).Custom(_id){\r\n                Address(#id#)\r\n            }.Custom(_name){\r\n                DBFind(@1members).WhereId(#id#).Count(have_name).Vars(participant)\r\n                If(#have_name#>0){\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\", Body: #participant_member_name#)\r\n                }.Else{\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\", Body: Address(#id#))\r\n                }\r\n            }\r\n        }.ElseIf(#buffer_value_type_participants# > 2){\r\n            If(#new_participant# != 0){\r\n                If(#role_participants# == 0){\r\n                    SetVar(role_participants,#new_participant#)\r\n                }.Else{\r\n                    SetVar(role_participants,\"#role_participants#,#new_participant#\")\r\n                }\r\n            }\r\n            If(And(Or(#buffer_value_type_participants# == 3, #buffer_value_type_participants# == 4), #role_participants# != 0)){\r\n                DBFind(@1roles_participants, src_participants).Where({ecosystem:#ecosystem_id#, \"role->id\": {$in: [#role_participants#]}}).Columns(\"member->member_id,role->id\").Count(participants_count).Custom(_id){\r\n                    Address(#member.member_id#)\r\n                }.Custom(_name){\r\n                    DBFind(@1members).WhereId(#member.member_id#).Count(have_name).Vars(participant)\r\n                    If(#have_name#>0){\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\", Body: #participant_member_name#)\r\n                    }.Else{\r\n                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#id#\", Body: Address(#id#))\r\n                    }\r\n                }.Custom(_sent){\r\n                    $@1voting_role_added$\r\n                }.Custom(_member_roles){\r\n                    DBFind(@1roles).Columns(\"id,role_name,image_id\").WhereId(#role.id#).Vars(rl)\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                        If(#rl_image_id#>0){\r\n                            Image(Src: Binary().ById(#rl_image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                            #rl_role_name#\r\n                        }.Else{\r\n                            Div(){\r\n                                Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\r\n                            }.Style(display:flex; align-items:center;)\r\n                        }\r\n                    }\r\n                }\r\n            }.ElseIf(And(#buffer_value_type_participants# == 5, #role_participants# != 0)){\r\n                DBFind(@1roles, src_participants).Columns(\"id,role_name,image_id\").Where({id:{$in:[#role_participants#]}}).Count(participants_count).Custom(_sent){\r\n                    $@1voting_role_added$\r\n                }.Custom(_member_roles){\r\n                    LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\r\n                        If(#image_id#>0){\r\n                            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n                            #role_name#\r\n                        }.Else{\r\n                            Div(){\r\n                                Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\r\n                            }.Style(display:flex; align-items:center;)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        If(#participants_count#>0){\r\n            Div(list-group-item mb-lg){\r\n                If(#buffer_value_type_participants# == 5){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent\")\r\n                }.ElseIf(#buffer_value_type_participants# == 4){\r\n                    Table(src_participants, \"$@1role$=_member_roles,=_sent,$@1member$=_name,=_id,\")\r\n                }.Else{\r\n                    Table(src_participants, \"$@1member$=_name,=_id\")\r\n                }\r\n            }\r\n        }\r\n        If(#buffer_value_type_participants# != 1){\r\n            Div(row){\r\n                If(#buffer_value_type_participants# == 2){\r\n                    DBFind(@1keys,src_keys).Where({\"ecosystem\": #ecosystem_id#, {$and: [{\"id\": {$neq: #guest_key#}}, {\"id\": {$nin: [#member_participants#]}}]}}).Columns(\"id\").Count(keys_count).Custom(_name){\r\n                        SetVar(m_member_name,)\r\n                        DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Count(have_name).Vars(m)\r\n                        Address(#id#)\r\n                        If(#have_name# > 0){\r\n                            \" (#m_member_name#)\"\r\n                        }\r\n                    }\r\n                    SetVar(source,src_keys)\r\n                    SetVar(select_label,$@1member$)\r\n                    SetVar(add_button,$@1participant_add$)\r\n                    SetVar(hint,$@1select_member$)\r\n                }.ElseIf(#buffer_value_type_participants# > 2){\r\n                    DBFind(@1roles, src_roles).Where({ecosystem:#ecosystem_id#, deleted:0, id:{$nin:[#role_participants#]}}).Count(roles_count).Columns(\"id,role_name\").Custom(_name){\r\n                        Span(#role_name#)\r\n                    }\r\n                    SetVar(source,src_roles)\r\n                    SetVar(select_label,$@1role$)\r\n                    SetVar(add_button,$@1add_role$)\r\n                    SetVar(hint,$@1select_role$)\r\n                }\r\n                Div(col-md-2 mt-sm text-right){\r\n                    Label(){\r\n                        Span(#select_label#)\r\n                        Span(*, text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-10 text-left){\r\n                    If(#participants_count# == \"\"){\r\n                        SetVar(participants_count,0)\r\n                    }\r\n                    If(#roles_count# == \"\"){\r\n                        SetVar(roles_count,0)\r\n                    }\r\n                    If(Or(And(#buffer_value_type_participants#==2,#keys_count#>0),And(#buffer_value_type_participants#==3,#participants_count#==0),And(#buffer_value_type_participants#>3,#roles_count#>0))){\r\n                        Div(input-group){\r\n                            Select(Name: var_id, Source: #source#, NameColumn: _name, ValueColumn: id)\r\n                            Div(input-group-btn){\r\n                                Button(Class: btn bg-gray-lighter fa fa-plus buttons, Page: #this_page#, PageParams: \"stage=4,new_participant=Val(var_id),member_participants=#member_participants#,role_participants=#role_participants#\").Popup(50, $@1voting_wizard$)\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                        Div(Class: m0 h6 text-muted, Body: #hint#)\r\n                    }.ElseIf(#buffer_value_type_participants#==3){\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_one_role_allowed$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }.ElseIf(#buffer_value_type_participants#>3){\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_all_roles_added$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(input-group){\r\n                            Input(Class: mb, Disabled: 1, Value: \"$@1voting_all_keys_added$\")\r\n                            Div(input-group-btn input-group-top){\r\n                                Button(Class: btn bg-gray-lighter fa fa-undo buttons, Page: #this_page#, PageParams: \"stage=4,member_participants=0,role_participants=0\").Popup(50, $@1voting_wizard$)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=5\", Contract: @1VotingWizardBuffer, Params: \"member_participants=#member_participants#,role_participants=#role_participants#\").Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=3\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt-sm mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(Or(#stage# == 5, And(#stage# == 4, #buffer_value_type_participants# == 1))){\r\n        If(#count_type_voters# == \"\"){\r\n            SetVar(count_type_voters, 0)\r\n        }\r\n        If(#buffer_value_volume# == \"\"){\r\n            SetVar(buffer_value_volume, 51)\r\n        }\r\n        If(#buffer_value_rating# == \"\"){\r\n            SetVar(buffer_value_rating, \"false\")\r\n        }\r\n        If(And(#buffer_value_type_decision# != 1, #buffer_value_type_decision# != 2)){\r\n            Div(row){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1vote_count_type)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Data(type_voters,\"id,name\"){\r\n                        0,$@1percent_votes$\r\n                        1,$@1number_votes$\r\n                    }\r\n                    Select(Name: count_type_voters, Source: type_voters, NameColumn: name, ValueColumn: id, Value: #buffer_value_count_type_voters#)\r\n                }\r\n            }\r\n        }.Else{\r\n            Input(Name: count_type_voters, Type: hidden, Value: 0)\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1voting_quorum)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(m0 h6 text-muted){\r\n                    If(#buffer_value_quorum# != \"\"){\r\n                        Input(Name: quorum, Type: number, Value: #buffer_value_quorum#)\r\n                    }.Else{\r\n                        Input(Name: quorum, Type: number, Value: 30)\r\n                    }\r\n                    $@1voting_quorum_desc$\r\n                }.Show(count_type_voters=0)\r\n                Div(m0 h6 text-muted){\r\n                    If(#buffer_value_quorum# != \"\"){\r\n                        Input(Name: quorum, Type: number, Value: #buffer_value_quorum#)\r\n                    }.Else{\r\n                        Input(Name: quorum, Type: number, Value: 3)\r\n                    }\r\n                    $@1voting_quorum_number_desc$\r\n                }.Show(count_type_voters=1)\r\n            }\r\n        }\r\n        If(#buffer_value_type_participants# != 5){\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_rating)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 mt-sm text-left){\r\n                    Input(Name: rating_switch, Placeholder: $@1voting_rating_desc$, Type: checkbox, Value: #buffer_value_rating#, Class: m0 text-muted)\r\n                }\r\n            }\r\n        }.Else{\r\n            Input(Name: rating_switch, Type: hidden, Value: \"false\")\r\n        }\r\n        If(And(#buffer_value_type_decision# != 1, #buffer_value_type_decision# != 2)){\r\n            Div(row mt-sm){\r\n                Div(col-md-3 mt-sm text-right){\r\n                    Label(){\r\n                        LangRes(@1voting_volume)\r\n                        Span(*,text-danger)\r\n                    }\r\n                }\r\n                Div(col-md-9 text-left){\r\n                    Input(Name: volume, Type: number, Value: #buffer_value_volume#)\r\n                    Div(m0 h6 text-muted){\r\n                        $@1voting_volume_desc$\r\n                    }\r\n                }\r\n            }.Show(count_type_voters=0)\r\n        }\r\n        If(#buffer_value_type_participants# == 1){\r\n            SetVar(previous_stage_button, 3)\r\n        }.Else{\r\n            SetVar(previous_stage_button, 4)\r\n        }\r\n        Div(){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=6\", Contract: @1VotingWizardBuffer, Params: \"rating=true\").Popup(50, $@1voting_wizard$)\r\n        }.Show(rating_switch=true)\r\n        Div(){\r\n            Button(Class: btn btn-primary pull-right mt-sm fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=6\", Contract: @1VotingWizardBuffer, Params: \"rating=false\").Popup(50, $@1voting_wizard$)\r\n        }.Hide(rating_switch=true)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt-sm fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=#previous_stage_button#\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt-sm mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(#stage# == 6){\r\n        If(#buffer_value_start_time# == \"\"){\r\n            SetVar(buffer_value_start_time, \"00:00\")\r\n        }\r\n        If(#buffer_value_end_time# == \"\"){\r\n            SetVar(buffer_value_end_time, \"00:00\")\r\n        }\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: start_date){\r\n                    LangRes(@1date_start)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(row){\r\n                    Div(col-md-6){\r\n                        Input(Name: start_date, Type: date, Value: #buffer_value_start_date#)\r\n                    }\r\n                    Div(col-md-6){\r\n                        Input(Name: start_time, Type: time, Value: #buffer_value_start_time#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For: end_date){\r\n                    LangRes(@1date_end)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Div(row){\r\n                    Div(col-md-6){\r\n                        Input(Name: end_date, Type: date, Value: #buffer_value_end_date#)\r\n                    }\r\n                    Div(col-md-6){\r\n                        Input(Name: end_time, Type: time, Value: #buffer_value_end_time#)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Button(Class: btn btn-primary pull-right mt fa fa-chevron-right, Page: #this_page#, PageParams: \"stage=7\", Contract: @1VotingWizardBuffer).Popup(50, $@1voting_wizard$)\r\n        Button(Class: btn btn-default pull-right mt fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=5\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square#)}\r\n\r\n\r\n    }.ElseIf(#stage# == 7){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For:voting_name){\r\n                    LangRes(@1voting_title)\r\n                    Span(*,text-danger)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: voting_name, Value: \"New voting\")\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(For:description){\r\n                    LangRes(@1description)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Name: description, Type: textarea).Style(resize:vertical)\r\n            }\r\n        }\r\n        Input(Name: voting_type, Type: hidden, Value: 1)\r\n        Button(Class: btn btn-primary pull-right mt fa fa-play, Page: #back_page#, Contract: @1VotingWizardCreate, Params:\"type_decision=#buffer_value_type_decision#,count_type_voters=#buffer_value_count_type_voters#,type_participants=#buffer_value_type_participants#,member_participants=#buffer_value_member_participants#,role_participants=#buffer_value_role_participants#,volume=#buffer_value_volume#,quorum=#buffer_value_quorum#,rating=#buffer_value_rating#,start_date=#buffer_value_start_date#,start_time=#buffer_value_start_time#,end_date=#buffer_value_end_date#,end_time=#buffer_value_end_time#,voting_name=Val(voting_name),description=Val(description),apply=#buffer_value_apply#,candidates=#buffer_value_candidates#,role_id=#buffer_value_role_id#,vacancies=#buffer_value_vacancies#,execute_contract=#buffer_value_execute_contract#,contract_accept=#buffer_value_contract_accept#,contract_accept_params=#buffer_value_contract_accept_params#,contract_reject=#buffer_value_contract_reject#,contract_reject_params=#buffer_value_contract_reject_params#,text_document=#buffer_value_text_document#,table_to_written=#buffer_value_table_to_written#,row_id=#buffer_value_row_id#,column_name=#buffer_value_column_name#,written_value=#buffer_value_written_value#,subject_description=#buffer_value_subject_description#\")\r\n        Button(Class: btn btn-default pull-right mt fa fa-pause, Page: #back_page#)\r\n        Button(Class: btn btn-default pull-right mt fa fa-chevron-left, Page: #this_page#, PageParams: \"stage=6\").Popup(50, $@1voting_wizard$)\r\n        Div(progress-wrapper pull-right mt mr-sm text-muted){Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)Em(Class: #square-filled#)}\r\n    }\r\n}.Style(\r\n    .progress-wrapper{line-height: 33px;}\r\n    .input-group-top{vertical-align: top;}\r\n    .buttons{\r\n        border: 1px solid #dde6e9;\r\n        padding: 6px 16px;\r\n    }\r\n)\r\nIf(#debug# == 1){\r\n    Div(Class: h6 text-muted){\r\n        Div(Body: stage = #stage#)\r\n        Div(Body: type_decision = #buffer_value_type_decision#)\r\n        Div(Body: type_participants = #buffer_value_type_participants#)\r\n        Div(Body: count_type_voters = #buffer_value_count_type_voters#)\r\n        Div(Body: volume = #buffer_value_volume#)\r\n        Div(Body: quorum = #buffer_value_quorum#)\r\n        Div(Body: rating = #buffer_value_rating#)\r\n        Div(Body: start_date = #buffer_value_start_date#)\r\n        Div(Body: start_time = #buffer_value_start_time#)\r\n        Div(Body: end_date = #buffer_value_end_date#)\r\n        Div(Body: end_time = #buffer_value_end_time#)\r\n        Div(Body: voting_name = #buffer_value_voting_name#)\r\n        Div(Body: description = #buffer_value_description#)\r\n\r\n        Div(Body: member_participants = #buffer_value_member_participants#)\r\n        Div(Body: role_participants = #buffer_value_role_participants#)\r\n\r\n        Div(Body: execute_contract = #buffer_value_execute_contract#)\r\n        Div(Body: contract_accept = #buffer_value_contract_accept#)\r\n        Div(Body: contract_accept_params = #buffer_value_contract_accept_params#)\r\n        Div(Body: contract_reject = #buffer_value_contract_reject#)\r\n        Div(Body: contract_reject_params = #buffer_value_contract_reject_params#)\r\n\r\n        Div(Body: text_document = #buffer_value_text_document#)\r\n\r\n        Div(Body: table_to_written = #buffer_value_table_to_written#)\r\n        Div(Body: row_id = #buffer_value_row_id#)\r\n        Div(Body: column_name = #buffer_value_column_name#)\r\n        Div(Body: written_value = #buffer_value_written_value#)\r\n        Div(Body: subject_description = #buffer_value_subject_description#)\r\n\r\n        Div(Body: candidates = #buffer_value_candidates#)\r\n        Div(Body: apply = #buffer_value_apply#)\r\n        Div(Body: role_id = #buffer_value_role_id#)\r\n        Div(Body: vacancies = #buffer_value_vacancies#)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "TokensLockoutMember",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensLockoutMember {\r\n    data {\r\n        KeyId int\r\n        Value int\r\n    }\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1VotingRunTokenRefund\", \"@1TokensRefundAccept\", \"@1TokensRefundReject\", \"@1BlockMember\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getPermission()\r\n\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $KeyId}).One(\"id\"){\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($Value) < 0 || Int($Value) > 1 {\r\n            warning LangRes(\"@1value_between_0_and_1\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"id\": $KeyId}, {\"blocked\": $Value})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "BufferManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract BufferManager {\r\n    data {\r\n        Action string\r\n        Key string\r\n        Val string \"optional\"\r\n    }\r\n\r\n    func decodeArray(s string) array {\r\n        var ar array\r\n        if HasPrefix($buf[\"value\"], \"[\") {\r\n            ar = JSONDecode($buf[\"value\"])\r\n        }\r\n        return ar\r\n    }\r\n\r\n    action {\r\n        $emptyVal = JSONEncode(\"\")\r\n        $buf = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"key\": $Key, \"member_id\": $key_id}).Row()\r\n        if !$buf {\r\n            var buf map, id int\r\n            id = DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, key:$Key, value:$emptyVal, member_id:$key_id})\r\n            buf[\"id\"] = Str(id)\r\n            buf[\"value\"] = \"\"\r\n            buf[\"member_id\"] = Str($key_id)\r\n            buf[\"key\"] = Str($Key)\r\n            $buf = buf\r\n        }\r\n        var id int\r\n        id = Int($buf[\"id\"])\r\n        if $Action == \"clean\" {\r\n            DBUpdate(\"@1buffer_data\", id, {value:$emptyVal})\r\n        }\r\n        if $Action == \"set\" {\r\n            DBUpdate(\"@1buffer_data\", id, {value:$Val})\r\n        }\r\n        if $Action == \"array_add_value\" {\r\n            var ar array enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            ar = Append(ar, $Val)\r\n            enc = JSONEncode(ar)\r\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\r\n        }\r\n        if $Action == \"array_remove_value\" {\r\n            var ar arNew array i int enc string\r\n            ar = decodeArray($buf[\"value\"])\r\n            while i < Len(ar){\r\n                if ar[i] != $Val{\r\n                    arNew = Append(arNew, ar[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n            enc = JSONEncode(arNew)\r\n            DBUpdate(\"@1buffer_data\", id, {value:enc})\r\n        }\r\n    }\r\n}\r\n",
            "Type": "contracts"
        },
        {
            "Name": "BufferFileUpload",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract BufferFileUpload {\r\n    data {\r\n        AppId int\r\n        BufferKey string\r\n        FileName string \"optional\"\r\n        FileData file\r\n    }\r\n\r\n    conditions {\r\n        var app_id int\r\n        app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $AppId, \"deleted\": 0}).One(\"id\")\r\n        if !app_id {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n        if $BufferKey == \"\" {\r\n            warning LangRes(\"@1buffer_key_empty\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var buffer_data map\r\n        if $FileName != \"\" {\r\n            buffer_data[\"binary_id\"] = @1UploadFile(\"Name,Data,ApplicationId\", $FileName, $FileData, Int($AppId))\r\n        } else {\r\n            buffer_data[\"binary_id\"] = @1UploadFile(\"Data,ApplicationId\", $FileData, Int($AppId))\r\n        }\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", $BufferKey, JSONEncode(buffer_data))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAccessCheck {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        var role map\r\n        role = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $rid}).Columns(\"id,role_name,deleted,roles_access,role_type,creator->member_id\").Row()\r\n        if !role {\r\n            warning Sprintf(\"%v: \" + LangRes(\"@1role_not_found\", \"en\"), $this_contract)\r\n        }\r\n\r\n        if role[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var rids array\r\n        rids = JSONDecode(role[\"roles_access\"])\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n        // if !RoleAccess(...rids){\r\n            warning Sprintf(LangRes(\"@1role_change_no_permission\", \"en\"), role[\"role_name\"])\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DeleteMember",
            "Conditions": "ContractConditions(\"@1AdminCondition\")",
            "Value": "contract DeleteMember {\r\n    data {\r\n        KeyId int\r\n    }\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1DeleteMember\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"@1AdminCondition\")\r\n\r\n        getPermission()\r\n\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $KeyId}).One(\"id\"){\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdateExt(\"@1keys\", {\"ecosystem\": $ecosystem_id, \"id\": $KeyId}, {\"deleted\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "FormStateSave",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract FormStateSave {\r\n    data {\r\n        FormName string\r\n        ParamNames string\r\n        Param1 string \"optional\"\r\n        Param2 string \"optional\"\r\n        Param3 string \"optional\"\r\n        Param4 string \"optional\"\r\n        Param5 string \"optional\"\r\n        Param6 string \"optional\"\r\n        Param7 string \"optional\"\r\n        Param8 string \"optional\"\r\n        Param9 string \"optional\"\r\n        Param10 string \"optional\"\r\n        Param11 string \"optional\"\r\n        Param12 string \"optional\"\r\n        Param13 string \"optional\"\r\n        Param14 string \"optional\"\r\n        Param15 string \"optional\"\r\n        Param16 string \"optional\"\r\n        Param17 string \"optional\"\r\n        Param18 string \"optional\"\r\n        Param19 string \"optional\"\r\n        Param20 string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if $FormName == \"\" {\r\n            warning LangRes(\"@1form_state_name_needed\", \"en\")\r\n        }\r\n        if $ParamNames == \"\" {\r\n            warning LangRes(\"@1form_state_param_names_needed\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var values string\r\n        values = $Param1+\";\"+$Param2+\";\"+ $Param3+\";\"+ $Param4+\";\"+ $Param5+\";\"+ $Param6+\";\"+$Param7+\";\"+$Param8+\";\"+$Param9+\";\"+$Param10+\";\"+$Param11+\";\"+$Param12+\";\"+$Param13+\";\"+ $Param14+\";\"+ $Param15+\";\"+ $Param16+\";\"+$Param17+\";\"+$Param18+\";\"+$Param19+\";\"+$Param20\r\n        $ParamValue = Split(values, \";\")\r\n        $ParamName = Split($ParamNames, \";\")\r\n        var buffer_data map, i int\r\n        i = 0\r\n        while i < Len($ParamName) {\r\n            buffer_data[$ParamName[i]] = $ParamValue[i]\r\n            i = i + 1\r\n        }\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", $FormName, JSONEncode(buffer_data))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAccessCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAccessCheck {\r\n    data {\r\n        gr_id int\r\n    }\r\n\r\n    conditions {\r\n        var group map\r\n        group = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": $gr_id}).Columns(\"id,group_name,deleted,group_access,creator->member_id\").Row()\r\n        if !group {\r\n            warning Sprintf(\"%v: \" + \"group not found\", $this_contract)\r\n        }\r\n\r\n        if group[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var gr_ids array\r\n        gr_ids = JSONDecode(group[\"group_access\"])\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": gr_ids}, \"member->member_id\":$key_id, \"deleted\": 0}).Row() {\r\n            warning Sprintf(LangRes(\"@1group_change_no_permission\", \"en\"), group[\"group_name\"])\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsProcess",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsProcess {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $notify = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $notific_id}).Columns(\"recipient->role_id,sender->type,date_start_processing\").Row()\r\n        if !$notify {\r\n            warning LangRes(\"@1notification_not_found\", \"en\")\r\n        }\r\n\r\n        if $notify[\"sender.type\"] == 2{\r\n            if Int($notify[\"date_start_processing\"]) != 0 {\r\n                warning LangRes(\"@1notification_processing_started_already\", \"en\")\r\n            }\r\n            var rid string\r\n            rid = Int($notify[\"recipient.role_id\"])\r\n            if rid > 0{\r\n                if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": rid, \"member->member_id\": $key_id, \"deleted\": 0}).One(\"id\") {\r\n                    warning LangRes(\"@1notification_not_part_of_role\", \"en\")\r\n                }\r\n            }\r\n        }else{\r\n            if $notify[\"sender.type\"] != 1 {\r\n                warning LangRes(\"@1notification_type_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var model map\r\n        model[\"processing_info\"] = getMemberInfo($key_id)\r\n        model[\"date_start_processing\"] = $block_time\r\n        DBUpdate(\"@1notifications\", $notific_id, model)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsSend {\r\n    data {\r\n        member_id int \"optional\"\r\n        rid int \"optional\"\r\n        closure_type int \"optional\"\r\n\r\n        sender int\r\n        icon_name string \"optional\"\r\n        text_header string\r\n        text_body string \"optional\"\r\n        page_name string\r\n        params_map string // json encoded expected\r\n        current_role_id string \"optional\"\r\n        eco_id string \"optional\"\r\n        popup string \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(kid, ecoId int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": ecoId, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            if DBFind(\"@1keys\").Where({\"ecosystem\": ecoId, \"id\": kid}).Columns(\"id\").Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    func sendNotify(recipient map) {\r\n        var notification map\r\n        notification[\"header\"] = $text_header\r\n        notification[\"type\"] = $notify_type\r\n        notification[\"icon\"] = $icon_name\r\n        notification[\"body\"] = $text_body\r\n        if $popup == \"true\" || $popup == \"1\" {\r\n            notification[\"popup\"] = 1\r\n        }else{\r\n            notification[\"popup\"] = 0\r\n        }\r\n        var sender map\r\n        if $sender == 1 && $senderMember {\r\n            // send from member\r\n            sender[\"type\"] = $sender\r\n            sender[\"member_id\"] = $senderMember[\"member_id\"]\r\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\r\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\r\n        }else{\r\n            if $sender == 2 && $senderRole{\r\n                // send from role\r\n                sender[\"type\"] = $sender\r\n                sender[\"role_id\"] = $senderRole[\"id\"]\r\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\r\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\r\n            }\r\n        }\r\n        var model map\r\n        model[\"recipient\"] = recipient\r\n        model[\"sender\"] = sender\r\n        model[\"notification\"] = notification\r\n        model[\"page_name\"] = $page_name\r\n        model[\"page_params\"] = $params_map\r\n        model[\"date_created\"] = $block_time\r\n        model[\"ecosystem\"] = $eco_id\r\n        DBInsert(\"@1notifications\", model)\r\n    }\r\n\r\n    func sendToRole(roleId, ecoId int) {\r\n        var role recipient map\r\n        role = DBFind(\"@1roles\").Where({\"ecosystem\": ecoId, \"id\": roleId}).Row()\r\n        recipient[\"role_id\"] = role[\"id\"]\r\n        recipient[\"role_name\"] = role[\"role_name\"]\r\n        recipient[\"image_id\"] = role[\"image_id\"]\r\n        sendNotify(recipient)\r\n    }\r\n\r\n    conditions {\r\n        $member_id = Int($member_id)\r\n        $rid = Int($rid)\r\n        $current_role_id = Int($current_role_id)\r\n        $eco_id = Int($eco_id)\r\n        if $eco_id == 0{\r\n            $eco_id = $ecosystem_id\r\n        }\r\n        if Size($icon_name) < 1{\r\n            $icon_name = \"icon-envelope\"\r\n        }\r\n        if $member_id != 0 {\r\n            if !DBFind(\"@1keys\").Where({\"ecosystem\": $eco_id, \"id\": $member_id}).Row(){\r\n                warning LangRes(\"@1key_not_found\", \"en\")\r\n            }\r\n            $notify_type = 1 // is \"member\"\r\n        }elif $rid > 0{\r\n            $notify_type = 2 // is \"role\"\r\n            if !DBFind(\"@1roles\").Where({\"ecosystem\": $eco_id, \"id\": $rid}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_role_not_found\", \"en\")\r\n            }\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $eco_id, \"role->id\": $rid, \"deleted\": 0}).One(\"id\") {\r\n                warning $this_contract + \": \" + LangRes(\"@1recipient_role_no_members\", \"en\")\r\n            }\r\n        } else{\r\n            warning $this_contract + \": \" + LangRes(\"@1notification_type_not_defined\", \"en\")\r\n        }\r\n        $senderMember = nil\r\n        $senderRole = nil\r\n        if $sender == 1 {\r\n            $senderMember = getMemberInfo($key_id, $ecosystem_id)\r\n        }elif $sender == 2 {\r\n            $senderRole = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $current_role_id}).Row()\r\n            if !$senderRole {\r\n                warning $this_contract + \": \" + LangRes(\"@1sender_role_not_found\", \"en\")\r\n            }\r\n        }else{\r\n            warning $this_contract + \": \" + LangRes(\"@1sender_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $member_id != 0 {\r\n            sendNotify(getMemberInfo($member_id, $eco_id))\r\n            UpdateNotifications($eco_id, Int($member_id))\r\n        }elif $rid > 0 {\r\n            if $closure_type == 1 {\r\n                // Single closure: one begins the process - the others do not see\r\n                sendToRole($rid, $eco_id)\r\n                UpdateRolesNotifications($eco_id, Int($rid))\r\n            } else {\r\n                // Multiple closure: to each his own notification\r\n                $notify_type = 1\r\n                var participants array\r\n                participants = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $eco_id, \"role->id\": $rid, \"deleted\": 0}).Columns(\"member->member_id\")\r\n                var i int\r\n                while i < Len(participants) {\r\n                    var p map\r\n                    p = participants[i]\r\n                    sendNotify(getMemberInfo(Int(p[\"member.member_id\"]), $eco_id))\r\n                    UpdateNotifications($eco_id, Int(p[\"member.member_id\"]))\r\n                    i = i + 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupAccessManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupAccessManager {\r\n    data {\r\n        Action string\r\n        ManagerRid string \"optional\"\r\n        gr_id int \"optional\"\r\n        group_name string \"optional\"\r\n        group_type int \"optional\"\r\n        group_information string \"optional\"\r\n    }\r\n\r\n    func updateAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        DBUpdate(\"@1groups\", $gr_id, {\"group_access\": roles_access})\r\n    }\r\n\r\n    func updateBufferAccess(ra array) {\r\n        var groups_access string\r\n        groups_access = JSONEncode(ra)\r\n        var filled map\r\n        filled[\"groups_access\"] = groups_access\r\n        filled[\"group_name\"] = $group_name\r\n        filled[\"group_type\"] = $group_type\r\n        filled[\"group_information\"] = $group_information\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\", \"value\": filled})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": filled})\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ManagerRid = Int($ManagerRid)\r\n        if $gr_id > 0 {\r\n            @1GroupsAccessCheck(\"gr_id\", $gr_id)\r\n            $role = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": $gr_id}).Columns(\"id,group_access\").Row()\r\n            if !$role {\r\n                warning LangRes(\"@1group\" \"@1not_founded\", \"en\")\r\n            }\r\n            if $ManagerRid > 0 {\r\n                if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $ManagerRid}).One(\"id\") {\r\n                    warning LangRes(\"@1role_not_found\", \"en\")\r\n                }\r\n            }\r\n            var ids array, i int\r\n            $ids = ids\r\n            ids = JSONDecode($role[\"group_access\"])\r\n            while i < Len(ids){\r\n                if ids[i] > 0 {\r\n                    $ids = Append($ids, ids[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value.groups_access\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $gr_id == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $ManagerRid > 0 {\r\n            var i int idsNew array\r\n            if $Action == \"remove\" {\r\n                while i < Len($ids) {\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if $gr_id == 0 {\r\n                    updateBufferAccess(idsNew)\r\n                } else {\r\n                    updateAccess(idsNew)\r\n                }\r\n            }\r\n            if $Action == \"add\" {\r\n                var double bool\r\n                while i < Len($ids) {\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $gr_id == 0 {\r\n                    updateBufferAccess($ids)\r\n                } else {\r\n                    updateAccess($ids)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAssign {\r\n    data {\r\n        gr_id int\r\n        member_id int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $group = DBFind(\"@1groups\").Where({\"id\": $gr_id}).Columns(\"id,deleted,group_type,group_name,image_id,creator->member_id\").Row()\r\n        if !$group {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $member_id}).Row() {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n        if Int($group[\"deleted\"]) == 1 {\r\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\r\n        }\r\n        if Int($group[\"group_type\"]) != 1 {\r\n            @1GroupsAccessCheck(\"gr_id\", $gr_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": $gr_id, \"member->member_id\": $member_id, \"deleted\": 0}).One(\"id\") {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n\r\n        var group member appointer map\r\n        group[\"id\"] = $group[\"id\"]\r\n        group[\"type\"] = $group[\"group_type\"]\r\n        group[\"name\"] = $group[\"group_name\"]\r\n        group[\"image_id\"] = $group[\"image_id\"]\r\n        member = getMemberInfo($member_id)\r\n        appointer = getMemberInfo($key_id)\r\n\r\n        var m map\r\n        m[\"groups_info\"] = group\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = $block_time\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1groups_participants\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssignList",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAssignList {\r\n    data {\r\n        memberskeys string\r\n        gr_id int\r\n    }\r\n\r\n    func addPub(pub_key string) {\r\n        if HasPrefix(pub_key, \"04\") {\r\n            pub_key = Substr(pub_key, 2, Size(pub_key) - 2)\r\n        }\r\n        if Size(pub_key) < 128 {\r\n            warning LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size(pub_key) > 128 {\r\n            warning LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        var k_id int\r\n        k_id = PubToID(pub_key)\r\n        if k_id == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n        $check_user = DBFind(\"@1keys\").Where({\"id\": k_id, \"ecosystem\": $ecosystem_id})\r\n        if !$check_user {\r\n            warning Sprintf(\"%v: \" + \"key not found\", pub_key)\r\n        }\r\n\r\n        @1GroupsAssign(\"gr_id,member_id\",$gr_id,k_id)\r\n    }\r\n\r\n    conditions {\r\n        if $memberskeys == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n        $memberskeys = Replace($memberskeys, \" \", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\n\", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\r\", \"\")\r\n    }\r\n\r\n    action {\r\n        if Contains($memberskeys, \",\") {\r\n            var pub_array array i int\r\n            pub_array = Split($memberskeys, \",\")\r\n            while i < Len(pub_array) {\r\n                var pub_key string\r\n                pub_key = Str(pub_array[i])\r\n                addPub(pub_key)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            addPub($memberskeys)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsCreate {\r\n    data {\r\n        group_name string \"optional\"\r\n        group_type int \"optional\"\r\n        group_information string \"optional\"\r\n        gr_id int \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $gr_id == 0 {\r\n            if $group_name == \"\" {\r\n                info LangRes(\"@1group_name_cannot_be_empty\", \"en\")\r\n            }\r\n            if $group_type == 0 {\r\n                info LangRes(\"@1group_type_error\", \"en\")\r\n            }\r\n        }\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        $check_access = Int(AppParam(Int($system_app_id), \"role_creates_groups\", $ecosystem_id))\r\n        if $check_access && Str($check_access) != \"0\" {\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+$check_access+\"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\":rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        } else {\r\n            var admin_id int\r\n            admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+admin_id+\"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $group_name == DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"group_name\": $group_name}).One(\"group_name\") {\r\n            warning LangRes(\"@1group_name_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $gr_id == 0 {\r\n            var roles_access_arr array, buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\r\n            if buffer {\r\n                roles_access_arr = JSONDecode(buffer[\"value.groups_access\"])\r\n                var filled map\r\n                filled[\"groups_access\"] = []\r\n                filled[\"group_name\"] = \"\"\r\n                filled[\"group_type\"] = \"\"\r\n                filled[\"group_information\"] = \"\"\r\n                DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": filled})\r\n            }\r\n\r\n            var m map\r\n            m[\"creator\"] = getMemberInfo($key_id)\r\n            m[\"group_name\"] = $group_name\r\n            m[\"group_type\"] = $group_type\r\n            m[\"date_created\"] = $block_time\r\n            m[\"group_access\"] = JSONEncode(roles_access_arr)\r\n            m[\"group_info\"] = $group_information\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            DBInsert(\"@1groups\", m)\r\n        } else {\r\n            var m map\r\n            m[\"group_info\"] = $group_information\r\n            DBUpdate(\"@1groups\",$gr_id, m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsUnassign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsUnassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        var assigned map\r\n        assigned = DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"id\": $row_id, \"deleted\": 0}).Columns(\"id,ecosystem,deleted,groups_info->id,member->member_id\").Row()\r\n        if !assigned {\r\n            warning LangRes(\"@1group_participant_not_found\", \"en\")\r\n        }\r\n\r\n        var buffer_id int group map\r\n        buffer_id = Int(assigned[\"groups_info.id\"])\r\n\r\n        group = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).Row()\r\n        $groupId = Int(group[\"id\"])\r\n        $groupType = Int(group[\"group_type\"])\r\n\r\n        if $groupId == 0 {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if $groupType == 1 {\r\n            if Int(assigned[\"member.member_id\"]) != $key_id {\r\n                @1GroupsAccessCheck(\"gr_id\", $groupId)\r\n            }\r\n        } else {\r\n            @1GroupsAccessCheck(\"gr_id\", $groupId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"deleted\"] = 1\r\n        m[\"date_deleted\"] = $block_time\r\n        DBUpdate(\"@1groups_participants\", $row_id, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsDelete {\r\n    data {\r\n        gr_id int\r\n        ops string\r\n    }\r\n\r\n    conditions {\r\n        @1GroupsAccessCheck(\"gr_id\", $gr_id)\r\n    }\r\n\r\n    action {\r\n        // delete all participants\r\n        var participants array i int\r\n        participants = DBFind(\"@1groups_participants\").Where({\"groups_info->id\": $gr_id, \"deleted\": 0}).Columns(\"id\")\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            @1GroupsUnassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        var m map\r\n        if $ops == \"D\" {\r\n            m[\"deleted\"] = 1\r\n            m[\"date_deleted\"] = $block_time\r\n        }\r\n        if $ops == \"R\" {\r\n            m[\"deleted\"] = 0\r\n        }\r\n        DBUpdate(\"@1groups\", $gr_id, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAssign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAssign {\r\n    data {\r\n        rid int\r\n        member_id int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $role = DBFind(\"@1roles\").Where({\"id\": $rid}).Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Row()\r\n        if (Int($role[\"role_type\"]) == 2){\r\n            warning LangRes(\"@1elective_role_voting_only\", \"en\")\r\n        }\r\n        if !$role {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $member_id}).Row() {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n\r\n        if $role[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1role_deleted_request_impossible\", \"en\")\r\n        }\r\n\r\n        var specRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev_contract = $stack[Len($stack) - 2]\r\n        }\r\n        specRules[\"@1VotingValidatorAccept\"] = 1\r\n        specRules[\"@1DelegateRefresh\"] = 1\r\n        specRules[\"@1ValidatorRequest\"] = 1\r\n        specRules[\"@1InvestorRefresh\"] = 1\r\n\r\n        if specRules[prev_contract] != 1 {\r\n            @1RolesAccessCheck(\"rid\", $rid)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $rid, \"member->member_id\": $member_id, \"deleted\": 0}).One(\"id\") {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n        var role member appointer map\r\n        role[\"id\"] = $role[\"id\"]\r\n        role[\"type\"] = $role[\"role_type\"]\r\n        role[\"name\"] = $role[\"role_name\"]\r\n        role[\"image_id\"] = $role[\"image_id\"]\r\n\r\n        member = getMemberInfo($member_id)\r\n        appointer = getMemberInfo($key_id)\r\n        var m map\r\n        m[\"role\"] = role\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = $block_time\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1roles_participants\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipAdd",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipAdd {\r\n    data {\r\n        memberskeys string\r\n    }\r\n\r\n    func addPub(pub string) {\r\n        pub = Replace(pub, \" \", \"\")\r\n        if Size(pub) < 128 {\r\n            warning LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size(pub) > 130 {\r\n            warning LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        var k_id int\r\n        k_id = PubToID(pub)\r\n        if k_id == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n        $check_user = DBFind(\"@1keys\").Where({\"id\": k_id, \"ecosystem\": $ecosystem_id})\r\n        if $check_user {\r\n            warning LangRes(\"@1key_already_exists\", \"en\")\r\n        }\r\n        var pub_bytes bytes\r\n        pub_bytes = HexToPub(pub)\r\n        DBInsert(\"@1keys\",{id:k_id, pub:pub_bytes, ecosystem:$ecosystem_id})\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        if $memberskeys == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n        $memberskeys = Replace($memberskeys, \" \", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\n\", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\r\", \"\")\r\n\r\n        var admin_id int\r\n        admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n\r\n        if !RoleAccess(admin_id) {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        if ($ecosystem_id == 1) {\r\n            warning LangRes(\"@1impossible_for_platform_ecosystem\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Contains($memberskeys, \",\") {\r\n            var pub_array array\r\n            pub_array = Split($memberskeys, \",\")\r\n\r\n            var i int\r\n            while i < Len(pub_array) {\r\n                var pub_key string\r\n                pub_key = Str(pub_array[i])\r\n                addPub(pub_key)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            addPub($memberskeys)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsClose",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsClose {\r\n    data {\r\n        notific_id int\r\n    }\r\n\r\n    func getPermission() int {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensRefundAccept\", \"@1TokensRefundReject\", \"@1VotingDecisionCheck\", \"@1VotingDelete\", \"@1QAnswer\", \"@1QOperations\", \"@1ErrandDelete\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n        return result\r\n    }\r\n\r\n\r\n    conditions {\r\n        $notify = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $notific_id}).Columns(\"id,date_start_processing,processing_info->member_id,closed,notification->type,recipient->member_id,recipient->role_id\").Row()\r\n        if !$notify {\r\n            warning LangRes(\"@1notification_not_found\", \"en\")\r\n        }\r\n\r\n        // checking the type of notification\r\n        if $notify[\"notification.type\"] != 1 && $notify[\"notification.type\"] != 2 {\r\n            warning LangRes(\"@1notification_type_not_found\", \"en\")\r\n        }\r\n\r\n        // getting permission\r\n        var flag_permission int\r\n        flag_permission = getPermission()\r\n\r\n        // checking personal notification\r\n        if $notify[\"notification.type\"] == 1 && flag_permission == 0 {\r\n            if $notify[\"recipient.member_id\"] != $key_id {\r\n                warning LangRes(\"@1notification_another_member\", \"en\")\r\n            }\r\n        }\r\n\r\n        // checking role notification\r\n        if $notify[\"notification.type\"] == 2 && flag_permission == 0 {\r\n            if $notify[\"date_start_processing\"] == \"\" {\r\n                warning LangRes(\"@1notification_processing_not_started\", \"en\")\r\n            }\r\n\r\n            if $notify[\"processing_info.member_id\"] != $key_id {\r\n                warning LangRes(\"@1notice_processing_started_another_member\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $notify[\"closed\"] > 0 {\r\n            return\r\n        }\r\n        if $notify[\"notification.type\"] == 1 {\r\n            @1NotificationsProcess(\"notific_id\", $notific_id)\r\n        }\r\n        var m map\r\n        m[\"date_closed\"] = $block_time\r\n        m[\"closed\"] = 1\r\n        DBUpdate(\"@1notifications\", $notific_id, m)\r\n\r\n        if $notify[\"notification.type\"] == 1 {\r\n            UpdateNotifications($ecosystem_id, Int($notify[\"recipient.member_id\"]))\r\n        } else {\r\n            UpdateRolesNotifications($ecosystem_id, Int($notify[\"recipient.role_id\"]))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestMembership",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupRequestMembership {\r\n    data {\r\n        gr_id int\r\n    }\r\n\r\n    conditions {\r\n        $group = DBFind(\"@1groups\").Where({\"id\": $gr_id}).Columns(\"id,deleted,group_type,group_name,image_id,creator->member_id,group_access,group_name\").Row()\r\n        if !$group {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $key_id}).Row() {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n        if $group[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\r\n        }\r\n        $check_join = DBFind(\"@1groups_participants\").Where({\"deleted\": 0, \"member->member_id\": $key_id, \"groups_info->id\": $gr_id, \"ecosystem\": $ecosystem_id}).Columns(\"id,deleted,member,member->member_id,groups_info,groups_info->id,ecosystem\").One(\"id\")\r\n        if $check_join {\r\n            warning LangRes(\"@1already_group\", \"en\")\r\n        }\r\n        $check_send_notific = DBFind(\"@1notifications\").Where({\"sender->member_id\": $key_id, \"page_params->gr_id\": $gr_id, \"closed\": 0, \"ecosystem\": $ecosystem_id}).Columns(\"id,closed,ecosystem,sender,sender->member_id,page_params->gr_id\").One(\"id\")\r\n        if $check_send_notific {\r\n            info LangRes(\"@1request_to_group\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var gr_ids array i int icon header body page ecoName string\r\n\r\n        var params map\r\n        params[\"gr_id\"] = $gr_id\r\n        params[\"member_id\"] = $key_id\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"New request\"\r\n        body = Sprintf(\"New request to the group %t\",$group[\"group_name\"])\r\n        page = \"@1groups_request_view\"\r\n\r\n        gr_ids = JSONDecode($group[\"group_access\"])\r\n        if Len(gr_ids) > 0 {\r\n            while i < Len(gr_ids) {\r\n                var id_role int\r\n                id_role = Int(gr_ids[i])\r\n                @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,eco_id,closure_type\", id_role, 1, icon, header, body, page, params, $ecosystem_id,1)\r\n                i = i + 1\r\n            }\r\n        } else{\r\n            $creator_id = Int($group[\"creator.member_id\"])\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $creator_id, 1, icon, header, body, page, params, $ecosystem_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MetricsUpdate {\r\n    data {\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n\r\n    func mapping(items array) map {\r\n        var mapout map, i int\r\n        while i < Len(items){\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i = i + 1\r\n        }\r\n        return mapout\r\n    }\r\n\r\n    conditions {\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = Int(Substr(BlockTime(), 0, 4))\r\n        if $Interval > (current_year - 1970) * 365 {\r\n            warning LangRes(\"@1interval_too_big\", \"en\")\r\n        }\r\n        $interval = Sprintf(LangRes(\"@1x_days\", \"en\"), $Interval)\r\n    }\r\n\r\n    action {\r\n        var pages members txs array metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n\r\n        var i lenPages int\r\n        lenPages = Len(pages)\r\n        while i < lenPages{\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(LangRes(\"@1pages\", \"en\") + \": %v, \" + LangRes(\"@1members\", \"en\") + \": %v, \" + LangRes(\"@1tx\", \"en\") + \": %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i = i + 1\r\n        }\r\n\r\n        if lenPages > 0{\r\n            @1BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeRemoveByKey",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NodeRemoveByKey {\r\n    data {}\r\n\r\n    func nodesRemove(keyId int) array {\r\n        var nodesJSON string nodes res array\r\n        nodesJSON = SysParamString(\"full_nodes\")\r\n        if !HasPrefix(nodesJSON, \"[\") {\r\n            // empty string nodes\r\n            return res\r\n        }\r\n        nodes = JSONDecode(nodesJSON)\r\n        var i int\r\n        while i < Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            if node[\"key_id\"] != keyId {\r\n                res = Append(res, node)\r\n            }\r\n            i = i + 1\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $original_contract != \"ValidatorResign\"{\r\n            warning LangRes(\"@1contract_chain_distorted\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var nodes array fullNodes string\r\n        nodes = nodesRemove($key_id)\r\n        fullNodes = JSONEncode(nodes)\r\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsBroadcast",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsBroadcast {\r\n    data {\r\n        RoleId int\r\n        Header string\r\n        Body string\r\n        Popup string \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            if DBFind(\"@1keys\").Columns(\"id\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row() {\r\n                res[\"member_id\"] = Str(kid)\r\n                res[\"member_name\"] = IdToAddress(kid)\r\n                res[\"image_id\"] = \"0\"\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $RoleId != 1 {\r\n            warning LangRes(\"@1admin_only_action\", \"en\")\r\n        }\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1first_ecosystem_admin_only_action\", \"en\")\r\n        }\r\n        $ecos = DBFind(\"@1ecosystems\").Columns(\"id\")\r\n        $lenEcos = Len($ecos)\r\n        if $lenEcos == 1 {\r\n            warning LangRes(\"@1other_ecosystems_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i lenIds int eco map ids array sender recipient params note map\r\n        sender = getMemberInfo($key_id)\r\n        sender[\"type\"] = 1\r\n        note[\"header\"] = $Header\r\n        note[\"type\"] = 1\r\n        note[\"icon\"] = \"icon-envelope\"\r\n        note[\"body\"] = $Body\r\n        if $Popup == \"true\" || $Popup == \"1\" {\r\n            note[\"popup\"] = 1\r\n        }else{\r\n            note[\"popup\"] = 0\r\n        }\r\n\r\n        while i < $lenEcos {\r\n            eco = $ecos[i]\r\n            var ecoId int\r\n            ecoId = Int(eco[\"id\"])\r\n            if ecoId != 1 {\r\n                $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": ecoId, \"name\": \"System\"}).One(\"id\")\r\n                var adminRoleId int\r\n                adminRoleId = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n                ids = DBFind(\"@1roles_participants\").Where({\"ecosystem\": ecoId, \"role->id\": adminRoleId, \"role->type\": 3}).Columns(\"member->member_id\")\r\n                lenIds = Len(ids)\r\n                var i_ids int\r\n                while i_ids < lenIds {\r\n                    recipient = ids[i_ids]\r\n                    recipient = getMemberInfo(Int(recipient[\"member.member_id\"]))\r\n                    var m map\r\n                    m[\"recipient\"] = recipient\r\n                    m[\"sender\"] = sender\r\n                    m[\"notification\"] = note\r\n                    m[\"page_name\"] = \"@1notifications_show\"\r\n                    m[\"page_params\"] = params\r\n                    m[\"date_created\"] = $block_time\r\n                    m[\"ecosystem\"] = ecoId\r\n                    DBInsert(\"@1notifications\", m)\r\n                    i_ids = i_ids + 1\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestDecide",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupRequestDecide {\r\n    data {\r\n        notific_id int\r\n        accept int\r\n    }\r\n\r\n    conditions {\r\n        $notific = DBFind(\"@1notifications\").WhereId($notific_id).Columns(\"id,closed,page_params->gr_id,page_params->member_id,sender,sender->member_id,recipient,recipient->role_id\").Row()\r\n        if $notific[\"closed\"] == 1 {\r\n            warning LangRes(\"@1request_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        $gr_id = Int($notific[\"page_params.gr_id\"])\r\n        $member_id = Int($notific[\"page_params.member_id\"])\r\n        if $accept == 1 {\r\n            @1GroupsAssign(\"gr_id,member_id\", $gr_id, $member_id)\r\n        }\r\n        var params map\r\n        params[\"gr_id\"] = $gr_id\r\n        if $accept == 1 {\r\n            params[\"decide\"] = 1\r\n        } else {\r\n            params[\"decide\"] = -1\r\n        }\r\n        var icon header body page ecoName string member int\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"Request to group\"\r\n        body = \"Solution for your request\"\r\n        page = \"@1groups_request_view\"\r\n        member = Int($notific[\"sender.member_id\"])\r\n        if $notific[\"recipient.role_id\"] > 0 {\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id,current_role_id\", member, 2, icon, header, body, page, params, $ecosystem_id, Int($notific[\"recipient.role_id\"]))\r\n            @1NotificationsProcess(\"notific_id\", $notific_id)\r\n            @1NotificationsClose(\"notific_id\", $notific_id)\r\n        } else{\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", member, 1, icon, header, body, page, params, $ecosystem_id)\r\n            @1NotificationsClose(\"notific_id\", $notific_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipDecide {\r\n    data {\r\n        notific_id int\r\n        accept int\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        $request = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"id\": $notific_id}).Columns(\"id,closed,sender->member_id,page_params->ecosystem_id,page_params->ecosystem_sender\").Row()\r\n        var ecoId int\r\n        ecoId = Int($request[\"page_params.ecosystem_id\"])\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning LangRes(\"@1request_processed_already\", \"en\")\r\n        }\r\n\r\n        var admin_id int\r\n        admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n        if !RoleAccess(admin_id) {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if $accept == 1 {\r\n            params[\"status\"] = 1\r\n            var pub string mid eco_id int\r\n            mid = Int($request[\"sender.member_id\"])\r\n            eco_id = Int($request[\"page_params.ecosystem_id\"])\r\n            pub = DBFind(\"@1keys\").Where({\"ecosystem\": 1, \"id\": mid}).One(\"pub\")\r\n            DBInsert(\"@1keys\", {id:mid, pub:pub, ecosystem:$ecosystem_id})\r\n        } else {\r\n            params[\"status\"] = 0\r\n        }\r\n\r\n        var icon header body page ecoName ecoId string\r\n        ecoId = $request[\"page_params.ecosystem_id\"]\r\n        ecoName = DBFind(\"@1ecosystems\").Where({\"id\": ecoId}).One(\"name\")\r\n        icon = \"icon icon-user-follow\"\r\n        header = LangRes(\"@1request_approved\", \"en\")\r\n        body = Sprintf(LangRes(\"@1ecosystem_request_approved\", \"en\"), ecoName, ecoId)\r\n        page = \"@1membership_user_view\"\r\n\r\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $request[\"sender.member_id\"], 1, icon, header, body, page, params, Int($request[\"page_params.ecosystem_sender\"]))\r\n        @1NotificationsProcess(\"notific_id\", $notific_id)\r\n        @1NotificationsClose(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MembershipRequest {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n\r\n    conditions {\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1contract_first_ecosystem_only\", \"en\")\r\n        }\r\n\r\n        if $ecosystem_num == 1 {\r\n            warning LangRes(\"@1impossible_for_platform_ecosystem\", \"en\")\r\n        }\r\n\r\n        if !DBFind(\"@1ecosystems\").Where({\"id\": $ecosystem_num}).One(\"id\"){\r\n            warning Sprintf(LangRes(\"@1template_eco_not_exist\", \"en\"), $ecosystem_num)\r\n        }\r\n\r\n        if DBFind(\"@1keys\").Where({\"id\": $key_id, \"ecosystem\": $ecosystem_num}) {\r\n            warning LangRes(\"@1member_added_before\", \"en\")\r\n        }\r\n\r\n        $free_membership = Int(DBFind(\"@1parameters\").Where({\"ecosystem\": $ecosystem_num, \"name\": \"free_membership\"}).One(\"value\"))\r\n        if $free_membership == 0 {\r\n            if DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_num, \"page_params->ecosystem_id\": $ecosystem_num, \"sender->member_id\": $key_id, \"closed\": 0, \"page_name\": \"@1membership_admin_view\"}).Row(){\r\n                warning LangRes(\"@1request_sent_already\", \"en\")\r\n            }\r\n\r\n            $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_num, \"name\": \"System\"}).One(\"id\")\r\n            $admin_id = Int(AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id))\r\n            if $admin_id == 0 {\r\n                warning LangRes(\"@1recipient_role_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $free_membership == 0 {\r\n            var notific_params map\r\n            notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n            notific_params[\"ecosystem_sender\"] = $ecosystem_id\r\n\r\n            @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,closure_type,eco_id\", $admin_id, 1, \"icon icon-user-follow\", LangRes(\"@1membership_request_new\", \"en\"), LangRes(\"@1details_view\", \"en\"), \"@1membership_admin_view\", notific_params,1,$ecosystem_num)\r\n        }\r\n        if $free_membership == 1 {\r\n            var pub string\r\n            pub = DBFind(\"@1keys\").Where({\"ecosystem\": 1, \"id\": $key_id}).One(\"pub\")\r\n            DBInsert(\"@1keys\", {id:$key_id, pub:pub, ecosystem:$ecosystem_num})\r\n\r\n            var params map\r\n            params[\"ecosystem_id\"] = $ecosystem_num\r\n            params[\"status\"] = 1\r\n\r\n            var icon header body page ecoName string\r\n            ecoName = DBFind(\"@1ecosystems\").Where({\"id\": $ecosystem_num}).One(\"name\")\r\n            icon = \"icon icon-user-follow\"\r\n            header = LangRes(\"@1request_approved\", \"en\")\r\n            body = Sprintf(LangRes(\"@1ecosystem_request_approved\", \"en\"), ecoName, $ecosystem_num)\r\n            page = \"@1membership_user_view\"\r\n\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $key_id, 1, icon, header, body, page, params, $ecosystem_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsUpdateParams",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract NotificationsUpdateParams {\r\n    data {\r\n        page_params map\r\n        notific_id int\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1ErrandDecision\", \"@1ErrandStatusUpdate\", \"@1ErrandDelete\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getPermission()   //getting permission to run\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1notifications\",$notific_id,$page_params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "PlatformAppsSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract PlatformAppsSettings {\r\n    data {\r\n        RoleAdmin int\r\n        RoleValidatorCandidate int\r\n        RoleConsensus int\r\n        RoleDelegate int\r\n        RoleDeveloper int\r\n        RoleInvestor int\r\n        RoleValidator int\r\n        RoleCreatesRoles int\r\n    }\r\n \r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    func updateParam(name string, value int) {\r\n        if value > 0 {\r\n            var param paramsNew map\r\n            if $app_id > 0 {\r\n                param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": $app_id, \"name\": name}).Row()\r\n                if param {\r\n                    paramsNew[\"Id\"] = Int(param[\"id\"])\r\n                    paramsNew[\"Value\"] = Str(value)\r\n                    paramsNew[\"Conditions\"] = param[\"conditions\"]\r\n                    CallContract(\"@1EditAppParam\", paramsNew)\r\n                } else {\r\n                    paramsNew[\"ApplicationId\"] = $app_id\r\n                    paramsNew[\"Name\"] = name\r\n                    paramsNew[\"Value\"] = Str(value)\r\n                    paramsNew[\"Conditions\"] = \"ContractConditions(\\\"AdminCondition\\\")\"\r\n                    CallContract(\"@1NewAppParam\", paramsNew)\r\n                }\r\n            } else {\r\n                warning LangRes(\"@1app_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        updateParam(\"role_admin\", $RoleAdmin)\r\n        updateParam(\"role_candidate_for_validators\", $RoleValidatorCandidate)\r\n        updateParam(\"role_consensus\", $RoleConsensus)\r\n        updateParam(\"role_delegate\", $RoleDelegate)\r\n        updateParam(\"role_developer\", $RoleDeveloper)\r\n        updateParam(\"role_investor_with_voting_rights\", $RoleInvestor)\r\n        updateParam(\"role_validator\", $RoleValidator)\r\n        updateParam(\"role_creates_roles\", $RoleCreatesRoles)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEdit",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ProfileEdit {\r\n    data {\r\n        member_name string\r\n        information string \"optional\"\r\n        image_id string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        $member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": $key_id}).Row()\r\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\", \"deleted\": 0}).One(\"id\")\r\n        $image_id = Int($image_id)\r\n\r\n        if !$member {\r\n            // check member_name\r\n            if DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"member_name\": $member_name}).One(\"id\") {\r\n                warning LangRes(\"@1member_name_taken\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $image_id > 0 {\r\n            $Data = DBFind(\"@1binaries\").Where({\"ecosystem\": $ecosystem_id, \"id\": $image_id}).One(\"data\")\r\n            $image_id = @1UploadBinary(\"Name,Data,ApplicationId\", \"avatar\", $Data, Int($app_id))\r\n        }\r\n\r\n        var m map\r\n        m[\"member_info\"] = {information:$information}\r\n        m[\"image_id\"] = $image_id\r\n\r\n        if $member{\r\n            DBUpdateExt(\"@1members\", {\"ecosystem\": $ecosystem_id, \"id\": $key_id}, m)\r\n        } else {\r\n            m[\"id\"] = $key_id\r\n            m[\"member_name\"] = $member_name\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            DBInsert(\"@1members\", m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEditAvatar",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ProfileEditAvatar {\r\n    data {\r\n        member_image file\r\n    }\r\n\r\n    conditions {\r\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\", \"deleted\": 0}).One(\"id\")\r\n\r\n        if !$app_id {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"image_id\"] = @1UploadFile(\"Name,Data,ApplicationId\", \"new_avatar\", $member_image, Int($app_id))\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", \"avatar\", JSONEncode(m))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RoleConditions",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RoleConditions {\r\n    data {\r\n        role string\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->name\": $role, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n            warning Sprintf(LangRes(\"@1x_role_only_action\", \"en\"), $role)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesUnassign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesUnassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        var assigned map roleId int\r\n        assigned = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"id\": $row_id, \"deleted\": 0}).Columns(\"id,role->id\").Row()\r\n        if !assigned {\r\n            warning LangRes(\"@1role_participant_not_found\", \"en\")\r\n        }\r\n        var buffer_id int\r\n        buffer_id = Int(assigned[\"role.id\"])\r\n        roleId = Int(DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).One(\"id\"))\r\n        if roleId == 0 {\r\n            warning LangRes(\"@1role_not_found_in_registry\", \"en\")\r\n        }\r\n\r\n        var specialRules map prev_contract string\r\n        prev_contract = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev_contract = $stack[Len($stack) - 2]\r\n        }\r\n        specialRules[\"@1VotingValidatorAccept\"] = 1\r\n        specialRules[\"@1DelegateRefresh\"] = 1\r\n        specialRules[\"@1ValidatorRequest\"] = 1\r\n        specialRules[\"@1InvestorRefresh\"] = 1\r\n\r\n        if specialRules[prev_contract] != 1 {\r\n            @1RolesAccessCheck(\"rid\", roleId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        // delete the member\r\n        var m map\r\n        m[\"deleted\"] = $block_time\r\n        m[\"date_deleted\"] = $block_time\r\n        DBUpdate(\"@1roles_participants\", $row_id, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesAccessManager {\r\n    data {\r\n        Action string\r\n        Rid int\r\n        ManagerRid string \"optional\"\r\n\r\n        //filled inputs\r\n        role_name string \"optional\"\r\n        role_type int \"optional\"\r\n    }\r\n\r\n    func updateAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        DBUpdate(\"@1roles\", $Rid, {\"roles_access\": roles_access})\r\n    }\r\n\r\n    func updateBufferAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        var filled map\r\n        filled[\"roles_access\"] = roles_access\r\n        filled[\"role_name\"] = $role_name\r\n        filled[\"role_type\"] = $role_type\r\n\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\", \"value\": filled})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": filled})\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ManagerRid = Int($ManagerRid)\r\n        if $Rid > 0 {\r\n            @1RolesAccessCheck(\"rid\", $Rid)\r\n\r\n            $role = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $Rid}).Columns(\"id,roles_access\").Row()\r\n            if !$role {\r\n                warning LangRes(\"@1role_not_found\", \"en\")\r\n            }\r\n            if $ManagerRid > 0 {\r\n                if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $ManagerRid}).One(\"id\") {\r\n                    warning LangRes(\"@1role_not_found\", \"en\")\r\n                }\r\n            }\r\n            var ids array, i int\r\n            $ids = ids\r\n            ids = JSONDecode($role[\"roles_access\"])\r\n            while i < Len(ids){\r\n                if ids[i] > 0 {\r\n                    $ids = Append($ids, ids[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\"}).Columns(\"id,value,value->roles_access\").Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value.roles_access\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $Rid == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $Action == \"clean\" {\r\n            updateAccess([])\r\n        }\r\n        if $ManagerRid > 0 {\r\n            var i int, idsNew array\r\n            if $Action == \"remove\" {\r\n                while i < Len($ids) {\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if $Rid == 0 {\r\n                    updateBufferAccess(idsNew)\r\n                } else {\r\n                    updateAccess(idsNew)\r\n                }\r\n            }\r\n            if $Action == \"add\" {\r\n                var double bool\r\n                while i < Len($ids) {\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $Rid == 0 {\r\n                    updateBufferAccess($ids)\r\n                } else {\r\n                    updateAccess($ids)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract DelegateRefresh {\r\n\r\n    func notInArray(val string, arr array) bool {\r\n        var i int\r\n        // info arr\r\n        while i < Len(arr) {\r\n            if val == arr[i] {\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var roleId int\r\n        roleId = getRoleId(\"role_delegate\")\r\n        $role = DBFind(\"@1roles\").Where({\"id\": roleId, \"deleted\": 0}).Row()\r\n        if !$role {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\r\n        ecosystems = DBFind(\"@1ecosystems\").Columns(\"id\")\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"@1parameters\").Where({\"name\": \"delegate_account\", \"ecosystem\": ecoId}).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"@1parameters\").Where({\"name\": \"founder_account\", \"ecosystem\": ecoId}).Row()\r\n            }\r\n\r\n            if notInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        rid = Int($role[\"id\"])\r\n        currentDelegates = DBFind(\"@1roles_participants\").Where({\"role->id\": rid, \"deleted\": 0}).Columns(\"id,member->member_id\")\r\n        var delegate map id int\r\n        i = 0\r\n        while i < Len(currentDelegates) {\r\n            delegate = currentDelegates[i]\r\n            if notInArray(delegate[\"member.member_id\"], delegateIds){\r\n                id = Int(delegate[\"id\"])\r\n                @1RolesUnassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        var key map delegateId int\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            delegateId = Int(delegateIds[i])\r\n            key = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": delegateId}).Row()\r\n            if key {\r\n                // check role dup\r\n                if !DBFind(\"@1roles_participants\").Where({\"member->member_id\": delegateId, \"role->id\": rid, \"deleted\": 0}).Row(){\r\n                    @1RolesAssign(\"rid,member_id\", rid, Int(key[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesCreate {\r\n    data {\r\n        role_name string\r\n        role_type int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        // system role\r\n        if $role_type == 3 {\r\n            warning LangRes(\"@1system_role_can_not_create\", \"en\")\r\n        }\r\n\r\n         // check role_creates_roles\r\n        $check_access = AppParam(Int($system_app_id), \"role_creates_roles\", $ecosystem_id)\r\n        if $check_access && Str($check_access) != \"0\" {\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+$check_access+\"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        } else {\r\n            var admin_id int\r\n            admin_id = AppParam(Int($system_app_id), \"role_admin\", $ecosystem_id)\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+admin_id+\"]\")\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $role_name == DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"role_name\": $role_name}).One(\"role_name\") {\r\n            warning LangRes(\"@1role_exists\", \"en\")\r\n        }\r\n        if Size($role_name) < 3 || Size($role_name) > 30 {\r\n            warning LangRes(\"@1name\", \"en\") + \" \" + LangRes(\"@1validate_role_name\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var roles_access_arr array, buffer map\r\n        buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"roles_access\"}).Columns(\"id,value,value->roles_access\").Row()\r\n        if buffer {\r\n            roles_access_arr = JSONDecode(buffer[\"value.roles_access\"])\r\n            var filled map\r\n            filled[\"roles_access\"] = []\r\n            filled[\"role_name\"] = \"\"\r\n            filled[\"role_type\"] = \"\"\r\n            DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": filled})\r\n        }\r\n        var m map\r\n        m[\"creator\"] = getMemberInfo($key_id)\r\n        m[\"role_name\"] = $role_name\r\n        m[\"role_type\"] = $role_type\r\n        m[\"date_created\"] = $block_time\r\n        m[\"roles_access\"] = JSONEncode(roles_access_arr)\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        $result = DBInsert(\"@1roles\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract InvestorRefresh {\r\n    data {\r\n        RoleId int\r\n    }\r\n\r\n    func notInArray(val string, arr array) bool {\r\n        var i lenArr int\r\n        lenArr = Len(arr)\r\n        while i < lenArr {\r\n            if val == Str(arr[i]) {\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n\r\n    func getParamInt(id int, name string) int {\r\n        var param int\r\n        param = Int(AppParam(id, name, 1))\r\n        if param == 0 {\r\n            warning Sprintf(LangRes(\"@1application_parameter_not_set\", \"en\"), name)\r\n        }\r\n        return param\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var appId int\r\n        appId = Int(DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\", \"deleted\": 0}).One(\"id\"))\r\n        if appId == 0 {\r\n            warning LangRes(\"@1app_not_found\", \"en\")\r\n        }\r\n\r\n        var roleValidatorId roleInvestorId string\r\n\r\n        roleValidatorId = getRoleId(\"role_validator\")\r\n        if !RoleAccess(roleValidatorId) {\r\n            warning LangRes(\"@1not_validator_can_not_run\", \"en\")\r\n        }\r\n\r\n        roleInvestorId = getRoleId(\"role_investor_with_voting_rights\")\r\n        $roleId = Int(DBFind(\"@1roles\").Where({\"id\": roleInvestorId, \"deleted\": 0}).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning LangRes(\"@1investor_role_not_found_or_removed\", \"en\")\r\n        }\r\n\r\n        $limitInvestors = getParamInt(appId, \"investors_number\")\r\n    }\r\n\r\n    action {\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id}).Columns(\"id\").Order([{amount:\"-1\"},{id:\"-1\"}]).Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"@1roles_participants\").Where({\"role->id\": $roleId, \"deleted\": 0}).Columns(\"member->member_id\")\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i = 0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old investors\r\n        var assigned map mid string\r\n        i = 0\r\n        while i < Len(assignedIds) {\r\n            if notInArray(assignedIds[i], investorsIds){\r\n                mid = assignedIds[i]\r\n                assigned = DBFind(\"@1roles_participants\").Where({\"member->member_id\": mid, \"role->id\": $roleId}).Row()\r\n                if assigned {\r\n                    @1RolesUnassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // add new investors\r\n        i = 0\r\n        while i < Len(investorsIds) {\r\n            if notInArray(investorsIds[i], assignedIds){\r\n                var id int\r\n                id = Int(investorsIds[i])\r\n                if DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": id}).Row(){\r\n                    @1RolesAssign(\"rid,member_id\", $roleId, id)\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesInstall",
            "Conditions": "ContractConditions(\"@1AdminCondition\")",
            "Value": "contract RolesInstall {\r\n\r\n    func updateParam(name string, value int) {\r\n        var app_param map\r\n        app_param = DBFind(\"@1app_params\").Where({\"ecosystem\": $ecosystem_id, \"app_id\": $app_id, \"name\": name}).Row()\r\n        if app_param {\r\n            var params map\r\n            params[\"Id\"] = Int(app_param[\"id\"])\r\n            params[\"Value\"] = value\r\n            params[\"Conditions\"] = \"ContractConditions(\\\"MainCondition\\\")\"\r\n            CallContract(\"@1EditAppParam\", params)\r\n        } else {\r\n            var params map\r\n            params[\"ApplicationId\"] = $app_id\r\n            params[\"Name\"] = name\r\n            params[\"Value\"] = value\r\n            params[\"Conditions\"] = \"ContractConditions(\\\"MainCondition\\\")\"\r\n            CallContract(\"@1NewAppParam\", params)\r\n        }\r\n    }\r\n\r\n    func addRole(name string, withParticipant bool, managerId int) int{\r\n        var m map paramName string id int\r\n        m[\"role_name\"] = name\r\n        m[\"role_type\"] = 3\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        id = Int(DBFind(\"@1roles\").Where(m).One(\"id\"))\r\n        if id == 0 {\r\n            m[\"default_page\"] = \"\"\r\n            m[\"deleted\"] = 0\r\n            m[\"creator->image_id\"] = 0\r\n            m[\"creator->member_name\"] = \"founder\"\r\n            m[\"creator->member_id\"] = Str($key_id)\r\n            m[\"date_created\"] = $block_time\r\n            if managerId > 0{\r\n                m[\"roles_access\"] = Sprintf(\"[%v]\", managerId)\r\n            }else{\r\n                m[\"roles_access\"] = \"[]\"\r\n            }\r\n            id = DBInsert(\"@1roles\", m)\r\n        }\r\n        paramName = \"role_\" + Replace(ToLower(name), \" \", \"_\")\r\n        updateParam(paramName, id)\r\n\r\n        if withParticipant {\r\n            var participant map\r\n            participant[\"role->id\"] = id\r\n            participant[\"role->type\"] = m[\"role_type\"]\r\n            participant[\"role->name\"] = m[\"role_name\"]\r\n            participant[\"role->image_id\"] = 0\r\n            participant[\"member->member_id\"] = Str($key_id)\r\n            participant[\"member->member_name\"] = \"founder\"\r\n            participant[\"member->image_id\"] = 0\r\n            participant[\"ecosystem\"] = $ecosystem_id\r\n\r\n            if !DBFind(\"@1roles_participants\").Where(participant).One(\"id\"){\r\n                participant[\"date_created\"] = $block_time\r\n                DBInsert(\"@1roles_participants\", participant)\r\n            }\r\n        }\r\n        return id\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n    }\r\n\r\n    action {\r\n        $app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var managerId int\r\n        managerId = addRole(\"Admin\", true, 0)\r\n        @1RolesAccessManager(\"Action,Rid,ManagerRid\", \"add\", managerId, managerId)\r\n        addRole(\"Developer\", true, managerId)\r\n\r\n        if $ecosystem_id == 1 {\r\n            addRole(\"Consensus\", false, managerId)\r\n            addRole(\"Candidate for validators\", false, managerId)\r\n            addRole(\"Validator\", false, managerId)\r\n            addRole(\"Investor with voting rights\", false, managerId)\r\n            addRole(\"Delegate\", false, managerId)\r\n        }\r\n\r\n        updateParam(\"role_creates_roles\", 0)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRequest {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        if !DBFind(\"@1roles\").WhereId($rid).One(\"id\") {\r\n            warning LangRes(\"@1role_not_found\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1roles_participants\").Where({\"role->id\": $rid, \"member->member_id\":$key_id, \"deleted\": 0}).One(\"id\") {\r\n            warning LangRes(\"@1role_you_added_already\", \"en\")\r\n        }\r\n\r\n        if DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"page_name\": \"@1roles_request_view\", \"page_params->rid\": $rid, \"sender->member_id\": $key_id, \"closed\": 0}).One(\"id\") {\r\n            warning LangRes(\"@1request_sent_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var params map\r\n        params[\"rid\"] = $rid\r\n\r\n        var member_id int\r\n        member_id = EcosysParam(\"founder_account\")\r\n\r\n        @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", member_id, 1, \"fa-bars\", LangRes(\"@1roles\", \"en\"), LangRes(\"@1new_request_received\", \"en\"), \"@1roles_request_view\", params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequestDecision",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRequestDecision {\r\n    data {\r\n        decision int\r\n        notific_id int\r\n        rid int \"optional\"\r\n        member_id int \"optional\"\r\n    }\r\n\r\n    conditions {\r\n    }\r\n\r\n    action {\r\n        if ($decision == 1){\r\n            @1RolesAssign(\"rid,member_id\", $rid, $member_id)\r\n        }\r\n\r\n        if ($notific_id > 0){\r\n            @1NotificationsClose(\"notific_id\", $notific_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRestore",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesRestore {\r\n    data {\r\n        rid int\r\n    }\r\n\r\n    conditions {\r\n        @1RolesAccessCheck(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1roles\", $rid, {deleted:0})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract RolesDelete {\r\n    data {\r\n        rid int\r\n        ops string\r\n    }\r\n\r\n    conditions {\r\n        @1RolesAccessCheck(\"rid\", $rid)\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"@1roles_participants\").Where({\"role->id\": $rid, \"deleted\": 0}).Columns(\"id\")\r\n\r\n        // delete all participants\r\n        var i int\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            @1RolesUnassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n        var m map\r\n        if $ops == \"D\" {\r\n            m[\"deleted\"] = 1\r\n            m[\"date_deleted\"] = $block_time\r\n        }\r\n        if $ops == \"R\" {\r\n            m[\"deleted\"] = 0\r\n        }\r\n        DBUpdate(\"@1roles\", $rid, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "BlockMember",
            "Conditions": "ContractConditions(\"@1AdminCondition\")",
            "Value": "contract BlockMember {\r\n    data {\r\n        KeyId int\r\n        Value int\r\n    }\r\n\r\n    conditions {\r\n        ContractConditions(\"@1AdminCondition\")\r\n    }\r\n\r\n    action {\r\n        @1TokensLockoutMember(\"KeyId,Value\", $KeyId, $Value)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensTransfer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensTransfer {\r\n    data {\r\n        Amount money\r\n        SenderId int\r\n        RecipientId int\r\n        Comment string \"optional\"\r\n        Ecosystem int \"optional\"\r\n    }\r\n\r\n    func getEcosystem() {\r\n        $e_id = Int($Ecosystem)\r\n        if $e_id == 0 {\r\n            $e_id = $ecosystem_id\r\n        } else {\r\n            if !DBFind(\"@1ecosystems\").Where({\"id\": $e_id}).One(\"id\") {\r\n                warning Sprintf(LangRes(\"@1ecosystem_not_found\", \"en\"), $e_id)\r\n            }\r\n        }\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensSend\", \"@1PoaTokensSend\", \"@1TokensRefundAccept\", \"@1ExCancel\", \"@1ExCancelOrder\",\"@1ExCancelOrders\", \"@1ExMatching\", \"@1ExMatchingOTC\", \"@1ExOrder\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1tokens_transfer_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkSender() {\r\n        var sender_map map\r\n        sender_map = DBFind(\"@1keys\").Where({\"id\": $SenderId, \"ecosystem\": $e_id}).Row()\r\n\r\n        if !sender_map {\r\n            warning Sprintf(LangRes(\"@1sender_x_invalid\", \"en\"), $SenderId)\r\n        }\r\n        if Int(sender_map[\"blocked\"]) != 0 {\r\n            warning LangRes(\"@1sender_blocked\", \"en\")\r\n        }\r\n        if Int(sender_map[\"deleted\"]) != 0 {\r\n            warning LangRes(\"@1sender_deleted\", \"en\")\r\n        }\r\n        if Money(sender_map[\"amount\"]) < $Amount {\r\n            warning LangRes(\"@1amount_less_than_needed\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkRecipient() {\r\n        var recipient_map map\r\n        recipient_map = DBFind(\"@1keys\").Where({\"id\": $RecipientId, \"ecosystem\": $e_id}).Row()\r\n\r\n        if !recipient_map {\r\n            warning Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $RecipientId)\r\n        }\r\n        if Int(recipient_map[\"blocked\"]) != 0 {\r\n            warning LangRes(\"@1recipient_blocked\", \"en\")\r\n        }\r\n        if Int(recipient_map[\"deleted\"]) != 0 {\r\n            warning LangRes(\"@1recipient_deleted\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getEcosystem()    //getting an ecosystem number\r\n        getPermission()   //getting permission to run\r\n        checkSender()     //check the sender\r\n        checkRecipient()  //check the recipient\r\n\r\n        //check amount\r\n        if $Amount == 0 {\r\n            warning LangRes(\"@1amount_zero\", \"en\")\r\n        }\r\n        if $Amount < 0 {\r\n            warning LangRes(\"@1amount_less_zero\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdateExt(\"@1keys\", {\"id\": $SenderId, \"ecosystem\": $e_id}, {\"-amount\": $Amount})\r\n        DBUpdateExt(\"@1keys\", {\"id\": $RecipientId, \"ecosystem\": $e_id}, {\"+amount\": $Amount})\r\n\r\n        var m map\r\n        m[\"sender_id\"] = $SenderId\r\n        m[\"recipient_id\"] = $RecipientId\r\n        m[\"amount\"] = $Amount\r\n        m[\"comment\"] = $Comment\r\n        m[\"block_id\"] = $block\r\n        m[\"txhash\"] = $txhash\r\n        m[\"ecosystem\"] = $e_id\r\n        m[\"type\"] = 3\r\n        m[\"created_at\"] = $block_time\r\n        DBInsert(\"@1history\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefundReject {\r\n    data {\r\n        RefundId int\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingDecisionCheck\"{\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n        \r\n        $tokenrefund = DBFind(\"@1tokens_refund\").Where({\"id\": $RefundId}).Row()\r\n        if !$tokenrefund {\r\n            warning LangRes(\"@1tokens_refund_not_found\", \"en\")\r\n        }\r\n\r\n        $RecipientId = Int($tokenrefund[\"victim_key_id\"])\r\n        $SenderId = Int($tokenrefund[\"attacker_key_id\"])\r\n        $amount = Money($tokenrefund[\"amount\"])\r\n        $votingID = Int($tokenrefund[\"voting_id\"])\r\n    }\r\n\r\n    action {\r\n        if $tokenrefund[\"result\"] == 0  {\r\n            TokensLockoutMember(\"KeyId,Value\", $RecipientId, 0)\r\n            TokensLockoutMember(\"KeyId,Value\", $SenderId, 0)\r\n\r\n            var m map\r\n            m[\"status\"] = 2\r\n            m[\"result\"] = 1\r\n            m[\"closed_at\"] = $block_time\r\n            DBUpdate(\"@1tokens_refund\", Int($RefundId), m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensRefundAccept {\r\n    data {\r\n        RefundId int\r\n    }\r\n\r\n    conditions {\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingDecisionCheck\"{\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        $tokenrefund = DBFind(\"@1tokens_refund\").Where({\"id\": $RefundId}).Row()\r\n        if !$tokenrefund {\r\n            warning LangRes(\"@1tokens_refund_not_found\", \"en\")\r\n        }\r\n\r\n        $RecipientId = Int($tokenrefund[\"victim_key_id\"])\r\n        $SenderId = Int($tokenrefund[\"attacker_key_id\"])\r\n        $amount = Money($tokenrefund[\"amount\"])\r\n        $votingID = Int($tokenrefund[\"voting_id\"])\r\n\r\n        if $amount <= 0 {\r\n            warning LangRes(\"@1amount_less_equal_zero\", \"en\")\r\n        }\r\n        \r\n        var sender map\r\n        sender = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $SenderId}).Row()\r\n        if !sender{\r\n            warning LangRes(\"@1sender_invalid\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $RecipientId}).Row(){\r\n            warning LangRes(\"@1recipient_invalid\", \"en\")\r\n        }\r\n        if sender[\"amount\"] < $amount {\r\n            warning Sprintf(LangRes(\"@1sender_amount_not_enough\", \"en\"), sender[\"amount\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $tokenrefund[\"result\"] == 0  {\r\n            TokensLockoutMember(\"KeyId,Value\", $RecipientId, 0)\r\n            TokensLockoutMember(\"KeyId,Value\", $SenderId, 0)\r\n\r\n            @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment\", $amount, $SenderId, $RecipientId, \"Refund tokens\")\r\n\r\n            var m map\r\n            m[\"status\"] = 2\r\n            m[\"result\"] = 2\r\n            m[\"closed_at\"] = $block_time\r\n            DBUpdate(\"@1tokens_refund\", Int($RefundId), m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract TokensSend {\r\n    data {\r\n        Amount money\r\n        Recipient string\r\n        Comment string \"optional\"\r\n    }\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1TokensSend\", \"@1TsKeyApprove\", \"@1TsTransferSeller\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning LangRes(\"@1tokens_transfer_cannot_be_made\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        getPermission()\r\n\r\n        $recipient_id = AddressToId($Recipient)\r\n        if $recipient_id == 0 {\r\n            warning Sprintf(LangRes(\"@1recipient_x_invalid\", \"en\"), $Recipient)\r\n        }\r\n    }\r\n\r\n    action {\r\n        @1TokensTransfer(\"Amount,SenderId,RecipientId,Comment,Ecosystem\", $Amount, $key_id, $recipient_id, $Comment, $ecosystem_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ValidatorDelete {\r\n    data {\r\n        Id int\r\n    }\r\n\r\n    conditions {\r\n        var candidateId roleId int\r\n        roleId = 2 // Candidate for validators\r\n        candidateId = DBFind(\"@1validator_candidates\").Where({\"ecosystem\": $ecosystem_id, \"id\": $Id}).One(\"candidate_key_id\")\r\n\r\n        $role = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0, \"role->id\": roleId, \"member->member_id\": candidateId}).Row()\r\n        if !$role {\r\n            warning LangRes(\"@1candidate_role_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1validator_candidates\", $Id, {deleted:1})\r\n        @1RolesUnassign(\"row_id\", Int($role[\"id\"]))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorRequest",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ValidatorRequest {\r\n    data {\r\n        TcpAddress string\r\n        ApiAddress string\r\n        KeyId int\r\n        PubKey string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n\r\n    conditions {\r\n        if $ecosystem_id != 1 {\r\n            warning LangRes(\"@1contract_first_ecosystem_only\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $KeyId}).Row() {\r\n            warning LangRes(\"@1address_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var roleId int\r\n        roleId = Int(AppParam(Int($system_app_id), \"role_candidate_for_validators\", $ecosystem_id))\r\n        if !DBFind(\"@1roles\").Where({\"ecosystem\": 1, \"id\": roleId, \"deleted\": 0}).One(\"id\") {\r\n            warning Sprintf(LangRes(\"@1role_app_param_not_found\", \"en\"), \"role_candidate_for_validators\")\r\n        }\r\n        @1RolesAssign(\"rid,member_id\", roleId, $key_id)\r\n\r\n        var m map\r\n        m[\"candidate_key_id\"] = $KeyId\r\n        m[\"tcp_address\"] = $TcpAddress\r\n        m[\"api_address\"] = $ApiAddress\r\n        m[\"pub_key\"] = $PubKey\r\n\r\n        m[\"description\"] = $Description\r\n        m[\"comment\"] = $Comment\r\n        m[\"date_created\"] = $block_time\r\n        m[\"deleted\"] = 0\r\n        DBInsert(\"@1validator_candidates\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorResign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract ValidatorResign {\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var roleValidatorId int\r\n        roleValidatorId = getRoleId(\"role_validator\")\r\n        if !RoleAccess(roleValidatorId) {\r\n            warning LangRes(\"@1not_validator_can_not_run\", \"en\")\r\n        }\r\n        $assigned = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->member_id\": $key_id, \"role->id\": roleValidatorId, \"deleted\": 0}).One(\"id\")\r\n    }\r\n\r\n    action {\r\n        @1RolesUnassign(\"row_id\", Int($assigned))\r\n        @1NodeRemoveByKey()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func runContract(cont, p string) {\r\n        if Size(cont) > 0 {\r\n            var params map\r\n            if Size(p) > 0 {\r\n                params = JSONToMap(p)\r\n            }\r\n            CallContract(cont, params)\r\n        }\r\n    }\r\n\r\n    func closeNotes() {\r\n        var notes array i int\r\n        notes = DBFind(\"@1notifications\").Where({\"closed\": 0, \"ecosystem\": $ecosystem_id, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $votingID})\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            @1NotificationsClose(\"notific_id\", Int(note[\"id\"]))\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ACCEPT = 1\r\n        $REJECT = -1\r\n\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID}).Columns(\"voting->name,voting->count_type_voters,voting->type,voting->volume,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status\").Row()\r\n        $type_decision = Int($voting[\"voting.type_decision\"])\r\n        $volume = $voting[\"voting.volume\"]\r\n\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        if prevContract != \"@1VotingUpdate\" {\r\n            if Int($voting[\"status\"]) != $FINISHED {\r\n                warning LangRes(\"@1voting_not_expired\", \"en\")\r\n            }\r\n        }\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).One(\"id\")\r\n        if !$subject_id {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flag_decision i int\r\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\r\n        if $voting[\"flags.success\"] == $ACCEPT { //now enough participants to make a decision\r\n            if $type_decision == 1 || $type_decision == 2 {\r\n                var candidates_added_count int\r\n                candidates_added_count = 0 // candidates who have already been added\r\n                flag_decision = $REJECT // none of the candidates has been added yet\r\n\r\n                var subjects array\r\n                subjects = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"results\": {\"$gt\":0}}).Order({\"results\":\"-1\"}).Columns(\"subject->member_id,subject->member_name\")\r\n                i = 0\r\n                while i < Len(subjects) {\r\n                    var subject map\r\n                    subject = subjects[i]\r\n\r\n                    // if there are still vacancies\r\n                    if candidates_added_count < Int($voting[\"optional.role_vacancies\"]) {\r\n                        // added candidate to the role\r\n                        var buffer_id int role map\r\n                        buffer_id = Int($voting[\"optional.role_id\"])\r\n                        role = DBFind(\"@1roles\").Columns(\"id,role_type,role_name,image_id\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).Row()\r\n                        if role {\r\n                            var member assignedMember map mid rid string\r\n                            member[\"member_id\"] = subject[\"subject.member_id\"]\r\n                            mid = member[\"member_id\"]\r\n                            rid = role[\"id\"]\r\n                            assignedMember = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->member_id\": mid, \"role->id\": rid, \"deleted\": 0}).Row()\r\n\r\n                            if !assignedMember {\r\n                                member[\"member_name\"] = subject[\"subject.member_name\"]\r\n\r\n                                var rolePart appointed m map\r\n                                rolePart[\"id\"] = role[\"id\"]\r\n                                rolePart[\"type\"] = role[\"role_type\"]\r\n                                rolePart[\"name\"] = role[\"role_name\"]\r\n                                rolePart[\"image_id\"] = role[\"image_id\"]\r\n                                appointed[\"voting_id\"] = $votingID\r\n                                appointed[\"voting_name\"] = $voting[\"voting.name\"]\r\n\r\n                                // add a candidate to the role\r\n                                m[\"role\"] = rolePart\r\n                                m[\"member\"] = member\r\n                                m[\"appointed\"] = appointed\r\n                                m[\"date_created\"] = $block_time\r\n                                m[\"ecosystem\"] = $ecosystem_id\r\n                                DBInsert(\"@1roles_participants\", m)\r\n\r\n                                candidates_added_count = candidates_added_count + 1\r\n\r\n                                // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                flag_decision = $ACCEPT\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n\r\n            if $type_decision == 3 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).Columns(\"id,results->percent_accepted,results->percent_rejected\").Row()\r\n                if subject {\r\n                    var percent_accepted percent_rejected float\r\n                    percent_accepted = Float(subject[\"results.percent_accepted\"])\r\n                    percent_rejected = Float(subject[\"results.percent_rejected\"])\r\n                    if ( Int($voting[\"voting.count_type_voters\"]) == 0 && percent_accepted >= Float($volume)   ) ||\r\n                       ( Int($voting[\"voting.count_type_voters\"]) == 1 && percent_accepted >  percent_rejected ) {\r\n                        flag_decision = $ACCEPT\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 4 {\r\n                var subject map\r\n                subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).Columns(\"id,results->percent_accepted,results->percent_rejected,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Row()\r\n                if subject {\r\n                    var percent_accepted percent_rejected float\r\n                    percent_accepted = Float(subject[\"results.percent_accepted\"])\r\n                    percent_rejected = Float(subject[\"results.percent_rejected\"])\r\n                    if ( Int($voting[\"voting.count_type_voters\"]) == 0 && percent_accepted >= Float($volume)   ) ||\r\n                       ( Int($voting[\"voting.count_type_voters\"]) == 1 && percent_accepted >  percent_rejected ) {\r\n                        flag_decision = $ACCEPT\r\n                        runContract(subject[\"subject.contract_accept\"], subject[\"subject.contract_accept_params\"])\r\n                    } else {\r\n                        flag_decision = $REJECT\r\n                        runContract(subject[\"subject.contract_reject\"], subject[\"subject.contract_reject_params\"])\r\n                    }\r\n                }\r\n            }\r\n\r\n            if flag_decision == $ACCEPT {\r\n                runContract($voting[\"optional.contract_accept\"], $voting[\"optional.contract_accept_params\"])\r\n            }\r\n            if flag_decision == $REJECT {\r\n                runContract($voting[\"optional.contract_reject\"], $voting[\"optional.contract_reject_params\"])\r\n            }\r\n\r\n            closeNotes()\r\n        }\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {\"flags->decision\": flag_decision})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingStatusUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingStatusUpdate {\r\n    data {}\r\n\r\n    func notificationSend(voting map) {\r\n        var title string id i lenVoters int voters array\r\n        if Int(voting[\"voting.type\"]) == 3 {\r\n            $page_name = \"@1polls_view\"\r\n        } else {\r\n            $page_name = \"@1voting_view\"\r\n        }\r\n        title = voting[\"voting.name\"]\r\n        id = Int(voting[\"id\"])\r\n        if voting[\"voting.type_participants\"] == 5 {\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->role_id\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": id, \"decision\": 0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter roleId params map\r\n                voter = voters[i]\r\n                roleId = Int(voter[\"member.role_id\"])\r\n                params[\"voting_id\"] = id\r\n                @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,closure_type\", roleId, 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), title, $page_name, params,1)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"member->member_id\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": id, \"decision\": 0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter memberId params map\r\n                voter = voters[i]\r\n                memberId = Int(voter[\"member.member_id\"])\r\n                params[\"voting_id\"] = id\r\n                @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", memberId, 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), title, $page_name, params)\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    func updateRatings(voting map) {\r\n        if voting[\"voting.rating\"] == 1 && voting[\"voting.type_participants\"] != 5 {\r\n            var id i lenVoters int voters array\r\n            id = Int(voting[\"id\"])\r\n            voters = DBFind(\"@1votings_participants\").Columns(\"id,member->member_id\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": id})\r\n            lenVoters = Len(voters)\r\n\r\n            while i < lenVoters {\r\n                var voter map memberId int\r\n                voter = voters[i]\r\n                memberId = Int(voter[\"member.member_id\"])\r\n\r\n                var where rating map\r\n                where[$rating_wallet] = IdToAddress(memberId)\r\n                where[\"ecosystem\"] = $ecosystem_id\r\n                rating = DBFind($rating_table).Columns($request_columns).Where(where).Row()\r\n\r\n                var rating_amount_i int rating_amount_f float\r\n                rating_amount_f = Float(rating[$rating_amount]) * Float($rating_weight)\r\n                if rating_amount_f < 1.0 {\r\n                    rating_amount_f = 1.0\r\n                }\r\n                rating_amount_f = 1 + Log(rating_amount_f)\r\n                rating_amount_i = Int(rating_amount_f * 1000)\r\n\r\n                //Println(\"wallet: \" + Str(IdToAddress(memberId)) + \"  rating_f: \" + Str(rating_amount_f) + \"  rating_i: \" + Str(rating_amount_i))\r\n                DBUpdate(\"@1votings_participants\", Int(voter[\"id\"]), {rating: rating_amount_i})\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    func changeVotings(from, to map) {\r\n        var votings array i lenVotings int v map\r\n        from[\"deleted\"] = 0\r\n        votings = DBFind(\"@1votings\").Columns(\"id,date_started,date_ended,voting->name,voting->type,voting->rating,voting->type_participants\").Where(from)\r\n\r\n        lenVotings = Len(votings)\r\n        while i < lenVotings {\r\n            v = votings[i]\r\n            if to[\"status\"] == $STARTED {\r\n                notificationSend(v)\r\n                updateRatings(v)\r\n                to[\"flags->notifics\"] = 1\r\n            }\r\n            DBUpdate(\"@1votings\", Int(v[\"id\"]), to)\r\n            i = i + 1\r\n        }\r\n    }\r\n    func checkPrev(names array) {\r\n        var i lenNames int prev string\r\n        lenNames = Len(names)\r\n        prev = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        while i < lenNames {\r\n            if prev == names[i] {\r\n                return\r\n            }\r\n            i = i + 1\r\n        }\r\n        @1AdminCondition()\r\n    }\r\n    conditions {\r\n        checkPrev([\"@1VotingSubjectCheck\", \"@1VotingInvite\"])\r\n\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        var app_id int\r\n        app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $rating_table = AppParam(app_id, \"voting_rating_table\", $ecosystem_id)\r\n        $rating_wallet = AppParam(app_id, \"voting_rating_wallet\", $ecosystem_id)\r\n        $rating_amount = AppParam(app_id, \"voting_rating_amount\", $ecosystem_id)\r\n        $rating_weight = AppParam(app_id, \"voting_rating_weight\", $ecosystem_id)\r\n        $request_columns = \"id,\" + $rating_wallet + \",\" + $rating_amount\r\n    }\r\n\r\n    action {\r\n        //setting status INVALID\r\n        changeVotings({status:$WAITING, \"flags->full_data\":0}, {\"status\":$INVALID})\r\n        changeVotings({status:$WAITING, \"progress->number_participants\":0}, {\"status\":$INVALID})\r\n        //setting status WAITING\r\n        changeVotings({status:$INVALID, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {\"status\":$WAITING})\r\n        //setting status STARTED\r\n        changeVotings({status:$INVALID, \"date_started\":{\"$lte\":$block_time}, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {\"status\":$STARTED})\r\n        changeVotings({status:$WAITING, \"date_started\":{\"$lte\":$block_time}}, {status:$STARTED})\r\n        //setting status FINISHED\r\n        changeVotings({status:$STARTED, \"date_ended\":{\"$lte\":$block_time}}, {\"status\":$FINISHED})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingUpdate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingUpdate {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100) / total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"status\": $STARTED}).Columns(\"flags,voting,progress,progress->number_voters,voting->count_type_voters\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1started_voting_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var progress voting map\r\n        progress = safeJsonToMap($voting[\"progress\"])\r\n        voting = safeJsonToMap($voting[\"voting\"])\r\n\r\n        var flag_success percent_success percent_voters number_voters quorum volume int\r\n        // increment count of voters\r\n        quorum = Int(voting[\"quorum\"])\r\n        volume = Int(voting[\"volume\"])\r\n        number_voters = Int(progress[\"number_voters\"]) + 1\r\n        if Int($voting[\"voting.count_type_voters\"]) == 0 {\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(percent_voters, quorum)\r\n        } else {\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(number_voters, quorum)\r\n        }\r\n\r\n        // update the flag of success\r\n        if percent_success == 100 {\r\n            flag_success = 1\r\n        }\r\n        progress[\"percent_voters\"] = percent_voters\r\n        progress[\"percent_success\"] = percent_success\r\n        progress[\"number_voters\"] = number_voters\r\n\r\n        var m map\r\n        m[\"progress\"] = progress\r\n        m[\"flags->success\"] = flag_success\r\n\r\n        if percent_success == 100 || percent_voters == 100 {\r\n            m[\"status\"] = $FINISHED\r\n            DBUpdate(\"@1votings\", $votingID, m)\r\n            @1VotingDecisionCheck(\"votingID\", $votingID)\r\n        } else {\r\n            DBUpdate(\"@1votings\", $votingID, m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCandidateAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingCandidateAccept {\r\n    data {\r\n        votingID int\r\n        CandidateID int\r\n        RoleId int\r\n    }\r\n\r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->role_id\": $RoleId, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $votingID, \"closed\": 0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->member_id\": $key_id, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $votingID, \"closed\": 0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID}).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"status\"] == $FINISHED || $block_time > Int($voting[\"date_ended\"]) {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"subject->member_id\": $CandidateID}).Columns(\"id,number_accept,results\").Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($voting[\"voting.type_participants\"]) != 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": $key_id, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": 0, \"member->role_id\": $RoleId, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if !$participant {\r\n            warning LangRes(\"@1voting_not_participant\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->member_id\": $key_id, \"role->id\": $RoleId, \"deleted\": 0}).One(\"id\") {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            } else {\r\n                var member map\r\n                member[\"member_id\"] = $key_id\r\n                member[\"member_name\"] = IdToAddress($key_id)\r\n                member[\"role_id\"] = $RoleId\r\n                var member_json string\r\n                member_json = JSONEncode(member)\r\n                DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), {\"member\":member_json})\r\n            }\r\n        }\r\n\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var m map\r\n            m[\"decision_date\"] = $block_time\r\n            m[\"decision\"] = $CandidateID\r\n            DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), m)\r\n\r\n            var p map\r\n            p[\"number_accept\"] = Int($subject[\"number_accept\"]) + 1\r\n            p[\"results\"] = Int($subject[\"results\"]) + Int($participant[\"rating\"])\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), p)\r\n\r\n            @1VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionAccept {\r\n    data {\r\n        votingID int\r\n        RoleId int\r\n    }\r\n\r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->role_id\": $RoleId, \"page_params->voting_id\": $votingID, \"closed\": 0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->member_id\": $key_id, \"page_params->voting_id\": $votingID, \"closed\": 0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID}).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3 {\r\n            if $voting[\"voting.role_id\"] != $RoleId{\r\n                warning LangRes(\"@1voting_role_incorrect\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED || $block_time > Int($voting[\"date_ended\"]) {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).Columns(\"id,number_accept,results->rating_accepted,results->rating_rejected\").Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($voting[\"voting.type_participants\"]) != 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": $key_id, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": 0, \"member->role_id\": $RoleId, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if !$participant {\r\n            warning LangRes(\"@1voting_not_participant\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->member_id\": $key_id, \"role->id\": $RoleId, \"deleted\": 0}).One(\"id\") {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            } else {\r\n                var member map\r\n                member[\"member_id\"] = $key_id\r\n                member[\"member_name\"] = IdToAddress($key_id)\r\n                member[\"role_id\"] = $RoleId\r\n                var member_json string\r\n                member_json = JSONEncode(member)\r\n                DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), {\"member\":member_json})\r\n            }\r\n        }\r\n\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var m map\r\n            m[\"decision_date\"] = $block_time\r\n            m[\"decision\"] = 1\r\n            DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), m)\r\n\r\n            var p map\r\n            var rating_accepted rating_rejected summ_rating int\r\n            rating_accepted = Int($subject[\"results.rating_accepted\"]) + Int($participant[\"rating\"])\r\n            rating_rejected = Int($subject[\"results.rating_rejected\"])\r\n            summ_rating = rating_accepted + rating_rejected\r\n            var percent_accepted percent_rejected float\r\n            percent_accepted = (Float(rating_accepted)*Float(100))/Float(summ_rating)\r\n            percent_rejected = (Float(rating_rejected)*Float(100))/Float(summ_rating)\r\n            p[\"results->rating_accepted\"] = rating_accepted\r\n            p[\"results->rating_rejected\"] = rating_rejected\r\n            p[\"results->percent_accepted\"] = percent_accepted\r\n            p[\"results->percent_rejected\"] = percent_rejected\r\n            p[\"number_accept\"] = Int($subject[\"number_accept\"]) + 1\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), p)\r\n\r\n            @1VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDelete {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        var voting map\r\n        voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"creator->member_id\": $key_id, \"status\": $INVALID}).Columns(\"id\").Row()\r\n        if !voting {\r\n            warning LangRes(\"@1voting_delete_impossible\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1votings\", $votingID, {deleted:$block_time})\r\n        var notes array\r\n        notes = DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"page_name\": \"@1voting_view\", \"page_params->voting_id\": $votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map noteId int\r\n            note = notes[i]\r\n            noteId = Int(note[\"id\"])\r\n            @1NotificationsClose(\"notific_id\", noteId)\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingInvite",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingInvite {\r\n    data {\r\n        votingID int\r\n        var_id int //0, member_id, role_id\r\n    }\r\n\r\n    func addVotingParticipant(votingId int, k_id int, r_id int) {\r\n        var m member role map\r\n\r\n        if k_id != 0 {\r\n            member[\"member_id\"] = k_id\r\n            member[\"member_name\"] = IdToAddress(k_id)\r\n        } else {\r\n            member[\"member_id\"] = 0\r\n        }\r\n\r\n        if r_id != 0 {\r\n            member[\"role_id\"] = r_id\r\n        }\r\n        m[\"member\"] = member\r\n\r\n        m[\"voting_id\"] = votingId\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        m[\"rating\"] = 1\r\n        DBInsert(\"@1votings_participants\", m)\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"status\": [{\"$neq\": $STARTED},{\"$neq\": $FINISHED}]}).Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended,creator->member_id\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_expired_can_not_add_participants\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        $type_participants = $voting[\"voting.type_participants\"]\r\n        $type_voting = $voting[\"voting.type\"]\r\n        $number_participants = Int($voting[\"progress.number_participants\"])\r\n\r\n        if $number_participants > 1 && $type_voting == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_add_participants\", \"en\")\r\n        }\r\n        var isAdded string\r\n        if $type_participants == 2 {\r\n            if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $var_id}).Row(){\r\n                warning LangRes(\"@1key_not_found\", \"en\")\r\n            }\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": $var_id}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1member_added_before\", \"en\")\r\n            }\r\n        }\r\n\r\n        if $type_participants == 3 {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).One(\"id\")\r\n            if isAdded {\r\n                warning LangRes(\"@1voting_one_role_allowed\", \"en\")\r\n            }\r\n            if Len(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $var_id, \"deleted\": 0})) == 0 {\r\n                warning LangRes(\"@1roles_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n        if ($type_participants == 4 || $type_participants == 5) {\r\n            isAdded = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->role_id\": $var_id}).One(\"id\")\r\n            if isAdded {\r\n                if ($type_participants == 4){\r\n                    warning LangRes(\"@1role_members_added_before\", \"en\")\r\n                }\r\n                if ($type_participants == 5){\r\n                    warning LangRes(\"@1role_added_before\", \"en\")\r\n                }\r\n            }\r\n            if Len(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $var_id, \"deleted\": 0})) == 0 {\r\n                warning LangRes(\"@1roles_participants_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        if $type_participants == 1 { // everybody\r\n            var keys array\r\n            keys = DBFind(\"@1keys\").Where({\"id\": {\"$neq\": $guest_key}, ecosystem:$ecosystem_id})\r\n            while i < Len(keys) {\r\n                var key map\r\n                key = keys[i]\r\n                addVotingParticipant($votingID, Int(key[\"id\"]), 0)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 2 { // manual\r\n            var key map\r\n            key = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $var_id}).Row()\r\n            addVotingParticipant($votingID, Int(key[\"id\"]), 0)\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        if $type_participants == 3 { // one role\r\n            var roles array\r\n            roles = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $var_id, \"deleted\": 0}).Columns(\"member->member_id\").Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                addVotingParticipant($votingID, Int(role[\"member.member_id\"]), 0)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 4 { // all participants in the selected roles vote\r\n            var roles array\r\n            roles = DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": $var_id, \"deleted\": 0}).Columns(\"member->member_id\").Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                addVotingParticipant($votingID, Int(role[\"member.member_id\"]), $var_id)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 5 { // one participant of the selected roles votes\r\n            var rl map\r\n            rl = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $var_id}).Row()\r\n            addVotingParticipant($votingID, 0, Int(rl[\"id\"]))\r\n            $number_participants = $number_participants + 1\r\n        }\r\n\r\n        var v map\r\n        if $type_participants == 3 {\r\n            v[\"voting->role_id\"] = $var_id\r\n        }\r\n        v[\"progress->number_participants\"] = $number_participants\r\n        DBUpdate(\"@1votings\", $votingID, v)\r\n        @1VotingStatusUpdate()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNotificationSend",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingNotificationSend {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 {\r\n            res = JSONToMap(m)\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting = DBFind(\"@1votings\").Columns(\"id,date_ended\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"date_ended\":[{\"$gt\": $block_time}]}).One(\"id\")\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_expired_can_not_notify\", \"en\")\r\n        }\r\n\r\n        $voting = DBFind(\"@1votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"date_started\":[{\"$gt\": $block_time}]}).Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning LangRes(\"@1voting_not_creator\", \"en\")\r\n        }\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            warning LangRes(\"@1notifications_sent_already\", \"en\")\r\n        }\r\n\r\n        $voting_name = $voting[\"voting.name\"]\r\n    }\r\n\r\n    action {\r\n        var participants array\r\n        participants = DBFind(\"@1votings_participants\").Limit(10000).Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"decision\": 0})\r\n        var i int\r\n        while i < Len(participants) {\r\n            var participant member params map\r\n            participant = participants[i]\r\n            member = safeJsonToMap(participant[\"member\"])\r\n            params[\"voting_id\"] = $votingID\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(member[\"member_id\"]), 1, \"fa-check\", LangRes(\"@1voting\", \"en\"), $voting_name, \"voting_view\", JSONEncode(params), 0, 0)\r\n\r\n            i = i + 1\r\n        }\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {\"flags->notifics\":1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingCreate {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        quorum int\r\n        rating string \"optional\"\r\n        volume int \"optional\"\r\n\r\n        count_type_voters string \"optional\"\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n    }\r\n\r\n    func trimZeroTime(s string) string {\r\n        if Contains(s, \"T00:00:00Z\") {\r\n            s = Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n\r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5 {\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n\r\n    func isCalledFromPage() bool {\r\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\r\n    }\r\n\r\n    func fixDatetimes() {\r\n        $date_started = UnixDateTime(dateAddTime($start_date, $start_time))\r\n        $date_ended = UnixDateTime(dateAddTime($end_date, $end_time))\r\n\r\n        if $date_started == 0 || $date_ended == 0 { // invalid datetimes\r\n            if isCalledFromPage(){\r\n                var errs array\r\n                if Size($start_date) < 10 {\r\n                    errs = Append(errs, \"starting date\")\r\n                }\r\n                if Size($start_time) < 5 {\r\n                    errs = Append(errs, \"starting time\")\r\n                }\r\n                if Size($end_date) < 10 {\r\n                    errs = Append(errs, \"ending date\")\r\n                }\r\n                if Size($end_time) < 5 {\r\n                    errs = Append(errs, \"ending time\")\r\n                }\r\n                warning Sprintf(LangRes(\"@1voting_creation_error_x_unspecified\", \"en\"), Join(errs, \", \"))\r\n            }else{\r\n                $date_started = $block_time\r\n                $interval = Int($interval)\r\n                if $interval == 0 {\r\n                    $interval = 3\r\n                }\r\n                $date_ended = $date_started + 3600 * 24 * $interval\r\n            }\r\n        }\r\n        if $date_started < $block_time{\r\n            warning LangRes(\"@1starting_date_invalid\", \"en\")\r\n        }\r\n        if $date_started >= $date_ended{\r\n            warning LangRes(\"@1ending_date_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        if (($type_decision == 1 || $type_decision == 2) && $count_type_voters == 1){\r\n            info LangRes(\"@1voting_type_not_suitable\", \"en\")\r\n        }\r\n        if ($quorum < 1) || ($quorum > 100) {\r\n            warning Sprintf(LangRes(\"@1quorum_range_must_be\", \"en\"), $quorum)\r\n        }\r\n        if $count_type_voters == 0 && $type_decision != 1 && $type_decision != 2 {\r\n            if ($volume < 1) || ($volume > 100) {\r\n                warning Sprintf(LangRes(\"@1volume_range_must_be\", \"en\"), $volume)\r\n            }\r\n        }\r\n        if $count_type_voters == 1 {\r\n            if $quorum < 1 {\r\n                info LangRes(\"@1voters_number_less_one\", \"en\")\r\n            }\r\n            $volume = 0\r\n        }\r\n        if $voting_type == 2 {\r\n            var systemAllowed map\r\n            systemAllowed[\"@1VotingRunEditPlatformParam\"] = 1\r\n            systemAllowed[\"@1VotingRunNewValidator\"] = 1\r\n            systemAllowed[\"@1VotingRunRemoveValidator\"] = 1\r\n            systemAllowed[\"@1VotingRunVes\"] = 1\r\n            systemAllowed[\"@1VotingRunTokenRefund\"] = 1\r\n            systemAllowed[\"@1VotingRunEditEcosysParam\"] = 1\r\n            if systemAllowed[$stack[0]] != 1 {\r\n                warning Sprintf(LangRes(\"@1system_voting_can_not_start_from_x\", \"en\"), $stack[0])\r\n            }\r\n        }\r\n\r\n        $key = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $key_id}).Row()\r\n        if !$key {\r\n            warning LangRes(\"@1ecosystem_not_member\", \"en\")\r\n        }\r\n \r\n        fixDatetimes()\r\n    }\r\n\r\n    action {\r\n        var voting progress flags creator map votingId int\r\n        voting[\"name\"] = $voting_name\r\n        voting[\"type\"] = $voting_type\r\n        voting[\"description\"] = $description\r\n        voting[\"type_participants\"] = $type_participants\r\n        voting[\"type_decision\"] = $type_decision\r\n        voting[\"volume\"] = $volume\r\n        voting[\"quorum\"] = $quorum\r\n        voting[\"count_type_voters\"] = $count_type_voters\r\n        if $rating == \"true\" || $rating == \"1\" {\r\n            voting[\"rating\"] = 1\r\n        } else {\r\n            voting[\"rating\"] = 0\r\n        }\r\n\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        creator[\"member_id\"] = $key[\"id\"]\r\n        creator[\"member_name\"] = IdToAddress($key_id)\r\n        var m map\r\n        m[\"voting\"] = voting\r\n        m[\"progress\"] = progress\r\n        m[\"flags\"] = flags\r\n        m[\"creator\"] = creator\r\n        m[\"status\"] = $INVALID\r\n        m[\"date_started\"] = $date_started\r\n        m[\"date_ended\"] = $date_ended\r\n        m[\"ecosystem\"] = $ecosystem_id,\r\n\r\n        votingId = DBInsert(\"@1votings\", m)\r\n\r\n        // if all members are voting participants\r\n        if $type_participants == 1 {\r\n            @1VotingInvite(\"votingID,var_id\", votingId, 0)\r\n        }\r\n\r\n        var buffer_data map\r\n        buffer_data[\"voting_id\"] = votingId\r\n        @1BufferManager(\"Action,Key,Val\", \"set\", \"voting\", JSONEncode(buffer_data))\r\n\r\n        $result = votingId\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $voting_map = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID}).Columns(\"id,optional,voting->type,voting->type_decision,flags\").Row()\r\n        if !$voting_map {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n\r\n        $type_decision = $voting_map[\"voting.type_decision\"]\r\n        if $type_decision < 1 || $type_decision > 4 {\r\n            warning LangRes(\"@1decision_type_invalid\", \"en\")\r\n        }\r\n\r\n        $subject_map = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).Row()\r\n        if !$subject_map {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var flags, subject map\r\n        flags = safeJsonToMap($voting_map[\"flags\"])\r\n        if $type_decision > 2 && $type_decision <= 4 {\r\n            subject = safeJsonToMap($subject_map[\"subject\"])\r\n        }\r\n\r\n        var fullData string\r\n\r\n        if $type_decision == 1 || $type_decision == 2 {\r\n            var optional map\r\n            optional = safeJsonToMap($voting_map[\"optional\"])\r\n\r\n            if Int(optional[\"number_candidates\"]) > 0 && Int(optional[\"role_vacancies\"]) > 0 && Int(optional[\"role_id\"]) > 0 {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 3 {\r\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if $type_decision == 4 {\r\n            if subject[\"contract_accept\"] != \"\" {\r\n                fullData = 1\r\n            }\r\n        }\r\n\r\n        if fullData == 1 {\r\n            DBUpdate(\"@1votings\", $votingID, {\"flags->full_data\":fullData})\r\n            @1VotingStatusUpdate()\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectDocument",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectDocument {\r\n    data {\r\n        votingID int\r\n        text_document string\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"status\":[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional,creator->member_id\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var subject map\r\n        subject[\"text\"] = $text_document\r\n        subject[\"hash\"] = Sha256($text_document)\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:subject})\r\n        }\r\n        var accept_params reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = accept_params\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = reject_params\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectSettings",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectSettings {\r\n    data {\r\n        votingID int\r\n\r\n        roleID int\r\n        vacancies int\r\n\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $vacancies < 1 {\r\n            warning LangRes(\"@1vacancies_number_less_one\", \"en\")\r\n        }\r\n\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"status\":[{\"$neq\": $STARTED},{\"$neq\": $FINISHED}]}).Columns(\"optional,voting->type,flags->full_data,creator->member_id\").Row()\r\n\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n        var role map\r\n        role = DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $roleID, \"deleted\": 0}).Row()\r\n        if !role {\r\n            warning LangRes(\"@1specified_role_not_found\", \"en\")\r\n        }\r\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\r\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\r\n            warning LangRes(\"@1role_not_elective_or_removed\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n\r\n        optional[\"contract_accept\"] = $contract_accept\r\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\r\n        optional[\"contract_reject\"] = $contract_reject\r\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\r\n        optional[\"role_id\"] = $roleID\r\n        optional[\"role_vacancies\"] = $vacancies\r\n\r\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\r\n\r\n        $subject_map = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).Row()\r\n        if $subject_map {\r\n            @1VotingSubjectCheck(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCandidates",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectCandidates {\r\n    data {\r\n        votingID int\r\n        memberID int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        }else{\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID}).Columns(\"id,optional->number_candidates,voting->type,flags->full_data,status,creator->member_id,voting->type_decision\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            if !($voting[\"voting.type_decision\"] == 1 && $memberID == $key_id){ // тип \"Добавление кандидатов по запросу\" позволяет пользователю самому добавлять себя\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $STARTED {\r\n            warning LangRes(\"@1voting_started_can_not_add_candidates\", \"en\")\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning LangRes(\"@1voting_finished_can_not_add_candidates\", \"en\")\r\n        }\r\n\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n\r\n        if $memberID == 0 {\r\n            $memberID = $key_id\r\n        }\r\n\r\n        if DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"subject->member_id\": $memberID}).One(\"id\") {\r\n            warning LangRes(\"@1candidate_added_before\", \"en\")\r\n        }\r\n\r\n        $member = getMemberInfo($memberID)\r\n        if !$member {\r\n            warning Sprintf(LangRes(\"@1key_not_found\", \"en\") + \" (%v)\", $memberID)\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBInsert(\"@1votings_subject\", {ecosystem: $ecosystem_id, voting_id:$votingID, subject:$member})\r\n        var m map\r\n        m[\"optional->number_candidates\"] = Int($voting[\"optional.number_candidates\"]) + 1\r\n        DBUpdate(\"@1votings\", $votingID, m)\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectContract",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingSubjectContract {\r\n    data {\r\n        votingID int\r\n\r\n        contract_accept string\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string\r\n        contract_reject_params string \"optional\"\r\n\r\n        optional_accept_contract string \"optional\"\r\n        optional_accept_params string \"optional\"\r\n        optional_reject_contract string \"optional\"\r\n        optional_reject_params string \"optional\"\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID, \"status\":[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,voting->type,flags->full_data,optional,creator->member_id\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_started_can_not_edit\", \"en\")\r\n        }\r\n        if $voting[\"creator.member_id\"] != $key_id {\r\n            warning LangRes(\"@1access_denied\", \"en\")\r\n        }\r\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\r\n            warning LangRes(\"@1system_voting_can_not_edit\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var accept_params, reject_params map\r\n        accept_params = safeJsonToMap($contract_accept_params)\r\n        reject_params = safeJsonToMap($contract_reject_params)\r\n\r\n        var subject map\r\n        subject[\"contract_accept\"] = $contract_accept\r\n        subject[\"contract_accept_params\"] = accept_params\r\n        subject[\"contract_reject\"] = $contract_reject\r\n        subject[\"contract_reject_params\"] = reject_params\r\n\r\n        $subject_id = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).One(\"id\")\r\n        if $subject_id {\r\n            DBUpdate(\"@1votings_subject\", Int($subject_id), {subject:subject})\r\n        } else {\r\n            DBInsert(\"@1votings_subject\", {ecosystem:$ecosystem_id, voting_id:$votingID, subject:subject})\r\n        }\r\n\r\n        var o_accept_params o_reject_params map\r\n        o_accept_params = safeJsonToMap($optional_accept_params)\r\n        o_reject_params = safeJsonToMap($optional_reject_params)\r\n\r\n        var optional map\r\n        optional = safeJsonToMap($voting[\"optional\"])\r\n        optional[\"contract_accept\"] = $optional_accept_contract\r\n        optional[\"contract_accept_params\"] = o_accept_params\r\n        optional[\"contract_reject\"] = $optional_reject_contract\r\n        optional[\"contract_reject_params\"] = o_reject_params\r\n        DBUpdate(\"@1votings\", $votingID, {optional:optional})\r\n\r\n        @1VotingSubjectCheck(\"votingID\", $votingID)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateRun",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplateRun {\r\n    data {\r\n        TemplateId int\r\n        Duration int\r\n\r\n        TextDocument string \"optional\"\r\n        ContractAcceptParams string \"optional\"\r\n        ContractRejectParams string \"optional\"\r\n    }\r\n\r\n    func checkInput(value, name string) {\r\n        if Size(value) == 0 || value == \"NULL\" {\r\n            warning Sprintf(LangRes(\"@1x_not_found\", \"en\"), name)\r\n        }\r\n    }\r\n\r\n    func getPermission() {\r\n        var array_permissions array result i int prevContract string\r\n        array_permissions = [\"@1VotingRunEditPlatformParam\", \"@1VotingRunNewValidator\", \"@1VotingRunRemoveValidator\", \"@1VotingRunVes\", \"@1VotingRunTokenRefund\", \"@1VotingRunEditEcosysParam\"]\r\n\r\n        prevContract = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prevContract = $stack[Len($stack) - 2]\r\n        }\r\n        while i < Len(array_permissions) {\r\n            var contract_name string\r\n            contract_name = array_permissions[i]\r\n            if contract_name==prevContract {\r\n                result = 1\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        if result == 0 {\r\n            warning Sprintf(LangRes(\"@1system_voting_can_not_start_from_x\", \"en\"), $stack[0])\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $template = DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id, \"id\": $TemplateId}).Columns(\"voting->count_type_voters,voting->name,voting->volume,voting->quorum,voting->type_decision,voting->type_participants,voting->type,voting->rating,subject->candidates,subject->vacancies,subject->voters,subject->contract_accept,subject->contract_reject,optional->contract_accept,optional->contract_reject,optional->init_contract,optional->contract_accept_params,optional->contract_reject_params,optional->init_contract_params\").Row()\r\n        if !$template {\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n\r\n        $v_name = Sprintf(\"%v [\" + LangRes(\"@1template_id\", \"en\") + \": %v]\", $template[\"voting.name\"], $TemplateId)\r\n        $v_count_type_voters = Int($template[\"voting.count_type_voters\"])\r\n        $v_volume = Int($template[\"voting.volume\"])\r\n        $v_quorum = Int($template[\"voting.quorum\"])\r\n        $v_type_decision = Int($template[\"voting.type_decision\"])\r\n        $v_type_participants = Int($template[\"voting.type_participants\"])\r\n        $v_type = Int($template[\"voting.type\"])\r\n        $v_rating = $template[\"voting.rating\"]\r\n\r\n        $s_candidates = Int($template[\"subject.candidates\"])\r\n        $s_vacancies = $template[\"subject.vacancies\"]\r\n        $s_voters = Int($template[\"subject.voters\"])\r\n        $s_contract_accept = $template[\"subject.contract_accept\"]\r\n        $s_contract_reject = $template[\"subject.contract_reject\"]\r\n        \r\n        $o_contract_accept = $template[\"optional.contract_accept\"]\r\n        $o_contract_reject = $template[\"optional.contract_reject\"]\r\n        $o_init_contract = $template[\"optional.init_contract\"]\r\n        $o_contract_accept_params = $template[\"optional.contract_accept_params\"]\r\n        $o_contract_reject_params = $template[\"optional.contract_reject_params\"]\r\n        $o_init_contract_params = $template[\"optional.init_contract_params\"]\r\n        \r\n        $desc = Sprintf(LangRes(\"@1template\", \"en\") + \" #%v\", $TemplateId)       \r\n        if $Duration <= 0 {\r\n            $Duration = 3\r\n        }\r\n\r\n        if $v_type < 1 || $v_type > 3 {\r\n            warning LangRes(\"@1voting_type_invalid\", \"en\")\r\n        }\r\n\r\n        if $v_type == 2 {\r\n            getPermission()\r\n\r\n            // check duplicated\r\n            if DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"voting->name\": $v_name, \"voting->type\": 2, \"flags->decision\": {\"$nin\": [\"1\", \"-1\"]}, \"deleted\": 0}).Row(){\r\n                warning LangRes(\"@1same_voting_created\", \"en\")\r\n            }\r\n        } \r\n\r\n        // candidates\r\n        if $v_type_decision == 1 || $v_type_decision == 2 {\r\n            if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $s_candidates, \"deleted\": 0}).One(\"id\") {\r\n                warning Sprintf(LangRes(\"@1candidate_role_id_not_found\", \"en\"), $s_candidates)\r\n            }\r\n        }\r\n\r\n        // document\r\n        if $v_type_decision == 3 {\r\n            checkInput($TextDocument, \"TextDocument\")\r\n        }\r\n\r\n        // contracts\r\n        if $v_type_decision == 4 {\r\n            if GetContractByName($s_contract_accept) == 0 {\r\n                warning LangRes(\"@1accepted_contract_not_found\", \"en\")\r\n            }\r\n            if Size($s_contract_reject) > 0 {\r\n                if GetContractByName($s_contract_reject) == 0 {\r\n                    warning LangRes(\"@1rejected_contract_not_found\", \"en\")\r\n                }\r\n            }\r\n        }\r\n\r\n        if $v_type_participants == 3 {\r\n            // if the type of the participants \"in role\" - check the role\r\n            if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $s_voters, \"deleted\": 0}).One(\"id\") {\r\n                warning Sprintf(LangRes(\"@1voters_role_id_not_found\", \"en\"), $s_voters)\r\n            }\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0, \"role->id\": $s_voters, \"member->member_id\": $key_id}).One(\"id\") {\r\n                warning LangRes(\"@1role_not_involved\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        // start init contract\r\n        if Size($o_init_contract) > 0 {\r\n            var params map\r\n            if Size($o_init_contract_params) > 0 {\r\n                params = JSONToMap($o_init_contract_params)\r\n            }\r\n            params[\"TemplateId\"] = $TemplateId\r\n            CallContract($o_init_contract, params)\r\n        }\r\n\r\n        // creating a vote\r\n        var votingId int\r\n        votingId = @1VotingCreate(\"voting_name,voting_type,type_participants,type_decision,quorum,rating,volume,count_type_voters,description,interval\", \r\n            $v_name, $v_type, $v_type_participants, $v_type_decision, $v_quorum, $v_rating, $v_volume, $v_count_type_voters, $desc, $Duration)\r\n\r\n        // new optional parameters\r\n        var o_accept_params o_reject_params map\r\n        if Size($o_contract_accept) > 0 {\r\n            if Size($o_contract_accept_params) > 0 {\r\n                o_accept_params = JSONToMap($o_contract_accept_params)\r\n            }\r\n            o_accept_params[\"VotingId\"] = votingId\r\n            o_accept_params[\"TemplateId\"] = $TemplateId\r\n        }\r\n        if Size($o_contract_reject) > 0 {\r\n            if Size($o_contract_reject_params) > 0 {\r\n                o_reject_params = JSONToMap($o_contract_reject_params)\r\n            }\r\n            o_reject_params[\"VotingId\"] = votingId\r\n            o_reject_params[\"TemplateId\"] = $TemplateId\r\n        }\r\n\r\n        // setting the subject of the vote\r\n        if $v_type_decision == 1 || $v_type_decision == 2 {\r\n            @1VotingSubjectCandidates(\"votingID,memberID\", votingId, $key_id)\r\n            @1VotingSubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", \r\n                votingId, $s_candidates, $s_vacancies, $o_contract_accept, JSONEncode(o_accept_params), $o_contract_reject, JSONEncode(o_reject_params))\r\n        }\r\n        if $v_type_decision == 3 {\r\n            @1VotingSubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", \r\n                votingId, $TextDocument, $o_contract_accept, JSONEncode(o_accept_params), $o_contract_reject, JSONEncode(o_reject_params))\r\n        }\r\n        if $v_type_decision == 4 {\r\n            var accept_params reject_params map\r\n            if Size($s_contract_accept) > 0 {\r\n                if Size($ContractAcceptParams) > 0 {\r\n                    accept_params = JSONToMap($ContractAcceptParams)\r\n                }\r\n                accept_params[\"VotingId\"] = votingId\r\n                accept_params[\"TemplateId\"] = $TemplateId\r\n            }\r\n            if Size($s_contract_reject) > 0 {\r\n                if Size($ContractRejectParams) > 0 {\r\n                    reject_params = JSONToMap($ContractRejectParams)\r\n                }\r\n                reject_params[\"VotingId\"] = votingId\r\n                reject_params[\"TemplateId\"] = $TemplateId\r\n            }\r\n            @1VotingSubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params,optional_accept_contract,optional_accept_params,optional_reject_contract,optional_reject_params\",\r\n                votingId, $s_contract_accept, JSONEncode(accept_params), $s_contract_reject, JSONEncode(reject_params), $o_contract_accept, JSONEncode(o_accept_params), $o_contract_reject, JSONEncode(o_reject_params))\r\n        }\r\n\r\n        // setting the participants of the vote\r\n        if $v_type_participants == 1 {\r\n            // if the participants are \"all\", the invite has already occurred in \"@1VotingCreate\"\r\n        }\r\n        if $v_type_participants == 3 {\r\n            @1VotingInvite(\"votingID,var_id\", votingId, $s_voters)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunEditEcosysParam",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunEditEcosysParam {\r\n    data {\r\n        Id int\r\n        Value string\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_ecosysparams\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        pars[\"Id\"] = $Id\r\n        pars[\"Value\"] = $Value    \r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunEditPlatformParam",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunEditPlatformParam {\r\n    data {\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_platformparams\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        pars[\"Name\"] = $Name\r\n        pars[\"Value\"] = $Value\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunNewValidator",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunNewValidator {\r\n    data {\r\n        ValidatorId int\r\n    }\r\n\r\n    func warn(name, detail string) {\r\n        warning Sprintf(LangRes(\"@1x_invalid\", \"en\") + \" (%v)\", name, detail)\r\n    }\r\n\r\n    func checkApiAddress(addr string) {\r\n        var name string\r\n        name = LangRes(\"@1api_address\", \"en\")\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n\r\n    func checkTcpAddress(addr string) {\r\n        var name string\r\n        name = LangRes(\"@1tcp_address\", \"en\")\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n        }\r\n    }\r\n\r\n    func checkPub(pub string) {\r\n        if PubToID(pub) == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n    }\r\n\r\n    func checkKeyId(keyid int) {\r\n        var existed map\r\n        existed = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": keyid}).Row()\r\n        if !existed {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    func getNodesJSON() string {\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 100 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n\r\n    func appendFirstNode(nodes array) array {\r\n        var first string firstNode map\r\n        first = AppParam($app_id, \"first_node\", 1)\r\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\r\n            warning LangRes(\"@1first_node_invalid\", \"en\")\r\n        }\r\n        firstNode = JSONDecode(first)\r\n        checkTcpAddress(firstNode[\"tcp_address\"])\r\n        checkApiAddress(firstNode[\"api_address\"])\r\n        checkKeyId(Int(firstNode[\"key_id\"]))\r\n        checkPub(firstNode[\"public_key\"])\r\n        nodes = Append(nodes, firstNode)\r\n        return nodes\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_validators\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n\r\n        $validator = DBFind(\"@1validator_candidates\").Where({\"id\": $ValidatorId, \"deleted\": 0}).Row()\r\n        if !$validator {\r\n            warning LangRes(\"@1candidate_not_found\", \"en\")\r\n        }\r\n\r\n        $TcpAddress = $validator[\"tcp_address\"]\r\n        $ApiAddress = $validator[\"api_address\"]\r\n        $KeyId = $validator[\"candidate_key_id\"]\r\n        $PubKey = $validator[\"pub_key\"]\r\n\r\n        checkKeyId(Int($KeyId))\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action {\r\n        var nodes array new_node map\r\n        new_node[\"tcp_address\"] = $TcpAddress\r\n        new_node[\"api_address\"] = $ApiAddress\r\n        new_node[\"key_id\"] = Str($KeyId)\r\n        new_node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        if Len(nodes) == 0 {\r\n            nodes = appendFirstNode(nodes)\r\n        }\r\n        nodes = Append(nodes, new_node)\r\n\r\n        @1DelegateRefresh()\r\n\r\n        var pars map\r\n        pars[\"Name\"] = \"full_nodes\"\r\n        pars[\"Value\"] = JSONEncode(nodes)\r\n        pars[\"ValidatorId\"] = Str($KeyId)\r\n        pars[\"flag\"] = \"add\"\r\n\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunRemoveValidator",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunRemoveValidator {\r\n    data {\r\n        Index int\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_validators\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n\r\n        var nodesJson string\r\n        nodesJson = SysParamString(\"full_nodes\")\r\n\r\n        if Size(nodesJson) < 100 {\r\n            warning LangRes(\"@1invalid_full_nodes\", \"en\")\r\n        }\r\n\r\n        $nodes = JSONDecode(nodesJson)\r\n        if Len($nodes) <= 3 {\r\n            warning LangRes(\"@1removing_node_impossible\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var nodesNew array i int node map\r\n        while i < Len($nodes){\r\n            node = $nodes[i]\r\n            if i != $Index {\r\n                nodesNew = Append(nodesNew, node)\r\n            } else {\r\n                $KeyId = Str(node[\"key_id\"]) \r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        var pars map\r\n        pars[\"Name\"] = \"full_nodes\"\r\n        pars[\"Value\"] = JSONEncode(nodesNew)\r\n        pars[\"ValidatorId\"] = Str($KeyId)\r\n        pars[\"flag\"] = \"remove\"\r\n\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunTokenRefund",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunTokenRefund {\r\n    data {\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount money\r\n        Note string\r\n    }\r\n\r\n    conditions {\r\n        $victimId = AddressToId($VictimAccount)\r\n        $attackerId = AddressToId($SuspectAccount)\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $victimId}).Row(){\r\n            warning LangRes(\"@1victim_key_invalid\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $attackerId}).Row(){\r\n            warning LangRes(\"@1attacker_key_invalid\", \"en\")\r\n        }\r\n\r\n        if $Amount <= 0 {\r\n            warning LangRes(\"@1amount_invalid\", \"en\")\r\n        }\r\n        if Size($Note) == 0 {\r\n            warning LangRes(\"@1add_description\", \"en\")\r\n        }\r\n\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_tokenrefund\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        TokensLockoutMember(\"KeyId,Value\", $victimId, 1)\r\n        TokensLockoutMember(\"KeyId,Value\", $attackerId, 1)\r\n        \r\n        var pars m map\r\n        m[\"victim_key_id\"] = $victimId\r\n        m[\"attacker_key_id\"] = $attackerId\r\n        m[\"amount\"] = $Amount\r\n        m[\"note\"] = $Note\r\n        m[\"validator_key_id\"] = $key_id\r\n        m[\"blocked_at\"] = $block_time\r\n        m[\"status\"] = 1\r\n        m[\"result\"] = 0\r\n        pars[\"RefundId\"] = DBInsert(\"tokens_refund\", m)\r\n\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams,ContractRejectParams\", $templateId, 14, JSONEncode(pars), JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingTemplateCreate {\r\n    data {\r\n        VotingName string\r\n        TypeParticipants int\r\n        TypeDecision int\r\n        Quorum int\r\n        Rating string \"optional\"\r\n        Volume int \"optional\"       \r\n        CountTypeVoters int \"optional\"\r\n\r\n        Voters string \"optional\"\r\n        Vacancies int \"optional\"\r\n        Candidates string \"optional\"\r\n\r\n        ContractAccept string \"optional\"\r\n        ParamsAccept string \"optional\"\r\n        ContractReject string \"optional\"\r\n        ParamsReject string \"optional\"\r\n\r\n        InitContract string \"optional\"\r\n        ParamsInit string \"optional\"\r\n        OptionalContractAccept string \"optional\"\r\n        OptionalParamsAccept string \"optional\"\r\n        OptionalContractReject string \"optional\"\r\n        OptionalParamsReject string \"optional\"\r\n    }\r\n\r\n\r\n    conditions {\r\n        // check default settings\r\n        if (($TypeDecision == 1 || $TypeDecision == 2) && $CountTypeVoters == 1){\r\n            info LangRes(\"@1voting_type_not_suitable\", \"en\")\r\n        }\r\n        if $Quorum < 1 || $Quorum > 100 {\r\n            warning Sprintf(LangRes(\"@1quorum_range_must_be\", \"en\"), $Quorum)\r\n        }\r\n        if $CountTypeVoters == 0 && $TypeDecision != 1 && $TypeDecision != 2 {\r\n            if $Volume < 1 || $Volume > 100 {\r\n                warning Sprintf(LangRes(\"@1volume_range_must_be\", \"en\"), $Volume)\r\n            }\r\n        }\r\n        if $CountTypeVoters == 1 {\r\n            if $Quorum < 1 {\r\n                info LangRes(\"@1voters_number_less_one\", \"en\")\r\n            }\r\n            $Volume = 0\r\n        }\r\n\r\n        // if type of participant is a role -> check this role\r\n        if $TypeParticipants == 3 && Int($Voters) == 0 {\r\n            warning LangRes(\"@1voters_role_not_found\", \"en\")\r\n        }\r\n\r\n        // if voting for candidates -> check vacancies and candidates\r\n        if $TypeDecision == 1 || $TypeDecision == 2 {\r\n            if Int($Vacancies) < 1 {\r\n                warning LangRes(\"@1vacancies_number_wrong\", \"en\")\r\n            }\r\n            if Int($Candidates) == 0 {\r\n                warning LangRes(\"@1candidate_role_wrong\", \"en\")\r\n            }\r\n        }\r\n\r\n        // if voting for contract -> check the availability of the contract\r\n        if $TypeDecision == 4 {\r\n            if GetContractByName($ContractAccept) == 0 {\r\n                warning LangRes(\"@1accepted_contract_not_found\", \"en\")\r\n            }\r\n            if Size($ContractReject) > 0 {\r\n                if GetContractByName($ContractReject) == 0 {\r\n                    warning LangRes(\"@1rejected_contract_not_found\", \"en\")\r\n                }\r\n            }\r\n        }\r\n\r\n        // if initialization contract is set -> check the availability of the contract\r\n        if Size($InitContract) > 0 {\r\n            if GetContractByName($InitContract) == 0 {\r\n                warning LangRes(\"@1init_contract_not_found\", \"en\")\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var template map\r\n\r\n        template[\"voting->name\"] = $VotingName\r\n        template[\"voting->type\"] = 1\r\n        template[\"voting->volume\"] = $Volume\r\n        template[\"voting->quorum\"] = $Quorum\r\n        if $Rating == \"true\" {\r\n            template[\"voting->rating\"] = 1\r\n        } else {\r\n            template[\"voting->rating\"] = 0\r\n        }\r\n        template[\"voting->count_type_voters\"] = $CountTypeVoters\r\n        template[\"voting->type_decision\"] = $TypeDecision\r\n        template[\"voting->type_participants\"] = $TypeParticipants\r\n\r\n        template[\"subject->candidates\"] = $Candidates\r\n        template[\"subject->vacancies\"] = $Vacancies\r\n        template[\"subject->voters\"] = $Voters\r\n        template[\"subject->contract_accept\"] = $ContractAccept\r\n        template[\"subject->contract_reject\"] = $ContractReject\r\n\r\n        template[\"optional->contract_accept\"] = $OptionalContractAccept\r\n        template[\"optional->contract_reject\"] = $OptionalContractReject\r\n        template[\"optional->init_contract\"] = $InitContract\r\n        template[\"optional->contract_accept_params\"] = $OptionalParamsAccept\r\n        template[\"optional->contract_reject_params\"] = $OptionalParamsReject\r\n        template[\"optional->init_contract_params\"] = $ParamsInit\r\n\r\n        template[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1voting_templates\", template)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingRunVes",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingRunVes {\r\n    data {\r\n        EcosystemId int\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $templateId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": \"voting_template_ves\", \"ecosystem\": $ecosystem_id}).One(\"value\"))\r\n        if $templateId == 0 {\r\n            warning LangRes(\"@1template_id_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var pars map\r\n        pars[\"EcosystemId\"] = $EcosystemId\r\n        @1VotingTemplateRun(\"TemplateId,Duration,ContractAcceptParams\", $templateId, 14, JSONEncode(pars))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplatesInstall",
            "Conditions": "ContractConditions(\"@1AdminCondition\")",
            "Value": "contract VotingTemplatesInstall {\r\n    data {\r\n        fill_ids string \"optional\"\r\n    }\r\n\r\n    func applyTemplate(m map, param string) {\r\n        var templateId paramId int\r\n        templateId = DBInsert(\"@1voting_templates\", m)\r\n\r\n        if $fill_ids == \"yes\" {\r\n            paramId = Int(DBFind(\"@1app_params\").Where({\"app_id\": $app_id, \"name\": param, \"ecosystem\": $ecosystem_id}).One(\"id\"))\r\n            if paramId > 0 {\r\n                @1EditAppParam(\"Id,Value\", paramId, templateId)\r\n            }\r\n        }\r\n    }\r\n\r\n    func getRoleId(name string) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    func installSystem() {\r\n        var template map\r\n\r\n        // Sysparam\r\n        template[\"voting->name\"] = \"Voting for Platform Parameter\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consensusRoleId\r\n        template[\"subject->contract_accept\"] = \"@1UpdateSysParam\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_platformparams\")\r\n\r\n        // Validator\r\n        template[\"voting->name\"] = \"Voting for Validator\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consensusRoleId\r\n        template[\"subject->contract_accept\"] = \"@1UpdateSysParam\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"VotingValidatorAccept\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_validators\")\r\n\r\n        // Valued ecosystem\r\n        template[\"voting->name\"] = \"Voting for Valued Ecosystem\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consensusRoleId\r\n        template[\"subject->contract_accept\"] = \"VotingVesAccept\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_ves\")\r\n\r\n        // Token refund\r\n        template[\"voting->name\"] = \"Voting for Token Refund\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consensusRoleId\r\n        template[\"subject->contract_accept\"] = \"TokensRefundAccept\"\r\n        template[\"subject->contract_reject\"] = \"TokensRefundReject\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_tokenrefund\")\r\n\r\n        // Change parameter of the ecosystem\r\n        template[\"voting->name\"] = \"Voting for Ecosystem Parameter\"\r\n        template[\"voting->type\"] = 2\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 75\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 4\r\n        template[\"voting->type_participants\"] = 3\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = $consensusRoleId\r\n        template[\"subject->contract_accept\"] = \"@1EditParameter\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = 1\r\n        applyTemplate(template, \"voting_template_ecosysparams\")\r\n    }\r\n\r\n    func installCustom() {\r\n        var template map\r\n\r\n        // A decision by a simple majority of votes\r\n        template[\"voting->name\"] = \"Voting for Decision (simple majority of votes)\"\r\n        template[\"voting->type\"] = 1\r\n        template[\"voting->volume\"] = 70\r\n        template[\"voting->quorum\"] = 51\r\n        template[\"voting->rating\"] = 0\r\n        template[\"voting->count_type_voters\"] = 0\r\n        template[\"voting->type_decision\"] = 3\r\n        template[\"voting->type_participants\"] = 1\r\n        template[\"subject->candidates\"] = 0\r\n        template[\"subject->vacancies\"] = 0\r\n        template[\"subject->voters\"] = 0\r\n        template[\"subject->contract_accept\"] = \"\"\r\n        template[\"subject->contract_reject\"] = \"\"\r\n        template[\"optional->contract_accept\"] = \"\"\r\n        template[\"optional->contract_reject\"] = \"\"\r\n        template[\"optional->init_contract\"] = \"\"\r\n        template[\"optional->contract_accept_params\"] = \"\"\r\n        template[\"optional->contract_reject_params\"] = \"\"\r\n        template[\"optional->init_contract_params\"] = \"\"\r\n        template[\"ecosystem\"] = $ecosystem_id\r\n        applyTemplate(template, \"voting_template_decision\")\r\n    }\r\n\r\n    conditions {\r\n        $app_id = Int(DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"Basic\"}).One(\"id\"))\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        $consensusRoleId = getRoleId(\"role_consensus\")\r\n        $validatorRoleId = getRoleId(\"role_validator\")\r\n    }\r\n\r\n    action {\r\n        var arr_templates array count_templates int\r\n        arr_templates = DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id})\r\n        count_templates = Len(arr_templates)\r\n\r\n        if count_templates == 0 {\r\n            if $ecosystem_id == 1 {\r\n                installSystem()\r\n            }\r\n            installCustom()      \r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionReject",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingDecisionReject {\r\n    data {\r\n        votingID int\r\n        RoleId int\r\n    }\r\n\r\n    func closeNotification() {\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->role_id\": $RoleId, \"page_params->voting_id\": $votingID, \"closed\": 0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            @1NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"@1notifications\").Where({\"ecosystem\": $ecosystem_id, \"recipient->member_id\": $key_id, \"page_params->voting_id\": $votingID, \"closed\": 0}).One(\"id\"))\r\n            if id > 0 {\r\n                @1NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $INVALID = 1\r\n        $WAITING = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n\r\n        $voting = DBFind(\"@1votings\").Where({\"ecosystem\": $ecosystem_id, \"id\": $votingID}).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended\").Row()\r\n        if !$voting {\r\n            warning LangRes(\"@1voting_not_found\", \"en\")\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3 {\r\n            if $voting[\"voting.role_id\"] != $RoleId{\r\n                warning LangRes(\"@1voting_role_incorrect\", \"en\")\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED || $block_time > Int($voting[\"date_ended\"]) {\r\n            warning LangRes(\"@1voting_expired_can_not_vote\", \"en\")\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning LangRes(\"@1voting_not_started\", \"en\")\r\n        }\r\n        $subject = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID}).Columns(\"id,number_accept,results->rating_accepted,results->rating_rejected\").Row()\r\n        if !$subject {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n\r\n        if Int($voting[\"voting.type_participants\"]) != 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": $key_id, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            $participant = DBFind(\"@1votings_participants\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $votingID, \"member->member_id\": 0, \"member->role_id\": $RoleId, \"decision\": 0}).Columns(\"id,rating\").Row()\r\n        }\r\n        if !$participant {\r\n            warning LangRes(\"@1voting_not_participant\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if Int($voting[\"voting.type_participants\"]) == 5 {\r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"member->member_id\": $key_id, \"role->id\": $RoleId, \"deleted\": 0}).One(\"id\") {\r\n                warning LangRes(\"@1voting_not_participant\", \"en\")\r\n            } else {\r\n                var member map\r\n                member[\"member_id\"] = $key_id\r\n                member[\"member_name\"] = IdToAddress($key_id)\r\n                member[\"role_id\"] = $RoleId\r\n                var member_json string\r\n                member_json = JSONEncode(member)\r\n                DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), {\"member\":member_json})\r\n            }\r\n        }\r\n\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var m map\r\n            m[\"decision_date\"] = $block_time\r\n            m[\"decision\"] = -1\r\n            DBUpdate(\"@1votings_participants\", Int($participant[\"id\"]), m)\r\n\r\n            var p map\r\n            var rating_accepted rating_rejected summ_rating int\r\n            rating_accepted = Int($subject[\"results.rating_accepted\"])\r\n            rating_rejected = Int($subject[\"results.rating_rejected\"]) + Int($participant[\"rating\"])\r\n            summ_rating = rating_accepted + rating_rejected\r\n            var percent_accepted percent_rejected int\r\n            percent_accepted = (Float(rating_accepted)*Float(100))/Float(summ_rating)\r\n            percent_rejected = (Float(rating_rejected)*Float(100))/Float(summ_rating)\r\n            p[\"results->rating_accepted\"] = rating_accepted\r\n            p[\"results->rating_rejected\"] = rating_rejected\r\n            p[\"results->percent_accepted\"] = percent_accepted\r\n            p[\"results->percent_rejected\"] = percent_rejected\r\n            DBUpdate(\"@1votings_subject\", Int($subject[\"id\"]), p)\r\n\r\n            @1VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingValidatorAccept {\r\n    data {\r\n        TemplateId string\r\n        VotingId string\r\n    }\r\n\r\n    func getRoleId(name string, warn bool) int {\r\n        var rid int\r\n        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))\r\n        if rid == 0 && warn {\r\n            warning Sprintf(LangRes(\"@role_not_set_application_parameter\", \"en\"), name)\r\n        }\r\n        return rid\r\n    }\r\n\r\n    conditions {\r\n        $system_app_id = DBFind(\"@1applications\").Where({\"ecosystem\": $ecosystem_id, \"name\": \"System\"}).One(\"id\")\r\n        var prev string\r\n        prev = $stack[0]\r\n        if Len($stack) > 2 {\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        if prev != \"@1VotingDecisionCheck\" {\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        var appId tId int\r\n        appId = Int(DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        tId = Int(AppParam(appId,\"voting_template_validators\", 1))\r\n        if !DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id, \"id\": tId}).One(\"id\"){\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n        if $TemplateId != tId {\r\n            warning LangRes(\"@1template_incorrect\", \"en\")\r\n        }\r\n\r\n        var oldRoleId roleId int roleName string\r\n        oldRoleId = getRoleId(\"role_candidate_for_validators\", false)\r\n        roleId = getRoleId(\"role_validator\", true)\r\n\r\n        var validator_map map\r\n        validator_map = DBFind(\"@1votings_subject\").Where({\"ecosystem\": $ecosystem_id, \"voting_id\": $VotingId}).Columns(\"subject->contract_accept_params\").One(\"subject->contract_accept_params\")\r\n        if !validator_map {\r\n            warning LangRes(\"@1voting_subject_not_found\", \"en\")\r\n        }\r\n        validator_map = JSONDecode(validator_map)\r\n        $validator_id = Int(validator_map[\"ValidatorId\"])\r\n        $flag = validator_map[\"flag\"]\r\n\r\n        $oldRoleRowId = Int(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0, \"role->id\": oldRoleId, \"member->member_id\": $validator_id}).One(\"id\"))\r\n        $roleRowId = Int(DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"deleted\": 0, \"role->id\": roleId, \"member->member_id\": $validator_id}).One(\"id\"))\r\n\r\n        $roleId = Int(DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": roleId, \"deleted\": 0}).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning LangRes(\"@1validator_role_not_found\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $flag == \"add\" {\r\n            if $oldRoleRowId > 0 {\r\n                @1RolesUnassign(\"row_id\", $oldRoleRowId)\r\n            }\r\n            @1RolesAssign(\"rid,member_id\", $roleId, Int($validator_id))\r\n        }\r\n        if $flag == \"remove\" {\r\n            if $roleRowId > 0 {    \r\n                @1RolesUnassign(\"row_id\", $roleRowId)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingVesAccept",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingVesAccept {\r\n    data {\r\n        EcosystemId int\r\n        TemplateId string\r\n        VotingId string\r\n    }\r\n\r\n    conditions {\r\n        var prev string\r\n        prev = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        if prev != \"@1VotingDecisionCheck\"{\r\n            warning LangRes(\"@1contract_start_votingdecisioncheck_only\", \"en\")\r\n        }\r\n\r\n        var appId tId int\r\n        appId = Int(DBFind(\"@1applications\").Where({\"ecosystem\": 1, \"name\": \"Basic\"}).Columns(\"name,id\").One(\"id\"))\r\n        tId = Int(AppParam(appId, \"voting_template_ves\", 1))\r\n        if !DBFind(\"@1voting_templates\").Where({\"ecosystem\": $ecosystem_id, \"id\": tId}).One(\"id\"){\r\n            warning LangRes(\"@1voting_template_not_found\", \"en\")\r\n        }\r\n        if $TemplateId != tId {\r\n            warning LangRes(\"@1template_incorrect\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"@1ecosystems\", Int($EcosystemId), {\"is_valued\": 1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingWizardBuffer",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingWizardBuffer {\r\n    data {\r\n        load_autosave string \"optional\"\r\n\r\n        voting_name string \"optional\"\r\n        voting_type int \"optional\"\r\n        type_participants int \"optional\"\r\n        type_decision int \"optional\"\r\n\r\n        volume int \"optional\"\r\n        quorum int \"optional\"\r\n        rating string \"optional\"\r\n\r\n        count_type_voters string \"optional\"\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n\r\n        member_participants string \"optional\"\r\n        role_participants string \"optional\"\r\n\r\n        execute_contract string \"optional\"\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n\r\n        text_document string \"optional\"\r\n\r\n        subject_description string \"optional\"\r\n        table_to_written string \"optional\"\r\n        row_id string \"optional\"\r\n        column_name string \"optional\"\r\n        written_value string \"optional\"\r\n\r\n        candidates string \"optional\"\r\n        apply string \"optional\"\r\n        role_id string \"optional\"\r\n        vacancies string \"optional\"\r\n    }\r\n\r\n    action {\r\n        if $load_autosave == \"no\" {\r\n            DBUpdateExt(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}, {\"value\": \"{}\"})\r\n        }\r\n\r\n        var buffer_map old_buffer old_value map\r\n\r\n        old_buffer = DBFind(\"@1buffer_data\").Where({\"key\": \"voting_wizard_buffer\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}).Row()\r\n        if old_buffer {\r\n            old_value = JSONDecode(old_buffer[\"value\"])\r\n        }\r\n\r\n        buffer_map[\"save_time\"] = $block_time\r\n\r\n        if $voting_name {\r\n            buffer_map[\"voting_name\"] = $voting_name\r\n        } elif old_value[\"voting_name\"] {\r\n            buffer_map[\"voting_name\"] = old_value[\"voting_name\"]\r\n        }\r\n        if $voting_type != 0 {\r\n            buffer_map[\"voting_type\"] = $voting_type\r\n        } elif old_value[\"voting_type\"] {\r\n            buffer_map[\"voting_type\"] = old_value[\"voting_type\"]\r\n        }\r\n        if $type_participants != 0 {\r\n            buffer_map[\"type_participants\"] = $type_participants\r\n        } elif old_value[\"type_participants\"] {\r\n            buffer_map[\"type_participants\"] = old_value[\"type_participants\"]\r\n        }\r\n        if $type_decision != 0 {\r\n            buffer_map[\"type_decision\"] = $type_decision\r\n        } elif old_value[\"type_decision\"] {\r\n            buffer_map[\"type_decision\"] = old_value[\"type_decision\"]\r\n        }\r\n        if $volume != 0 {\r\n            buffer_map[\"volume\"] = $volume\r\n        } elif old_value[\"volume\"] {\r\n            buffer_map[\"volume\"] = old_value[\"volume\"]\r\n        }\r\n        if $quorum != 0 {\r\n            buffer_map[\"quorum\"] = $quorum\r\n        } elif old_value[\"quorum\"] {\r\n            buffer_map[\"quorum\"] = old_value[\"quorum\"]\r\n        }\r\n        if $rating {\r\n            buffer_map[\"rating\"] = $rating\r\n        } elif old_value[\"rating\"] {\r\n            buffer_map[\"rating\"] = old_value[\"rating\"]\r\n        }\r\n        if $count_type_voters {\r\n            buffer_map[\"count_type_voters\"] = $count_type_voters\r\n        } elif old_value[\"count_type_voters\"] {\r\n            buffer_map[\"count_type_voters\"] = old_value[\"count_type_voters\"]\r\n        }\r\n        if $description {\r\n            buffer_map[\"description\"] = $description\r\n        } elif old_value[\"description\"] {\r\n            buffer_map[\"description\"] = old_value[\"description\"]\r\n        }\r\n        if $interval {\r\n            buffer_map[\"interval\"] = $interval\r\n        } elif old_value[\"interval\"] {\r\n            buffer_map[\"interval\"] = old_value[\"interval\"]\r\n        }\r\n        if $start_date {\r\n            buffer_map[\"start_date\"] = $start_date\r\n        } elif old_value[\"start_date\"] {\r\n            buffer_map[\"start_date\"] = old_value[\"start_date\"]\r\n        }\r\n        if $start_time {\r\n            buffer_map[\"start_time\"] = $start_time\r\n        } elif old_value[\"start_time\"] {\r\n            buffer_map[\"start_time\"] = old_value[\"start_time\"]\r\n        }\r\n        if $end_date {\r\n            buffer_map[\"end_date\"] = $end_date\r\n        } elif old_value[\"end_date\"] {\r\n            buffer_map[\"end_date\"] = old_value[\"end_date\"]\r\n        }\r\n        if $end_time {\r\n            buffer_map[\"end_time\"] = $end_time\r\n        } elif old_value[\"end_time\"] {\r\n            buffer_map[\"end_time\"] = old_value[\"end_time\"]\r\n        }\r\n        if $member_participants {\r\n            buffer_map[\"member_participants\"] = $member_participants\r\n        } elif old_value[\"member_participants\"] {\r\n            buffer_map[\"member_participants\"] = old_value[\"member_participants\"]\r\n        }\r\n        if $role_participants {\r\n            buffer_map[\"role_participants\"] = $role_participants\r\n        } elif old_value[\"role_participants\"] {\r\n            buffer_map[\"role_participants\"] = old_value[\"role_participants\"]\r\n        }\r\n        if $execute_contract {\r\n            buffer_map [\"execute_contract\"] = $execute_contract\r\n        } elif old_value[\"execute_contract\"] {\r\n            buffer_map[\"execute_contract\"] = old_value[\"execute_contract\"]\r\n        }\r\n        if $contract_accept {\r\n            buffer_map [\"contract_accept\"] = $contract_accept\r\n        } elif old_value[\"contract_accept\"] {\r\n            buffer_map[\"contract_accept\"] = old_value[\"contract_accept\"]\r\n        }\r\n        if $contract_accept_params {\r\n            buffer_map[\"contract_accept_params\"] = $contract_accept_params\r\n        } elif old_value[\"contract_accept_params\"] {\r\n            buffer_map[\"contract_accept_params\"] = old_value[\"contract_accept_params\"]\r\n        }\r\n        if $contract_reject {\r\n            buffer_map[\"contract_reject\"] = $contract_reject\r\n        } elif old_value[\"contract_reject\"] {\r\n            buffer_map[\"contract_reject\"] = old_value[\"contract_reject\"]\r\n        }\r\n        if $contract_reject_params {\r\n            buffer_map[\"contract_reject_params\"] = $contract_reject_params\r\n        } elif old_value[\"contract_reject_params\"] {\r\n            buffer_map[\"contract_reject_params\"] = old_value[\"contract_reject_params\"]\r\n        }\r\n        if $text_document {\r\n            buffer_map[\"text_document\"] = $text_document\r\n        } elif old_value[\"text_document\"] {\r\n            buffer_map[\"text_document\"] = old_value[\"text_document\"]\r\n        }\r\n        if $subject_description {\r\n            buffer_map[\"subject_description\"] = $subject_description\r\n        } elif old_value[\"subject_description\"] {\r\n            buffer_map[\"subject_description\"] = old_value[\"subject_description\"]\r\n        }\r\n        if $table_to_written {\r\n            buffer_map[\"table_to_written\"] = $table_to_written\r\n        } elif old_value[\"table_to_written\"] {\r\n            buffer_map[\"table_to_written\"] = old_value[\"table_to_written\"]\r\n        }\r\n        if $row_id {\r\n            buffer_map[\"row_id\"] = $row_id\r\n        } elif old_value[\"row_id\"] {\r\n            buffer_map[\"row_id\"] = old_value[\"row_id\"]\r\n        }\r\n        if $column_name {\r\n            buffer_map[\"column_name\"] = $column_name\r\n        } elif old_value[\"column_name\"] {\r\n            buffer_map[\"column_name\"] = old_value[\"column_name\"]\r\n        }\r\n        if $written_value {\r\n            buffer_map[\"written_value\"] = $written_value\r\n        } elif old_value[\"written_value\"] {\r\n            buffer_map[\"written_value\"] = old_value[\"written_value\"]\r\n        }\r\n        if $candidates {\r\n            buffer_map[\"candidates\"] = $candidates\r\n        } elif old_value[\"candidates\"] {\r\n            buffer_map[\"candidates\"] = old_value[\"candidates\"]\r\n        }\r\n        if $apply {\r\n            buffer_map[\"apply\"] = $apply\r\n        } elif old_value[\"apply\"] {\r\n            buffer_map[\"apply\"] = old_value[\"apply\"]\r\n        }\r\n        if $role_id {\r\n            buffer_map[\"role_id\"] = $role_id\r\n        } elif old_value[\"role_id\"] {\r\n            buffer_map[\"role_id\"] = old_value[\"role_id\"]\r\n        }\r\n        if $vacancies {\r\n            buffer_map[\"vacancies\"] = $vacancies\r\n        } elif old_value[\"vacancies\"] {\r\n            buffer_map[\"vacancies\"] = old_value[\"vacancies\"]\r\n        }\r\n\r\n        if old_buffer {\r\n            DBUpdateExt(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}, {\"value\": buffer_map})\r\n        } else {\r\n            DBInsert(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id, \"value\": buffer_map})\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingWizardCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract VotingWizardCreate {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        volume int \"optional\"\r\n        quorum int\r\n        rating string \"optional\"\r\n\r\n        count_type_voters string \"optional\"\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n\r\n        member_participants string \"optional\"\r\n        role_participants string \"optional\"\r\n\r\n        execute_contract string \"optional\"\r\n        contract_accept string \"optional\"\r\n        contract_accept_params string \"optional\"\r\n        contract_reject string \"optional\"\r\n        contract_reject_params string \"optional\"\r\n\r\n        text_document string \"optional\"\r\n\r\n        subject_description string \"optional\"\r\n        table_to_written string \"optional\"\r\n        row_id string \"optional\"\r\n        column_name string \"optional\"\r\n        written_value string \"optional\"\r\n\r\n        candidates string \"optional\"\r\n        apply string \"optional\"\r\n        role_id string \"optional\"\r\n        vacancies string \"optional\"\r\n    }\r\n\r\n    func sendInvites(voting int, participants string, type string) {\r\n        var participants_list array i current_participant int m map\r\n        participants_list = Split(participants, \",\")\r\n        i = 0\r\n        while i < Len(participants_list) {\r\n            current_participant = Int(participants_list[i])\r\n            if type == \"member\" || Len(DBFind(\"@1roles_participants\").Where({ecosystem: $ecosystem_id, \"role->id\": current_participant, deleted:0})) != 0 {\r\n                m[\"votingID\"] = voting\r\n                m[\"var_id\"] = current_participant\r\n                CallContract(\"@1VotingInvite\", m)\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n\r\n    action {\r\n        var create_map subject_map invite_map m map votingID i int\r\n\r\n        create_map[\"voting_name\"] = $voting_name\r\n        create_map[\"voting_type\"] = $voting_type\r\n        create_map[\"type_participants\"] = $type_participants\r\n        create_map[\"type_decision\"] = $type_decision\r\n        create_map[\"volume\"] = $volume\r\n        create_map[\"quorum\"] = $quorum\r\n        create_map[\"rating\"] = $rating\r\n        create_map[\"count_type_voters\"] = $count_type_voters\r\n        create_map[\"description\"] = $description\r\n        create_map[\"start_date\"] = $start_date\r\n        create_map[\"start_time\"] = $start_time\r\n        create_map[\"end_date\"] = $end_date\r\n        create_map[\"end_time\"] = $end_time\r\n\r\n        votingID = CallContract(\"@1VotingCreate\", create_map)\r\n\r\n        subject_map[\"votingID\"] = votingID\r\n\r\n        if $execute_contract == \"yes\" {\r\n            subject_map[\"contract_accept\"] = $contract_accept\r\n            subject_map[\"contract_accept_params\"] = $contract_accept_params\r\n            subject_map[\"contract_reject\"] = $contract_reject\r\n            subject_map[\"contract_reject_params\"] = $contract_reject_params\r\n        }\r\n\r\n        if $type_decision == 1 && $apply == 1 {\r\n\r\n            m[\"votingID\"] = votingID\r\n            m[\"memberID\"] = 0\r\n            CallContract(\"@1VotingSubjectCandidates\", m)\r\n\r\n            subject_map[\"roleID\"] = Int($role_id)\r\n            subject_map[\"vacancies\"] = Int($vacancies)\r\n            CallContract(\"@1VotingSubjectSettings\", subject_map)\r\n\r\n        } elif $type_decision == 2 && Str($candidates) != \"0\" {\r\n\r\n            var candidates_list array\r\n            candidates_list = Split($candidates, \",\")\r\n            i = 0\r\n            while i < Len(candidates_list) {\r\n                m[\"votingID\"] = votingID\r\n                m[\"memberID\"] = Int(candidates_list[i])\r\n                CallContract(\"@1VotingSubjectCandidates\", m)\r\n                i = i + 1\r\n            }\r\n\r\n            subject_map[\"roleID\"] = Int($role_id)\r\n            subject_map[\"vacancies\"] = Int($vacancies)\r\n            CallContract(\"@1VotingSubjectSettings\", subject_map)\r\n\r\n        } elif $type_decision == 3 {\r\n\r\n            subject_map[\"text_document\"] = $text_document\r\n            CallContract(\"@1VotingSubjectDocument\", subject_map)\r\n            \r\n        } elif $type_decision == 4 {\r\n            CallContract(\"@1VotingSubjectContract\", subject_map)\r\n        }\r\n\r\n        if Str($member_participants) != \"0\" {\r\n            sendInvites(votingID, $member_participants, \"member\")\r\n        } elif Str($role_participants) != \"0\" {\r\n            sendInvites(votingID, $role_participants, \"role\")\r\n        }\r\n        DBUpdateExt(\"@1buffer_data\", {\"key\": \"voting_wizard_buffer\", \"member_id\": $key_id, \"ecosystem\": $ecosystem_id}, {\"value\": \"{}\"})\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}