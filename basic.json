{
    "name": "Basic application",
    "conditions": "ContractConditions(\"MainCondition\")",
    "data": [
        {
            "Name": "basic_paginator",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(GetVar(per_page)){}.Else{\n    SetVar(per_page,25)\n}\n\nIf(And(GetVar(this_page),GetVar(table))){\n    If(GetVar(Where)){\n        DBFind(#table#).Where(#Where#).Count(table_count)\n    }.Else{\n        DBFind(#table#).Count(table_count)\n    }\n    If(#table_count#>#per_page#){\n        If(#paginator_page#>0){\n            SetVar(prev_paginator_page,Calculate(#paginator_page#-1)\n        }.Else{\n            SetVar(paginator_page,0).(prev_paginator_page,0)\n        }\n        SetVar(paginator_offset,Calculate(#paginator_page#*#per_page#)).(last_paginator_page,Calculate(#table_count#/#per_page#)).(next_paginator_page,#last_paginator_page#)\n        If(#table_count#>Calculate(#paginator_offset#+#per_page#)){\n            SetVar(next_paginator_page,Calculate(#paginator_page#+1)\n        }\n        Div(button-group){\n            If(#paginator_page#>0){\n                Button(Body:\"1\", Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=0\")\n            }.Else{\n                Button(Body:\"1\", Class:btn btn-default disabled)\n            }\n            If(#paginator_page#>1){\n                Button(Body:Calculate(#prev_paginator_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=#prev_paginator_page#\")\n            }\n            If(And(#paginator_page#>0,#paginator_page#<#last_paginator_page#)){\n                Button(Body:Calculate(#paginator_page#+1), Class:btn btn-default disabled)\n            }\n            If(#next_paginator_page#<#last_paginator_page#){\n                Button(Body:Calculate(#next_paginator_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=#next_paginator_page#\")\n            }\n            If(#paginator_page#<#last_paginator_page#){\n                Button(Body:Calculate(#last_paginator_page#+1), Class:btn btn-default, Page:#this_page#, PageParams: \"paginator_page=#last_paginator_page#\")\n            }.ElseIf(#last_paginator_page#>0){\n                Button(Body:Calculate(#last_paginator_page#+1), Class:btn btn-default disabled)\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_roles",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\nSetVar(role_admin, AppParam(App: #application_id#, Name: role_admin))\nSetTitle($role_notifics$)\nIf(And(#role_id#==#role_admin#,#ecosystem_id#==1)){\n    DBFind(ecosystems).Ecosystem(1).Count(ecos_count)\n    If(#ecos_count#>1){\n        AddToolButton(Title: $broadcast_send$, Page: notifications_broadcast, Icon: icon-plus)\n    }\n}\nAddToolButton(Title: $send$, Page: notifications_roles_send, Icon: icon-plus)\nIf(GetVar(Search)){\n    SetVar(Where,{\"notification->type\":2, \"recipient->role_name\":{\"$like\": #Search#}, \"recipient->role_id\":#role_id#})\n}.Else{\n    SetVar(Where, {\"notification->type\":2, \"recipient->role_id\":#role_id#}).(Search,)\n}\n\nDBFind(notifications,src_notifications).Where(#Where#).Order([{closed: \"1\"},{id: \"-1\"}]).Limit(20).Columns(\"id,recipient->role_id,recipient->role_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,date_start_processing,processing_info->member_name,closed\").Custom(_id){\n    If(#closed# == 0){\n        SetVar(style_text,\"text-normal\").(style_link,\"text-primary\")\n    }.Else{\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n    }\n    Span(Class: #style_text#, Body: #id#)\n}.Custom(_recipient){\n    LinkPage(Class: #style_link# t5 text-bold, Page: roles_view, PageParams: \"v_role_id=#recipient.role_id#\"){\n        If(#recipient.image_id#>0){\n            Image(Src: Binary().ById(#recipient.image_id#) \"#img_data#\", Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n            #recipient.role_name#\n        }.Else{\n            Div(){\n                Span(Em(Class: fa icon-settings fa-2x)).Style(margin-right:10px;)\n                Span(#recipient.role_name#)\n            }.Style(display:flex; align-items:center;)\n        }\n    }\n}.Custom(_sender){\n    If(#sender.type#==1){\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){#sender.member_name#}\n    }\n    If(#sender.type#==2){\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){#sender.role_name#}\n    }\n}.Custom(_icon){\n    Span(Class: fa #notification.icon# fa-2x #style_text#)\n}.Custom(_page){\n    LinkPage(Class: #style_link# t5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n        #page_name#\n    }\n}.Custom(_date){\n    Div(#style_text# t6){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n    Div(#style_text# t6){DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\")}\n}.Custom(_processing){\n    Div(Class: #style_text# t6){\n        If(#date_start_processing# == NULL){\n            $not_started$\n        }.Else{\n            Span(LangRes(started), mr-sm) #processing_info.member_name# \n            Span(LangRes(at), mr-sm)\n            DateTime(DateTime: #date_start_processing#, Format: \"DD.MM.YYYY HH:MI\")\n        }\n    }\n}.Custom(_status){\n    If(#closed# == 0){\n        Span(Class: #style_text#){\n            If(#date_start_processing# == NULL){\n                LangRes(active)\n            }.Else{\n                LangRes(processing)\n            }\n        }\n    }.Else{\n        Span(Class: #style_text#, Body: LangRes(closed))\n    }\n}.Custom(_actions){\n    Div(text-right){\n        If(#closed# == 0){\n            If(#date_start_processing# == NULL){\n                Button(Class: btn btn-default fa fa-play, Contract: NotificationsProcess, Params: \"notific_id=#id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }.Else{\n                Button(Class: btn btn-default fa fa-trash, Contract: NotificationsClose, Params: \"notific_id=#id#\", Page: notifications_list, PageParams: \"type=1\").Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }\n}\n\nForm(panel panel-primary){\n    Div(panel-body){\n        Div(row){\n            Div(col-md-12){\n                Div(input-group){\n                    Div(input-group-addon){\n                        LangRes(recipient)\n                    }\n                    Input(Name: Search, Value: #Search#)\n                    Div(input-group-btn){\n                        Button(Class: btn btn-default fa fa-search, Page: notifications_list, PageParams: \"Search=Val(Search),type=1\")\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-12){\n                Table(Source: src_notifications, Columns: \"$id$=_id,$icon$=_icon,$recipient$=_recipient,$page_name$=_page,$sender$=_sender,$processing$=_processing,$sent$/$сlosed$=_date,$status$=_status,=_actions\")\n            }\n        }\n        If(GetVar(Search)){\n            Div(row){\n                Div(col-md-12 mt-lg){\n                    Div(text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_list, PageParams: \"type=1\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "notifications_single",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\nSetVar(role_admin, AppParam(App: #application_id#, Name: role_admin))\nSetTitle($single_notifics$)\nIf(And(#role_id#==#role_admin#,#ecosystem_id#==1)){\n    DBFind(ecosystems).Ecosystem(1).Count(ecos_count)\n    If(#ecos_count#>1){\n        AddToolButton(Title: $broadcast_send$, Page: notifications_broadcast, Icon: icon-plus)\n    }\n}\nAddToolButton(Title: $send$, Page: notifications_single_send, Icon: icon-plus)\nIf(GetVar(Search)){\n    SetVar(Where,{\"notification->type\":1, \"recipient->member_name\":#Search#, \"recipient->member_id\":#key_id#})\n}.Else{\n    SetVar(Where,{\"notification->type\":1, \"recipient->member_id\":#key_id#}).(Search,)\n}\n\nDBFind(notifications,src_notifications).Where(#Where#).Order([{closed:\"1\"}, {id:\"-1\"}]).Limit(20).Columns(\"id,recipient->member_id,recipient->member_name,recipient->image_id,sender->type,sender->member_id,sender->member_name,sender->role_id,sender->role_name,notification->icon,page_name,page_params,date_created,date_closed,closed\").Custom(custom_id){\n    If(#closed# == 0){\n        SetVar(Name: style_text, Value: \"text-normal\")\n        SetVar(Name: style_link, Value: \"text-primary\")\n    }.Else{\n        SetVar(Name: style_text, Value: \"text-muted\")\n        SetVar(Name: style_link, Value: \"text-muted\")\n    }\n    Span(Class: #style_text#, Body: #id#)\n}.Custom(custom_recipient){\n    LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#recipient.member_id#\"){\n        If(#recipient.image_id#>0){\n            Image(Src: Binary().ById(#recipient.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n            Span(#recipient.member_name#)\n        }.Else{\n            Div(){\n                Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                Span(#recipient.member_name#)\n            }.Style(display:flex; align-items:center;)\n        }\n    }\n}.Custom(custom_sender){\n    If(#sender.type#==1){\n        LinkPage(Class: #style_link# h5 text-bold, Page: profile_view, PageParams: \"v_member_id=#sender.member_id#\"){\n            Span(Body: #sender.member_name#)\n        }\n    }\n    If(#sender.type#==2){\n        LinkPage(Class: #style_link# h5 text-bold, Page: roles_view, PageParams: \"v_role_id=#sender.role_id#\"){\n            Span(Body: #sender.role_name#)\n        }\n    }\n}.Custom(custom_icon){\n    Em(Class: fa #notification.icon# fa-2x #style_text#)\n}.Custom(custom_page){\n    LinkPage(Class: #style_link# h5 text-bold, Page: #page_name#, PageParams: \"notific_id=#id#\"){\n        Span(Body: #page_name#)\n    }\n}.Custom(custom_date){\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n    Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_closed#, Format: \"DD.MM.YYYY HH:MI\"))\n}.Custom(custom_status){\n    If(#closed# == 0){\n        Span(Class: #style_text#, Body: LangRes(active))\n    }.Else{\n        Span(Class: #style_text#, Body: LangRes(сlosed))\n    }\n}.Custom(actions){\n    Div(pull-right){\n        If(#closed# == 0){\n            Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: NotificationsClose, Params: \"notific_id=#id#\", Page: notifications_list).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n        }\n    }\n}\n\nForm(panel panel-primary){\n    Div(panel-body){\n        Div(row){\n            Div(col-md-12){\n                Div(input-group){\n                    Div(input-group-addon){\n                        LangRes(recipient)\n                    }\n                    Input(Name: Search, Value: #Search#)\n                    Div(input-group-btn){\n                        Button(Class: btn btn-default fa fa-search, Page: notifications_list, PageParams: \"Search=Val(Search)\")\n                    }\n                }\n            }\n        }\n        Div(row){\n            Div(col-md-12){\n                Table(Source: src_notifications, Columns: \"$id$=custom_id,$icon$=custom_icon,$recipient$=custom_recipient,$page_name$=custom_page,$sender$=custom_sender,$sent$/$сlosed$=custom_date,$status$=custom_status,=actions\")\n            }\n        }\n        If(GetVar(Search)){\n            Div(row){\n                Div(col-md-12 mt-lg){\n                    Div(text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: notifications_list)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Type": "blocks"
        },
        {
            "Name": "admin_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:Platform parameters, Page:@1sysparams_list, Icon:\"fa icon-settings\")",
            "Type": "menu"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:Wallet, Page:@1profile_view, Icon:\"icon-wallet\")\r\nMenuItem(Title:Notifications, Page:@1notifications_list, Icon:\"icon-flag\")\r\nMenuItem(Title:Membership, Page:@1members_list, Icon:\"fa icon-people\")\r\nMenuItem(Title:Ecosystems, Page:@1ecosystems_list, Icon:\"fa fa-list-ul\")\r\nMenuGroup(Title:Admin, Icon:\"icon-arrow-right\"){\r\n\tMenuItem(Title:Roles, Page:@1roles_list, Icon:\"fa fa-list-ul\")\r\n\tMenuItem(Title:Voting, Page:@1voting_list, Icon:\"fa fa-edit\")\r\n    MenuItem(Title:Candidate for validators, Page:@1sysparams_candidates_list, Icon:\"icon-list\")\r\n    MenuItem(Title:Tokens refund list, Page:@1tokenrefund_list, Icon:\"icon-list\")\r\n}",
            "Type": "menu"
        },
        {
            "Name": "catalog_ecosystems",
            "Columns": "[{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"image_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"flag_free\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"url_address\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_info\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"ecosystem_name\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"ecosystem_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ecosystem_number\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "power_of_attorney",
            "Columns": "[\n\t{\n\t\t\"conditions\":\"true\",\n\n\t\t\"name\":\"delete\",\n\n\t\t\"type\":\"character\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\n\t\t\"name\":\"params\",\n\n\t\t\"type\":\"json\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"address\",\n\t\t\"type\":\"number\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"date_expiration\",\n\t\t\"type\":\"datetime\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"rid\",\n\t\t\"type\":\"number\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"type\",\n\t\t\"type\":\"number\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"date_last_transaction\",\n\t\t\"type\":\"datetime\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"contract\",\n\t\t\"type\":\"varchar\"\n\t},\n\t{\n\t\t\"conditions\":\"true\",\n\t\t\"name\":\"key_id_attorney\",\n\t\t\"type\":\"number\"\n\t}\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "sysparams_candidate",
            "Columns": "[\r\n    {\r\n        \"name\": \"commission_address\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"comment\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"deleted\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"host_ip\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"description\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"date_created\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"commission_pub\",\r\n        \"type\": \"varchar\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"candidate_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "tokenrefund",
            "Columns": "[\r\n    {\r\n        \"name\": \"victim_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"attacker_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"amount\",\r\n        \"type\": \"money\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"note\",\r\n        \"type\": \"text\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"validator_key_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"blocked_at\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"voting_id\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"result\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"status\",\r\n        \"type\": \"number\",\r\n        \"conditions\": \"true\"\r\n    },\r\n    {\r\n        \"name\": \"closed_at\",\r\n        \"type\": \"datetime\",\r\n        \"conditions\": \"true\"\r\n    }\r\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "voting_templates",
            "Columns": "[\n    {\n        \"name\": \"voters\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"candidates\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_participants\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"init_contract\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"title\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_decision\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"quorum\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"subject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_voting\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"volume\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"type_id\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"vacancies\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_accept\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"accept_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"contract_reject\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"reject_params\",\n        \"type\": \"varchar\",\n        \"conditions\": \"true\"\n    }\n]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"false\",\"new_column\":\"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings",
            "Columns": "[\n    {\n        \"name\": \"flags\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"voting\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"creator\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"deleted\",\n        \"type\": \"number\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"optional\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"progress\",\n        \"type\": \"json\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_ended\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"date_started\",\n        \"type\": \"datetime\",\n        \"conditions\": \"true\"\n    },\n    {\n        \"name\": \"status\",\n        \"type\": \"number\",\n        \"conditions\": \"ContractAccess(\\\"VotingCreate\\\", \\\"VotingStatusUpdate\\\", \\\"VotingUpdate\\\")\"\n    }\n]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_participants",
            "Columns": "[{\"name\":\"member\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"decision_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"ContractAccess(\\\"VotingInvite\\\")\", \"update\": \"ContractAccess(\\\"VotingDecisionReject\\\",\\\"VotingDecisionAccept\\\",\\\"VotingCandidateAccept\\\")\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "votings_subject",
            "Columns": "[{\"name\":\"subject\",\"type\":\"json\",\"conditions\":\"true\"},{\"name\":\"voting_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"number_accept\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "catalog_ecosystems_freetype",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "APL_not_required,APL_required",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "public_org,business,finance",
            "Type": "app_params"
        },
        {
            "Name": "first_node",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "{\"api_address\":\"\",\"key_id\":\"\",\"public_key\":\"\",\"tcp_address\":\"\"}",
            "Type": "app_params"
        },
        {
            "Name": "investors_number",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "notification_closure",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,multiple",
            "Type": "app_params"
        },
        {
            "Name": "notification_icon",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Type": "app_params"
        },
        {
            "Name": "notification_sender",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "notification_sender_member,notification_sender_role",
            "Type": "app_params"
        },
        {
            "Name": "notification_type",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "single,role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role,system_role",
            "Type": "app_params"
        },
        {
            "Name": "roles_types_selection",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "assigned_role,elective_role",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_result",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_result1,tokenrefund_result2,tokenrefund_result3",
            "Type": "app_params"
        },
        {
            "Name": "tokenrefund_status",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "tokenrefund_status1,tokenrefund_status2,tokenrefund_status3",
            "Type": "app_params"
        },
        {
            "Name": "type_voting",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "type_voting_custom,type_voting_system",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_decisions",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "candidate_requests,candidate_manual,document,database_write,contract_run",
            "Type": "app_params"
        },
        {
            "Name": "type_voting_participants",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "everybody,manual_add,role,roles list (all participants vote),role list (one participant from each role votes)",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "waiting,valid,started,finished,invalid",
            "Type": "app_params"
        },
        {
            "Name": "voting_statuses_classes",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "text-warning,text-success,text-success,text-muted,text-danger",
            "Type": "app_params"
        },
        {
            "Name": "voting_sysparams_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_tokenrefund_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_validators_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "voting_ves_template_id",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "0",
            "Type": "app_params"
        },
        {
            "Name": "catalog_ecosystems_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(appication)\r\n    DBFind(ecosystems,src_num)\r\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Source: src_type)\r\n    AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Source: src_freetype)\r\n    Data(section1, \"name,type,res,req,src\"){\r\n        Ecosystem_number,select_validate,ecosystem,*,src_num\r\n        Ecosystem_name,input,catalog_ecosystems_name,*,\r\n        Ecosystem_type,select,catalog_ecosystems_type,*,src_type\r\n    }\r\n    Data(section2, \"name,type,res,req,src\"){\r\n        Flag_free,radio,catalog_ecosystems_freetype,*,src_freetype\r\n    }\r\n    Data(section3, \"name,type,res,req,src\"){\r\n        Description,textarea,catalog_ecosystems_description,*,\r\n        Conditions,textarea,catalog_ecosystems_conditions,*,\r\n    }\r\n    Data(section4, \"name,type,res,req,src\"){\r\n        Vde_page,input,vde_page,,\r\n        Vde_form_address,input,vde_form_desc,,\r\n    }\r\n    Data(section5, \"name,type,res,req,src\"){\r\n        Web_page,input,web_page,,\r\n        Web_form_address,input,web_form_desc,,\r\n    }\r\n    Data(section6, \"name,type,res,req,src\"){\r\n        Email,input,catalog_ecosystems_contact_email,,\r\n        Phone,input,catalog_ecosystems_contact_phone,,\r\n    }\r\n    Data(sections, \"section_name\"){\r\n        section1\r\n        section2\r\n        section3\r\n        section4\r\n        section5\r\n        section6\r\n    }\r\n\r\n    SetTitle($catalog_ecosystems_form$)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, @1catalog_ecosystems_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $catalog_ecosystems_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    ForList(sections){\r\n                        Div(list-group-item){\r\n                            ForList(#section_name#){\r\n                                Div(row){\r\n                                    Div(col-md-5 mt-sm text-right){\r\n                                        Label(){\r\n                                            Span(Body: LangRes(#res#))\r\n                                            If(#req#==*){\r\n                                                Span(Class: text-danger, Body:*)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    Div(col-md-7 mb-sm text-left){\r\n                                        If(#type#==select_validate){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id).Validate(required)\r\n                                            InputErr(Name: #name#, required: need)\r\n                                        }\r\n                                        If(#type#==select){\r\n                                            Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                        If(#type#==image){\r\n                                            ImageInput(Name: #name#, Width: 300, Ratio: 2/1)\r\n                                        }\r\n                                        If(#type#==input){\r\n                                            Input(Name: #name#)\r\n                                        }\r\n                                        If(#type#==textarea){\r\n                                            Input(Name: #name#, Type:textarea)\r\n                                        }\r\n                                        If(#type#==radio){\r\n                                            RadioGroup(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1catalog_ecosystems_list)\r\n                    Button(Contract: CatalogAddEcosystem, Class: btn btn-primary pull-right, Page: @1catalog_ecosystems_list, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(appication)\r\n    SetTitle($catalog_ecosystems$)\r\n    AddToolButton(Title: $add$, Page: @1catalog_ecosystems_create, Icon: icon-plus)\r\n\r\n    SetVar(Where,{deleted:0})\r\n    If(#param_flag_free#==0){\r\n        SetVar(Where,{deleted:0})\r\n    }.ElseIf(#param_flag_free#==1){\r\n        SetVar(Where,{deleted:0, flag_free:1})\r\n    }.ElseIf(#param_flag_free#==2){\r\n        SetVar(Where,{deleted:0, flag_free:2})\r\n    }.Else{\r\n        SetVar(param_flag_free,0)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-12 text-left){\r\n            Div(btn-group){\r\n                If(#param_flag_free#==0){\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-align-justify) $all$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=0\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==1){\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-user-o) $not_need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=1\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n                If(#param_flag_free#==2){\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\r\n                }.Else{\r\n                    Span(Button(Body: Em(Class: fa fa-money) $need_fuel$, Page: @1catalog_ecosystems_list, PageParams: \"param_flag_free=2\", Class: btn bg-gray)).Style(margin-left:5px;)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            DBFind(catalog_ecosystems,src_catalog).Where(#Where#).Order(\"ecosystem_number\").Columns(\"id,ecosystem_number,ecosystem_name,ecosystem_type,image_id,flag_free\").Custom(custom_name){\r\n                LinkPage(Page: @1catalog_ecosystems_view, PageParams: \"v_id=#id#\"){\r\n                    Span(Class: h5 text-bold, Body: #ecosystem_name#)\r\n                }\r\n            }.Custom(custom_type){\r\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_type, Index: #ecosystem_type#))\r\n            }.Custom(custom_free){\r\n                Span(AppParam(App:#appication_id#, Name: catalog_ecosystems_freetype, Index: #flag_free#))\r\n            }.Custom(custom_ecosystem){\r\n                Span(Class: h5, Body: #ecosystem_number#)\r\n            }\r\n\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_catalog, Columns:\"$id$=custom_ecosystem,$logo$=custom_logo,$name$=custom_name,$type$=custom_type,$freetype$=custom_free\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "catalog_ecosystems_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(app)\r\n    DBFind(catalog_ecosystems,src_catalog).WhereId(#v_id#).Columns(\"id,ecosystem_name,ecosystem_type,ecosystem_number,image_id,flag_free,ecosystem_info->email,ecosystem_info->phone,ecosystem_info->description,ecosystem_info->conditions,url_address->vde_form_address,url_address->web_page,url_address->vde_page,url_address->web_form_address\").Vars(prefix)\r\n    \r\n    SetTitle($catalog_ecosystems_number$: #prefix_ecosystem_name#)\r\n    Div(breadcrumb){\r\n        LinkPage($catalog_ecosystems$, catalog_ecosystems)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: #prefix_ecosystem_name#)\r\n    }\r\n    \r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: text-bold h3, Body: #prefix_ecosystem_name# (##prefix_ecosystem_number#))\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(#prefix_image_id# > 0){\r\n                                    DBFind(binaries).WhereId(#prefix_image_id#).Columns(\"data\").Vars(img)\r\n                                    Image(Src: \"#img_data#\").Style(width: 300px;)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(type)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_type, Index: #prefix_ecosystem_type#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_description)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_description#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_freetype)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: AppParam(App:#app_id#, Name: catalog_ecosystems_freetype, Index: #prefix_flag_free#))\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0){\r\n                                    Span(Body: LangRes(catalog_ecosystems_conditions)).(Class: text-danger, Body:*)\r\n                                }\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_conditions#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(vde_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_vde_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_form_desc))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_form_address#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(web_page))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_url_address_web_page#)\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(form-group){\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_email))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_email#)\r\n                            }\r\n                        }\r\n                        Div(row mb-sm){\r\n                            Div(col-md-6 mc-sm text-right){\r\n                                P(Class: h5 text-normal m0, Body: LangRes(catalog_ecosystems_contact_phone))\r\n                            }\r\n                            Div(col-md-6 mc-sm text-left){\r\n                                P(Class: h5 text-normal m0, Body: #prefix_ecosystem_info_phone#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "default_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "If(#ecosystem_id#==1){\n\tSetTitle(\"\")\n}.Else{\n\tDiv(content-wrapper){\n\t\tDiv(panel panel-primary){\n\t\t\tDiv(list-group-item text-center){\n\t\t\t\tP(Class: h3 m0 text-bold, Body: Congratulations! You created your own ecosystem.)\n\t\t\t}\n\t\t\tDiv(list-group-item){\n\t\t\t\tSpan(Class: h3, Body: \"You as Founder hold a complete set of rights for controlling the ecosystem – creating and editing applications, modifying ecosystem parameters, etc. \")\n\t\t\t\tSpan(Class: h3, Body: \"To get started, you can download the finished applications from the\")\n\t\t\t\tSpan(Class: h3 text-primary, Body: \" https://github.com/GenesisKernel/apps \")\n\t\t\t\tSpan(Class: h3, Body: \"and install them using the Import service. \")\n\t\t\t\tSpan(Class: h3, Body: \"The Strong(basic.json) contains applications for managing roles, creating notifications and votings. \")\n\t\t\t\tSpan(Class: h3, Body: \"Or you can create your own apps using the tools in the Admin tab. \")\n\t\t\t\tSpan(Class: h3, Body: \"Documentation \")\n\t\t\t\tSpan(Class: h3 text-primary, Body: \"https://genesiskernel.readthedocs.io\")\n\t\t\t}\n\t\t\tDiv(panel-footer text-right clearfix){\n\t\t\t\tDiv(pull-left){\n\t\t\t\t\tButton(Body: Ecosystem parameters, Class: btn btn-default, Page: params_list)\n\t\t\t\t}.Style(margin-right: 20px;)\n\t\t\t\tDiv(pull-left){\n\t\t\t\t\tButton(Body: Dashboard, Class: btn btn-default, Page: admin_dashboard)          \n\t\t\t\t}\n\t\t\t\tButton(Body: Import, Class: btn btn-primary, Page: import_upload)\n\t\t\t}\n\t\t}\n\t}\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystem_new",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\r\n    Div(form-group){\r\n        Label($name$)\r\n        Input(Placeholder: Name of Ecosystem, Name:Name)\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: @1ecosystems_list)\r\n        Button(Body: LangRes(create), Class: btn pull-right btn-primary, Contract: @1NewEcosystem, Page: @1ecosystems_list)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\r\nDBFind(buffer_data).Where({member_id:#key_id#, key:\"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nDiv(content-wrapper){\r\n\tSetTitle($ecosystems$)\r\n    Div(breadcrumb){\r\n        Div(row){\r\n            Div(col-md-10){\r\n                Div(Class: text-muted, Body: \"Ecosystems are relatively closed programming environments, which include applications and members.\")\r\n                Div(Class: text-muted, Body: \"Create your own ecosystem for your blockchain apps.\")\r\n            }\r\n            Div(col-md-2){\r\n                Button(Body: $create$, Class: pull-right, Page: @1ecosystem_new).Popup(Header: $create$, Width: \"30\")\r\n                Button(Body: LangRes($update_metrics$), Page: @1ecosystems_metrics_update, Class: pull-right).Style(margin-right: 10px;).Popup(Header: $update_metrics$, Width: \"30\")\r\n            }\r\n        }\r\n    }\r\n\r\n    If(GetVar(Search)){\r\n        SetVar(Where,{name:{\"$like\":#Search#}, id:{\"$neq\":1}})\r\n    }.Else{\r\n        SetVar(Where,{id:{\"$neq\":1}})\r\n        SetVar(Search,)\r\n    }\r\n\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Div(input-group){\r\n                        Div(input-group-addon){\r\n                            LangRes(name)\r\n                        }\r\n                        Input(Name: Search, Value: #Search#)\r\n                        Div(input-group-btn){\r\n                            Button(Class: btn btn-default fa fa-search, Page: @1ecosystems_list, PageParams: \"Search=Val(Search)\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            DBFind(ecosystems, src_ecosystems).Ecosystem(1).Where(\"#Where#\").Custom(_id){\r\n                Span(#id#)\r\n            }.Custom(_name){\r\n                Span(#name#)\r\n            }.Custom(_metrics){\r\n                If(#m_id#>0){\r\n                    SetVar(eco_id,#id#)\r\n                    ForList(src_metrics){\r\n                        If(#key#==#eco_id#){\r\n                            LinkPage(Body: `#value#`, Page: @1sysparams_metrics, PageParams:\"Id=#key#\")\r\n                        }\r\n                    }\r\n                }\r\n            }.Custom(_votings){\r\n                Div(text-right){\r\n                    If(#template_id#>0){\r\n                        If(#is_valued#==0){\r\n                            Input(Name: RowId, Type: hidden, Value: #id#)\r\n                            Input(Name: NewValue, Type: hidden, Value: 1)\r\n                            Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: @1sysparams_ecosystems_list, Contract: VotingTemplateRun)\r\n                        }\r\n                    }\r\n                }\r\n            }.Custom(_valued){\r\n                If(#is_valued#==1){\r\n                    is valued\r\n                }\r\n            }.Custom(_actions){\r\n                SetVar(k_id,)\r\n                DBFind(notifications).Where({\"sender->member_id\":#key_id#, \"page_params->ecosystem_id\":#id#, closed:0}).Count(notific_count)\r\n                DBFind(keys).WhereId(#key_id#).Ecosystem(#id#).Limit(1).Vars(\"k\")\r\n\r\n                If(And(#notific_count#==0,#k_id#==\"\")){\r\n                    Button(Class: btn btn-link pull-right, Body: Send Request, Contract: \"MembershipRequest\", Page: @1ecosystems_list, Params: \"ecosystem_num=#id#\")\r\n                }\r\n            }\r\n\t\t\t\r\n            Div(row){\r\n                Div(col-md-12){\r\n                    Table(Source: src_ecosystems, Columns: \"ID=_id,$name$=_name,$metrics$=_metrics,=_valued,=_votings,=_actions\")\r\n                }\r\n            }\r\n\t\t\t\r\n            If(GetVar(Search)){\r\n                Div(row){\r\n                    Div(col-md-12 mt-lg){\r\n                        Div(text-center){\r\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: @1ecosystems_list)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "ecosystems_metrics_update",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(aggregates, \"id,name\"){\r\n    max,Maximum\r\n    min,Minimum\r\n    avg,Average\r\n}\r\nForm(){\r\n    Div(row form-group){\r\n        Div(col-sm-3 text-right){\r\n            Label(For: Interval){\r\n                LangRes(Interval)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Input(Name: Interval, Type: number)\r\n        }\r\n    }\r\n    Div(row form-group){\r\n        Div(col-sm-3 text-right){\r\n            Label(For: Aggregate){\r\n                LangRes(Aggregate)\r\n            }\r\n        }\r\n        Div(col-sm-9){\r\n            Select(Name: Aggregate, Source: aggregates, NameColumn: name, ValueColumn: id)\r\n        }\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: @1ecosystems_list)\r\n        Button(Body: LangRes(update_metrics), Page: @1ecosystems_list, Class: btn pull-right btn-primary, Contract: MetricsUpdate)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "members_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    SetTitle($membership$)\n\n    If(GetVar(Search)){\n        SetVar(Where,{id:#Search#})\n    }.Else{\n        SetVar(Where,{id:{\"$neq\":0}}).(Search,)\n    } \n    \n    DBFind(keys,src_member).Columns(\"id\").Custom(custom_id){\n        SetVar(Name: style_text, Value: \"text-normal\")\n        SetVar(Name: style_link, Value: \"text-primary\")\n        Span(Class: h5, Body: #id#)\n        SetVar(m_id, 0)\n        DBFind(members).WhereId(#id#).Vars(m)\n        If(Or(#m_id#>0,#m_id#<0)){\n            SetVar(image_id, #m_image_id#)\n            SetVar(member_name, #m_member_name#)\n        }.Else{\n            SetVar(image_id, 0)\n            SetVar(member_name, \"\")\n        }\n    }.Custom(custom_member_id){\n        Button(Body: Address(#id#), Class: btn btn-link, Page: @1tokens_transfer, PageParams: \"v_id=#id#\").Popup(Header: $tokens_transfer$, Width: \"30\")\n    }.Custom(custom_username){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#id#\"){\n            If(#image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: img-circle).Style(height: 30px;width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Where(#Where#).Order(\"id\")\n    \n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(id)\n                        }\n                        Input(Name: Search, Type:number, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Class: btn btn-default fa fa-search, Page: @1members_list, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n            }\n            Div(row){\n                Div(col-md-12){\n                    Table(Source: src_member, Columns: \"$name$=custom_username,$id$=custom_id,$wallet_address$=custom_member_id\")\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-primary, Page: @1members_list)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_admin_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\r\n    DBFind(notifications).Where({id:#notific_id#}).Columns(\"page_params->ecosystem_id,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n    DBFind(ecosystems).WhereId(#notific_page_params_ecosystem_id#).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Div(h3 text-bold){\r\n                        Membership Request\r\n                    }\r\n                    Div(){\r\n                        For ecosystem: \"#ecosystem_name#\" (#ecosystem_id#)\r\n                    }\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Div(m0 h3 text-bold){#notific_sender_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(address))\r\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        If(#notific_closed# == 0){\r\n                            Button(Class: btn btn-danger mr-lg, Body: Reject, Contract: MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,Accept=1\")\r\n                            Button(Class: btn btn-success, Body: Accept, Contract: MembershipDecide, Page: @1default_page, Params: \"notific_id=#notific_id#,Accept=0\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_user_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    SetTitle(Membership Request)\r\n\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"page_params->ecosystem_id,page_params->status,recipient->image_id,recipient->member_name,closed\").Vars(notific)\r\n    DBFind(ecosystems).WhereId(#notific_page_params_ecosystem_id#).Vars(ecosystem)\r\n\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    Span(Class: h3, Body: Membership Request)\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                Div(m0 h3 text-bold){#notific_recipient_member_name#}\r\n                            }\r\n                        }\r\n                    }\r\n                    If(#notific_page_params_status# == 1){\r\n                        Div(list-group-item text-center){\r\n                            Div(text-success h3){\r\n                                Request to membership for ecosystem: \"#ecosystem_name#\" (#ecosystem_id#) is accepted!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            If(#notific_closed# == 0){\r\n                                Button(Class: btn btn-primary, Body: Add ecosystem to list, Contract: \"NotificationsClose\", Params: \"notific_id=#notific_id#\", Page: \"@invite\", PageParams: \"ecosystem=#notific_page_params_ecosystem_id#,page=@1default_page\")\r\n                            }\r\n                        }\r\n                    }.Else{\r\n                        Div(list-group-item text-center){\r\n                            Span(Class: text-danger h3){\r\n                                Request to membership for ecosystem: \"#ecosystem_name#\" (#ecosystem_id#) is rejected!\r\n                            }\r\n                        }\r\n                        Div(list-group-item text-center){\r\n                            If(#notific_closed# == 0){\r\n                                Button(Class: btn btn-primary, Body: OK, Contract: \"NotificationsClose\", Params: \"notific_id=#notific_id#\", Page: @1default_page)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(notifications,notification_singles).Where({closed:0,\"notification->type\": 1, \"recipient->member_id\": #key_id#}).Columns(\"id,page_name,notification->icon,notification->header,notification->body\").Count(count_singles)\n\nDBFind(notifications,notification_roles).Where({closed:0, \"notification->type\": 2, \"recipient->role_id\":#role_id#, {\"$or\":[{date_start_processing: $isnull}, {\"processing_info->member_id\": #key_id#}]}}).Columns(\"id,page_name,notification->icon,notification->header,notification->body,recipient->role_id\").Count(count_current_role)\n\nSetVar(limit,10).(limit_count,#limit#)\nSetVar(remaining,Calculate(#count_singles#+#count_current_role#-#limit#))\n\nIf(And(#limit_count#>0,#count_singles#>0)){\n    ForList(notification_singles){\n        If(#limit_count#>0){\n            SetVar(limit_count,Calculate(#limit_count#-1))\n            Div(list-group-item){\n                LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\n                    Div(media-box clearfix){\n                        Div(pull-left){\n                            Em(Class: fa #notification.icon# fa-1x text-primary)\n                        }\n                        Div(media-box-body){\n                            Div(Class: m0 text-normal, Body: #notification.header#)\n                            Div(Class: m0 text-muted h6, Body: #notification.body#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf(And(#limit_count#>0,#count_current_role#>0)){\n    DBFind(roles).WhereId(#role_id#).Columns(\"role_name\").Vars(role)\n    Div(h6 mb-sm mt-lg ml-lg text-muted){\n        Role notifications (#role_role_name#):\n    }\n    ForList(notification_roles){\n        If(#limit_count#>0){\n            SetVar(limit_count,Calculate(#limit_count#-1))\n            Div(list-group-item){\n                LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#\"){\n                    Div(media-box clearfix){\n                        Div(pull-left){\n                            Em(Class: fa #notification.icon# fa-1x text-primary)\n                        }\n                        Div(media-box-body){\n                            Div(Class: m0 text-normal, Body: #notification.header#)\n                            Div(Class: m0 text-muted h6, Body: #notification.body#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nIf(#remaining#>0){\n    Button(Class: btn btn-block btn-default, Page: @1notifications_list){\n        Show all notifications (#remaining# more)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_broadcast",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\nSetVar(role_admin, AppParam(App: #application_id#, Name: role_admin))\nSetTitle($notifications_broadcast$)\nDBFind(ecosystems).Ecosystem(1).Count(ecos_count)\nSetVar(left_col,\"col-sm-3 mt text-right\").(right_col,\"col-sm-9\")\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage($notifications$, @1notifications_list)\n        Span(/,mh)\n        Span($broadcast_send$,text-muted)\n    }\n\n    Div(row){\n        Div(col-sm-6 col-sm-offset-3){\n            If(And(#role_id#==#role_admin#,#ecosystem_id#==1,#ecos_count#>1)){\n                DBFind(roles,src_roles).Ecosystem(2).Where({role_type:3}).Columns(\"id,role_name\")\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row mt){\n                            Div(#left_col#){\n                                LangRes(header)\n                            }\n                            Div(#right_col#){\n                                Input(Name: Header, Type: textarea)\n                            }\n                        }\n                        Div(row mt){\n                            Div(#left_col#){\n                                LangRes(body_text)\n                            }\n                            Div(#right_col#){\n                                Input(Name: Body, Type: textarea)\n                            }\n                        }\n                        Div(row mt){\n                            Div(#left_col#){\n                                LangRes(recipient)\n                            }\n                            Div(#right_col#){\n                                Select(Name: RoleId, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: @1notifications_list)\n                        Button(Body: LangRes(send), Class: btn btn-primary pull-right, Contract: @1NotificationsBroadcast, Params: \"notific_id=#notific_id#\", Page: @1notifications_list)\n                    }\n                }\n            }.Else{\n                Div(col-sm-12 alert alert-warning text-center){\n                    If(#role_id#!=#role_admin#){\n                        LangRes(only_admin_action)\n                    }\n                    If(#ecosystem_id#!=1){\n                        LangRes(only_first_ecosystem_action)\n                    }\n                    If(#ecos_count#==1){\n                        LangRes(other_ecosystems_not_found)\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(Or(#type#==0,#type#==1)){\n    }.Else{\n        SetVar(Name: type, Value: 0)\n    }\n    Div(row){\n        Div(col-md-12){\n            Div(btn-group){\n                If(#type#==0){\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $single_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-bell-o) $single_notifics$, Page: @1notifications_list, PageParams: \"type=0\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n                If(#type#==1){\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray-lighter)).Style(margin-left:5px;)\n                }.Else{\n                    Span(Button(Body: Em(Class: fa fa-bullhorn) $role_notifics$, Page: @1notifications_list, PageParams: \"type=1\", Class: btn bg-gray)).Style(margin-left:5px;)\n                }\n            }\n        }\n    }\n    Div(row){\n        Div(col-md-12){\n            Div(btn-group){\n                If(#type#==0){\n                    Include(notifications_single)\n                }\n                If(#type#==1){\n                    Include(notifications_roles)\n                }\n            }\n        }\n    }\n}\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_roles_send",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\n\n    SetTitle($role_notifics$)\n    Div(breadcrumb){\n        LinkPage(Body: $role_notifics$, Page: @1notifications_list, PageParams: \"type=1\")\n        Span(/, mh)\n        Span(Class: text-muted, Body: $send$)\n    }\n\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(role_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                DBFind(Name: roles, Source: source_roles).Where({deleted:0}).Columns(\"id,role_name\")\n                                Select(Name: rid, Source: source_roles, NameColumn: role_name, ValueColumn: id)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(closure_type))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#application_id#, Name: notification_closure, Source: src_closure_type)\n                                Select(Name: closure_type, Source: src_closure_type, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                AppParam(App:#application_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#application_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1notifications_list, PageParams: \"type=1\")\n                    Button(Body: LangRes(send), Class: btn btn-primary pull-right, Page: @1notifications_list, PageParams: \"type=1\", Contract: NotificationsSend)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_show",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\nSetTitle($notifications_view$)\n\nSetVar(type,0).(header,).(body,)\nDiv(content-wrapper){\n\n    If(#notific_id#>0){\n        DBFind(notifications).WhereId(#notific_id#).Columns(\"id,sender->type,notification->header,notification->body,date_start_processing,closed\").Vars(note)\n        SetVar(type,#note_sender_type#)\n        SetVar(header,#note_notification_header#)\n        SetVar(body,#note_notification_body#)\n\n\n        Div(row){\n            Div(col-md-6 col-md-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading text-center){\n                        #header#\n                    }\n                    Div(panel-body){\n                        #body#\n                    }\n                    Div(panel-footer text-right){\n                        If(#type# == 1){\n                            If(#note_closed# == 0){\n                                Button(Body: LangRes(understand), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\n                            }\n                        }.ElseIf(#type# == 2){\n                            If(#note_closed#==0){\n                                If(#note_date_start_processing#==\"\"){\n                                    Button(Body: LangRes(understand), Class: btn btn-primary, Contract: NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_show)\n                                }.Else{\n                                    Button(Body: LangRes(close), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1default_page)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            LangRes(attention)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_single_send",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\n\n    SetTitle($single_notifics$)\n    Div(breadcrumb){\n        LinkPage($single_notifics$, @1notifications_list)\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\n        Span(Class: text-muted, Body: $send$)\n    }\n\n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading){LangRes(single_notifics)}\n                Div(panel-body){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(recipient)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                DBFind(keys,src_keys).Columns(\"id\").Custom(_name){\n                                    DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\n                                    Address(#id#)\n                                    If(Or(#m_id#>0,#m_id#<0)){\n                                        \" (#m_member_name#)\"\n                                    }\n                                }\n                                Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(sender)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                AppParam(App:#application_id#, Name: notification_sender, Source: src_sender)\n                                Select(Name: sender, Source: src_sender, NameColumn: name, ValueColumn: id)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(icon)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                AppParam(App:#application_id#, Name: notification_icon, Source: src_icon)\n                                Select(Name: icon_name, Source: src_icon, NameColumn: name, ValueColumn: name)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(header)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: text_header, Value: \"Header text\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: text_header, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(body_text))\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Input(Name: text_body, Value: \"Body text\")\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(page_name)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: page_name, Value: \"@1notifications_testpage\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: page_name, minLength: $validate_notification$, maxLength: $validate_role_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 text-left){\n                                Input(Name: params_map, Value: `{\"param_int\":\"10\",\"param_str\":\"my_string\"}`)\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1notifications_list)\n                    Button(Body: LangRes(send), Class: btn btn-primary pull-right, Page: @1notifications_list, Contract: NotificationsSend)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "notifications_testpage",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\n    SetTitle($test_page$)\n\n    If(#notific_id#>0){\n        DBFind(notifications,src_notifications).WhereId(#notific_id#).Columns(\"id,notification->type,notification->header,page_params->param_int,page_params->param_str,date_start_processing,closed\").Vars(prefix)\n        SetVar(notific_type,#prefix_notification_type#).(notific_header,#prefix_notification_header#).(notific_val_int,#prefix_page_params_param_int#).(notific_val_str,#prefix_page_params_param_str#)\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n        SetVar(notific_id,\"0\").(notific_type,\"0\").(notific_header,\"null\").(notific_val_int,\"null\").(notific_val_str,\"null\")\n    }\n\n    Div(row){\n        Div(col-md-6 col-md-offset-3){\n            Form(panel panel-default){\n                Div(panel-body){\n                    Div(list-group-item text-center){\n                        Span(Class: h3, Body: #notific_header#)\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(id))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_id#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(type))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                If(#notific_type# > 0){\n                                    Span(Class: h4, Body: AppParam(App:#application_id#, Name: notification_type, Index: #notific_type#))\n                                }.Else{\n                                    Span(Class: h4, Body: #notific_type#)\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_number))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_int#)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-6 mt-sm text-right){\n                                Span(Class: h4, Body: LangRes(value_string))\n                            }\n                            Div(col-md-6 mt-sm text-left){\n                                Span(Class: h4, Body: #notific_val_str#)\n                            }\n                        }\n                    }\n                }\n                If(#notific_type# == 1){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            Button(Body: LangRes(close), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list).Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n                If(#notific_type# == 2){\n                    If(#prefix_closed# == 0){\n                        Div(panel-footer text-right){\n                            If(#prefix_date_start_processing# == \"\"){\n                                Button(Body: LangRes(begin), Class: btn btn-primary, Contract: NotificationsProcess, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: $want_start_processing_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }.Else{\n                                Button(Body: LangRes(close), Class: btn btn-primary, Contract: NotificationsClose, Params: \"notific_id=#notific_id#\", Page: @1notifications_list, PageParams: \"type=1\").Alert(Text: $want_close_notification$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_avatar_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Form(){\n    Div(form-group){\n        Label($avatar$)\n        Input(Name: member_image, Type: file)\n    }\n    Div(form-group){\n        Button(Body: LangRes(save), Class: btn btn-primary pull-right, Contract: ProfileAvatarEdit, Page: @1profile_edit, PageParams:\"v_member_id=#v_member_id#\")\n        Button(Body: LangRes(close), Class: btn btn-default pull-right, Page: @1profile_edit, PageParams:\"v_member_id=#v_member_id#\")\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\n    SetTitle($editing_profile$)\n    Div(breadcrumb){\n        LinkPage($user_info$, @1profile_view)\n        Span(/,mh)\n        Span(Class: text-muted, Body: $editing_profile$)\n    }\n    \n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n        DBFind(members,src_member).WhereId(#v_member_id#).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\n    }.Else{\n        DBFind(members,src_member).WhereId(#key_id#).Columns(\"id,member_name,image_id,member_info->information\").Vars(prefix)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-heading, Body: LangRes(editing_profile))\n                Div(panel-body){\n                    Div(row){\n                        Div(col-md-5 mt-lg text-center){\n                            Button(Class: btn btn-link, Page: @1profile_avatar_edit, PageParams: \"v_member_id=#key_id#\"){\n                                If(#prefix_image_id#>0){\n                                    Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 140px; border: 1px solid #5A5D63;)\n                                }.Else{\n                                    Span(Class: fa icon-user fa-5x).Style(margin-top:20px;)\n                                }\n                            }.Popup(Header: $editing_profile$, Width: 30)\n                        }\n                        Div(col-md-7 mc-sm text-left){\n                            Div(form-group){\n                                Label(){\n                                    Span(Body: LangRes(member_name))\n                                    Span(Class: text-danger, Body:*)\n                                }\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    Input(Name: member_name, Value: #prefix_member_name#, Disabled: true)\n                                }.Else{\n                                    Input(Name: member_name).Validate(minLength:5, maxLength:20)\n                                    InputErr(Name: member_name, minLength: $validate_member_name$, maxLength: $validate_member_name$)\n                                }\n                            }\n                            Div(form-group){\n                                If(GetVar(prefix_member_info_information)){\n                                    Label(){\n                                        Span(Body: LangRes(information))\n                                    }\n                                    Input(Name: information, Type: textarea, Value: #prefix_member_info_information#)\n                                }.Else{\n                                    Label(){\n                                        Span(Body: LangRes(information))\n                                    }\n                                    Input(Name: information, Type: textarea)\n                                }\n                            }\n                        }\n                    }\n                }\n                Div(panel-footer text-left){\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1profile_view, PageParams: \"v_member_id=#v_member_id#\")\n                    Button(Body: LangRes(save), Class: btn btn-primary pull-right, Page: @1profile_view, PageParams: \"v_member_id=#v_member_id#\", Contract: ProfileEdit).Alert(Text: $want_save_changes$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "profile_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n        SetVar(v_member_id,#key_id#)\n    }\n    DBFind(members,src_member).WhereId(#v_member_id#).Columns(\"id,image_id,member_name,member_info->information\").Vars(prefix)\n    DBFind(keys,src_keys).WhereId(#v_member_id#).Vars(tokens)\n\n    If(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(prefix_member_name,)\n    }\n\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-primary){\n                Div(panel-body){\n                    Div(text-center text-bold h4 m0){\n                        LangRes(user_info)\n                    }\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    If(#prefix_id# == #key_id#){\n                                        Button(Class: btn btn-link, Page: @1profile_edit, PageParams: \"v_member_id=#key_id#\"){\n                                            If(#prefix_image_id#>0){\n                                                Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                            }.Else{\n                                                Span(Class: fa icon-user fa-5x text-primary)\n                                            }\n                                            Div(m0 h4 text-bold){\n                                                #prefix_member_name#\n                                                If(#role_id# > 0){\n                                                    DBFind(roles).WhereId(#role_id#).Columns(\"role_name\").Vars(role)\n                                                    Span(Body: \" (#role_role_name#)\")\n                                                }\n                                            }\n                                        }\n                                    }.Else{\n                                        If(#prefix_image_id#>0){\n                                            Image(Src: Binary().ById(#prefix_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                        }.Else{\n                                            Span(Class: fa icon-user fa-5x)\n                                        }\n                                        Div(m0 h4 text-bold){#prefix_member_name#}\n                                    }\n                                    Div(Class: h5 text-muted m0, Body: #prefix_member_info_information#)\n                                }.Else{\n                                    Div(text-muted m0 h5, Body: LangRes(wallet_address))\n                                    Div(Class: h5, Body: Address(#key_id#))\n                                    Button(Class: btn btn-link, Page: @1profile_edit){\n                                        Div(Class: h5 m0, Body: LangRes(editing_profile))\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center mb){\n                        Div(text-muted m0 h5, Body: LangRes(roles))\n                        DBFind(roles_participants,src_check).Where({\"member->member_id\":#v_member_id#, deleted:0}).Columns(\"id\").Vars(check)\n                        If(#check_id#>0){\n                            DBFind(roles_participants,src_roles).Where({\"member->member_id\":#v_member_id#, deleted:0}).Columns(\"role->id,role->name\").Order(\"id\")\n                            ForList(src_roles){\n                                Span(){\n                                    LinkPage(Page: @1roles_view, PageParams: \"v_role_id=#role.id#\"){\n                                        Span(Class: h5, Body: \"#role.name#\")\n                                    }\n                                }.Style(margin-right: 6px; margin-left: 6px;)\n                            }\n                        }.Else{\n                            Span(LangRes(no))\n                        }\n                        If(#v_member_id# == #key_id#){\n                            SetVar(founder_account, EcosysParam(\"founder_account\"))\n                            If(#founder_account# != #key_id#){\n                                Div(){\n                                    Button(Class: btn btn-link, Page: @1roles_request, Body: LangRes(request)).Popup(Header: $request$, Width: \"30\")\n                                }\n                            }\n                        }\n                    }\n                    If(#prefix_id# == #key_id#){\n                        Div(list-group-item mb){\n                            P(Class: text-center text-bold h4 m0, Body: LangRes(tokens_transfer))\n                            Div(form-group){\n                                Div(row){\n                                    Div(col-md-12 mc-sm text-center){\n                                        Div(text-muted m0 h5, Body: LangRes(tokens))\n                                        Span(Class: h5 text-bold, Body: Money(#tokens_amount#) APL)\n                                    }\n                                }\n                                Div(row){\n                                    Div(col-md-12 mt-lg text-center){\n                                        Div(text-muted m0 h5, Body: LangRes(wallet_address))\n                                        Span(Class: h5, Body: Address(#prefix_id#))\n                                    }\n                                }\n                            }\n                            Div(text-center){\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Span(Class: h6 text-bold, Body: LangRes(recipient))\n                                    }\n                                    Div(col-md-9 mb-sm text-left){\n                                        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\")\n                                    }\n                                }\n                                Div(row){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Span(Class: h6 text-bold, Body: LangRes(amount))\n                                    }\n                                    Div(col-md-9 mc-sm text-left){\n                                        Input(Name: Amount, Type: Number)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-12 mc-sm){\n                                Button(Body: LangRes(send), Class: btn btn-default pull-right, Page: @1profile_view, Contract: TokensSend).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_assign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\nIf(#v_role_id#>0){\n    DBFind(roles,src_roles).WhereId(#v_role_id#).Columns(\"id,role_name,role_type,roles_access->rids,creator->member_id\").Vars(prefix)\n\n    If(#prefix_creator_member_id#==#key_id#){\n        SetVar(manager_id,1)\n    }.ElseIf(And(#prefix_roles_access_rids#!=\"\",#prefix_roles_access_rids#!=\"NULL\")){\n        DBFind(roles).Where({id:[{\"$in\": [#prefix_roles_access_rids#]}, {\"$eq\":#role_id#}]}).Columns(\"id\").Vars(manager)\n    }.Else{\n        SetVar(manager_id,0)\n    }\n\n    Form(){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: LangRes(role))\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                Input(Type: hidden, Name: rid, Value: #prefix_id#)\n                SetVar(Name: var_prefix_role_name, Value: LangRes(#prefix_role_name#))\n                Input(Name: input_prefix_role_name, Value: #var_prefix_role_name#, Disabled: true)\n            }\n        }\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(type) Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 mb-sm text-left){\n                SetVar(Name: var_prefix_role_type, Value: AppParam(App:#application_id#, Name: roles_types, Index: #prefix_role_type#))\n                Input(Name: input_prefix_role_type, Value: #var_prefix_role_type#, Disabled: true)\n                If(#manager_id#==0){\n                    P(Class: m0 text-danger h6, Body: LangRes(appointment_impossible))\n                }\n            }\n        }\n        If(#manager_id#>0){\n            SetVar(participants,0)\n            DBFind(roles_participants).Where({\"role->id\":#v_role_id#, deleted:0}).Columns(\"id,member->member_id\").Custom(_id){\n                SetVar(participants,\"#participants#,#member.member_id#\")\n            }\n            DBFind(keys,src_keys).Where({id:{\"$nin\":[#participants#]}}).Columns(\"id\").Custom(_name){\n                SetVar(m_id, 0)\n                DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\n                Address(#id#)\n                If(Or(#m_id#>0,#m_id#<0)){\n                    \" (#m_member_name#)\"\n                }\n            }\n            Div(row){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(member)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 mb-lg text-left){\n                    Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                }\n            }\n        }\n        Div(pull-right){\n            Button(Body: LangRes(back), Class: btn btn-default, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\")\n            If(#manager_id#>0){\n                Button(Body: LangRes(assign), Class: btn btn-primary, Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\", Contract: RolesAssign, Params: \"member_id=Val(member_id)\").Alert(Text: $want_assign_member_to_role$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Columns([\"name\", \"id\"]).Where({\"name\": \"Basic application\"}).Vars(application)\n\nDBFind(roles).Columns([\"role_name\", \"id\"]).Where({deleted:0}).Order(id).Vars(admin_role)\nSetVar(admin_role_name, #admin_role_role_name#)\n\nIf(GetVar(rid)){\n    DBFind(roles).WhereId(#rid#).Columns(\"roles_access->rids,id,role_type,role_name\").Vars(role)\n    SetVar(title, $edit_role$)\n    SetVar(role_type, AppParam(App:#application_id#, Name: roles_types, Index: #role_role_type#))\n\n    If(GetVar(role_roles_access_rids)!=\"\"){\n        DBFind(roles,src_roles_access).Where({id:{\"$in\":[#role_roles_access_rids#]}}).Columns(\"id,role_name\").Order(role_name)\n        SetVar(rids_access, \"[#role_roles_access_rids#, #role_id#]\")\n    }.Else{\n        SetVar(rids_access, [#role_id#])\n    }\n}.Else{\n    DBFind(buffer_data).Columns(value).Where({\"key\": \"roles_access\", \"member_id\": #key_id#}).Vars(buffer)\n    If(And(GetVar(buffer_value)!=\"\",#buffer_value#!=\"[]\")){\n        DBFind(roles, src_roles_access).Columns(\"id,role_name\").Where({\"id\": {\"$in\": #buffer_value#}}).Order(role_name)\n        SetVar(rids_access, \"#buffer_value#\")\n    }.Else{\n        SetVar(rids_access, [#admin_role_id#])\n    }\n    AppParam(App: #application_id#, Name: roles_types, Source: app_roles_types)\n    SetVar(rid, 0)\n    SetVar(title, $new_role$)\n}\nDBFind(roles, src_roles).Columns([\"id\", \"role_name\"]).Where({\"deleted\":0, \"id\": {\"$nin\": #rids_access#}}).Order(id)\nIf(GetVar(back_page)){}.Else{\n    SetVar(back_page,\"@1roles_list\")\n}\nIf(GetVar(vID)){}.Else{\n    SetVar(vID,)\n}\n\nForm(){\n    Div(row form-group){\n        Div(col-md-3 mt-sm text-right){\n            Label(For: name){\n                LangRes(name)\n                If(#rid# < 1){\n                    Span(*,text-danger)\n                }\n            }\n        }\n        Div(col-md-9 text-left){\n            If(#rid# > 0){\n                Div(text-muted mt-sm){\n                    #role_role_name#\n                }\n            }.Else{\n                Input(Name: role_name).Validate(minLength:3, maxLength:30)\n                InputErr(Name: role_name, minLength: $validate_role_name$, maxLength: $validate_role_name$)\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-md-3 mt-sm text-right){\n            Label(For: role_type){\n                LangRes(type)\n                If(#rid# < 1){\n                    Span(*,text-danger)\n                }\n            }\n        }\n        Div(col-md-9 text-left){\n            If(#rid# > 0){\n                Div(text-muted mt-sm){\n                    AppParam(App: #application_id#, Name: roles_types, Index: #role_role_type#)\n                }\n            }.Else{\n                AppParam(App: #application_id#, Name: roles_types, Source: app_roles_types)\n                Select(Name: role_type, Source: app_roles_types, NameColumn: name, ValueColumn: id)\n            }\n        }\n    }\n    Div(row form-group){\n        Div(col-md-3 mt-sm text-right){\n            Label(For: role_managers){\n                LangRes(roles_access)\n                If(#rid# < 1){\n                    Span(*,text-danger)\n                }\n            }\n        }\n        Div(col-md-9 text-left){\n            Div(input-group mb-sm){\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                Div(input-group-btn){\n                    Button(Class: btn btn-primary fa fa-plus, Page: @1roles_create, PageParams:\"rid=#rid#\", Contract: RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=Val(roles_managers),Action=add\").Popup(50, #title#)\n                }\n            }\n            ForList(src_roles_access){\n                SetVar(btn_class,\"btn-default\")\n                If(#id#==#role_id#){\n                    SetVar(btn_class,\"btn-info\")\n                }\n                Button(Class: btn #btn_class# mr-sm mb-sm, Page: @1roles_create, PageParams:\"rid=#rid#\", Contract: RolesAccessManager, Params:\"Rid=#rid#,ManagerRid=#id#,Action=remove\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\n            }\n        }\n    }\n    Div(pull-right){\n        Button(Body: LangRes(back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\n        If(#rid#>0){}.Else{\n            Button(Body: LangRes(create), Class: btn btn-primary, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: RolesCreate)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(){\n    Div(){\n        Span($roles$)\n        Div(pull-right){\n            Button(Page: @1roles_create, Class: ml btn-tool btn-link){\n                Em(Class: icon icon-plus)\n                Span(Body: Span($create$))\n            }.Popup(50, $new_role$)\n        }\n    }\n}.Style(\n    z-index: 1000;\n    font-size: 20px;\n    line-height: 45px;\n    height: 46px;\n    color: #000;\n    font-weight: normal;\n    padding: 0 20px;\n    border: 0;\n)\nDiv(content-wrapper){\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\n\n    If(GetVar(search)){\n        SetVar(where,{role_name:{\"$like\":#search#}})\n    }.Else{\n        SetVar(where,{id:{\"$neq\":0}}).(search,)\n    }\n\n    DBFind(roles,src_roles).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Count(roles_count).Columns(\"id,role_name,role_type,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,roles_access->rids\").Custom(_id){\n        JsonToSource(rids,#roles_access#)\n        If(#deleted# == 0){\n            SetVar(style_text,).(style_link,\"text-primary\")\n        }.Else{\n            SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(_creator){\n        If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\n            LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_member_id=#creator.member_id#\"){\n                #creator.member_name#\n            }\n        }\n    }.Custom(_name){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#id#\"){\n            If(#image_id#>0){\n                Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n                #role_name#\n            }.Else{\n                Div(){\n                    Span(Class: fa icon-settings fa-2x mr-sm).(#role_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(_date){\n        Div(#style_text# small){\n            Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\n        }\n    }.Custom(_type){\n        Span(Class: #style_text#, Body: AppParam(App:#application_id#, Name: roles_types, Index: #role_type#))\n    }.Custom(_status){\n        Span(Class:#style_text#){\n            If(#deleted# == 0){\n                LangRes(active)\n            }.Else{\n                LangRes(deleted)\n            }\n        }\n    }.Custom(_access){\n        If(#creator.member_id#==#key_id#){\n            SetVar(access,done)\n        }.Else{\n            SetVar(access,)\n        }\n\n        If(And(#roles_access.rids#!=\"\",#roles_access.rids#!=\"NULL\")){\n            DBFind(roles,src_roles_list).Where({id:{\"$in\":[#roles_access.rids#]}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\n            Div(#style_text# breaker){\n                ForList(src_roles_list){\n                    If(And(#role_id#==#id#)){\n                        SetVar(access,done)\n                    }\n\n                    If(#access_count#!=#src_roles_list_index#){\n                        Span(\"#role_name#,\",mr-sm)\n                    }.Else{\n                        #role_name#\n                    }\n                }\n            }\n        }\n    }.Custom(_actions){\n        Div(text-right button-group text-nowrap){\n            If(#access#==\"done\"){\n                Button(Class: fa fa-edit btn btn-default, PageParams: \"rid=#id#\", Page: @1roles_create).Popup(50, $edit_role$)\n                If(And(#deleted#==0,#role_type#!=3)){\n                    Button(Class: fa fa-trash btn btn-danger, Contract: RolesDelete, Params: \"rid=#id#\", Page: @1roles_list).Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }.ElseIf(#deleted#==1){\n                    Button(Class: fa fa-recycle btn btn-info, Contract: RolesRestore, Params: \"rid=#id#\", Page: @1roles_list)\n                }\n            }\n        }\n    }\n    Form(panel panel-primary){\n        If(#roles_count#>0){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12){\n                        Div(input-group){\n                            Div(input-group-addon mt-sm){\n                                LangRes(name)\n                            }\n                            Input(Name: search, Value: #search#)\n                            Div(input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: @1roles_list, PageParams: \"search=Val(search)\")\n                            }\n                        }\n                    }\n                }\n                Div(table-responsive){\n                    Table(src_roles,\"$id$=_id,$name$=_name,$type$=_type,$creator$=_creator,$created$ / $deleted$=_date,$status$=_status,$roles_access$=_access,=_actions\")\n                }\n            }\n            If(GetVar(search)){\n                Div(row){\n                    Div(col-md-12 mt-lg text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: @1roles_list)\n                    }\n                }\n            }\n        }.Else{\n            Div(panel-body text-center h3){\n                Button(Body: $install_default_roles$, Class: btn btn-primary, Page: @1roles_list, Contract: RolesInstall)\n            }\n        }\n    }\n}.Style(\n    .inline {display:inline-block;}\n    .breaker {word-break: break-all;}\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    Div(form-group){\n        DBFind(roles,src_roles).Where({role_type:1, deleted:0}).Columns(\"id,role_name\").Count(roles_count)\n        If(#roles_count#==0){\n            Div(Body: LangRes(send_not_possible))\n            Div(Body: LangRes(no_assigned_roles))\n        }.Else{\n            Select(Name: rid, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n        }\n    }\n    Div(form-group){\n        If(#roles_count#>0){\n            Button(Body: LangRes(sent), Class: btn btn-primary pull-right, Contract: RolesRequest, Page: @1profile_view)\n        }\n        Button(Body: LangRes(close), Class: btn btn-default pull-right, Page: @1profile_view)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_request_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n\tDBFind(notifications,src_notific).WhereId(#notific_id#).Columns(\"page_params->rid,sender->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\n   \n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    Span(Class: h3, Body: Request to role)\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(#notific_sender_image_id#>0){\n                                    Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                }.Else{\n                                    Span(Class: fa icon-user fa-5x text-primary)\n                                }\n                                Div(m0 h4 text-bold){#notific_sender_member_name#}\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(address))\n                        Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\n                    }\n                    Div(list-group-item text-center){\n                        DBFind(roles).WhereId(#notific_page_params_rid#).Columns(\"role_name\").Vars(r)\n                        Div(text-muted m0 h5, Body: LangRes(role))\n                        Span(Class: h5 text-bold, Body: #notific_page_params_rid# - #r_role_name#)\n                    }\n\t\t\t\t\tDiv(list-group-item text-center){\n                        Input(Name: member_id, Class: hidden, Value: #notific_sender_member_id#)\n                        Input(Name: rid, Class: hidden, Value: #notific_page_params_rid#)\n                        If(#notific_closed# == 0){\n                            Button(Class: btn btn-danger, Body: Reject, Contract: RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=0\")\n                            Button(Class: btn btn-success, Body: Accept, Contract: RolesRequestDecision, Page: @1roles_list, Params: \"notific_id=#notific_id#,decision=1\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "roles_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(){\n    Div(){\n        If(#v_role_id# > 0){\n            DBFind(roles,src_roles).WhereId(#v_role_id#).Columns(\"role_name,role_type,deleted\").Vars(prefix)\n            Span($role$: #prefix_role_name#)\n            If(And(#prefix_deleted#==0,#prefix_role_type#!=2)){\n                Div(pull-right){\n                    Button(Page: @1roles_assign, PageParams: \"v_role_id=#v_role_id#\", Class: ml btn-tool btn-link){\n                        Em(Class: icon icon-plus)\n                        Span(Body: Span($assign$))\n                    }.Popup(50, $new_role$)\n                }\n            }\n        }\n    }\n}.Style(\n    z-index: 1000;\n    font-size: 20px;\n    line-height: 45px;\n    height: 46px;\n    color: #000;\n    font-weight: normal;\n    padding: 0 20px;\n    border: 0;\n)\n\nDiv(content-wrapper){\n    If(#v_role_id# > 0){\n        Div(breadcrumb){\n            LinkPage($roles$, @1roles_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #prefix_role_name#)\n        }\n\n        DBFind(roles_participants,src_participants).Where({\"role->id\":#v_role_id#}).Order({deleted:\"1\", id:\"1\"}).Columns(\"id,member->member_id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,appointed->voting_id,appointed->voting_name,date_created,date_deleted,deleted\").Custom(custom_id){\n            If(#deleted# == 0){\n                SetVar(Name: style_text, Value: \"text-normal\")\n                SetVar(Name: style_link, Value: \"text-primary\")\n            }.Else{\n                SetVar(Name: style_text, Value: \"text-muted\")\n                SetVar(Name: style_link, Value: \"text-muted\")\n            }\n            Span(Class: #style_text#, Body: #id#)\n        }.Custom(custom_appointed){\n            If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n                LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#appointed.member_id#\"){\n                    Span(Body: #appointed.member_name#)\n                }\n            }\n            If(#appointed.voting_id#>0){\n                LinkPage(Class:#style_link# h5 text-bold, Page: @1voting_view, PageParams: \"vID=#appointed.voting_id#\"){\n                    Span(Body: #appointed.voting_name#)\n                }\n            }\n        }.Custom(custom_member){\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#member.member_id#\"){\n                If(#member.image_id#>0){\n                    Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                    Span(#member.member_name#)\n                }.Else{\n                    Div(){\n                        Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                        Span(#member.member_name#)\n                    }.Style(display:flex; align-items:center;)\n                }\n            }\n        }.Custom(custom_address){\n            Span(Class: #style_text#, Body: Address(#member.member_id#))\n        }.Custom(custom_date){\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n        }.Custom(custom_status){\n            If(#deleted# == 0){\n                Span(Class: #style_text#, Body: LangRes(active))\n            }.Else{\n                Span(Class: #style_text#, Body: LangRes(deleted))\n            }\n        }.Custom(actions){\n            Div(pull-right){\n                If(And(#deleted#==0,#prefix_role_type#!=3)){\n                    Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: RolesUnassign, Params: \"row_id=#id#\", Page: @1roles_view, PageParams: \"v_role_id=#v_role_id#\").Alert(Text: $sure_want_delete$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                }\n            }\n        }\n\n        Form(panel panel-primary){\n            Div(panel-body){\n                Table(Source: src_participants, Columns: \"$id$=custom_id,$member$=custom_member,$address$=custom_address,$appointed$=custom_appointed,$appointed$ / $deleted$=custom_date,$status$=custom_status,=actions\")\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidate_validators_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n\r\n    SetTitle($sysparams_candidate_validators_form$)\r\n    Div(Class: breadcrumb){\r\n        LinkPage($sysparams_candidates$, sysparams_candidates)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $sysparams_candidate_validators_form$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-body){\r\n                    Div(form-group) {\r\n                        Label(LangRes(host_ip)*)\r\n                        Input(Name: HostIp, Type: text, Placeholder: xxx.xxx.xxx.xxx).Validate(minLength:7, maxLength:15)\r\n                        InputErr(Name: HostIp, minLength: Value is too short, maxLength: Value is too long)\r\n                    }\r\n                    If(){\r\n                        Div(form-group) {\r\n                            Label(LangRes(commission_pub)*)\r\n                            Input(Name: CommissionPub, Type: text).Validate(minLength:128)\r\n                            InputErr(Name: CommissionPub, minLength: Invalid pub-key)\r\n                        }\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(commission_address)*)\r\n                        Input(Name: CommissionAddress, Type: text,Placeholder:xxxx-xxxx-xxxx-xxxx-xxxx).Validate(minLength:24, maxLength:24)\r\n                        InputErr(Name: CommissionAddress, minLength: Invalid address, maxLength: Invalid address)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(description_equipment))\r\n                        Input(Name: Description, Type: textarea)\r\n                    }\r\n                    Div(form-group) {\r\n                        Label(LangRes(comment))\r\n                        Input(Name: Comment, Type: textarea)\r\n                    }\r\n                }\r\n                Div(panel-footer text-right){\r\n                    Div(pull-left){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: @1sysparams_candidates_list)\r\n                    }\r\n                    Button(Contract: CandidateValidatorRequest, Class: btn btn-primary, Page: @1sysparams_candidates_list, Body: $send$)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_candidates_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n    SetVar(template_id, AppParam(App:#application_id#, Name: voting_validators_template_id))\r\n    SetTitle($sysparams_candidates$)\r\n\r\n    DBFind(sysparams_candidate,src_candidates).Where({deleted:0}).Custom(_actions){\r\n        If(#template_id#>0){\r\n            Div(btn-group){\r\n                Input(Name:KeyId, Type: hidden, Value: #candidate_key_id#)\r\n                Input(Name:TemplateId, Type: hidden, Value: #template_id#)\r\n                Button(Contract: VotingTemplateRun, Page: @1voting_list, Class: btn btn-default fa fa-play)\r\n            }\r\n        }.Else{\r\n            Span($voting_template_not_found$,text-muted)\r\n        }\r\n\r\n    }.Custom(_date){\r\n        DateTime(DateTime: #date_created#, Format: YYYY-MM-DD HH:MI)\r\n    }.Count(count)\r\n\r\n    Div(breadcrumb){\r\n        Span(Class: text-muted, Body: $sysparams_candidates$)\r\n    }\r\n    AddToolButton(Title: $add$, Icon: icon-plus, Page: @1sysparams_candidate_validators_create)\r\n\r\n    Div(row){\r\n        Div(col-md-12){\r\n            Div(panel panel-primary){\r\n                If(#count#>0){\r\n                    Form(table-responsive){\r\n                        Input(Name: Duration, Type: hidden, Value: 14)\r\n                        Table(Source: src_candidates, Columns: \"$id$=id,$host_ip$=host_ip,$commission_address$=commission_address,$description_equipment$=description,$comment$=comment,$date_created$=_date,$voting$=_actions\")\r\n                    }\r\n                }.Else{\r\n                    Div(h3 text-muted text-center){\r\n                        Candidates not found\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_ecosystems_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(template_id, AppParam(App:#application_id#, Name: voting_ves_template_id))\r\nDBFind(buffer_data).Where({member_id:#key_id#, key:\"metrics\"}).Vars(m)\r\nJsonToSource(src_metrics,#m_value#)\r\n\r\nSetTitle($sysparams_ecos$)\r\nDBFind(ecosystems,ecos).Order(id).Custom(_actions){\r\n    Div(text-right){\r\n        If(#template_id#>0){\r\n            If(#is_valued#==0){\r\n                Input(Name: RowId, Type: hidden, Value: #id#)\r\n                Input(Name: NewValue, Type: hidden, Value: 1)\r\n                Button(Body: $start_voting_ves$, Class: btn btn-block btn-primary, Page: @1sysparams_ecosystems_list, Contract: VotingTemplateRun)\r\n            }\r\n        }.Else{\r\n            Span(voting id template not found in parameters, text-muted)\r\n        }\r\n    }\r\n}.Custom(_valued){\r\n    If(#is_valued#==1){\r\n        is valued\r\n    }\r\n}.Custom(_metrics){\r\n    If(#m_id#>0){\r\n        SetVar(eco_id,#id#)\r\n        ForList(src_metrics){\r\n            If(#key#==#eco_id#){\r\n                LinkPage(Body: `#value#`, Page: @1sysparams_metrics, PageParams:\"Id=#key#\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nData(form, \"Name,Type,Src\"){\r\n    Interval,number,\r\n    Aggregate,select,aggregates\r\n}\r\nData(aggregates, \"id,name\"){\r\n    max,Maximum\r\n    min,Minimum\r\n    avg,Average\r\n}\r\n\r\nDiv(content-wrapper){\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            ForList(form){\r\n                Div(row form-group){\r\n                    Div(col-sm-3 text-right){\r\n                        Label(For:#Name#){\r\n                            LangRes(#Name#)\r\n                        }\r\n                    }\r\n                    Div(col-sm-9){\r\n                        If(#Type#==datetime){\r\n                            Input(Name:#Name#, Type:date)\r\n                        }.ElseIf(#Type#==select){\r\n                            Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                        }.Else{\r\n                            Input(Name:#Name#, Type:#Type#)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Div(panel-footer text-right){\r\n            Button(Body: LangRes(udpate_metrics), Page: @1sysparams_ecosystems_list, Class:btn btn-primary, Contract:MetricsUpdate)\r\n        }\r\n    }\r\n    Form(panel panel-primary){\r\n        Div(panel-body){\r\n            Form(table-responsive){\r\n                Input(Name: TableWritten, Type: hidden, Value: ecosystems)\r\n                Input(Name: ColumnName, Type: hidden, Value: is_valued)\r\n                Input(Name: Duration, Type: hidden, Value: 3)\r\n                Input(Name: TemplateId, Type: hidden, Value: #template_id#)\r\n                Table(ecos, \"$name$=name,=_valued,metrics=_metrics,=_actions\")\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"id\").Vars(application)\r\nSetVar(role_validator, AppParam(App:#application_id#, Name: role_validator))\r\nSetTitle(Platform parameters)\r\nJsonToSource(nodes){\r\n    SysParam(full_nodes)\r\n}\r\nForList(nodes){\r\n    Div(#key_id#)\r\n}\r\nDBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){\r\n    DBFind(contracts).Where({name:#name#}).Columns(id).Vars(sp)\r\n    If(#sp_id#>0){\r\n        If(#name#==\"full_nodes\"){\r\n            LinkPage(Class: fa fa-edit, Page: @1sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }.Else{\r\n            LinkPage(Class: fa fa-edit, Page: @1sysparams_voting, PageParams: \"param_index=#id#,param_name=#name#\")\r\n        }\r\n    }.Else{\r\n        condition contract not found\r\n    }\r\n}.Custom(_val){\r\n    Div(){\r\n        #value#\r\n    }.Style(max-width: 500px;overflow: hidden;)\r\n}\r\nDiv(){\r\n    Div(breadcrumb){\r\n        Div(Class:text-muted, Body: \"Parameters for configuring nodes, transactions, blocks, and payment for network resources.\")\r\n        Div(Class:text-muted, Body: \"Parameters change only by voting of different roles.\")\r\n    }\r\n    DBFind(roles_participants).Where({\"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\r\n    If(#validator_id#>0){\r\n        AddToolButton(Title: $sysparams_validator_resign$, Icon: icon-pin, Page: @1sysparams_validator_resign)\r\n    }\r\n    Div(table-responsive){\r\n        Table(src_sysparams,\"ID=id,$name$=name,$value$=_val,=_actions\")\r\n    }\r\n}.Style(\r\n    tbody > tr:nth-of-type(odd) {\r\n        background-color: #fafbfc;\r\n    }\r\n    tbody > tr > td {\r\n        word-break: break-all;\r\n        font-weight: 400;\r\n        font-size: 13px;\r\n        color: #666;\r\n        border-top: 1px solid #eee;\r\n        vertical-align: middle;\r\n    }\r\n    tr > *:first-child {\r\n        padding-left:20px;\r\n        width: 80px;\r\n    }\r\n    tr > *:last-child {\r\n        padding-right:30px;\r\n        text-align:right;\r\n        width: 100px;\r\n    }\r\n    thead {\r\n        background-color: #eee;\r\n    }\r\n    table a {\r\n        font-size: 18px;\r\n    }\r\n)",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_metrics",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Div(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body: LangRes(sysparams_ecos), Page: @1ecosystems_list)\r\n        Span(\"/\",mh-sm)\r\n        Span(LangRes(sysparams_metrics), text-muted)\r\n    }\r\n    SetVar(title,\"LangRes(sysparams_metrics)\")\r\n    SetTitle(#title#)\r\n    Div(container){\r\n        If(GetVar(Id)){\r\n            SetVar(title,\"LangRes(sysparams_metrics): LangRes(ecosystem) ##Id#\")\r\n            SetTitle(#title#)\r\n            Data(tables, \"Name,Metric\"){\r\n                pages,ecosystem_pages\r\n                members,ecosystem_members\r\n                tx,ecosystem_tx\r\n            }\r\n            ForList(tables){\r\n                DBFind(metrics,src_metric).Where({key:#Id#, metric:#Metric#}).Order(\"time\").Count(count)\r\n                If(#count#>0){\r\n                    Div(h3){LangRes(#Name#)}\r\n                    Table(src_metric,\"$timestam$=time,$value$=value\")\r\n                }\r\n            }\r\n        }.Else{\r\n            Div(alert alert-warning){\r\n                Ecosystem id not found\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_validator_resign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"id\").Vars(application)\r\nSetVar(role_validator, AppParam(App:#application_id#, Name: role_validator))\r\nDBFind(roles_participants).Where({\"member->member_id\":#key_id#, \"role->id\":#role_validator#, deleted:0}).Columns(\"id\").Vars(validator)\r\nSetTitle($sysparams_validator_resign$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage(Body:$system_params$, Page: @1sysparams_list)\r\n        Span(/,mh)\r\n        Span(Class: text-muted, Body: $sysparams_validator_resign$)\r\n    }\r\n    If(#validator_id#>0){\r\n        Div(row){\r\n            Div(col-md-6 col-md-offset-3){\r\n                Div(panel panel-primary text-center){\r\n                    Div(panel-heading){\r\n                        $validator_removing$\r\n                    }\r\n                    Div(panel-body text-center){\r\n                        $validator_removing_desc$\r\n                    }\r\n                    Div(panel-footer text-left){\r\n                        Button(Body: $back$, Class: btn btn-default, Page: @1sysparams_list)\r\n                        Button(Body: $resign$, Class: btn btn-danger pull-right, Page: @1sysparams_list, Contract: ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(text-danger text-center text-bold){\r\n            LangRes(attention_not_validator)\r\n        }\r\n    }\r\n\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "sysparams_voting",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\nSetVar(tid, AppParam(App:#application_id#, Name: voting_sysparams_template_id))\r\nDBFind(voting_templates,temps).WhereId(#tid#).Vars(template)\r\nSetTitle($voting$)\r\n\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($system_params$, @1sysparams_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $voting$)\r\n    }\r\n\r\n    If(And(#template_id#>0,#param_index#>0,#param_name#!=\"\")){\r\n        DBFind(system_parameters).Where({name:#param_name#}).Vars(param)\r\n        DBFind(voting_templates).WhereId(#template_id#).Columns(\"title,id\").Vars(template)\r\n        SetTitle(#template_title#)\r\n        If(#param_name#!=\"full_nodes\"){\r\n            Form(){\r\n                Div(form-group){\r\n                    Label(For: ColumnName){\r\n                        LangRes(name)\r\n                    }\r\n                    Input(Name: ColumnName, Value: #param_name#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: Duration){\r\n                        LangRes(duration)\r\n                    }\r\n                    Input(Name:Duration, Value:21, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: TemplateId){\r\n                        LangRes(template_id)\r\n                    }\r\n                    Input(Name: TemplateId, Value:#template_id#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(For: Value){\r\n                        LangRes(value)\r\n                    }\r\n                    Input(Name: Value, Value: #param_value#, Disabled: true)\r\n                }\r\n                Div(form-group){\r\n                    Label(){\r\n                        LangRes(new_value)\r\n                    }\r\n                    Input(Name: NewValue, Type: textarea)\r\n                }\r\n                Div(text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1sysparams_list)\r\n                    Button(Body: LangRes(voting), Class: btn btn-primary pull-right, Contract: VotingTemplateRun, Page: @1voting_list)\r\n                }\r\n            }\r\n        }.Else{\r\n            SetVar(full_nodes,SysParam(full_nodes)).(first_node,AppParam(App:#application_id#, Name: first_node)).(first_node_set,)\r\n            SetTitle(\"#param_name#: $add$ $new_value$\")\r\n            Form(){\r\n                If(`#full_nodes#`==\"\"){\r\n                    JsonToSource(src_first_node,#first_node#)\r\n                    ForList(src_first_node){\r\n                        If(#value#==\"\"){\r\n                            SetVar(first_node_set,error)\r\n                        }\r\n                    }\r\n                    If(#first_node_set#==error){\r\n                        Div(text-center){\r\n                            ForList(src_first_node){\r\n                                If(#value#==\"\"){\r\n                                    Div(){first node: '#key#' empty}\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(text-center){\r\n                            DBFind(app_params).Where({name:first_node}).Vars(first_node_param)\r\n                            Button(Page: app_params_edit, Class: btn btn-info, PageParams: \"id=#first_node_param_id#,back_page=@1sysparams_list\"){\r\n                                Install the first node before adding the new\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                If(#first_node_set#!=error){\r\n                    Div(form-group){\r\n                        Label(For: Duration){\r\n                            LangRes(duration)\r\n                        }\r\n                        Input(Name:Duration, Value:21, Disabled: true)\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: TcpAddress){\r\n                            LangRes(tcp_address)\r\n                        }\r\n                        Input(Name: TcpAddress, Placeholder: \"#.#.#.#:#\")\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: ApiAddress){\r\n                            LangRes(api_address)\r\n                        }\r\n                        Input(Name: ApiAddress, Placeholder: \"#://#.#.#.#:#\")\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: KeyId){\r\n                            LangRes(node_founder_key_id)\r\n                        }\r\n                        Input(Name: KeyId,Type: number, Value: #key_id#)\r\n                    }\r\n                    Div(form-group){\r\n                        Label(For: PubKey){\r\n                            LangRes(node_pub_key)\r\n                        }\r\n                        Input(Name: PubKey, Type: textarea)\r\n                    }\r\n\r\n                    Div(text-left mb-lg){\r\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: @1sysparams_list)\r\n                        Button(Body: LangRes(voting), Class: btn btn-primary pull-right, Contract: VotingNodeAdd, Page: @1voting_list)\r\n                    }\r\n                }\r\n            }\r\n            AppParam(App:#application_id#, Name:full_nodes_keys, Source:nodes_keys)\r\n            SetVar(node_owner,)\r\n            ForList(nodes_keys){\r\n                If(#name#==\"key_id\"){\r\n                    SetVar(node_owner, 1)\r\n                }\r\n            }\r\n\r\n            If(#node_owner#==1){\r\n                Form(text-center){\r\n                    Div(h3){$delete_node$}\r\n                    Div(){$delete_node_desc$}\r\n                    Div(text-right){\r\n                        Button(Body: LangRes(delete), Class: btn btn-danger, Page: @1sysparams_list, Contract: NodeRemoveByKey)\r\n                    }\r\n                }\r\n            }\r\n            If(`#full_nodes#`!=\"\"){\r\n                ArrayToSource(src_full_nodes,`#full_nodes#`)\r\n                Div(mt-lg form-group text-left text-muted){\r\n                    Label(){Nodes list}\r\n                    ForList(src_full_nodes){\r\n                        JsonToSource(src_node,`#value#`)\r\n                        Div(list-group-item){\r\n                            Label(){node #key#}\r\n                            ForList(src_node){\r\n                                Div(){\r\n                                    Strong(#key#:) #value#\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }.Style(word-break: break-all;)\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(text-danger text-center text-bold){\r\n            If(#param_index#>0){}.Else{\r\n                Div(){LangRes(attention)}\r\n            }\r\n            If(#tid#>0){\r\n                If(#template_id#>0){}.Else{\r\n                    Div(mb-sm){\r\n                        LangRes(voting_template_not_found)\r\n                    }\r\n                    LinkPage(Page: @1voting_templates_list, Class: btn btn-info){\r\n                        Set the template\r\n                    }\r\n                }\r\n            }.Else{\r\n                Div(mb-sm){\r\n                    LangRes(voting_template_id_not_found)\r\n                }\r\n                DBFind(app_params).Where({name:voting_sysparams_template_id}).Vars(template_param)\r\n                LinkPage(Page: app_params_edit, Class: btn btn-info, PageParams: \"back_page=@1sysparams_list,id=#template_param_id#\"){\r\n                    Set the template ID\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "admin_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_accept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#notific_id#>0){\r\n    DBFind(notifications).WhereId(#notific_id#).Columns(\"id,page_params->tokenrefund_id,closed\").Vars(note)\r\n    DBFind(tokenrefund).WhereId(#note_page_params_tokenrefund_id#).Vars(tr)\r\n\r\n    Data(inputs,\"Name,Type,Res,Value\"){\r\n        Amount,number,amount,#tr_amount#\r\n        VictimAccount,text,tokenrefund_victim,#tr_victim_key_id#\r\n        SuspectAccount,text,tokenrefund_attacker,#tr_attacker_key_id#\r\n        Note,textarea,description,#tr_note#\r\n    }\r\n    Div(content-wrapper){\r\n        Div(row){\r\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n                Div(panel panel-primary){\r\n                    Div(panel-heading, Body: $tokenrefund_start$)\r\n                    Div(panel-body){\r\n                        ForList(inputs){\r\n                            Div(row form-group){\r\n                                Div(col-sm-4){LangRes(#Res#)}\r\n                                Div(col-sm-8){\r\n                                    If(#Type#==textarea){\r\n                                        #Value#\r\n                                    }.Else{\r\n                                        Input(Name: #Name#, Type: #Type#, Value: #Value#, Class: disabled, Disabled: true)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(panel-footer text-right){\r\n                        If(#note_closed# == 0){\r\n                            Button(Body: $approve$, Contract: TokensRefundAccept, Params: \"Id=#tr_id#\", Page: @1tokenrefund_list, Class: btn btn-primary)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "Data(Source: inputs, Columns:\"name,type,res,placeholder\"){\r\n    Amount,number,amount,\"\"\r\n    VictimAccount,text,tokenrefund_victim,\"Key ID or Wallet\"\r\n    SuspectAccount,text,tokenrefund_attacker,\"Key ID or Wallet\"\r\n    Note,textarea,description,\"\"\r\n}\r\nDiv(content-wrapper){\r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading, Body: $tokenrefund_start$)\r\n                Div(panel-body){\r\n                    ForList(Source: inputs){\r\n                        Div(row form-group){\r\n                            Div(col-sm-4){LangRes(#res#)}\r\n                            Div(col-sm-8){\r\n                                Input(Name: #name#, Type: #type#, Placeholder: #placeholder#)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1tokenrefund_list)\r\n                    Button(Body: $start_refund$, Contract: VotingTokensRefundCreate, Page: @1tokenrefund_list, Class: btn btn-primary pull-right)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokenrefund_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n    SetTitle($tokenrefund_list$)\r\n\r\n    DBFind(tokenrefund,tokenrefunds).Order({id:\"-1\"}).Custom(_status){\r\n        If(#status#>0){\r\n            SetVar(sta,AppParam(App:#application_id#, Name: tokenrefund_status, Index: #status#))\r\n            LangRes(#sta#)\r\n        }.Else{\r\n            $tokenrefund_status0$\r\n        }\r\n    }.Custom(_result){\r\n        If(#result#>0){\r\n            SetVar(res,AppParam(App:#application_id#, Name: tokenrefund_result, Index: #result#))\r\n            LangRes(#res#)\r\n        }.Else{\r\n            $tokenrefund_result0$\r\n        }\r\n    }.Custom(_blocked){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #blocked_at#)\r\n    }.Custom(_closed){\r\n        DateTime(Format: YYYY-MM-DD HH:MI:SS, DateTime: #closed_at#)\r\n    }.Custom(_accounts){\r\n        Div(){$tokenrefund_victim$: #victim_key_id#}\r\n        Div(){$tokenrefund_attacker$: #attacker_key_id#}\r\n    }.Custom(_voting){\r\n        LinkPage(Page: @1voting_view, PageParams: \"vID=#voting_id#\"){##voting_id#}\r\n    }\r\n\r\n    Div(panel panel-primary){\r\n        Div(table-responsive){\r\n            Table(tokenrefunds,\"$accounts$=_accounts,$amount$=amount,$description$=note,$validator_id$=validator_id,$blocked_at$=_blocked,$voting$=_voting,$result$=_result,$status$=_status,$closed$=_closed\")\r\n        }\r\n\r\n        Form(panel-footer text-right){\r\n            Button(Body: $request_refund$, Class: btn btn-primary, Page: @1tokenrefund_create)\r\n        }\r\n    }\r\n}\r\n\r\n",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "tokens_transfer",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Form(){\n    If(Or(#v_id#>0,#v_id#<0)){\n        SetVar(Name: v_address, Value: Address(#v_id#))\n    }.Else{\n        SetVar(Name: v_address, Value: \"\")\n    }\n    Div(form-group){\n        Label($recipient$)\n        Input(Name: Recipient_Account, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #v_address#)\n    }\n    Div(form-group){\n        Label($amount$)\n        Input(Name: Amount, Type: Number)\n    }\n    Div(form-group){\n        Button(Body: LangRes(send), Class: btn pull-right btn-primary, Page: @1members_list, Contract: TokensSend).Alert(Text: $want_send_tokens$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n        Button(Body: LangRes(back), Class: btn pull-right btn-default, Page: @1members_list)\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_create",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\r\n\r\nSetTitle($new_voting$)\r\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: type_voting_decisions)\r\nAppParam(App:#application_id#, Name: type_voting_participants, Source: type_voting_participants)\r\nData(inputs,\"Name,Type,Res,Req,Src,Val,Desc\"){\r\n    voting_name,input,name,*,,\"New voting\",\r\n    type_decision,select,decision,*,type_voting_decisions,,\r\n    type_participants,select,participants,*,type_voting_participants,,\r\n    volume,number,voting_volume,*,,75,$voting_volume_desc$\r\n    quorum,number,voting_quorum,*,,51,$voting_quorum_desc$\r\n    start,datetime,date_start,*,,,\r\n    end,datetime,date_end,*,,,\r\n    description,textarea,description,,,,\r\n\r\n}\r\nData(DataRadioButton,\"Name,Value\"){\r\n    Percentage of votes,0\r\n    Number of votes,1\r\n}\r\nDiv(content-wrapper){\r\n    Div(breadcrumb){\r\n        LinkPage($voting$, @1voting_list)\r\n        Span(/).Style(margin-right: 10px; margin-left: 10px;)\r\n        Span(Class: text-muted, Body: $new_voting$)\r\n    }\r\n\r\n    Div(row){\r\n        Div(col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2){\r\n            Form(panel panel-primary){\r\n                Div(panel-heading){LangRes(new_voting)}\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-3 mt-sm text-right){\r\n                                Label(){\r\n                                    Span(Vote count type)\r\n                                    Span(*,text-danger)\r\n                                }\r\n                            }\r\n                            Div(col-md-9 text-left){\r\n                                RadioGroup(count_type_voters,DataRadioButton,Name,Value) \r\n                            }\r\n                        }\r\n                    }\r\n                    ForList(inputs){\r\n                        Div(form-group){\r\n                            Div(row){\r\n                                Div(col-md-3 mt-sm text-right){\r\n                                    Label(For:#Name#){\r\n                                        LangRes(#Res#)\r\n                                        If(#Req#==*){\r\n                                            Span(*,text-danger)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(col-md-9 text-left){\r\n                                    If(#Type#==input){\r\n                                        Input(Name: #Name#, Value: #Val#)\r\n                                    }.ElseIf(#Type#==select){\r\n                                        Select(Name: #Name#, Source: #Src#, NameColumn: name, ValueColumn: id)\r\n                                    }.ElseIf(#Type#==number){\r\n                                        Input(Name: #Name#, Value: #Val#, Type:#Type#)\r\n                                    }.ElseIf(#Type#==textarea){\r\n                                        Input(Name: #Name#, Type:#Type#)\r\n                                    }.ElseIf(#Type#==datetime){\r\n                                        Div(row){\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #Name#_date, Type: date)\r\n                                            }\r\n                                            Div(col-md-6){\r\n                                                Input(Name: #Name#_time, Type: time)\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    If(`#Desc#`!=\"\"){\r\n                                        Div(m0 text-muted){\r\n                                            #Desc#\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                Div(panel-footer text-left){\r\n                    Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_list)\r\n                    Input(Name: voting_type, Type: hidden, Value: 1)\r\n                    Button(Body: LangRes(create), Class: btn btn-primary pull-right, Page: @1voting_list, Contract: VotingCreate)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_candidates",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(votings).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n        DBFind(roles,src_roles).Where({role_type:2, deleted:0}).Columns(\"id,role_name\").Count(elective_roles_count)\n        DBFind(votings_subject).Where({voting_id:#vID#, \"subject->member_id\":#key_id#}).Columns(\"id\").Vars(already_candidate)\n\n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, @1voting_list)\n            Span(/,mh)\n            LinkPage(#instance_voting_name#, @1voting_view,, \"vID=#vID#\")\n            Span(/,mh)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        If(#elective_roles_count#>0){\n            Div(row mt-sm){\n                Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                    Form(panel panel-primary){\n                        Div(panel-body){\n                            SetVar(hidden,)\n                            If(#already_candidate_id#>0){\n                                SetVar(hidden,hidden)\n                            }\n                            Div(row mt-sm #hidden#){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(candidates))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Div(input-group){\n                                        Input(Name: can_apply_voting, Disabled: 1, Value: \"$can_apply_voting$\")\n                                        Div(input-group-btn){\n                                            Button(Body: LangRes(apply), Class: btn btn-primary, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#\", Contract: VotingSubjectCandidates)\n                                        }\n                                    }\n                                }\n                            }\n\n                            Div(row mt-sm){\n                                Div(col-sm-9 col-sm-offset-3){\n                                    DBFind(votings_subject,src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\n                                        Address(#subject.member_id#)\n                                    }.Custom(_member){\n                                        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                                            Span(Body: #subject.member_name#)\n                                        }\n                                    }\n                                    Table(src_voting_subject, \"$candidates$=_member,$address$=_address\")\n                                }\n                            }\n                            Div(form-group){\n                                Div(row mt-sm){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(role))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                    }\n                                }\n                                Div(row mt-sm){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(vacancies))\n                                            Span(Class: text-danger, Body:*)\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)\n                                    }\n                                }\n                            }\n                            Div(form-group){\n                                Div(row mt-sm){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(contract_accept))\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                        InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                    }\n                                }\n                                Div(row mt-sm){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(params))\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                    }\n                                }\n                                Div(row mt-sm){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(contract_reject))\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                        InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                    }\n                                }\n                                Div(row mt-sm){\n                                    Div(col-md-3 mt-sm text-right){\n                                        Label(){\n                                            Span(Body: LangRes(params))\n                                        }\n                                    }\n                                    Div(col-md-9 text-left){\n                                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                    }\n                                }\n                            }\n                        }\n                        Div(panel-footer text-right){\n                            Div(pull-left){\n                                Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_view, PageParams: \"vID=#vID#\")\n                            }\n                            Input(Name: memberID, Type: hidden, Value: 0)\n                            Input(Name: votingID, Type: hidden, Value: #vID#)\n                            Button(Body: LangRes(save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectSettings)\n                        }\n                    }\n                }\n            }\n        }.Else{\n            Div(row){\n                Div(col-md-12 text-center h3){\n                    P(LangRes(elective_roles_not_found))\n                    Button(Class: btn btn-link, Page: @1roles_create, PageParams: \"back_page=@1voting_decision_candidates,vID=#vID#\"){\n                        Span(Class: h3, Body: LangRes(create_role))\n                    }.Popup(50, $edit_role$)\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_contract",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name\").Vars(instance)\n        DBFind(votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Vars(prefix)\n\n        If(#prefix_id#>0){\n        }.Else{\n            SetVar(prefix_subject_contract_accept,)\n            SetVar(prefix_subject_contract_accept_params,)\n            SetVar(prefix_subject_contract_reject,)\n            SetVar(prefix_subject_contract_reject_params,)\n        }\n\n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage(Body:$voting$, Page: @1voting_list)\n            Span(/,mh)\n            LinkPage(Body:#instance_voting_name#, Page: @1voting_view, PageParams:\"vID=#vID#\")\n            Span(/,mh)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(contract_accept)).(Class: text-danger, Body:*)\n                                }\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                Input(Name: contract_accept, Value: #prefix_subject_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                            }\n                        }\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(){\n                                    Span(Body: LangRes(params))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Name: contract_accept_params, Value: #prefix_subject_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                            }\n                        }\n\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #prefix_subject_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #prefix_subject_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_view, PageParams: \"vID=#vID#\")\n                        }\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectContract)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_document",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n        DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text\").Vars(prefix)\n\n        If(#prefix_id#>0){\n        }.Else{\n            SetVar(Name: prefix_subject_text, Value: \"\")\n        }\n\n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, @1voting_list)\n            Span(/,mh)\n            LinkPage(#instance_voting_name#, @1voting_view,, \"vID=#vID#\")\n            Span(/,mh)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-12 mt-sm){\n                                    Label(){\n                                        Span(Body: LangRes(text_document))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                    Input(Name: text_document, Type: textarea, Value: #prefix_subject_text#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row mb-sm){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_view, PageParams: \"vID=#vID#\")\n                        }\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectDocument)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_election",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(votings, src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n\n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, @1voting_list)\n            Span(/,mh)\n            LinkPage(#instance_voting_name#, @1voting_view,, \"vID=#vID#\")\n            Span(/,mh)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n        SetVar(candidates,0)\n        DBFind(votings_subject, src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\n            SetVar(candidates,\"#candidates#,#subject.member_id#\")\n            Address(#subject.member_id#)\n        }.Custom(_member){\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\n                Span(Body: #subject.member_name#)\n            }\n        }\n        DBFind(keys,src_keys).Where({id:{\"$nin\":[#candidates#]}}).Columns(\"id\").Custom(_name){\n            DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\n            Address(#id#)\n            If(Or(#m_id#>0,#m_id#<0)){\n                \" (#m_member_name#)\"\n            }\n        }\n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(candidates)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Div(input-group){\n                                        Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                                        Div(input-group-btn){\n                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: @1voting_decision_election, PageParams: \"vID=#vID#\", Contract: VotingSubjectCandidates)\n                                        }\n                                    }\n                                }\n                            }\n                            Div(row){\n                                Div(col-sm-9 col-sm-offset-3){\n                                    Table(src_subject, \"$candidates$=_member,$address$=_address\")\n                                }\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(role)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    DBFind(roles,src_roles).Where({role_type:2, deleted:0}).Columns(\"id,role_name\").Count(count_roles)\n                                    If(#count_roles#>0){\n                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)\n                                    }.Else{\n                                        elected role is not found\n                                    }\n                                }\n                            }\n\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(vacancies)).(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)\n                                }\n                            }\n                        }\n                        Div(list-group-item){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_view, PageParams: \"vID=#vID#\")\n                        }\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectSettings)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_decision_formal",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "Div(content-wrapper){\n    If(#vID# > 0){\n        DBFind(votings,src_voting).WhereId(#vID#).Columns(\"id,voting->name,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params\").Vars(instance)\n        DBFind(votings_subject,src_subject).Where({voting_id:#vID#}).Columns(\"id,subject->column,subject->column_value,subject->table_id,subject->table,subject->description\").Vars(prefix)\n\n        If(#prefix_id#>0){\n        }.Else{\n            SetVar(prefix_subject_description,)\n            SetVar(prefix_subject_table,)\n            SetVar(prefix_subject_table_id,)\n            SetVar(prefix_subject_column,)\n            SetVar(prefix_subject_column_value,)\n        }\n\n        SetTitle($subject_voting$)\n        Div(breadcrumb){\n            LinkPage($voting$, @1voting_list)\n            Span(/,mh)\n            LinkPage(#instance_voting_name#, @1voting_view,, \"vID=#vID#\")\n            Span(/,mh)\n            Span(Class: text-muted, Body: $subject_voting$)\n        }\n\n        Div(row){\n            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){\n                Form(panel panel-primary){\n                    Div(panel-body){\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(table_to_written))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: table_to_written, Value: #prefix_subject_table#, Placeholder: \"$table_to_written_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(row_id))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: row_id, Class: form-control, Type: number, Value: #prefix_subject_table_id#, Placeholder: \"$row_id_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(column_name))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: column_name, Value: #prefix_subject_column#, Placeholder: \"$column_name_desc$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(written_value))\n                                        Span(Class: text-danger, Body:*)\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: written_value, Value: #prefix_subject_column_value#, Placeholder: \"$written_value_desc$\")\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-lg text-right){\n                                    Label(){\n                                        Span(Body: LangRes(description))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: description, Class: form-control, Type: textarea, Value: #prefix_subject_description#)\n                                }\n                            }\n                        }\n                        Div(form-group){\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_accept))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: \"$contract_accept_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(contract_reject))\n                                    }\n                                }\n                                Div(col-md-9 mb-sm text-left){\n                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: \"$contract_reject_des$\").Validate(minLength:3, maxLength:255)\n                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)\n                                }\n                            }\n                            Div(row){\n                                Div(col-md-3 mt-sm text-right){\n                                    Label(){\n                                        Span(Body: LangRes(params))\n                                    }\n                                }\n                                Div(col-md-9 mc-sm text-left){\n                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: \"$contract_params_des$\")\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-right){\n                        Div(pull-left){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_view, PageParams: \"vID=#vID#\")\n                        }\n                        Input(Name: votingID, Type: hidden, Value: #vID#)\n                        Button(Body: LangRes(save), Class: btn btn-primary, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: VotingSubjectFormal)\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_invite",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#vID# > 0){\r\n    Form(){\r\n        If(GetVar(back_page)){}.Else{\r\n            SetVar(back_page,@1voting_view)\r\n        }\r\n        DBFind(votings).WhereId(#vID#).Columns(\"id,voting->name,voting->type_participants\").Vars(instance)\r\n        SetVar(participants,0)\r\n        DBFind(votings_participants, src_participants).Where({voting_id:#vID#}).Columns(\"id,member->member_id,member->member_name,member->role_id,member->member->member_id,member->member->member_name\").Count(participants_count).Custom(_id){\r\n            SetVar(participants,\"#participants#,#member.member_id#\")\r\n            #member.member_id#\r\n        }.Custom(_name){\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#member.member_id#\", Body: #member.member_name#)\r\n        }.Custom(custom_member_role){\r\n            If(#instance_voting_type_participants# == 4){\r\n                DBFind(\"roles\").Columns(\"id,role_name\").WhereId(#member.role_id#).Vars(rl)\r\n                Span(#rl_role_name#)\r\n            }\r\n        }.Custom(custom_sent){\r\n            Span(Body: Role added to vote)\r\n        }.Custom(custom_member_roles){\r\n            DBFind(\"roles\").Columns(\"id,role_name\").WhereId(#member.role_id#).Vars(rl)\r\n            LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                Span(Class: fa icon-settings fa-2x mr-sm).(#rl_role_name#)\r\n            }.Style(display:flex; align-items:center;)\r\n        }\r\n        Div(form-group){\r\n            If(#instance_voting_type_participants# == 1){\r\n                Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_members$\")\r\n            }\r\n            If(#instance_voting_type_participants# == 2){\r\n                Label(){\r\n                    LangRes(select_member)\r\n                    Span(*, text-danger)\r\n                }\r\n                DBFind(keys,src_keys).Where({id:{\"$nin\":[#participants#]}}).Columns(\"id\").Count(keys_count).Custom(_name){\r\n                    DBFind(members).WhereId(#id#).Columns(\"id,member_name\").Vars(m)\r\n                    Address(#id#)\r\n                    If(Or(#m_id#>0,#m_id#<0)){\r\n                        \" (#m_member_name#)\"\r\n                    }\r\n                }\r\n                If(#keys_count#>0){\r\n                    Select(Name: var_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\r\n                }.Else{\r\n                    Input(Name: voting_all_members, Disabled: 1, Value: \"$voting_all_keys_added$\")\r\n                }\r\n            }\r\n            If(#instance_voting_type_participants# == 3){\r\n                Label(){\r\n                    LangRes(select_role)\r\n                    Span(*, text-danger)\r\n                }\r\n                DBFind(roles, src_roles).Where({deleted:0}).Columns(\"id,role_name\")\r\n                Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n            }\r\n            If(Or(#instance_voting_type_participants# == 4,#instance_voting_type_participants# == 5)){\r\n                Div(row){\r\n                    Div(col-md-12){\r\n                        Label(){\r\n                            Span(Body: LangRes(select_role))\r\n                            Span(Class: text-danger, Body:*)\r\n                        }\r\n                        DBFind(roles, src_roles).Where({deleted:0}).Columns(\"id,role_name\")\r\n                        Select(Name: var_id, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        Div(form-group text-left){\r\n            Button(Body: LangRes(back), Class: btn btn-default, Page: #back_page#, PageParams: \"vID=#vID#\")\r\n            Input(Name: votingID, Type: hidden, Value: #vID#)\r\n            If(#instance_voting_type_participants# == 2){\r\n                If(#keys_count#>0){\r\n                    Button(Body: LangRes(add_member), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: VotingInvite)\r\n                }\r\n            }.ElseIf(#instance_voting_type_participants# == 3){\r\n                Button(Body: LangRes(add_role), Class: btn btn-primary pull-right, Page: #back_page#, PageParams: \"vID=#vID#\", Contract: VotingInvite)\r\n            }.ElseIf(Or(#instance_voting_type_participants# == 4,#instance_voting_type_participants# == 5)){\r\n                Button(Body: LangRes(add_role), Class: btn btn-primary pull-right, Page:#back_page#, PageParams: \"vID=#vID#\", Contract: VotingInvite)\r\n            }\r\n        }\r\n        Div(list-group-item){\r\n            If(#participants_count#>0){\r\n                Div(form-group){\r\n                    If(#instance_voting_type_participants# == 5){\r\n                        Table(src_participants, \"Role name=custom_member_roles,=custom_sent\")\r\n                    }.ElseIf(#instance_voting_type_participants# == 4){\r\n                        Table(src_participants, \"$id$=_id,$member_name$=_name,Role name=custom_member_roles,=custom_sent\")\r\n                    }.Else{\r\n                        Table(src_participants, \"$id$=_id,$member_name$=_name\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Else{\r\n    Div(alert alert-danger text-center){\r\n        Span(Body: LangRes(attention))\r\n    }\r\n    Div(form-group text-left){\r\n        Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_list)\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\nSetTitle($voting_list$)\n\nIf(GetVar(Search)){\n    SetVar(Where,{\"voting->name\":{\"$like\":#Search#}, deleted:0})\n}.Else{\n    SetVar(Where,{deleted:0}).(Search,)\n}\n\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\nSetVar(this_page,\"@1voting_list\")\n\nAddToolButton(Title: Templates list, Page: @1voting_templates_list, Icon: fa icon-pin)\nAddToolButton(Title: $create$, Page: @1voting_create, Icon: icon-plus)\nDiv(content-wrapper){\n    \n    If(EcosysParam(Name:founder_account)==#key_id#){\n        Button(Body: $update_votings_statuses$, Class: btn btn-default, Page: #this_page#, Contract: VotingStatusUpdate)\n    }\n\n    SetVar(table,\"votings\").(per_page,20)\n    Div(mt){\n        Include(basic_paginator)\n    }\n    DBFind(#table#,src_voting).Where(#Where#).Order({id:-1}).Offset(#paginator_offset#).Limit(#per_page#).Columns(\"id,voting->name,voting->type,voting->type_decision,voting->type_participants,flags->success,flags->decision,flags->full_data,progress->percent_success,progress->number_participants,creator->member_id,creator->member_name,date_started,date_ended,deleted,status\").Custom(_id){\n        Span(Class: h5, Body: #id#)\n\n        SetVar(started_class,text-bold).(finished_class,text-bold)\n        If(Or(#status#==#STARTED#,#status#==#FINISHED#)){\n            SetVar(started_class,text-muted)\n        }\n        If(#status#==#FINISHED#){\n            SetVar(finished_class,text-muted)\n        }\n    }.Custom(_name){\n        LinkPage(Page: @1voting_view, PageParams: \"vID=#id#\"){\n            Span(Class: h5 text-bold m0, Body: #voting.name#)\n        }\n    }.Custom(_subject){\n        SetVar(decision, AppParam(App:#application_id#, Name: type_voting_decisions, Index: #voting.type_decision#))\n        Div(h6 m0){\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\n                #decision#\n            }.Else{\n                If(#voting.type_decision# == 1){\n                    SetVar(link_page,\"@1voting_decision_candidates\")\n                }.ElseIf(#voting.type_decision# == 2){\n                    SetVar(link_page,\"@1voting_decision_election\")\n                }.ElseIf(#voting.type_decision# == 3){\n                    SetVar(link_page,\"@1voting_decision_document\")\n                }.ElseIf(#voting.type_decision# == 4){\n                    SetVar(link_page,\"@1voting_decision_formal\")\n                }.ElseIf(#voting.type_decision# == 5){\n                    SetVar(link_page,\"@1voting_decision_contract\")\n                }\n                LinkPage(Page: #link_page#, PageParams: \"vID=#id#\", Class:text-bold, Body: #decision#)\n            }\n        }\n    }.Custom(_participants){\n        SetVar(participants, AppParam(App:#application_id#, Name: type_voting_participants, Index: #voting.type_participants#))\n        Div(h6 m0){\n            If(Or(#status#==#STARTED#,#status#==#FINISHED#,#voting.type#==2)){\n                #participants#\n            }.Else{\n                Button(Page: @1voting_invite, PageParams: \"vID=#id#,back_page=#this_page#\", Class: btn btn-link p0 text-bold, Body: #participants#).Popup(45, $participants_add$)\n            }\n        }\n    }.Custom(_creator){\n        LinkPage(Class: text-primary h5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#creator.member_id#\", Body: #creator.member_name#)\n    }.Custom(_date){\n        Div(Class: #started_class#, Body: DateTime(DateTime: #date_started#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(Class: #finished_class#, Body: DateTime(DateTime: #date_ended#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(_type){\n        Span(Class: h6 m0, Body: AppParam(App:#application_id#, Name: type_voting, Index: #voting.type#))\n    }.Custom(_progress){\n        Div(Class: text-center h5 text-bold, Body: #progress.percent_success# %)\n    }.Custom(_decision){\n        Div(text-center){\n            If(#flags.decision# == 0){\n                If(And(#status#==#FINISHED#,#creator.member_id#==#key_id#)){\n                    Button(Body: LangRes(decision), Class: btn btn-primary, Contract: VotingDecisionCheck, Params: \"votingID=#id#\", Page: #this_page#)\n                }.Else{\n                    Div(text-muted){LangRes(no)}\n                }\n            }.ElseIf(#flags.decision# == -2){\n                Div(text-muted){LangRes(not_enough_votes)}\n            }.ElseIf(#flags.decision# == 1){\n                Div(text-success){LangRes(accepted)}\n            }.ElseIf(#flags.decision# == -1){\n                Div(text-danger){LangRes(rejected)}\n            }\n        }\n    }.Custom(_status){\n        SetVar(status_class, AppParam(App:#application_id#, Name:voting_statuses_classes, Index:#status#))\n        Div(text-center #status_class#){\n            If(#status#==#STARTED#){\n                Button(Class: btn btn-link icon-eye, Page: @1voting_view, PageParams: \"vID=#id#\")\n            }.Else{\n                AppParam(App:#application_id#, Name:voting_statuses, Index:#status#)\n            }\n        }\n    }.Custom(_actions){\n        Div(text-right){\n            If(And(#creator.member_id#==#key_id#,#status#==#INVALID#)){\n                Button(Class: fa fa-trash btn btn-default, Contract: VotingDelete, Params: \"votingID=#id#\", Page: #this_page#).Alert(Text: $want_delete_voting$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n            }\n        }\n    }\n\n\n    Form(panel panel-primary){\n        Div(panel-body){\n            Div(row){\n                Div(col-md-12){\n                    Div(input-group){\n                        Div(input-group-addon){\n                            LangRes(name)\n                        }\n                        Input(Name: Search, Value: #Search#)\n                        Div(input-group-btn){\n                            Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: #this_page#, PageParams: \"Search=Val(Search)\")\n                        }\n                    }\n                }\n                Div(col-md-12){\n                    Div(table-responsive){\n                        Table(src_voting, \"$id$=_id,$name$=_name,$type$=_type,$subject_voting$=_subject,$participants$=_participants,$date_start$/$date_end$=_date,$creator$=_creator,$progress$=_progress,$decision$=_decision,$status$=_status,=_actions\")\n                    }\n                }\n            }\n            If(GetVar(Search)){\n                Div(row){\n                    Div(col-md-12 mt-lg){\n                        Div(text-center){\n                            Button(Body: $view_all$, Class: btn btn-default, Page: #this_page#)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_create",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\nAppParam(App:#application_id#, Name: type_voting_participants, Source: src_typepart)\nAppParam(App:#application_id#, Name: type_voting, Source: src_typevoting)\nAppParam(App:#application_id#, Name: type_voting_decisions, Source: src_typedec)\nDBFind(roles,src_roles).Where({deleted:0}).Order(id).Custom(name){\n    #role_name#\n}\n\nSetTitle($template_create$)\n\nSetVar(template_id, 0)\nSetVar(title,\"New voting\").(typevoting,0).(volume,50).(quorum,51).(subj,).(voters,).(candidates,).(vacancies,1).(contract_init,).(contract_accept,).(accept_params,).(contract_reject,).(reject_params,)\nIf(#TemplateId#>0){\n    DBFind(voting_templates).WhereId(#TemplateId#).Vars(template)\n    SetVar(title, #template_title#)\n    SetVar(typevoting, #template_type_voting#)\n    SetVar(volume, #template_volume#)\n    SetVar(subj, #template_subject#)\n    SetVar(quorum, #template_quorum#)\n    SetVar(voters, #template_voters#)\n    SetVar(candidates, #template_candidates#)\n    SetVar(vacancies, #template_vacancies#)\n    SetVar(contract_init, #template_init_contract#)\n    SetVar(contract_accept, #template_contract_accept#)\n    SetVar(accept_params, #template_accept_params#)\n    SetVar(contract_reject, #template_contract_reject#)\n    SetVar(reject_params, #template_reject_params#)\n}\n\nIf(#TypeDecision#>0){\n    SetVar(typedec,#TypeDecision#)\n}.Else{\n    SetVar(typedec,0)\n}\nIf(#TypeParticipants#>0){\n    SetVar(typepart,#TypeParticipants#)\n}.Else{\n    SetVar(typepart,0)\n}\nSetVar(col_right,\"col-md-8 text-left\")\nSetVar(col_left,\"col-md-4 mt-sm text-right\")\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $voting$, Page: @1voting_list)\n        Span(/, mh)\n        LinkPage(Body: $voting_templates$, Page: @1voting_templates_list)\n        Span(/, mh)\n        Span($template_create$, text-muted)\n    }\n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            If(#typedec#>0){\n                Form(panel panel-primary){\n                    Div(panel-heading){\n                        LangRes(voting_params)\n                    }\n                    Div(panel-body){\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: Title){\n                                    LangRes(name)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Input(Name: Title, Value: #title#)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: TypeParticipants){\n                                    LangRes(participants)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Div(mt-sm){\n                                    AppParam(App:#application_id#, Name: type_voting_participants, Index: #typepart#)\n                                }\n                                Input(Name: TypeParticipants, Type: hidden, Value: #typepart#)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: TypeDecision){\n                                    LangRes(decision)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Div(mt-sm){\n                                    AppParam(App:#application_id#, Name: type_voting_decisions, Index: #typedec#)\n                                }\n                                Input(Name: TypeDecision, Type: hidden, Value: #typedec#)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: TypeVoting){\n                                    LangRes(voting_type)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Select(Name: TypeVoting, Source: src_typevoting, NameColumn: name, ValueColumn: id, Value: #typevoting#)\n\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: Volume){\n                                    LangRes(voting_volume)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Input(Name: Volume, Type: number, Value: #volume#).Validate(minLength: 1)\n                                InputErr(Name: Volume, minLength: Please enter Volume)\n                                P(Class: m0 text-muted, Body: $voting_volume_desc$)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: Quorum){\n                                    LangRes(voting_quorum)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Input(Name: Quorum, Type: number, Value: #quorum#).Validate(minLength: 1)\n                                InputErr(Name: Quorum, minLength: Please enter Quorum)\n                                P(Class: m0 text-muted, Body: $voting_quorum_desc$)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: Subject){\n                                    LangRes(voting_subject)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Input(Name: Subject, Value: #subj#)\n                            }\n                        }\n                        If(Or(#typedec#==1,#typedec#==2)){\n                            Div(row form-group){\n                                Div(#col_left#){\n                                    Label(For: Vacancies){\n                                        LangRes(vacancies)\n                                        Span(*,text-danger)\n                                    }\n                                }\n                                Div(#col_right#){\n                                    Input(Name: Vacancies, Value: #vacancies#, Type: number)\n                                }\n                            }\n                            Div(row form-group){\n                                Div(#col_left#){\n                                    Label(For: Candidates){\n                                        LangRes(candidates_role)\n                                        Span(*,text-danger)\n                                    }\n                                }\n                                Div(#col_right#){\n                                    Select(Name: Candidates, Source: src_roles, NameColumn: name, ValueColumn: id, Value: #candidates#)\n                                }\n                            }\n                        }\n                        If(#typepart#==3){\n                            Div(row form-group){\n                                Div(#col_left#){\n                                    Label(For: Voters){\n                                        LangRes(voters_role)\n                                        Span(*,text-danger)\n                                    }\n                                }\n                                Div(#col_right#){\n                                    Select(Name: Voters, Source: src_roles, NameColumn: name, ValueColumn: id, Value: #voters#)\n                                }\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: InitContract){\n                                    LangRes(voting_init_contract)\n                                }\n                            }\n                            Div(#col_right#){\n                                Input(Name: InitContract, Value: #contract_init#)\n                                P(Class: m0 text-muted, Body: $voting_init_contract_desc$)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: ContractAccept){\n                                    LangRes(voting_contract_accept)\n                                }\n                            }\n                            Div(#col_right#){\n                                Div(row){\n                                    Div(col-md-6){\n                                        Input(Name: ContractAccept, Placeholder: $contract$, Value: #contract_accept#)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ParamsAccept, Placeholder: $arguments$, Value: #accept_params#)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: ContractReject){\n                                    LangRes(voting_contract_reject)\n                                }\n                            }\n                            Div(#col_right#){\n                                Div(row){\n                                    Div(col-md-6){\n                                        Input(Name: ContractReject, Placeholder: $contract$, Value: #contract_reject#)\n                                    }\n                                    Div(col-md-6){\n                                        Input(Name: ParamsReject, Placeholder: $arguments$, Value: #reject_params#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                        Button(Body: LangRes(create), Class: btn btn-primary pull-right, Page: @1voting_templates_list, Contract: VotingTemplateCreate)\n\n                    }\n                }\n            }.Else{\n                Form(panel panel-primary){\n                    Div(panel-heading){\n                        LangRes(voting_params)\n                    }\n                    Div(panel-body){\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: #name#){\n                                    LangRes(decision)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                RadioGroup(Name: TypeDecision, Value: #template_type_decision#, Source: src_typedec, ValueColumn: id, NameColumn: name)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Label(For: #name#){\n                                    LangRes(participants)\n                                    Span(*,text-danger)\n                                }\n                            }\n                            Div(#col_right#){\n                                Select(Name: TypeParticipants, Source: src_typepart, NameColumn: name, ValueColumn: id, Value: #template_type_participants#)\n                            }\n                        }\n                    }\n\n                    Div(panel-footer text-left){\n                        If(#TemplateId#>0){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_template_start, PageParams: \"TemplateId=#TemplateId#\")\n                        }.Else{\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_templates_list)\n                        }\n                        Button(Body: LangRes(next), Class: btn btn-primary pull-right, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)\")\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_template_start",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\nSetTitle($voting_start$)\n\nSetVar(col_left,\"col-md-4 text-right\")\nSetVar(col_left_for_input,\"col-md-4 mt-sm text-right\")\nSetVar(col_right,\"col-md-8 text-left\")\n\nIf(#TemplateId#>0){\n    DBFind(voting_templates).WhereId(#TemplateId#).Vars(template)\n\n    SetVar(v_role,).(c_role,)\n    If(#template_voters#>0){\n        DBFind(roles).WhereId(#template_voters#).Columns(\"role_name\").Vars(vid)\n        SetVar(v_role, \"#vid_role_name#\")\n    }\n    If(#template_candidates#>0){\n        DBFind(roles).WhereId(#template_candidates#).Columns(\"role_name\").Vars(cid)\n        SetVar(c_role, \"#cid_role_name#\")\n    }\n}\nDiv(content-wrapper){\n    Div(breadcrumb){\n        LinkPage(Body: $voting$, Page: @1voting_list)\n        Span(/, mh)\n        LinkPage(Body: $voting_templates$, Page: @1voting_templates_list)\n        Span(/,mh)\n        Span($voting_start$, text-muted)\n    }\n\n    If(#TemplateId#>0){\n        Div(row){\n            Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n                Form(panel panel-primary){\n                    Div(panel-heading){LangRes(voting_params)}\n                    Div(panel-body){\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(name))\n                            }\n                            Div(#col_right#){\n                                #template_title#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(participants))\n                            }\n                            Div(#col_right#){\n                                AppParam(App:#application_id#, Name: type_voting_participants, Index: #template_type_participants#)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voting_type))\n                            }\n                            Div(#col_right#){\n                                AppParam(App:#application_id#, Name: type_voting, Index: #template_type_voting#)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(decision))\n                            }\n                            Div(#col_right#){\n                                AppParam(App:#application_id#, Name: type_voting_decisions, Index: #template_type_decision#)\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voting_volume))\n                            }\n                            Div(#col_right#){\n                                #template_volume#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voting_quorum))\n                            }\n                            Div(#col_right#){\n                                #template_quorum#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voting_subject))\n                            }\n                            Div(#col_right#){\n                                #template_subject#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voters))\n                            }\n                            Div(#col_right#){\n                                #v_role#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(candidates))\n                            }\n                            Div(#col_right#){\n                                #c_role#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(vacancies))\n                            }\n                            Div(#col_right#){\n                                #template_vacancies#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(init_contract))\n                            }\n                            Div(#col_right#){\n                                #template_init_contract#\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voting_contract_accept))\n                            }\n                            Div(#col_right#){\n                                #template_contract_accept#\n                                If(`#template_accept_params#`!=\"\"){\n                                    (#template_accept_params#)\n                                }\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left#){\n                                Strong(LangRes(voting_contract_reject))\n                            }\n                            Div(#col_right#){\n                                #template_contract_reject#\n                                If(`#template_reject_params#`!=\"\"){\n                                    (#template_reject_params#)\n                                }\n                            }\n                        }\n                        Div(row form-group){\n                            Div(#col_left_for_input#){\n                                Label(For: Duration){\n                                    LangRes(duration)\n                                }\n                            }\n                            Div(#col_right#){\n                                Input(Name: Duration, Type: number, Value: 3)\n                            }\n                        }\n                        If(#template_type_decision#==3){\n                            Div(row form-group){\n                                Div(col-md-12){\n                                    Label(For: TextDocument){\n                                        LangRes(text_document)\n                                    }\n                                    Input(Name: TextDocument, Type: textarea)\n                                }\n                            }\n                        }.ElseIf(#template_type_decision#==4){\n                            If(#template_type_voting#==2){\n                                Div(row form-group){\n                                    Div(#col_left_for_input#){\n                                        Label(For: ColumnName){\n                                            LangRes(system_param)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right#){\n                                        Input(Name: ColumnName)\n                                    }\n                                }\n                                Div(row form-group){\n                                    Div(#col_left_for_input#){\n                                        Label(For: NewValue){\n                                            LangRes(value)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right#){\n                                        Input(Name: NewValue)\n                                    }\n                                }\n                            }.Else{\n                                Div(row form-group){\n                                    Div(#col_left_for_input#){\n                                        Label(For: TableWritten){\n                                            LangRes(table_to_written)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right#){\n                                        Input(Name: TableWritten)\n                                    }\n                                }\n                                Div(row form-group){\n                                    Div(#col_left_for_input#){\n                                        Label(For: RowId){\n                                            LangRes(row_id)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right#){\n                                        Input(Name: RowId, Type: number)\n                                    }\n                                }\n                                Div(row form-group){\n                                    Div(#col_left_for_input#){\n                                        Label(For: ColumnName){\n                                            LangRes(column_name)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right#){\n                                        Input(Name: ColumnName)\n                                    }\n                                }\n                                Div(row form-group){\n                                    Div(#col_left_for_input#){\n                                        Label(For: NewValue){\n                                            LangRes(value)\n                                            Span(*,text-danger)\n                                        }\n                                    }\n                                    Div(#col_right#){\n                                        Input(Name: NewValue)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    Div(panel-footer text-left){\n                        Button(Body: LangRes(back), Class: btn btn-default, Page: @1voting_templates_list)\n\n                        Div(pull-right){\n                            Button(Class: fa fa-copy btn btn-default, Page: @1voting_template_create, PageParams: \"TemplateId=#TemplateId#\")\n                            Button(Body: LangRes(voting_start), Class: btn btn-primary, Page: @1voting_list, Contract: VotingTemplateRun, Params: \"TemplateId=#TemplateId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }.Else{\n        Div(col-md-12 alert alert-danger text-center){\n            LangRes(attention)\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_templates_list",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(applications).Where({name:\"Basic application\"}).Columns(\"name,id\").Vars(application)\nSetTitle($voting_templates$)\nDiv(breadcrumb){\n    LinkPage($voting$, @1voting_list)\n    Span(/, mh)\n    Span($voting_templates$, text-muted)\n}\n\nIf(GetVar(Search)){\n    SetVar(Where,{\"title\":{\"$like\":#Search#}})\n}.Else{\n    SetVar(Where,{\"id\":{\"$gt\":0}}).(Search,)\n}\nSetVar(this_page,\"@1voting_templates_list\")\n\nDBFind(voting_templates, src_templates).Where(#Where#).Order(id).Count(template_count).Custom(_participants){\n    AppParam(App:#application_id#, Name:type_voting_participants, #type_participants#)\n}.Custom(_decision){\n    AppParam(App:#application_id#, Name:type_voting_decisions, #type_decision#)\n}.Custom(_type){\n    AppParam(App:#application_id#, Name:type_voting, #type_voting#)\n}.Custom(_actions){\n    Div(pull-right){\n        Button(Class: btn btn-default fa fa-eye, Page: @1voting_template_start, PageParams: \"TemplateId=#id#\")\n    }\n}.Custom(_contracts){\n    If(And(#init_contract#!=\"\",#init_contract#!=\"NULL\")){\n        Div(){#init_contract#}\n    }\n    If(And(#contract_accept#!=\"\",#contract_accept#!=\"NULL\")){\n        Div(){#contract_accept#}\n    }\n    If(And(#contract_reject#!=\"\",#contract_reject#!=\"NULL\")){\n        Div(){#contract_reject#}\n    }\n}.Custom(_vq){\n    #volume#/#quorum#\n}.Custom(_vacancies){\n    If(#vacancies#>0){\n        #vacancies#\n    }\n}\n\nIf(#template_count#>0){\n    AddToolButton(Title: $create$, Page: @1voting_template_create, Icon: icon-plus)\n}\n\nDiv(content-wrapper){\n    Form(panel panel-primary){\n        If(#template_count#>0){\n            Div(panel-body){\n                Div(row){\n                    Div(col-md-12){\n                        Div(input-group){\n                            Div(input-group-addon){\n                                LangRes(name)\n                            }\n                            Input(Name: Search, Value: #Search#)\n                            Div(input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: #this_page#, PageParams: \"Search=Val(Search)\")\n                            }\n                        }\n                    }\n                    Div(col-md-12){\n                        Div(table-responsive){\n                            Table(Source: src_templates, Columns:\"$id$=id,$name$=title,$voting_subject$=subject,$volume$/$quorum$=_vq,$voting_type$=_type,$participants$=_participants,$decision$=_decision,$vacancies$=_vacancies,$contracts$=_contracts,=_actions\")\n                        }\n                    }\n                }\n                If(GetVar(Search)){\n                    Div(row){\n                        Div(col-md-12 mt-lg){\n                            Div(text-center){\n                                Button(Body: $view_all$, Class: btn btn-default, Page: #this_page#)\n                            }\n                        }\n                    }\n                }\n            }\n        }.Else{\n            Div(panel-body text-center h3){\n                Button(Body: $install_default_templates$, Class: btn btn-primary, Page: @1voting_templates_list, Contract: VotingTemplatesInstall)\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "voting_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Value": "DBFind(applications,src_app).Columns(\"name,id\").Where({name:\"Basic application\"}).Vars(application)\r\nIf(#notific_id#>0){\r\n    DBFind(notifications,src_notifications).WhereId(#notific_id#).Columns(\"page_params->voting_id\").Vars(notific)\r\n    SetVar(vID,#notific_page_params_voting_id#)\r\n}\r\n\r\nSetVar(WAITING,1).(VALID,2).(STARTED,3).(FINISHED,4).(INVALID,5)\r\nSetVar(date_format,\"DD.MM.YYYY HH:MI\")\r\nDiv(content-wrapper){\r\n    If(#vID# > 0){\r\n        DBFind(votings).WhereId(#vID#).Columns(\"id,voting->name,voting->volume,voting->quorum,voting->type_participants,voting->type,voting->count_type_voters,voting->type_decision,voting->description,optional->role_id,optional->role_vacancies,optional->number_candidates,optional->contract_accept,optional->contract_reject,progress->number_participants,progress->number_voters,progress->percent_success,progress->percent_voters,flags->success,flags->full_data,flags->decision,flags->notifics,date_started,date_ended,status\").Vars(instance)\r\n\r\n        SetTitle(Viewing voting: #instance_voting_name#)\r\n\r\n        DBFind(votings_participants).Where({voting_id:#vID#,\"member->member_id\":#key_id#, decision:0}).Columns(\"id\").Vars(participant)\r\n        If(And(#instance_voting_type_participants# !=4,#instance_voting_type_participants# !=5)){\r\n            If(And(#instance_status#==#STARTED#,#participant_id#>0)){\r\n                SetVar(isVotingAllowed,1)\r\n            }.Else{\r\n                SetVar(isVotingAllowed,0)\r\n            }\r\n        }.Else{\r\n            DBFind(votings_participants,Source: src_mem).Where({voting_id:#vID#,\"member->role_id\":#role_id#, decision:0}).Columns(\"id\").Vars(participant_role)\r\n            If(And(#instance_status#==#STARTED#,#participant_role_id#>0)){\r\n                SetVar(isVotingAllowed,1)\r\n            }.Else{\r\n                SetVar(isVotingAllowed,0)\r\n            }\r\n        }\r\n        Div(breadcrumb){\r\n            LinkPage(Body:Votings list, Page: @1voting_list)\r\n            Span(/,mh)\r\n            Span(Class: text-muted, Body: ##instance_id#)\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-lg-10 col-lg-offset-1){\r\n                Form(panel panel-default){\r\n                    Input(Type: hidden, Name: votingID, Value: #vID#)\r\n\r\n                    Div(list-group-item text-center){\r\n                        P(Class: h3 text-bold m0, Body: #instance_voting_name#)\r\n                        Div(row mt-sm){\r\n                            Div(col-md-12){\r\n                                Div(Class: t5 text-muted m0, Body: AppParam(App:#application_id#, Name: type_voting_decisions, Index: #instance_voting_type_decision#))\r\n                            }\r\n                        }\r\n                        If(`#instance_voting_description#`!=\"\"){\r\n                            Div(row mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    Div(Class: t5 text-muted m0, Body: LangRes(description))\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    Div(Class: t5 text-muted m0, Body: #instance_voting_description#)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row mt-sm t4){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(type)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                AppParam(App:#application_id#, Name: type_voting, Index: #instance_voting_type#)\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2,#instance_voting_type_decision#==3,#instance_voting_type_decision#==4)){\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_accept)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_accept# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_accept#\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row t5 mt-sm){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_reject)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_contract_reject# == \"\"){\r\n                                        Span(Class: text-muted, Body: LangRes(optional))\r\n                                    }.Else{\r\n                                        #instance_optional_contract_reject#\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(filled)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_full_data# == 1){\r\n                                    Span(Class: text-success, Body: LangRes(yes))\r\n                                }.Else{\r\n                                    Span(Class: text-danger, Body: LangRes(no))\r\n                                }\r\n                            }\r\n                        }\r\n                        If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(role)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_id# > 0){\r\n                                        DBFind(roles, src_roles).WhereId(#instance_optional_role_id#).Columns(\"id,role_name\").Vars(prefix)\r\n                                        #prefix_role_name# (LangRes(id): #prefix_id#)\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(vacancies)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_role_vacancies# > 0){\r\n                                        #instance_optional_role_vacancies#\r\n                                    }.Else{\r\n                                        Span(Class: text-danger, Body: #instance_optional_role_vacancies#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(candidates)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#instance_optional_number_candidates# > 0){\r\n                                        #instance_optional_number_candidates#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: #instance_optional_number_candidates#)\r\n                                    }\r\n                                }\r\n                            }\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Order(\"id\").Columns(\"id,subject->member_id,subject->member_name\").Custom(_address){\r\n                                Address(#subject.member_id#)\r\n                            }.Custom(_member){\r\n                                LinkPage(Class: text-primary t5 text-bold, Page: @1profile_view, PageParams: \"v_member_id=#subject.member_id#\"){\r\n                                    #subject.member_name#\r\n                                }\r\n                            }.Custom(_voting){\r\n                                If(#isVotingAllowed#==1){\r\n                                    Button(Body: LangRes(vote), Class: btn btn-success, Page: @1voting_view, PageParams: \"vID=#vID#\", Contract: VotingCandidateAccept, Params: \"candidateID=#subject.member_id#\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t6){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Table(src_voting_subject, \"=_member,=_address,=_voting\")\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        If(#instance_voting_type_decision#==1){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_candidates, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                        If(#instance_voting_type_decision#==2){\r\n                                            Button(Class: btn btn-link, Page: @1voting_decision_election, PageParams: \"vID=#vID#\"){\r\n                                                Strong(LangRes(subject_voting_edit))\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==3){\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->text,subject->hash\").Vars(subject)\r\n                            Div(row t5 mt-lg){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    Div(list-group-item){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_text#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                    Div(list-group-item t6 text-muted){\r\n                                        If(#subject_id# > 0){\r\n                                            Hash: #subject_subject_hash#\r\n                                        }.Else{\r\n                                            Hash: LangRes(empty)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: @1voting_decision_document, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: VotingDecisionReject, PageParams: \"vID=#vID#\", Page: @1voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: @1voting_view)\r\n                                        } \r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==4){\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->description,subject->table,subject->table_id,subject->column,subject->column_value\").Vars(subject)\r\n\r\n                            If(#instance_voting_type#==1){\r\n                                Div(row mt-sm t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(table_to_written)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Div(row mt-sm t5){\r\n                                    Div(col-md-6 text-right){\r\n                                        LangRes(row_id)\r\n                                        Span(Class: text-danger, Body:*)\r\n                                    }\r\n                                    Div(col-md-6 text-left){\r\n                                        If(#subject_id# > 0){\r\n                                            #subject_subject_table_id#\r\n                                        }.Else{\r\n                                            Span(Class:text-danger, Body: LangRes(empty))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    If(#instance_voting_type#==1){\r\n                                        LangRes(column_name)\r\n                                    }.Else{\r\n                                        LangRes(parameter_name)\r\n                                    }\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    Span(Body: LangRes(written_value))\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_column_value#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(description)\r\n                                }\r\n                                Div(col-md-6 text-left break){\r\n                                    If(#subject_id# > 0){\r\n                                        If(#subject_subject_description# == \"\"){\r\n                                            Span(Class:text-muted, Body: LangRes(optional))\r\n                                        }.Else{\r\n                                            #subject_subject_description#\r\n                                        }\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: @1voting_decision_formal, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: VotingDecisionReject, PageParams: \"vID=#vID#\", Page: @1voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: @1voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        If(#instance_voting_type_decision#==5){\r\n                            DBFind(votings_subject, src_voting_subject).Where({voting_id:#vID#}).Columns(\"id,subject->contract_accept,subject->contract_reject\").Vars(subject)\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_accept)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_accept#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(contract_reject)\r\n                                    Span(Class: text-danger, Body:*)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    If(#subject_id# > 0){\r\n                                        #subject_subject_contract_reject#\r\n                                    }.Else{\r\n                                        Span(Class:text-danger, Body: LangRes(empty))\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm t5){\r\n                                Div(col-md-12){\r\n                                    If(And(#instance_status#==#INVALID#,#instance_voting_type#==1)){\r\n                                        Button(Class: btn btn-link, Page: @1voting_decision_contract, PageParams: \"vID=#vID#\"){\r\n                                            Strong(LangRes(subject_voting_edit))\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            Div(row mt-sm){\r\n                                Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                    If(#isVotingAllowed#==1){\r\n                                        Div(pull-left){\r\n                                            Button(Body: LangRes(reject), Class: btn btn-danger, Contract: VotingDecisionReject, PageParams: \"vID=#vID#\", Page: @1voting_view)\r\n                                        }\r\n                                        Div(pull-right){\r\n                                            Button(Body: LangRes(accept), Class: btn btn-success, Contract: VotingDecisionAccept, PageParams: \"vID=#vID#\", Page: @1voting_view)\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center t5){\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(status)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                SetVar(status_class, AppParam(App:#application_id#, Name:voting_statuses_classes, Index:#instance_status#))\r\n                                Div(#status_class#){\r\n                                    AppParam(App:#application_id#, Name:voting_statuses, Index:#instance_status#)\r\n                                }\r\n\r\n                                If(#instance_flags_full_data#==0){\r\n                                    Div(text-muted){LangRes(not_filled)}\r\n                                }\r\n                                If(#instance_progress_number_participants#==0){\r\n                                    Div(text-muted){LangRes(not_participants)}\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(decision)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_flags_decision#==-2){\r\n                                    LangRes(not_enough_votes)\r\n                                }\r\n                                If(#instance_flags_decision#==-1){\r\n                                    Span(Class:text-danger, Body: LangRes(rejected))\r\n                                }\r\n                                If(#instance_flags_decision#==0){\r\n                                    LangRes(no)\r\n                                }\r\n                                If(#instance_flags_decision#==1){\r\n                                    Span(Class:text-success, Body: LangRes(accepted))\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(date_start)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(Or(#instance_status#==#STARTED#,#instance_status#==#FINISHED#)){\r\n                                SetVar(date_started_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_started_class#){\r\n                                DateTime(DateTime: #instance_date_started#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(date_end)\r\n                            }\r\n                            SetVar(date_started_class,)\r\n                            If(#instance_status#==#FINISHED#){\r\n                                SetVar(date_ended_class,\"text-muted\")\r\n                            }\r\n                            Div(col-md-6 text-left #date_ended_class#){\r\n                                DateTime(DateTime: #instance_date_ended#, Format: #date_format#)\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(voting_volume)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                #instance_voting_volume#\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            If(#instance_voting_count_type_voters# == 0){\r\n                                Div(col-md-6 text-right){\r\n                                    LangRes(voting_quorum)\r\n                                }\r\n                                Div(col-md-6 text-left){\r\n                                    #instance_voting_quorum#\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm){\r\n                            Div(col-md-6 text-right){\r\n                                LangRes(participants)\r\n                                Span(Class: text-danger, Body:*)\r\n                            }\r\n                            Div(col-md-6 text-left){\r\n                                If(#instance_progress_number_participants# > 0){\r\n                                    #instance_progress_number_participants#\r\n                                }.Else{\r\n                                    Span(Class:text-danger, Body: #instance_progress_number_participants#)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t6){\r\n                            Div(col-sm-8 col-sm-offset-2 col-lg-8 col-lg-offset-2){\r\n                                DBFind(votings_participants, src_voting_participants).Where({voting_id:#vID#}).Order(\"id\").Columns(\"id,member->member_id,member->role_id,decision_date,decision,voting_id\").Custom(_address){\r\n                                    DBFind(\"votings\",Source: src_mem).Columns(\"id,voting,voting->type_participants\").WhereId(#voting_id#).Vars(type)\r\n                                    If(Or(#type_voting_type_participants# == 4,#type_voting_type_participants# == 5)){\r\n                                        DBFind(\"roles\").Columns(\"id,role_name\").WhereId(#member.role_id#).Vars(rl)\r\n                                        LinkPage(Class: text-primary h5 text-bold, Page: @1roles_view, PageParams: \"v_role_id=#rl_id#\"){\r\n                                            Span(Class: fa icon-eye  mr-sm).(#rl_role_name#)\r\n                                        }.Style(display:flex; align-items:center;)\r\n                                    }.Else{\r\n                                        Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                    } \r\n                                }.Custom(_voter){\r\n                                    DBFind(\"votings\",Source: src_mem).Columns(\"id,voting,voting->type_participants\").WhereId(#voting_id#).Vars(type)\r\n                                    If(#type_voting_type_participants# == 4){\r\n                                         Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                    }\r\n                                    If(#type_voting_type_participants# == 5){\r\n                                        If(#decision#!=0){\r\n                                            Div(Class: t6 m0, Body: Address(#member.member_id#))\r\n                                        }\r\n                                    }\r\n                                }.Custom(_decision){\r\n                                    If(Or(#instance_voting_type_decision#==1,#instance_voting_type_decision#==2)){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }.Else{\r\n                                            Div(Class: text-success text-center, Body: $vote_for_candidate$:)\r\n                                            Div(Class: text-success text-center, Body: Address(#decision#) )\r\n                                            Div(Class: text-success text-center, Body: $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==3){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $document_accept$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $document_reject$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==4){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $decision_accept$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $decision_reject$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                    If(#instance_voting_type_decision#==5){\r\n                                        If(#decision#==0){\r\n                                            LangRes(did_not_vote)\r\n                                        }\r\n                                        If(#decision#==1){\r\n                                            Span(Class: text-success, Body: $contract_accepted$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                        If(#decision#==-1){\r\n                                            Span(Class: text-danger, Body: $contract_rejected$ $at$ DateTime(DateTime: #decision_date#, Format: #date_format#))\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Table(src_voting_participants, \"=_address,=_voter,=_decision\")\r\n                            }\r\n                        }\r\n                        Div(row mt-sm t5){\r\n                            Div(col-md-12){\r\n                                If(#instance_voting_type#==1){\r\n                                    If(Or(#instance_status#==#INVALID#,#instance_status#==#WAITING#)){\r\n                                        Button(Class: btn btn-link text-bold, Page: @1voting_invite, PageParams: \"vID=#vID#\"){\r\n                                            LangRes(participants_add)\r\n                                        }.Popup(50, $participants_add$)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Div(list-group-item text-center){\r\n                        Div(row mt-sm t4){\r\n                            Div(col-md-5 col-md-offset-1){\r\n                                LangRes(voted)\r\n                            }\r\n                            Div(col-md-5){\r\n                                LangRes(progress)\r\n                            }\r\n                        }\r\n                        If(graph_work==\"good\"){\r\n                            Div(row mt-sm text-muted t6 text-center){\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    LangRes(voting_graph_voted)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    LangRes(voting_graph_progress)\r\n                                }\r\n                            }\r\n                        }\r\n                        Div(row mt-sm text-center t3){\r\n                            If(#instance_voting_count_type_voters# == 0){\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    #instance_progress_number_voters# LangRes(voters) / #instance_progress_percent_voters#% LangRes(voters)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    #instance_progress_percent_success#% LangRes(success) / 100% LangRes(total)\r\n                                }\r\n                            }.Else{\r\n                                Div(col-md-5 col-md-offset-1){\r\n                                    #instance_progress_number_voters# LangRes(voters) / #instance_voting_volume# LangRes(voters)\r\n                                }\r\n                                Div(col-md-5){\r\n                                    #instance_progress_percent_success#% LangRes(success) / 100% LangRes(total)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }.Else{\r\n        Div(md-12 alert alert-danger text-center){\r\n            Span(Body: LangRes(attention))\r\n        }\r\n    }\r\n}.Style(\r\n    .t3 {font-size:24px;}\r\n    .t4 {font-size:18px;}\r\n    .t5 {font-size:14px;}\r\n    .t6 {font-size:12px;}\r\n    .break {word-break: break-all;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "BufferManager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract BufferManager {\n    data {\n        Action string\n        Key string\n        Val string \"optional\"\n    }\n    func decodeArray(s string) array{\n        var ar array\n        if HasPrefix($buf[\"value\"], \"[\") {\n            ar = JSONDecode($buf[\"value\"])\n        }\n        return ar\n    }\n    conditions {\n        $emptyVal = JSONEncode(\"\")\n        $buf = DBFind(\"buffer_data\").Where({key:$Key, member_id:$key_id}).Row()\n        if !$buf {\n            var buf map, id int\n            id = DBInsert(\"buffer_data\", {key:$Key, value:$emptyVal, member_id:$key_id})\n            buf[\"id\"] = Str(id)\n            buf[\"value\"] = \"\"\n            buf[\"member_id\"] = Str($key_id)\n            buf[\"key\"] = Str($Key)\n            $buf = buf\n        }\n    }\n\n    action {\n        var id int\n        id = Int($buf[\"id\"])\n        if $Action == \"clean\" {\n            DBUpdate(\"buffer_data\", id, {value:$emptyVal})\n        }\n        if $Action == \"set\" {\n            DBUpdate(\"buffer_data\", id, {value:$Val})\n        }\n        if $Action == \"array_add_value\" {\n            var ar array enc string\n            ar = decodeArray($buf[\"value\"])\n            ar = Append(ar, $Val)\n            enc = JSONEncode(ar)\n            DBUpdate(\"buffer_data\", id, {value:enc})\n        }\n        if $Action == \"array_remove_value\" {\n            var ar arNew array i int enc string\n            ar = decodeArray($buf[\"value\"])\n            while i<Len(ar){\n                if ar[i] != $Val{\n                    arNew = Append(arNew, ar[i])\n                }\n                i=i+1\n            }\n            enc = JSONEncode(arNew)\n            DBUpdate(\"buffer_data\", id, {value:enc})\n        }\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAccessCheck {\n    data {\n        rid int\n    }\n    conditions {\n        var role map\n        role = DBFind(\"roles\").WhereId($rid).Columns(\"id,role_name,deleted,roles_access->rids,role_type,creator->member_id,company_id\").Row()\n        if !role {\n            warning Sprintf(\"%v: Role not found\", $this_contract)\n        }\n        \n        if role[\"creator.member_id\"] == $key_id {\n            return\n        }\n\n        var rids rawRids array, i int\n        rawRids = Split(role[\"roles_access.rids\"], \",\")\n        while i < Len(rawRids){\n            if rawRids[i] > 0 {\n                rids = Append(rids, rawRids[i])\n            }\n            i=i+1\n        }\n        i=0\n        while i<Len(rids){\n            if rids[i] == $role_id {\n                return\n            }\n            i=i+1\n        }\n\n        if role[\"role_type\"] == 4 {\n            // company role\n            if role[\"company_id\"] == $key_id {\n                return\n            }else{\n                warning \"Sorry, you are not the creator of this company\"\n            }\n        }\n        warning Sprintf(\"Sorry, you don't have permission to change this role (%q)\", role[\"role_name\"])\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesUnassign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesUnassign {\n    data {\n        row_id int\n    }\n\n    conditions {\n        // check record\n        var assigned role map\n        assigned = DBFind(\"roles_participants\").WhereId($row_id).Columns(\"id,role->id\").Row()\n        if !assigned {\n            warning \"Participant not found\"\n        }\n\n        role = DBFind(\"roles\").WhereId(Int(assigned[\"role.id\"])).Columns(\"id,creator->member_id,role_name\").Row()\n        if !role {\n            warning \"Role not found in the roles registry\"\n        }\n\n        var specialRules map prev_contract string\n        prev_contract = $stack[0]\n        if Len($stack)>2{\n            prev_contract = $stack[Len($stack)-2]\n        }\n        specialRules[\"@1VotingValidatorAccept\"] = \"Candidate for validators\"\n        specialRules[\"@1DelegateRefresh\"] = \"Delegate\"\n        specialRules[\"@1CandidateValidatorRequest\"] = \"Candidate for validators\"\n        specialRules[\"@1InvestorRefresh\"] = \"Investor with voting rights\"\n        specialRules[\"@1VotingTokensRefundCreate\"] = \"Investor with voting rights\"\n        specialRules[\"@1sysparams_ValidatorResign\"] = \"Validator\"\n\n        if specialRules[prev_contract] != role[\"role_name\"] {\n            RolesAccessCheck(\"rid\", Int(role[\"id\"]))\n        }\n    }\n\n    action {\n        // delete the member\n        var m map\n        m[\"deleted\"] = 1\n        m[\"date_deleted\"] = BlockTime()\n        DBUpdate(\"roles_participants\", $row_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CatalogAddEcosystem",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CatalogAddEcosystem {\r\n    data {\r\n        Ecosystem_name string\r\n        Ecosystem_number int\r\n        Ecosystem_type int\r\n        Description string\r\n        Conditions string\r\n        Flag_free int\r\n        Vde_form_address string \"optional\"\r\n        Vde_page string \"optional\"\r\n        Web_form_address string \"optional\"\r\n        Web_page string \"optional\"\r\n        Email string \"optional\"\r\n        Phone string \"optional\"\r\n    }\r\n    conditions {\r\n        var FOUNDER_ACCOUNT, DELEGATE_ACCOUNT string\r\n        FOUNDER_ACCOUNT = \"founder_account\"\r\n        DELEGATE_ACCOUNT = \"delegate_account\"\r\n\r\n        if Size($Email) > 0 {\r\n            var emailParts int\r\n            emailParts = Split($Email, \"@\")\r\n            if Len(emailParts) != 2 {\r\n                warning \"Invalid email\"\r\n            }\r\n        }\r\n\r\n        var ecoExists map\r\n        ecoExists = DBFind(\"catalog_ecosystems\").Where({ecosystem_number:$Ecosystem_number, deleted:0}).Row()\r\n        if ecoExists {\r\n            info \"The ecosystem with same number already added\"\r\n        }\r\n\r\n        var isFounder, isDelegate bool\r\n        var founder, delegate map\r\n        founder = DBFind(\"parameters\").Where({name:FOUNDER_ACCOUNT}).Ecosystem($Ecosystem_number).Row()\r\n        isFounder = founder[\"value\"] == $key_id\r\n\r\n        delegate = DBFind(\"parameters\").Where({name:DELEGATE_ACCOUNT}).Ecosystem($Ecosystem_number).Row()\r\n        if delegate {\r\n            isDelegate = delegate[\"value\"] == $key_id\r\n        }\r\n        if !(isFounder || isDelegate) {\r\n            warning \"Sorry, you can not add this ecosystem\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var ecosystem_info url_address m map\r\n        ecosystem_info[\"description\"] = $Description\r\n        ecosystem_info[\"conditions\"] = $Conditions\r\n        ecosystem_info[\"email\"] = $Email\r\n        ecosystem_info[\"phone\"] = $Phone\r\n\r\n        url_address[\"web_page\"] = $Web_page\r\n        url_address[\"web_form_address\"] = $Web_form_address\r\n        url_address[\"vde_page\"] = $Vde_page\r\n        url_address[\"vde_form_address\"] = $Vde_form_address\r\n\r\n        m[\"ecosystem_name\"] = $Ecosystem_name\r\n        m[\"ecosystem_number\"] = $Ecosystem_number\r\n        m[\"ecosystem_type\"] = $Ecosystem_type\r\n        m[\"image_id\"] = 0\r\n        m[\"ecosystem_info\"] = ecosystem_info\r\n        m[\"url_address\"] = url_address\r\n        m[\"flag_free\"] = $Flag_free\r\n        DBInsert(\"catalog_ecosystems\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAssign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAssign {\n    data {\n        rid int\n        member_id int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"keys\").WhereId(kid).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n    conditions {\n        $role = DBFind(\"roles\").WhereId($rid).Columns(\"id,deleted,role_type,role_name,image_id,creator->member_id\").Row()\n        if (Int($role[\"role_type\"]) == 2){\n            warning \"Elective role can be assigned only during voting\"\n        }\n        if !$role {\n            warning \"Role not found\"\n        }\n\n        if !DBFind(\"keys\").WhereId($member_id).Row() {\n            warning \"Key not found\"\n        }\n\n        if $role[\"deleted\"] == 1 {\n            warning \"This role has been deleted. The appointment of members is impossible\"\n        }\n\n        var specialRules map prev_contract string stack array\n        stack = JSONDecode(JSONEncode($stack))\n        prev_contract = stack[0]\n        if Len(stack)>2{\n            prev_contract = stack[Len(stack)-2]\n        }\n        specialRules[\"@1VotingValidatorAccept\"] = \"Validator\"\n        specialRules[\"@1DelegateRefresh\"] = \"Delegate\"\n        specialRules[\"@1CandidateValidatorRequest\"] = \"Candidate for validators\"\n        specialRules[\"@1VotingTemplateRun\"] = \"Investor with voting rights\"\n        specialRules[\"@1VotingTokensRefundCreate\"] = \"Investor with voting rights\"\n        if specialRules[prev_contract] != $role[\"role_name\"] {\n            RolesAccessCheck(\"rid\", $rid)\n        }\n\n        $assigned = DBFind(\"roles_participants\").Where({\"role->id\":$rid, \"member->member_id\":$member_id, deleted:0}).One(\"id\")\n    }\n\n    action {\n        if $assigned {\n            // do not re-assign and do not warning because this contract may be called for other\n            return\n        }\n        var role member appointer map\n        role[\"id\"] = $role[\"id\"]\n        role[\"type\"] = $role[\"role_type\"]\n        role[\"name\"] = $role[\"role_name\"]\n        role[\"image_id\"] = $role[\"image_id\"]\n\n        member = getMemberInfo($member_id)\n        appointer = getMemberInfo($key_id)\n        var m map\n        m[\"role\"] = role\n        m[\"member\"] = member\n        m[\"appointed\"] = appointer\n        m[\"date_created\"] = BlockTime()\n        DBInsert(\"roles_participants\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorRequest{\r\n    data{\r\n        HostIp string\r\n        // CommissionPub string\r\n        CommissionAddress string\r\n        Description string \"optional\"\r\n        Comment string \"optional\"\r\n    }\r\n\r\n    func IsNotValidIp(ip string)bool{\r\n        var parts array\r\n        var i, lenParts, part int\r\n        parts = Split(ip, \".\")\r\n\r\n        lenParts = Len(parts)\r\n        if lenParts != 4{\r\n            return true\r\n        }\r\n        while i< lenParts {\r\n            part = Int(parts[i])\r\n            if part < 0{\r\n                return true\r\n            }\r\n            if part > 255{\r\n                return true\r\n            }\r\n            i = i+1\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    conditions{\r\n        // $CommissionPub = Replace($CommissionPub, \" \", \"\")\r\n        // info Sprintf(\"%v %v\", $CommissionAddress, PubToID($CommissionPub))\r\n        // if $CommissionAddress != PubToID($CommissionPub) {\r\n        // info \"Address or Public key are invalid\"\r\n        // }\r\n\r\n        $CommissionAddress = AddressToId($CommissionAddress)\r\n        if !DBFind(\"keys\").WhereId($CommissionAddress).Row(){\r\n            warning \"Address not valid\"\r\n        }\r\n\r\n        if IsNotValidIp($HostIp){\r\n            warning \"Please enter a valid ip address\"\r\n        }\r\n        var roleName string, roleId int, role map\r\n        roleName = \"Candidate for validators\"\r\n        roleId = 4\r\n        role = DBFind(\"roles\").Where({role_name:roleName, id:roleId, deleted:0}).Row()\r\n        if !role{\r\n            warning Sprintf(\"Role %q not found\", roleName)\r\n        }\r\n        RolesAssign(\"rid,member_id\", roleId, $key_id)\r\n    }\r\n\r\n    action{\r\n        var m map\r\n        m[\"host_ip\"] = $HostIp\r\n        m[\"commission_pub\"] = \"\"\r\n        m[\"commission_address\"] = $CommissionAddress\r\n        m[\"description\"] = $Description\r\n        m[\"comment\"] = $Comment\r\n        m[\"candidate_key_id\"] = $key_id\r\n        m[\"date_created\"]  = BlockTime()\r\n        m[\"deleted\"] = 0\r\n        DBInsert(\"sysparams_candidate\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsProcess",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsProcess {\n    data {\n        notific_id int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"keys\").WhereId(kid).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n    conditions {\n        $notify = DBFind(\"notifications\").WhereId($notific_id).Columns(\"recipient->role_id,sender->type,date_start_processing\").Row()\n        if !$notify {\n            warning \"Notification not found\"\n        }\n\n        if $notify[\"sender.type\"] == 2{\n            if $notify[\"date_start_processing\"] != \"\" {\n                warning \"Sorry, processing of this notification has already begun\"\n            }\n            var rid string\n            rid = $notify[\"recipient.role_id\"]\n            if !DBFind(\"roles_participants\").Where({\"role->id\":rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\n                warning \"Sorry, you are not part of the role for which this notification is intended\"\n            }\n        }else{\n            if $notify[\"sender.type\"] != 1 {\n                warning \"Notification type not found\"\n            }\n        }\n    }\n\n    action {\n        var model map\n        model[\"processing_info\"] = getMemberInfo($key_id)\n        model[\"date_start_processing\"] = BlockTime()\n        DBUpdate(\"notifications\", $notific_id, model)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsSend",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsSend {\n    data {\n        member_id int \"optional\"\n        rid int \"optional\"\n        closure_type int \"optional\"\n\n        sender int\n        icon_name string \"optional\"\n        text_header string\n        text_body string \"optional\"\n        page_name string\n        params_map string // json encoded expected\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            if DBFind(\"keys\").WhereId(kid).Columns(\"id\").Row() {\n                res[\"member_id\"] = Str(kid)\n                res[\"member_name\"] = IdToAddress(kid)\n                res[\"image_id\"] = \"0\"\n            }\n        }\n        return res\n    }\n    func sendNotify(recipient map){\n        var notification map\n        notification[\"header\"] = $text_header\n        notification[\"type\"] = $notify_type\n        notification[\"icon\"] = $icon_name\n        notification[\"body\"] = $text_body\n        var sender map\n        if $sender == 1 && $senderMember {\n            // send from member\n            sender[\"type\"] = $sender\n            sender[\"member_id\"] = $senderMember[\"member_id\"]\n            sender[\"member_name\"] = $senderMember[\"member_name\"]\n            sender[\"image_id\"] = $senderMember[\"image_id\"]\n        }else{\n            if $sender == 2 && $senderRole{\n                // send from role\n                sender[\"type\"] = $sender\n                sender[\"role_id\"] = $senderRole[\"id\"]\n                sender[\"role_name\"] = $senderRole[\"role_name\"]\n                sender[\"image_id\"] = $senderRole[\"image_id\"]\n            }\n        }\n        var model map\n        model[\"recipient\"] = recipient\n        model[\"sender\"] = sender\n        model[\"notification\"] = notification\n        model[\"page_name\"] = $page_name\n        model[\"page_params\"] = $params_map\n        model[\"date_created\"] = BlockTime()\n        DBInsert(\"notifications\", model)\n    }\n\n    func sendToRole(roleId int){\n        var role recipient map\n        role = DBFind(\"roles\").WhereId(roleId).Row()\n        recipient[\"role_id\"] = role[\"id\"]\n        recipient[\"role_name\"] = role[\"role_name\"]\n        recipient[\"image_id\"] = role[\"image_id\"]\n        sendNotify(recipient)\n    }\n\n    conditions {\n        $member_id = Int($member_id)\n        $rid = Int($rid)\n        if Size($icon_name) < 1{\n            $icon_name = \"icon-envelope\"\n        }\n        if $member_id != 0 {\n            if !DBFind(\"keys\").WhereId($member_id).Row(){\n                warning \"Key not found\"\n            }\n            $notify_type = 1 // is \"member\"\n        }else{\n            if $rid > 0{\n                $notify_type = 2 // is \"role\"\n                if !DBFind(\"roles\").WhereId($rid).One(\"id\") {\n                    warning $this_contract+\": Recipient role not found\"\n                }\n                if !DBFind(\"roles_participants\").Where({\"role->id\":$rid, deleted:0}).One(\"id\") {\n                    warning $this_contract+\": Recipient role does not contain members\"\n                }\n            } else{\n                warning $this_contract+\": Notification type not defined\"\n            }\n        }\n        $senderMember = nil\n        $senderRole = nil\n        if $sender == 1 {\n            $senderMember = getMemberInfo($key_id)\n        }else{\n            if $sender == 2 {\n                $senderRole = DBFind(\"roles\").WhereId($role_id).Row()\n                if !$senderRole {\n                    warning $this_contract+\": Sender role not found\"\n                }\n            }else{\n                warning $this_contract+\": Sender invalid\"\n            }\n        }\n    }\n    action {\n        if $member_id != 0 {\n            sendNotify(getMemberInfo($member_id))\n        }else{\n            if $rid > 0 {\n                if $closure_type == 1 {\n                    // Single closure: one begins the process - the others do not see\n                    sendToRole($rid)\n                } else {\n                    // Multiple closure: to each his own notification\n                    $notify_type = 1\n                    var participants array\n                    participants = DBFind(\"roles_participants\").Where({\"role->id\":$rid, deleted:0}).Columns(\"member->member_id\")\n                    var i int\n                    while i < Len(participants) {\n                        var p map\n                        p = participants[i]\n                        sendNotify(getMemberInfo(Int(p[\"member.member_id\"])))\n                        i=i+1\n                    }\n                }\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MetricsUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MetricsUpdate{\r\n    data{\r\n        Interval string\r\n        Aggregate string\r\n    }\r\n    func mapping(items array)map{\r\n        var mapout map, i int\r\n        while i<Len(items){\r\n            var k v string, item map\r\n            item = items[i]\r\n            k = item[\"key\"]\r\n            v = item[\"value\"]\r\n            mapout[k] = v\r\n            i=i+1\r\n        }\r\n        return mapout\r\n    }\r\n    conditions{\r\n        if $Interval <= 0 {\r\n            $Interval = 1\r\n        }\r\n        var current_year int\r\n        current_year = 2018\r\n        if $Interval > (current_year - 1970)*365 {\r\n            warning \"Interval too big\"\r\n        }\r\n        $interval = Sprintf(\"%v days\", $Interval)\r\n    }\r\n\r\n    action{\r\n        var pages members txs array metrics map\r\n        pages = DBSelectMetrics(\"ecosystem_pages\", $interval, $Aggregate)\r\n        members = DBSelectMetrics(\"ecosystem_members\", $interval, $Aggregate)\r\n        txs = DBSelectMetrics(\"ecosystem_tx\", $interval, $Aggregate)\r\n\r\n        var mPages mMembers mTxs map\r\n        mPages = mapping(pages)\r\n        mMembers = mapping(members)\r\n        mTxs = mapping(txs)\r\n\r\n        var i lenPages int\r\n        lenPages = Len(pages)\r\n        while i<lenPages{\r\n            var t map, k string\r\n            t = pages[i]\r\n            k = t[\"key\"]\r\n            metrics[k] = Sprintf(\"pages: %v, members: %v, tx: %v; [%v, %v]\", mPages[k], mMembers[k], mTxs[k], $interval, $Aggregate)\r\n            i=i+1\r\n        }\r\n\r\n        if lenPages>0{\r\n            BufferManager(\"Action,Key,Val\", \"set\", \"metrics\", JSONEncode(metrics))\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NodeRemoveByKey",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NodeRemoveByKey{\r\n    data{}\r\n    func nodesRemove(keyId int) array{\r\n        var nodesJSON string nodes res array\r\n        nodesJSON = SysParamString(\"full_nodes\")\r\n        if !HasPrefix(nodesJSON, \"[\") {\r\n            // empty string nodes\r\n            return res\r\n        }\r\n        nodes = JSONDecode(nodesJSON)\r\n        var i int\r\n        while i < Len(nodes){\r\n            var node map\r\n            node = nodes[i]\r\n            if node[\"key_id\"] != keyId {\r\n                res = Append(res, node)\r\n            }\r\n            i=i+1\r\n        }\r\n        return res\r\n    }\r\n    conditions{\r\n        if $original_contract != \"ValidatorResign\"{\r\n            warning \"Unknown contract\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        var nodes array fullNodes string\r\n        nodes = nodesRemove($key_id)\r\n        fullNodes = JSONEncode(nodes)\r\n        DBUpdateSysParam(\"full_nodes\", fullNodes, \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsBroadcast",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsBroadcast {\n    data {\n        Header string\n        Body string\n        RoleId int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            if DBFind(\"keys\").Columns(\"id\").WhereId(kid).Row() {\n                res[\"member_id\"] = Str(kid)\n                res[\"member_name\"] = IdToAddress(kid)\n                res[\"image_id\"] = \"0\"\n            }\n        }\n        return res\n    }\n    conditions {\n        if $role_id !=1 {\n            error \"The action allowed only for admin\"\n        }\n        if $ecosystem_id!=1 {\n            error \"The action allowed only for admin from first ecosystem\"\n        }\n        $ecos = DBFind(\"ecosystems\").Ecosystem(1).Columns(\"id\")\n        $lenEcos = Len($ecos)\n        if $lenEcos == 1{\n            error \"Not found other ecosystems\"\n        }\n    }\n    action {\n        var i lenIds int eco map ids array table roleName bt string sender recipient params note map\n        bt = BlockTime()\n        roleName = DBFind(\"roles\").WhereId($role_id).One(\"role_name\")\n        sender = getMemberInfo($key_id)\n        sender[\"type\"] = \"1\"\n\n        note[\"header\"] = $Header\n        note[\"type\"] = \"1\"\n        note[\"icon\"] = \"icon-envelope\"\n        note[\"body\"] = $Body\n\n        while i<$lenEcos{\n            eco = $ecos[i]\n            if eco[\"id\"] != 1{\n                ids = DBFind(\"roles_participants\").Where({\"role->id\":$RoleId, \"role->type\":3}).Columns(\"member->member_id\")\n                lenIds = Len(ids)\n                table = Sprintf(\"@%v_notifications\", eco[\"id\"])\n                var i_ids int\n                while i_ids<lenIds{\n                    recipient = ids[i_ids]\n                    recipient = getMemberInfo(Int(recipient[\"member.member_id\"]))\n                    var m map\n                    m[\"recipient\"] = recipient\n                    m[\"sender\"] = sender\n                    m[\"notification\"] = note\n                    m[\"page_name\"] = \"notifications_show\"\n                    m[\"page_params\"] = params\n                    m[\"date_created\"] = bt\n                    DBInsert(table, m)\n                    i_ids=i_ids+1\n                }\n            }\n            i=i+1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "NotificationsClose",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract NotificationsClose {\n    data {\n        notific_id int\n    }\n\n    conditions {\n        $notify = DBFind(\"notifications\").WhereId($notific_id).Columns(\"id,date_start_processing,processing_info->member_id,closed,sender->type\").Row()\n        if !$notify {\n            warning \"Notification not found\"\n        }\n        if $notify[\"sender.type\"] == 2{\n            //role has processing check\n            if $notify[\"date_start_processing\"] == \"\" {\n                warning \"Sorry, processing of this notification has not yet begun\"\n            }\n\n            if $notify[\"processing_info.member_id\"] != $key_id {\n                warning \"Sorry, processing of this notice began another member\"\n            }\n\n            if $notify[\"closed\"] > 0 {\n                warning \"Sorry, this notification has already been closed before\"\n            }\n        }else {\n            if $notify[\"sender.type\"] != 1 { // not single\n                warning \"Notification type not found\"\n            }\n        }\n    }\n\n    action {\n        if $notify[\"sender.type\"] == 1{\n            NotificationsProcess(\"notific_id\", $notific_id)\n        }\n        var m map\n        m[\"date_closed\"] = BlockTime()\n        m[\"closed\"] = 1\n        DBUpdate(\"notifications\", $notific_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipDecide",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipDecide {\r\n    data {\r\n        notific_id int\r\n        Accept int\r\n    }\r\n    conditions {\r\n        $request = DBFind(\"notifications\").WhereId($notific_id).Columns(\"id,closed,sender->member_id,page_params->ecosystem_id\").Row()\r\n\r\n\r\n        if Int($request[\"closed\"]) == 1 {\r\n            warning \"Request already processed\"\r\n        }\r\n\r\n        var founder_id int\r\n        founder_id = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem(Int($request[\"page_params.ecosystem_id\"])).One(\"value\")\r\n\r\n        if founder_id != $key_id {\r\n            warning \"You are not the founder of the ecosystem\"\r\n        }\r\n    }\r\n    action {\r\n        var params map\r\n        params[\"ecosystem_id\"] = $request[\"page_params.ecosystem_id\"]\r\n        if ($Accept == 0){\r\n            params[\"status\"] = 1\r\n\r\n            var table_name string\r\n            table_name = Sprintf(\"@%v_keys\", $request[\"page_params.ecosystem_id\"])\r\n\r\n            var pub string mid int\r\n            mid = Int($request[\"sender.member_id\"])\r\n            pub = DBFind(\"keys\").WhereId(mid).One(\"pub\")\r\n            DBInsert(table_name, {id:mid, pub:pub})\r\n        }\r\n        else{\r\n            params[\"status\"] = 0\r\n        }\r\n\r\n        var icon header body page ecoName ecoId string\r\n        ecoId = $request[\"page_params.ecosystem_id\"]\r\n        ecoName = DBFind(\"ecosystems\").Where({id:ecoId}).One(\"name\")\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"Request is accepted\"\r\n        body = Sprintf(\"Your request to membership for ecosystem '%v' (%v) is accepted\", ecoName, ecoId)\r\n        page = \"membership_user_view\"\r\n\r\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", $request[\"sender.member_id\"], 1, icon, header, body, page, params)\r\n        NotificationsClose(\"notific_id\", $notific_id)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract MembershipRequest {\r\n    data {\r\n        ecosystem_num int\r\n    }\r\n\r\n    conditions {\r\n        if DBFind(\"notifications\").Where({\"page_params->ecosystem_id\":$ecosystem_num, \"sender->member_id\":$key_id, closed:0, page_name:\"membership_admin_view\"}).Row(){\r\n            warning \"Request already sent\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var notific_params map founder_id int\r\n        notific_params[\"ecosystem_id\"] = $ecosystem_num\r\n        founder_id = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem($ecosystem_num).One(\"value\")\r\n\r\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", founder_id, 1, \"icon icon-user-follow\", \"New request for membership\", \"View details\", \"membership_admin_view\", notific_params)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileAvatarEdit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileAvatarEdit {\n    data {\n        member_image bytes \"file\"\n    }\n\n    conditions {\n        $member = DBFind(\"members\").WhereId($key_id).Row()\n        $app_id = DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\")\n\n        if !$member {\n            warning \"Member name is not specified\"\n        }\n    }\n\n    action {\n        if $member {\n            var m map\n            m[\"image_id\"] = @1UploadBinary(\"Name,Data,ApplicationId\", \"avatar\", $member_image, Int($app_id))\n            DBUpdate(\"members\", Int($member[\"id\"]), m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ProfileEdit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ProfileEdit {\n    data {\n        member_name string\n        information string \"optional\"\n    }\n\n    conditions {\n        $member = DBFind(\"members\").WhereId($key_id).Row()\n        $app_id = DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\")\n\n        if !$member {\n            // check member_name\n            if DBFind(\"members\").Where({member_name:$member_name}).One(\"id\") {\n                warning \"This member name is busy. Enter another member name, please\"\n            }\n        }\n    }\n\n    action {\n        var m map\n        m[\"member_info\"] = {information:$information}\n        if $member{\n            DBUpdate(\"members\", $key_id, m)\n        } else {\n            m[\"id\"] = $key_id\n            m[\"member_name\"] = $member_name\n            DBInsert(\"members\", m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RoleConditions",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RoleConditions {\n    data{\n        role string\n    }\n    conditions {\n        if !DBFind(\"roles_participants\").Where({\"role->name\":$role, \"member->member_id\":$key_id, deleted:0}).Row() {\n            warning Sprintf(\"This action allowed only for role: %v\", $role)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "CandidateValidatorDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract CandidateValidatorDelete{\r\n    data{\r\n        Id int\r\n    }\r\n    conditions{\r\n        var candidateId roleId int\r\n        roleId = 2 // Candidate for validators\r\n        candidateId = DBFind(\"sysparams_candidate\").WhereId($Id).One(\"candidate_key_id\")\r\n        \r\n        $role = DBFind(\"roles_participants\").Where({deleted:0, \"role->id\":roleId, \"member->member_id\":candidateId}).Row()\r\n        if !$role {\r\n            warning \"Candidate role not found\"\r\n        }\r\n    }\r\n    action{\r\n        DBUpdate(\"sysparams_candidate\", $Id, {deleted:1})\r\n        RolesUnassign(\"row_id\", Int($role[\"id\"]))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesAccessManager",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesAccessManager {\n    data {\n        Action string\n        Rid int\n        ManagerRid string \"optional\"\n    }\n    func updateAccess(ra string){\n        var model map\n        model[\"roles_access\"] = {rids:ra}\n        DBUpdate(\"roles\", $Rid, model)\n    }\n\tfunc updateBufferAccess(ra array){\n        var roles_access string\n        roles_access = JSONEncode(ra)\n        if !$buffer_id {\n            DBInsert(\"buffer_data\", {\"member_id\": $key_id, \"key\": \"roles_access\", \"value\": roles_access})\n        } else {\n            DBUpdate(\"buffer_data\", Int($buffer_id), {\"value\": roles_access})\n        }\n    }\n    conditions {\n\t\t$ManagerRid = Int($ManagerRid)\n        if $Rid > 0 {\n\t\t\tRolesAccessCheck(\"rid\", $Rid)\n\n\t\t\t$role = DBFind(\"roles\").WhereId($Rid).Columns(\"id,roles_access->rids\").Row()\n\t\t\tif !$role {\n\t\t\t\twarning \"Role not found\"\n\t\t\t}\n\t\t\tif $ManagerRid > 0{\n\t\t\t\tif !DBFind(\"roles\").WhereId($ManagerRid).One(\"id\") {\n\t\t\t\t\twarning \"Role not found\"\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar ids array, i int\n\t\t\t$ids = ids\n\t\t\tids = Split($role[\"roles_access.rids\"],\",\")\n\t\t\twhile i < Len(ids){\n\t\t\t\tif ids[i] > 0 {\n\t\t\t\t\t$ids = Append($ids, ids[i])\n\t\t\t\t}\n\t\t\t\ti=i+1\n\t\t\t}\n\t\t} else {\n            $buffer_managers = 0\n            $buffer_id = 0\n            $ids = []\n            var buffer map\n            buffer = DBFind(\"buffer_data\").Where({\"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\n            if buffer {\n                $buffer_managers = buffer[\"value\"]\n                $buffer_id = buffer[\"id\"]\n            }\n        }\n    }\n\n    action {\n\t\tif $Rid == 0 {\n            if $buffer_managers {\n                $ids = JSONDecode($buffer_managers)\n            }\n        }\n        if $Action == \"clean\"{\n            updateAccess(\"\")\n        }\n        if $ManagerRid > 0{\n            var i int, idsNew array\n            if $Action == \"remove\"{\n                while i<Len($ids){\n                    if $ids[i] != $ManagerRid{\n                        idsNew = Append(idsNew, $ids[i])\n                    }\n                    i=i+1\n                }\n\t\t\t\tif $Rid == 0 {\n\t\t\t\t\tupdateBufferAccess(idsNew)\n\t\t\t\t}else{\n\t\t\t\t\tupdateAccess(Join(idsNew, \",\"))\n\t\t\t\t}\n            }\n            if $Action == \"add\"{\n                var double bool\n                while i<Len($ids){\n                    if $ids[i] == $ManagerRid{\n                        double = true\n                    }\n                    i=i+1\n                }\n                if !double {\n                    $ids = Append($ids, $ManagerRid)\n                }\n                if $Rid == 0 {\n\t\t\t\t\tupdateBufferAccess($ids)\n\t\t\t\t}else{\n\t\t\t\t\tupdateAccess(Join($ids, \",\"))\n\t\t\t\t}\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "DelegateRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract DelegateRefresh{\r\n    func NotInArray(val string, arr array) bool{\r\n        var i int\r\n        // info arr\r\n        while i < Len(arr){\r\n            if val == arr[i]{\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n    func getAppRoleId(id int, name string) int{\r\n        var rid int\r\n        rid = Int(AppParam(id, name))\r\n        if rid == 0{\r\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\r\n        }\r\n        return rid\r\n    }\r\n    conditions{\r\n        MainCondition()\r\n        var appId roleId int\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\r\n        if appId == 0{\r\n            warning \"Application not found\"\r\n        }\r\n        roleId = getAppRoleId(appId, \"role_delegate\")\r\n\r\n        $role = DBFind(\"roles\").Where({id:roleId, deleted:0}).Row()\r\n        if !$role{\r\n            warning \"Role not found\"\r\n        }\r\n    }\r\n\r\n    action{\r\n        // get delegates ids\r\n        var delegateIds currentDelegates ecosystems array i ecoId int rid string\r\n        ecosystems = DBFind(\"ecosystems\").Columns(\"id\").Ecosystem(1)\r\n        while i < Len(ecosystems) {\r\n            var eco delegateParam map\r\n            eco = ecosystems[i]\r\n            ecoId = Int(eco[\"id\"])\r\n            delegateParam = DBFind(\"parameters\").Where({name:\"delegate_account\"}).Ecosystem(ecoId).Row()\r\n            if !delegateParam{\r\n                delegateParam = DBFind(\"parameters\").Where({name:\"founder_account\"}).Ecosystem(ecoId).Row()\r\n            }\r\n\r\n            if NotInArray(delegateParam[\"value\"], delegateIds){\r\n                delegateIds = Append(delegateIds, delegateParam[\"value\"])\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // remove old role assigns\r\n        rid = Int($role[\"id\"])\r\n        currentDelegates = DBFind(\"roles_participants\").Where({\"role->id\":rid, deleted:0}).Columns(\"id,member->member_id\")\r\n        var delegate map id int\r\n        i = 0\r\n        while i < Len(currentDelegates){\r\n            delegate = currentDelegates[i]\r\n            if NotInArray(delegate[\"member.member_id\"], delegateIds){\r\n                id = Int(delegate[\"id\"])\r\n                RolesUnassign(\"row_id\", id)\r\n            }\r\n            i = i + 1\r\n        }\r\n\r\n        // assign new roles\r\n        var key map delegateId int\r\n        i = 0\r\n        while i < Len(delegateIds) {\r\n            delegateId = Int(delegateIds[i])\r\n            key = DBFind(\"keys\").WhereId(delegateId).Row()\r\n            if key {\r\n                // check role dup\r\n                if !DBFind(\"roles_participants\").Where({\"member->member_id\":delegateId, \"role->id\":rid, deleted:0}).Row(){\r\n                    RolesAssign(\"rid,member_id\", rid, Int(key[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesCreate {\n    data {\n        role_name string\n        role_type int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"keys\").WhereId(kid).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        // system role\n        if $role_type == 3 {\n            warning \"System role can not be created\"\n        }\n    }\n\n    action {\n\t\tvar roles_access_arr array, buffer map, roles_access string\n\t\tbuffer = DBFind(\"buffer_data\").Where({\"member_id\": $key_id, \"key\": \"roles_access\"}).Row()\n        if buffer {\n            roles_access_arr = JSONDecode(buffer[\"value\"])\n            DBUpdate(\"buffer_data\", Int(buffer[\"id\"]), {\"value\": \"[]\"})\n        }\n        roles_access_arr = Append(roles_access_arr, 1)\n\t\troles_access = Join(roles_access_arr, \",\")\n\t\t\n        var m map\n        m[\"creator\"] = getMemberInfo($key_id)\n        m[\"role_name\"] =  $role_name\n        m[\"role_type\"] =  $role_type\n        m[\"date_created\"]  =  BlockTime()\n        m[\"company_id\"] =  0\n\t\tm[\"roles_access\"] = {\"rids\": roles_access}\n        $result = DBInsert(\"roles\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "InvestorRefresh",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract InvestorRefresh {\r\n    func NotInArray(val string, arr array) bool{\r\n        var i lenArr int\r\n        lenArr = Len(arr)\r\n        while i < lenArr{\r\n            if val == Str(arr[i]){\r\n                return false\r\n            }\r\n            i = i + 1\r\n        }\r\n        return true\r\n    }\r\n    func getParamInt(id int, name string) int{\r\n        var param int\r\n        param = Int(AppParam(id, name))\r\n        if param == 0{\r\n            warning Sprintf(\"Application parameter not setted in '%v'\", name)\r\n        }\r\n        Println(\"return param\")\r\n        return param\r\n    }\r\n    conditions{\r\n        var appId int\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\r\n        if appId == 0{\r\n            warning \"Application not found\"\r\n        }\r\n\r\n        var roleValidatorId roleInvestorId string\r\n\r\n        roleValidatorId = getParamInt(appId, \"role_validator\")\r\n        if $role_id != roleValidatorId {\r\n            warning \"You not Validator. You can not to run this\"\r\n        }\r\n\r\n        roleInvestorId = getParamInt(appId, \"role_investor_with_voting_rights\")\r\n        $roleId = Int(DBFind(\"roles\").Where({id:roleInvestorId, deleted:0}).One(\"id\"))\r\n        if $roleId == 0{\r\n            warning \"Investor role not found or deleted\"\r\n        }\r\n\r\n        $limitInvestors = getParamInt(appId, \"investors_number\")\r\n    }\r\n\r\n    action{\r\n        // get investors ids\r\n        var keysInvestors assignedInvestors investorsIds assignedIds array\r\n        keysInvestors = DBFind(\"keys\").Columns(\"id\").Order([{amount:\"-1\"},{id:\"-1\"}]).Limit($limitInvestors)\r\n        assignedInvestors = DBFind(\"roles_participants\").Where({\"role->id\":$roleId, deleted:0}).Columns(\"member->member_id\")\r\n\r\n        // get ids\r\n        var i int\r\n        while i < Len(keysInvestors) {\r\n            var inv map\r\n            inv = keysInvestors[i]\r\n            investorsIds[i] = inv[\"id\"]\r\n            i = i + 1\r\n        }\r\n        i = 0\r\n        while i < Len(assignedInvestors) {\r\n            var inv map\r\n            inv = assignedInvestors[i]\r\n            assignedIds[i] = inv[\"member.member_id\"]\r\n            i = i + 1\r\n        }   \r\n\r\n        // remove old investors\r\n        var assigned map mid string\r\n        i = 0\r\n        while i < Len(assignedIds) {\r\n            if NotInArray(assignedIds[i], investorsIds){\r\n                mid = assignedIds[i]\r\n                assigned = DBFind(\"roles_participants\").Where({\"member->member_id\":mid, \"role->id\":$roleId}).Row()\r\n                if assigned {\r\n                    RolesUnassign(\"row_id\", Int(assigned[\"id\"]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n        // add new investors\r\n        i = 0\r\n        while i < Len(investorsIds) {\r\n            if NotInArray(investorsIds[i], assignedIds){\r\n                if DBFind(\"keys\").WhereId(Int(investorsIds[i])).Row(){\r\n                    RolesAssign(\"rid,member_id\", $roleId, Int(investorsIds[i]))\r\n                }\r\n            }\r\n            i = i + 1\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesInstall",
            "Conditions": "false",
            "Value": "contract RolesInstall{\n    data{}\n    func addRole(name string, withParticipant bool){\n        var m param map paramName string id int\n        m[\"role_name\"] = name\n        m[\"role_type\"] = 3\n        id = Int(DBFind(\"roles\").Where(m).One(\"id\"))\n        if id == 0 {\n            m[\"default_page\"] = \"\"\n            m[\"deleted\"] = 0\n            m[\"creator->image_id\"] = 0\n            m[\"creator->member_name\"] = \"founder\"\n            m[\"creator->member_id\"] = Str($key_id)\n            m[\"date_created\"] = BlockTime()\n            m[\"roles_access->rids\"] = \"1\"\n            id = DBInsert(\"roles\", m)\n        }\n        paramName = \"role_\" + Replace(ToLower(name), \" \", \"_\")\n        param = Int(AppParam($appId, paramName))\n        if param == 0{\n            NewAppParam(\"ApplicationId,Name,Value,Conditions\", $appId, paramName, id, \"ContractConditions(\\\"MainCondition\\\")\")\n        }\n\n        if withParticipant {\n            var participant map\n            participant[\"role->id\"] = id\n            participant[\"role->type\"] = m[\"role_type\"]\n            participant[\"role->name\"] = m[\"role_name\"]\n            participant[\"role->image_id\"] = 0\n            participant[\"member->member_id\"] = Str($key_id)\n            participant[\"member->member_name\"] = \"founder\"\n            participant[\"member->image_id\"] = 0\n\n            if !DBFind(\"roles_participants\").Where(participant).One(\"id\"){\n                participant[\"date_created\"] = BlockTime()\n                DBInsert(\"roles_participants\", participant)\n            }\n        }\n    }\n    conditions{\n        MainCondition()\n        $appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\n        if $appId == 0{\n            warning \"Application not found\"\n        }\n    }\n\n    action{\n        addRole(\"Admin\", true)\n        addRole(\"Developer\", true)\n\n        if $ecosystem_id == 1{\n            addRole(\"Apla Consensus asbl\", false)\n            addRole(\"Candidate for validators\", false)\n            addRole(\"Validator\", false)\n            addRole(\"Investor with voting rights\", false)\n            addRole(\"Delegate\", false)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequest",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequest {\n    data {\n        rid int\n    }\n\n    conditions {\n        if !DBFind(\"roles\").WhereId($rid).One(\"id\") {\n            warning \"Role not found\"\n        }\n\n        if DBFind(\"roles_participants\").Where({\"role->id\":$rid, \"member->member_id\":$key_id, deleted:0}).One(\"id\") {\n            warning \"You have already been added to the role\"\n        }\n\n        if DBFind(\"notifications\").Where({page_name:\"roles_request_view\", \"page_params->rid\":$rid, \"sender->member_id\":$key_id, closed:0}).One(\"id\") {\n            warning \"Request already sent\"\n        }\n    }\n    \n    action {\n        var params map\n        params[\"rid\"] = $rid\n        \n        var member_id int\n        member_id = EcosysParam(\"founder_account\") \n\n        NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", \n            member_id, 1, \"fa-bars\", \"Roles\", \"New request received\", \"roles_request_view\", params)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRequestDecision",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRequestDecision {\n    data {\n        decision int\n        notific_id int\n        rid int \"optional\"\n        member_id int \"optional\"\n    }\n\n    conditions {\n    }\n    \n    action {\n        if ($decision == 1){\n            RolesAssign(\"rid,member_id\", $rid, $member_id)\n        }\n        \n        if ($notific_id > 0){\n            NotificationsClose(\"notific_id\", $notific_id)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesRestore",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesRestore {\n    data {\n        rid int\n    }\n    \n    conditions {        \n        RolesAccessCheck(\"rid\", $rid)\n    }\n    \n    action {\n        DBUpdate(\"roles\", $rid, {deleted:0})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "RolesDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract RolesDelete {\n    data {\n        rid int\n    }\n\n    conditions {\n        RolesAccessCheck(\"rid\", $rid)\n    }\n\n    action {\n        var participants array\n        participants = DBFind(\"roles_participants\").Where({\"role->id\":$rid, deleted:0}).Columns(\"id\")\n\n        // delete all participants\n        var i int\n        while i < Len(participants) {\n            var p map\n            p = participants[i]\n            RolesUnassign(\"row_id\", Int(p[\"id\"]))\n            i = i + 1\n        }\n        var m map\n        m[\"deleted\"] = 1\n        m[\"date_deleted\"] = BlockTime()\n        DBUpdate(\"roles\", $rid, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefund",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefund {\r\n    data {\r\n        SenderId string \"optional\"\r\n        RecipientId string\r\n        Amount string\r\n    }\r\n\r\n    conditions {\r\n        if !($SenderId == $key_id || (Size($SenderId) > 0 && ($original_contract == \"VotingDecisionAccept\" || $original_contract == \"TokensRefundAccept\"))) {\r\n            error \"sender id error\"\r\n        }\r\n        var addressLen int\r\n        addressLen = 24\r\n\r\n        $amount = Money($Amount)\r\n        if $SenderId == \"\"{\r\n            $SenderId = Sprintf(\"%v\", $key_id)\r\n        }\r\n        if $amount <= 0 {\r\n            error \"TokensRefund. Amount less than or equal to zero\"\r\n        }\r\n\r\n        if !HasPrefix($SenderId, \"-\") && Contains($SenderId, \"-\"){\r\n            // is address. convert to key id\r\n            $SenderId = Sprintf(\"%v\", AddressToId($SenderId))\r\n        }\r\n        if !HasPrefix($RecipientId, \"-\") && Contains($RecipientId, \"-\"){\r\n            // is address. convert to key id\r\n            $RecipientId = Sprintf(\"%v\", AddressToId($RecipientId))\r\n        }\r\n\r\n        if Size($SenderId) > addressLen{\r\n            $SenderId = Sprintf(\"%v\", PubToID($SenderId))\r\n        }\r\n        if Size($RecipientId) > addressLen{\r\n            $RecipientId = Sprintf(\"%v\", PubToID($RecipientId))\r\n        }\r\n\r\n        $RecipientId = Int($RecipientId)\r\n        $SenderId = Int($SenderId)\r\n        var sender recipient map\r\n        sender = DBFind(\"keys\").WhereId($SenderId).Row()\r\n        if !sender{\r\n            error \"TokensRefund. Sender is invalid\"\r\n        }\r\n        if !DBFind(\"keys\").WhereId($RecipientId).Row(){\r\n            error \"TokensRefund. Recipient is invalid\"\r\n        }\r\n        if sender[\"blocked\"] == 1 {\r\n            error \"Sender blocked\"\r\n        }\r\n        if sender[\"amount\"] < $amount{\r\n            error Sprintf(\"The number of tokens of the sender (%v) is not enough\", sender[\"amount\"])\r\n        }\r\n    }\r\n\r\n    action {\r\n        DBUpdate(\"keys\", $SenderId, {\"-amount\":$amount})\r\n        DBUpdate(\"keys\", $RecipientId, {\"+amount\":$amount})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundAccept{\r\n    data{\r\n        Id string\r\n    }\r\n    func closeNotes(){\r\n        var notes array\r\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\r\n        var i int\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            var noteId int\r\n            noteId = Int(note[\"id\"])\r\n            NotificationsClose(\"notific_id\", noteId)\r\n            i=i+1\r\n        }\r\n    }\r\n    func refundAmount(victimId, attackerId, amount string){\r\n        TokensRefund(\"SenderId,RecipientId,Amount\", attackerId, victimId, amount)\r\n    }\r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), {blocked:0})\r\n        DBUpdate(\"keys\", Int(attackerId), {blocked:0})\r\n    }\r\n\r\n    conditions{\r\n        $Id = Int($Id)\r\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n        $votingID = $tokenrefund[\"voting_id\"]\r\n    }\r\n\r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        closeNotes()\r\n        if $tokenrefund[\"result\"] == 2 || $tokenrefund[\"status\"] == 3{\r\n            return\r\n        }\r\n        refundAmount($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"],$tokenrefund[\"amount\"])\r\n        // status 3: closed; result 2: the tokens returned\r\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:2})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensRefundReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensRefundReject{\r\n    data{\r\n        Id string\r\n    }\r\n    \r\n    func unblockAccounts(victimId, attackerId string){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        DBUpdate(\"keys\", Int(victimId), {blocked:0})\r\n        DBUpdate(\"keys\", Int(attackerId), {blocked:0})\r\n    }\r\n    \r\n    conditions{\r\n        $Id = Int($Id)\r\n        $tokenrefund = DBFind(\"tokenrefund\").WhereId($Id).Row()\r\n        if !$tokenrefund{\r\n            error \"tokenrefund not found\"\r\n        }\r\n    }\r\n    \r\n    action{\r\n        unblockAccounts($tokenrefund[\"victim_key_id\"],$tokenrefund[\"attacker_key_id\"])\r\n        // status 3: closed; 1: return cancelled\r\n        DBUpdate(\"tokenrefund\", $Id, {status:3, result:1})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensTransfer",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensTransfer {\n    data {\n        Amount money\n        Sender_AccountId int\n        Recipient_AccountId int\n        Comment string \"optional\"\n        //Signature string \"optional hidden\"\n    }\n\n    conditions {\n        //check amount\n        if $Amount == 0 {\n            error \"Amount is zero\"\n        }\n        if $Amount < 0 {\n            error \"Amount is negative\"\n        }\n\n        //check the sender\n        if !DBFind(\"keys\").WhereId($Sender_AccountId).One(\"id\") {\n            error Sprintf(\"Sender %v is invalid\", $Sender_AccountId)\n        }\n\n        //check balance\n        $sender_balance = Money(DBFind(\"keys\").WhereId($Sender_AccountId).One(\"amount\"))\n        if $Amount > $sender_balance {\n            error Sprintf(\"Money is not enough %v < %v\", $sender_balance, $Amount)\n        }\n\n        //check the recipient\n        if !DBFind(\"keys\").WhereId($Recipient_AccountId).One(\"id\") {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_AccountId)\n        }\n    }\n\n    action {\n        DBUpdate(\"keys\", $Sender_AccountId, {\"-amount\":$Amount})\n        DBUpdate(\"keys\", $Recipient_AccountId, {\"+amount\":$Amount})\n        var m map\n        m[\"sender_id\"] = $Sender_AccountId\n        m[\"recipient_id\"] = $Recipient_AccountId\n        m[\"amount\"] = $Amount\n        m[\"comment\"] = $Comment\n        m[\"block_id\"] = $block\n        m[\"txhash\"] = $txhash\n        DBInsert(\"history\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "TokensSend",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract TokensSend {\n    data {\n        Amount money\n        Recipient_Account string\n        //Signature string \"signature:TokensTransfer\"\n    }\n\n    conditions {\n        $recipient = AddressToId($Recipient_Account)\n        if $recipient == 0 {\n            error Sprintf(\"Recipient %v is invalid\", $Recipient_Account)\n        }\n    }\n\n    action {\n        //TokensTransfer(\"Amount,Sender_AccountId,Recipient_AccountId,Signature\", $Amount, $key_id, $recipient, $Signature)\n        TokensTransfer(\"Amount,Sender_AccountId,Recipient_AccountId\", $Amount, $key_id, $recipient)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "ValidatorResign",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract ValidatorResign{\r\n    data{}\r\n    func getParamInt(id int, name string) int{\r\n        var param int\r\n        param = Int(AppParam(id, name))\r\n        if param == 0{\r\n            warning Sprintf(\"Application parameter not setted in '%v'\", name)\r\n        }\r\n        Println(\"return param\")\r\n        return param\r\n    }\r\n    conditions{\r\n        var roleValidatorId appId int\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\r\n        roleValidatorId = getParamInt(appId, \"role_validator\")\r\n        if $role_id != roleValidatorId {\r\n            warning \"You are not a Validator. You can not to run this\"\r\n        }\r\n        $assigned = DBFind(\"roles_participants\").Where({\"member->member_id\":$key_id, \"role->id\":roleValidatorId, deleted:0}).One(\"id\")\r\n    }\r\n\r\n    action{\r\n        RolesUnassign(\"row_id\", Int($assigned))\r\n        NodeRemoveByKey()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionCheck {\r\n    data {\r\n        votingID int\r\n    }\r\n    func runContract(cont, p string){\r\n        if Size(cont) > 0 {\r\n            var params map\r\n            if Size(p) > 0 {\r\n                params = JSONToMap(p)\r\n            }\r\n            CallContract(cont, params)\r\n        }\r\n    }\r\n    func percentPartOfTotal(part, total int) int {\r\n            if total == 0{ total = 1 }\r\n            var percent int\r\n            percent = Int((part * 100)/total)\r\n            if percent > 100 {\r\n                percent = 100\r\n            }\r\n            return percent   \r\n    }\r\n    func totalSummForTypeVotingVoters(votingId int) int {\r\n        var type_number_voters array\r\n        type_number_voters = DBFind(\"votings_participants\").Where({voting_id:$votingID})\r\n        var i int\r\n        i = 0\r\n        var summ int\r\n        while i < Len(type_number_voters) {\r\n            var type_number_voter map\r\n            type_number_voter = type_number_voters[i]\r\n            summ = summ + Int(type_number_voter[\"decision\"])\r\n            i = i + 1\r\n        }\r\n        return summ\r\n    }\r\n    func closeNotes(){\r\n        var notes array i int\r\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\r\n        while i < Len(notes){\r\n            var note map\r\n            note = notes[i]\r\n            NotificationsClose(\"notific_id\", Int(note[\"id\"]))\r\n            i=i+1\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n\r\n        $voting = DBFind(\"votings\").WhereId($votingID).Columns(\"voting->name,voting->count_type_voters,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status\").Row()\r\n        $voting_name = $voting[\"voting.name\"]\r\n        $voting_type = Int($voting[\"voting.type\"]) //system or custom\r\n        $type_decision = Int($voting[\"voting.type_decision\"])\r\n        $optional_role_id = Int($voting[\"optional.role_id\"])\r\n        $number_role_vacancies = Int($voting[\"optional.role_vacancies\"])\r\n        $number_voters = Int($voting[\"progress.number_voters\"]) // already voted\r\n        $contract_accept = $voting[\"optional.contract_accept\"]\r\n        $contract_reject = $voting[\"optional.contract_reject\"]\r\n        $param_accept = $voting[\"optional.contract_accept_params\"]\r\n        $param_reject = $voting[\"optional.contract_reject_params\"]\r\n        $flag_success = $voting[\"flags.success\"]\r\n        $quorum = Int($voting[\"voting.quorum\"])\r\n        $percent_voters = Int($voting[\"progress.percent_voters\"])\r\n        $status =  Int($voting[\"status\"])\r\n\r\n        var prevContract string\r\n        prevContract = $stack[0]\r\n        if Len($stack)>2{\r\n            prevContract = $stack[Len($stack)-2]\r\n        }\r\n        if prevContract != \"@1VotingUpdate\"{\r\n            // if $percent_voters < $quorum && $quorum > 50 || $status != $FINISHED {\r\n            if $status != $FINISHED {\r\n                warning \"Voting has not expired. Try again later, please\"\r\n            }\r\n        }\r\n\r\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\r\n        if !$subject_id {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n\r\n        $ACCEPT = 1\r\n        $REJECT = -1\r\n    }\r\n\r\n    action {\r\n        var percent_voters flag_decision i int\r\n        flag_decision = -2 // decision can not be made (not enough participants to make a decision)\r\n        if $flag_success == $ACCEPT { //now enough participants to make a decision\r\n            if $type_decision == 1 || $type_decision == 2 {\r\n                var candidates_added_count int\r\n                candidates_added_count = 0 // candidates who have already been added\r\n                flag_decision = $REJECT // none of the candidates has been added yet\r\n\r\n                var subjects array\r\n                subjects = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Order({number_accept:\"-1\"}).Columns(\"voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id\")\r\n                i = 0\r\n                while i < Len(subjects) {\r\n                    var subject map\r\n                    subject = subjects[i]\r\n\r\n                    // if there are still vacancies\r\n                    if candidates_added_count < $number_role_vacancies {\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                            if percent_voters >= $quorum {\r\n                                // added candidate to the role\r\n                                var role map\r\n                                role = DBFind(\"roles\").Columns(\"id,role_type,role_name,image_id\").WhereId(Int($optional_role_id)).Row()\r\n                                if role {\r\n                                    var member assignedMember map mid rid string\r\n                                    member[\"member_id\"] = subject[\"subject.member_id\"]\r\n                                    mid = member[\"member_id\"]\r\n                                    rid = role[\"id\"]\r\n                                    assignedMember = DBFind(\"roles_participants\").Where({\"member->member_id\":mid, \"role->id\":rid, deleted:0}).Row()\r\n\r\n                                    if !assignedMember {\r\n                                        member[\"member_name\"] = subject[\"subject.member_name\"]\r\n                                        member[\"image_id\"] = subject[\"subject.image_id\"]\r\n\r\n                                        var rolePart appointed m map\r\n                                        rolePart[\"id\"] = role[\"id\"]\r\n                                        rolePart[\"type\"] = role[\"role_type\"]\r\n                                        rolePart[\"name\"] = role[\"role_name\"]\r\n                                        rolePart[\"image_id\"] = role[\"image_id\"]\r\n\r\n                                        appointed[\"voting_id\"] = $votingID\r\n                                        appointed[\"voting_name\"] = $voting_name\r\n\r\n                                        // add a candidate to the role\r\n                                        m[\"role\"] = rolePart\r\n                                        m[\"member\"] = member\r\n                                        m[\"appointed\"] = appointed\r\n                                        m[\"date_created\"] = BlockTime()\r\n                                        DBInsert(\"roles_participants\", m)\r\n\r\n                                        candidates_added_count = candidates_added_count + 1\r\n                                        // if at least one of the candidates was added to the role, then the voting decision is considered successful\r\n                                        flag_decision = $ACCEPT\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    i = i + 1\r\n                }\r\n            }\r\n\r\n            if $type_decision == 3 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Columns(\"id,number_accept\").Row()\r\n                if subject {\r\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if percent_voters >= $quorum {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    } else {\r\n                        var total_summ_type_voter int\r\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\r\n                        if total_summ_type_voter >= 1 {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 4 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Columns(\"id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value\").Row()\r\n                if subject {\r\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if percent_voters >= $quorum {\r\n                            flag_decision = $ACCEPT\r\n\r\n                            var column string\r\n                            column = Str(subject[\"subject.column\"])\r\n                            $colValue = Str(subject[\"subject.column_value\"])\r\n                            // type of voting - custom\r\n                            if $voting_type == 1 {\r\n                                // ALWAYS CHECK THE PERMISSION\r\n                                var colType string\r\n                                colType = GetColumnType(subject[\"subject.table\"], column)\r\n                                if colType == \"number\"{\r\n                                    $colValue = Int($colValue)\r\n                                }\r\n                                if colType == \"money\"{\r\n                                    $colValue = Money($colValue)\r\n                                }\r\n                                if colType == \"double\" {\r\n                                    $colValue = Float($colValue)\r\n                                }\r\n                                var m map\r\n                                m[column] = $colValue\r\n                                DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                            }\r\n\r\n                            // type of voting - system\r\n                            if $voting_type == 2 {\r\n                                @1UpdateSysParam(\"Name,Value,Conditions\", column, $colValue, \"\")\r\n                            }\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    } else {\r\n                        var total_summ_type_voter int\r\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\r\n                        if total_summ_type_voter >= 1 {\r\n                            flag_decision = $ACCEPT\r\n\r\n                            var column string\r\n                            column = Str(subject[\"subject.column\"])\r\n                            $colValue = Str(subject[\"subject.column_value\"])\r\n                            // type of voting - custom\r\n                            if $voting_type == 1 {\r\n                                // ALWAYS CHECK THE PERMISSION\r\n                                var colType string\r\n                                colType = GetColumnType(subject[\"subject.table\"], column)\r\n                                if colType == \"number\"{\r\n                                    $colValue = Int($colValue)\r\n                                }\r\n                                if colType == \"money\"{\r\n                                    $colValue = Money($colValue)\r\n                                }\r\n                                if colType == \"double\" {\r\n                                    $colValue = Float($colValue)\r\n                                }\r\n                                var m map\r\n                                m[column] = $colValue\r\n                                DBUpdate(subject[\"subject.table\"], Int(subject[\"subject.table_id\"]), m)\r\n                            }\r\n\r\n                            // type of voting - system\r\n                            if $voting_type == 2 {\r\n                                @1UpdateSysParam(\"Name,Value,Conditions\", column, $colValue, \"\")\r\n                            }\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if $type_decision == 5 {\r\n                var subject map\r\n                subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Columns(\"id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params\").Row()\r\n                if subject {\r\n                    $contract_accept = subject[\"subject.contract_accept\"]\r\n                    $contract_reject = subject[\"subject.contract_reject\"]\r\n                    $param_accept = subject[\"subject.contract_accept_params\"]\r\n                    $param_reject = subject[\"subject.contract_reject_params\"]\r\n\r\n                    if (Int($voting[\"voting.count_type_voters\"]) == 0){\r\n                        percent_voters = percentPartOfTotal(Int(subject[\"number_accept\"]), $number_voters)\r\n                        if percent_voters >= $quorum {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    } else {\r\n                        var total_summ_type_voter int\r\n                        total_summ_type_voter = totalSummForTypeVotingVoters($votingID)\r\n                        if total_summ_type_voter >= 1 {\r\n                            flag_decision = $ACCEPT\r\n                        } else {\r\n                            flag_decision = $REJECT\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if flag_decision == 1 {\r\n                runContract($contract_accept, $param_accept)\r\n                closeNotes()\r\n            }\r\n            if flag_decision == -1 {\r\n                runContract($contract_reject, $param_reject)\r\n                closeNotes()\r\n            }\r\n        }\r\n\r\n        DBUpdate(\"votings\", $votingID, {\"flags->decision\":flag_decision})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingInvite",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingInvite {\r\n    data {\r\n        votingID int\r\n        var_id int //0, member_id, role_id\r\n    }\r\n\r\n    func addVotingKey(key map, votingId int) {\r\n        var m member map\r\n        member[\"member_id\"] = key[\"id\"]\r\n        member[\"member_name\"] = IdToAddress(Int(key[\"id\"]))\r\n        m[\"voting_id\"] = votingId\r\n        m[\"member\"] = member\r\n        DBInsert(\"votings_participants\", m)\r\n    }\r\n    conditions {\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended\").Row()\r\n        if !$voting {\r\n            warning \"Voting has expired. Can not add new participants\"\r\n        }\r\n\r\n        $type_participants = $voting[\"voting.type_participants\"]\r\n        $type_voting = $voting[\"voting.type\"]\r\n        $number_participants = Int($voting[\"progress.number_participants\"])\r\n\r\n        if $number_participants > 1 && $type_voting == 2 {\r\n            warning \"This vote is a system. Add new participants are not possible\"\r\n        }\r\n        var isAdded string\r\n        if $type_participants == 2 {\r\n            if !DBFind(\"keys\").WhereId($var_id).Row(){\r\n                warning \"Key not found\"\r\n            }\r\n            isAdded = DBFind(\"votings_participants\").Where({voting_id:$votingID,\"member->member_id\":$var_id}).One(\"id\")\r\n            if isAdded {\r\n                warning \"Member has already been added before\"\r\n            }\r\n        }\r\n\r\n        if $type_participants == 3 {\r\n            isAdded = DBFind(\"votings_participants\").Where({voting_id:$votingID}).One(\"id\")\r\n            if isAdded {\r\n                warning \"Voting participants have already been added before\"\r\n            }\r\n            if Len(DBFind(\"roles_participants\").Where({\"role->id\":$var_id, deleted:0})) == 0 {\r\n                warning \"Roles participants not found\"\r\n            }\r\n        }\r\n        if ($type_participants == 4 || $type_participants == 5) {\r\n            isAdded = DBFind(\"votings_participants\").Where({voting_id:$votingID,\"member->role_id\":$var_id}).One(\"id\")\r\n            if isAdded {\r\n                if ($type_participants == 4){\r\n                    warning \"Members of this role have already been added to the vote\"\r\n                }\r\n                if ($type_participants == 5){\r\n                    warning \"This role have already been added to the vote\"\r\n                }\r\n            }\r\n            if Len(DBFind(\"roles_participants\").Where({\"role->id\":$var_id, deleted:0})) == 0 {\r\n                    warning \"Roles participants not found\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        var i int\r\n        if $type_participants == 1 { // everybody\r\n            var keys array\r\n            keys = DBFind(\"keys\")\r\n            while i < Len(keys) {\r\n                addVotingKey(keys[i], $votingID)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 2 { // manual\r\n            var key map\r\n            key = DBFind(\"keys\").WhereId($var_id).Row()\r\n            addVotingKey(key, $votingID)\r\n            $number_participants = $number_participants + 1\r\n        }\r\n        if $type_participants == 3 { // role\r\n            var roles array\r\n            roles = DBFind(\"roles_participants\").Where({\"role->id\":$var_id, deleted:0}).Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role m map\r\n                role = roles[i]\r\n                m[\"voting_id\"] = $votingID\r\n                m[\"member\"] = role[\"member\"]\r\n                DBInsert(\"votings_participants\", m)\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 4 { // all participants in the selected roles vote\r\n            var roles array\r\n            roles = DBFind(\"roles_participants\").Where({\"role->id\":$var_id, deleted:0}).Order(\"id\")\r\n            while i < Len(roles) {\r\n                var role map\r\n                role = roles[i]\r\n                var cust map\r\n                cust= JSONToMap(role[\"member\"])\r\n                cust[\"role_id\"] = $var_id\r\n                DBInsert(\"votings_participants\", {voting_id: $votingID, member: cust})\r\n                $number_participants = $number_participants + 1\r\n                i = i + 1\r\n            }\r\n        }\r\n        if $type_participants == 5 { // one participant of the selected roles votes\r\n            var role map\r\n            role[\"role_id\"] = $var_id\r\n            role[\"member_id\"] = \"0\"\r\n            var json string\r\n            json = JSONEncode(role)\r\n            $role_id_send = $var_id\r\n            DBInsert(\"votings_participants\", {voting_id: $votingID, member: json}) \r\n            $number_participants = $number_participants + 1 \r\n        }\r\n        var v map\r\n        v[\"progress->number_participants\"] =  $number_participants\r\n        if $type_participants == 3 {\r\n            v[\"voting->role_id\"] =  $var_id\r\n            DBUpdate(\"votings\", $votingID, v)\r\n        }else{\r\n            DBUpdate(\"votings\", $votingID, v)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingUpdate {\r\n    data {\r\n        votingID int\r\n    }\r\n\r\n    func safeJsonToMap(m string) map {\r\n        var res map\r\n        if Size(m) > 0 { res = JSONToMap(m) }\r\n        return res\r\n    }\r\n\r\n    func percentPartOfTotal(part, total int) int {\r\n        if total == 0{ total = 1 }\r\n        var percent int\r\n        percent = Int((part * 100)/total)\r\n        if percent > 100 { percent = 100 }\r\n        return percent\r\n    }\r\n\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:$STARTED}).Columns(\"flags,voting,progress,progress->number_voters,voting->count_type_voters\").Row()\r\n        if !$voting {\r\n            warning \"Started voting is not found\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        var progress voting map\r\n        progress = safeJsonToMap($voting[\"progress\"])\r\n        voting = safeJsonToMap($voting[\"voting\"])\r\n\r\n        var flag_success percent_success percent_voters number_voters quorum  volume int\r\n        // increment count of voters\r\n        quorum = Int(voting[\"quorum\"])\r\n        volume = Int(voting[\"volume\"])\r\n        number_voters = Int(progress[\"number_voters\"]) + 1\r\n        if(Int($voting[\"voting.count_type_voters\"]) == 0){\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(percent_voters, volume)\r\n        } else {\r\n            percent_voters = percentPartOfTotal(number_voters, Int(progress[\"number_participants\"]))\r\n            percent_success = percentPartOfTotal(number_voters, volume)\r\n        }\r\n\r\n        // update the flag of success\r\n        if percent_success == 100 {\r\n            flag_success = 1\r\n        }\r\n        progress[\"percent_voters\"] = percent_voters\r\n        progress[\"percent_success\"] = percent_success\r\n        progress[\"number_voters\"] = number_voters\r\n\r\n        var m map\r\n        m[\"progress\"] = progress\r\n        m[\"flags->success\"] = flag_success\r\n        \r\n        $check_type = DBFind(\"votings\").Columns(\"id,voting,voting->count_type_voters\").WhereId($votingID).One(\"voting.count_type_voters\")\r\n        if $check_type == 0 {\r\n            if (percent_voters >= quorum && quorum > 50 && percent_voters >= volume) || percent_voters == 100 {\r\n                // if a quorum is more than 50% we can immediately make the decision\r\n                // OR\r\n                // if all participants have voted we can not wait until the end of the voting period\r\n                m[\"status\"] = $FINISHED\r\n                DBUpdate(\"votings\", $votingID, m)\r\n                VotingDecisionCheck(\"votingID\", $votingID)\r\n            }else{\r\n                DBUpdate(\"votings\", $votingID, m)\r\n            }\r\n        }\r\n        if $check_type == 1 {\r\n            $total_voters = Int($voting[\"progress.number_voters\"]) + 1\r\n            if ($total_voters >= volume) || percent_voters == 100 {\r\n                // if a quorum is more than 50% we can immediately make the decision\r\n                // OR\r\n                // if all participants have voted we can not wait until the end of the voting period\r\n                m[\"status\"] = $FINISHED\r\n                DBUpdate(\"votings\", $votingID, m)\r\n                VotingDecisionCheck(\"votingID\", $votingID)\r\n            }else{\r\n                DBUpdate(\"votings\", $votingID, m)\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCandidateAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingCandidateAccept {\r\n    data {\r\n        votingID int\r\n        candidateID int\r\n    }\r\n    func closeNotification(){\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"notifications\").Where({\"recipient->role_id\":$role_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"notifications\").Where({\"recipient->member_id\":$key_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n            if id > 0 {\r\n                NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").Columns(\"id,flags->decision,flags->notifics,status\").WhereId($votingID).Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        $subject_map = DBFind(\"votings_subject\").Where({voting_id:$votingID, \"subject->member_id\":$candidateID}).Row()\r\n        if !$subject_map {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n        $participant_role_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->role_id\":$role_id,\"member->member_id\":0}).One(\"id\")\r\n      \r\n        $check_type = DBFind(\"votings\").Columns(\"id,voting,voting->type_participants\").WhereId($votingID).Row()\r\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\r\n            $participant_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\r\n            if !$participant_id {\r\n                warning \"You are not a participant in this voting\"\r\n            }\r\n        }\r\n        \r\n        if $participant_role_id {\r\n            $rid = DBFind(\"votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({voting_id:$votingID, \"member->role_id\":$role_id}).Row()\r\n            if $rid {\r\n                var mem_role int\r\n                mem_role = Int($rid[\"member.role_id\"])\r\n                $participant_id = DBFind(\"roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({\"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\r\n                if !$participant_id{\r\n                    warning \"You are not a participant in this voting\"\r\n                } else {\r\n                    var solo_role_vot map\r\n                    $membership_role_name = DBFind(\"members\").WhereId($key_id).Row()\r\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\r\n                    solo_role_vot[\"member_id\"] = $key_id\r\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\r\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\r\n                    var json string\r\n                    json = JSONEncode(solo_role_vot)\r\n                    DBUpdate(\"votings_participants\",Int($rid[\"id\"]),{\"member\":json})\r\n                    $participant_id = Int($rid[\"id\"])\r\n                }\r\n            } else {\r\n                warning \"You are not a participant in this voting\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            // write the result of the voting\r\n            var m map\r\n            m[\"decision_date\"] = bt\r\n            m[\"decision\"] =  $candidateID\r\n            DBUpdate(\"votings_participants\", Int($participant_id), m)\r\n\r\n            // increment count of accept\r\n            DBUpdate(\"votings_subject\", Int($subject_map[\"id\"]), {\"+number_accept\":1})\r\n\r\n            VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionAccept {\r\n    data {\r\n        votingID int\r\n    }\r\n    func closeNotification(){\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"notifications\").Where({\"recipient->role_id\":$role_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"notifications\").Where({\"recipient->member_id\":$key_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n            if id > 0 {\r\n                NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").WhereId($votingID).Columns(\"id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status\").Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $role_id{\r\n                warning \"Incorrect role for voting\"\r\n            }\r\n        }\r\n        $subject = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Row()\r\n        if !$subject {\r\n            warning \"Subject of voting is not found\"\r\n        }\r\n        \r\n        $participant_role_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->role_id\":$role_id,\"member->member_id\":0}).One(\"id\")\r\n      \r\n        $check_type = DBFind(\"votings\").Columns(\"id,voting,voting->type_participants\").WhereId($votingID).Row()\r\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\r\n            $participant_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\r\n            if !$participant_id {\r\n                warning \"You are not a participant in this voting\"\r\n            }\r\n        }\r\n        \r\n        if $participant_role_id {\r\n            $rid = DBFind(\"votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({voting_id:$votingID, \"member->role_id\":$role_id}).Row()\r\n            if $rid {\r\n                var mem_role int\r\n                mem_role = Int($rid[\"member.role_id\"])\r\n                $participant_id = DBFind(\"roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({\"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\r\n                if !$participant_id{\r\n                    warning \"You are not a participant in this voting\"\r\n                } else {\r\n                    var solo_role_vot map\r\n                    $membership_role_name = DBFind(\"members\").WhereId($key_id).Row()\r\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\r\n                    solo_role_vot[\"member_id\"] = $key_id\r\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\r\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\r\n                    var json string\r\n                    json = JSONEncode(solo_role_vot)\r\n                    DBUpdate(\"votings_participants\",Int($rid[\"id\"]),{\"member\":json})\r\n                    $participant_id = Int($rid[\"id\"])\r\n                }\r\n            } else {\r\n                warning \"You are not a participant in this voting\"\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            DBUpdate(\"votings_participants\", Int($participant_id), {decision_date:bt, decision:1})\r\n\r\n            // increment count of accept\r\n            DBUpdate(\"votings_subject\", Int($subject[\"id\"]), {\"+number_accept\":1})\r\n            VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDelete",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDelete {\n    data {\n        votingID int\n    }\n\n    conditions {\n        $INVALID = 5\n        var voting map bt string\n        bt = BlockTime()\n        voting = DBFind(\"votings\").Where({id:$votingID, \"creator->member_id\":$key_id, \"status\":$INVALID}).Columns(\"id\").Row()\n        if !voting {\n            warning \"Delete voting impossible\"\n        }\n    }\n\n    action {\n        DBUpdate(\"votings\", $votingID, {deleted:1})\n        var notes array\n        notes = DBFind(\"notifications\").Where({page_name:\"voting_view\", \"page_params->voting_id\":$votingID})\n        var i int\n        while i < Len(notes){\n            var note map noteId int\n            note = notes[i]\n            noteId = Int(note[\"id\"])\n            NotificationsClose(\"notific_id\", noteId)\n            i=i+1\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingCreate {\r\n    data {\r\n        voting_name string\r\n        voting_type int\r\n        type_participants int\r\n        type_decision int\r\n\r\n        volume int\r\n        quorum int \"optional\"\r\n\r\n        count_type_voters string \"optional\"\r\n        description string \"optional\"\r\n        interval string \"optional\"\r\n        start_date string \"optional\"\r\n        start_time string \"optional\"\r\n        end_date string \"optional\"\r\n        end_time string \"optional\"\r\n    }\r\n    func trimZeroTime(s string) string{\r\n        if Contains(s, \"T00:00:00Z\"){\r\n            s = s Replace(s, \"T00:00:00Z\", \"\")\r\n        }\r\n        return s\r\n    }\r\n    func dateAddTime(d, t string) string {\r\n        var dt string\r\n        if Size(t) == 5{\r\n            dt = Sprintf(\"%v %v:00\", trimZeroTime(d), t)\r\n        }\r\n        return dt\r\n    }\r\n    func isCalledFromPage() bool{\r\n        return $stack[0] == Sprintf(\"@%v%v\", $ecosystem_id, $this_contract)\r\n    }\r\n    func fixDatetimes(){\r\n        $date_started = dateAddTime($start_date, $start_time)\r\n        $date_ended = dateAddTime($end_date, $end_time)\r\n\r\n        if UnixDateTime($date_started) == 0 || UnixDateTime($date_ended) == 0 { // invalid datetimes\r\n            if isCalledFromPage(){\r\n                var errs array\r\n                if Size($start_date) < 10 {\r\n                    errs = Append(errs, \"starting date\")\r\n                }\r\n                if Size($start_time) < 5 {\r\n                    errs = Append(errs, \"starting time\")\r\n                }\r\n                if Size($end_date) < 10 {\r\n                    errs = Append(errs, \"ending date\")\r\n                }\r\n                if Size($end_time) < 5 {\r\n                    errs = Append(errs, \"ending time\")\r\n                }\r\n                error Sprintf(\"Error create voting: %v unspecified\", Join(errs, \", \"))\r\n            }else{\r\n                $date_started = $block_time\r\n                $interval = Int($interval)\r\n                if $interval == 0 {\r\n                    $interval = 3\r\n                }\r\n                $date_ended = $date_started + 3600 * 24 * $interval\r\n                $date_started = DateTime($date_started)\r\n                $date_ended = DateTime($date_ended)\r\n            }\r\n        }\r\n        if UnixDateTime($date_started) < $block_time{\r\n            error \"Invalid date starting\"\r\n        }\r\n        if UnixDateTime($date_started) >= UnixDateTime($date_ended){\r\n            error \"Invalid date ending\"\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        if (($type_decision == 1 || $type_decision == 2) && $count_type_voters == 1){\r\n            info(\"The selected type of voting is not suitable for this decision\")\r\n        }\r\n        if $count_type_voters == 0 {\r\n            if ($quorum < 5) || ($quorum > 100) {\r\n                warning Sprintf(\"Quorum [%v] should be in the range from 5 to 100\", $quorum)\r\n            }   \r\n            if ($volume < 50) || ($volume > 100) {\r\n                warning Sprintf(\"Volume [%v] should be in the range from 50 to 100\", $volume)\r\n            }\r\n        }\r\n        if $count_type_voters == 1 {\r\n            if $volume <= 0 {\r\n                info(\"Volume can not be less than 1\")\r\n            }\r\n            $quorum = 0\r\n        }\r\n        if $voting_type == 2 {\r\n            var specRules map\r\n            specRules[\"VotingTokensRefundCreate\"] = 1\r\n            specRules[\"VotingTemplateRun\"] = 1\r\n            specRules[\"VotingNodeAdd\"] = 1\r\n            if specRules[$original_contract] != 1 {\r\n                warning Sprintf(\"The voting type 'system' is not allowed to launch from %v\", $original_contract)\r\n            }\r\n        }\r\n        \r\n\r\n        $key = DBFind(\"keys\").WhereId($key_id).Row()\r\n        if !$key {\r\n            warning \"You are not a member of the ecosystem\"\r\n        }\r\n\r\n        fixDatetimes()\r\n    }\r\n\r\n    action {\r\n        var voting progress flags creator map votingId int\r\n        voting[\"name\"] = $voting_name\r\n        voting[\"type\"] = $voting_type\r\n        voting[\"description\"] = $description\r\n        voting[\"type_participants\"] = $type_participants\r\n        voting[\"type_decision\"] = $type_decision\r\n        voting[\"volume\"] = $volume\r\n        voting[\"quorum\"] = $quorum\r\n        voting[\"count_type_voters\"] = $count_type_voters\r\n\r\n        progress[\"number_participants\"] = \"0\"\r\n        progress[\"number_voters\"] = \"0\"\r\n        progress[\"percent_success\"] = \"0\"\r\n        progress[\"percent_voters\"] = \"0\"\r\n\r\n        flags[\"success\"] = \"0\"\r\n        flags[\"decision\"] = \"0\"\r\n        flags[\"full_data\"] = \"0\"\r\n        flags[\"notifics\"] = \"0\"\r\n\r\n        creator[\"member_id\"] = $key[\"id\"]\r\n        creator[\"member_name\"] = IdToAddress($key_id)\r\n        var m map\r\n        m[\"voting\"] = voting\r\n        m[\"progress\"] = progress\r\n        m[\"flags\"] = flags\r\n        m[\"creator\"] = creator\r\n        m[\"status\"] = 1\r\n        m[\"date_started\"] = $date_started\r\n        m[\"date_ended\"] = $date_ended\r\n\r\n        votingId = DBInsert(\"votings\", m)\r\n\r\n        // if all members are voting participants\r\n        if $type_participants == 1 {\r\n            VotingInvite(\"votingID,var_id\", votingId, 0)\r\n        }\r\n        $result = votingId\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCheck",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectCheck {\n    data {\n        votingID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $voting_map = DBFind(\"votings\").WhereId($votingID).Columns(\"id,optional,voting->type,voting->type_decision,flags\").Row()\n        if !$voting_map {\n            warning \"Voting is not found\"\n        }\n\n        $type_decision = $voting_map[\"voting.type_decision\"]\n        if $type_decision < 1 || $type_decision > 5 {\n            warning \"invalid type of decision\"\n        }\n\n        $subject_map = DBFind(\"votings_subject\").Where({voting_id:$votingID}).Row()\n        if !$subject_map {\n            warning \"Subject of voting is not found\"\n        }\n    }\n\n    action {\n        var flags, subject map\n        flags = safeJsonToMap($voting_map[\"flags\"])\n        if $type_decision > 2 && $type_decision <= 5 {\n            subject = safeJsonToMap($subject_map[\"subject\"])\n        }\n\n        var fullData string\n\n        if $type_decision == 1 || $type_decision == 2 {\n            var optional map\n            optional = safeJsonToMap($voting_map[\"optional\"])\n\n            if optional[\"number_candidates\"] > 0 && optional[\"role_vacancies\"] > 0 && optional[\"role_id\"] > 0 {\n                fullData = 1\n            }\n        }\n\n        if $type_decision == 3 {\n            if subject[\"text\"] != \"\" && subject[\"hash\"] != \"\" {\n                fullData = 1\n            }\n        }\n\n        if $type_decision == 4 {\n            if $voting_map[\"voting.type\"] == 1{ // personal\n                if subject[\"table\"] != \"\" && subject[\"table_id\"] != \"\" && subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n            if $voting_map[\"voting.type\"] == 2 { // system\n                if subject[\"column\"] != \"\" && subject[\"column_value\"] != \"\" {\n                    fullData = 1\n                }\n            }\n        }\n\n        if $type_decision == 5 {\n            if subject[\"contract_accept\"] != \"\" && subject[\"contract_reject\"] != \"\" {\n                fullData = 1\n            }\n        }\n\n        if fullData == 1 {\n            DBUpdate(\"votings\", $votingID, {\"flags->full_data\":fullData})\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNotificationSend",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNotificationSend {\n    data {\n        votingID int\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 {\n            res = JSONToMap(m)\n        }\n        return res\n    }\n    conditions {\n        var bt string\n        bt = BlockTime()\n        $voting = DBFind(\"votings\").Columns(\"id,date_ended\").Where({id:$votingID, date_ended:[{\"$gt\":bt}]}).One(\"id\")\n        if !$voting {\n            warning \"Voting has expired. Notifications can not be sent\"\n        }\n\n        $voting = DBFind(\"votings\").Columns(\"voting->name,creator->member_id,flags->notifics,flags,date_started\").Where({id:$votingID, date_started:[{\"$gt\":bt}]}).Row()\n        if !$voting {\n            warning \"Voting has not yet begun. Try again later, please\"\n        }\n        if $voting[\"creator.member_id\"] != $key_id {\n            warning \"You are not the creator of the voting\"\n        }\n        if $voting[\"flags.notifics\"] == 1 {\n            warning \"Notifications have already been sent\"\n        }\n\n        $voting_name = $voting[\"voting.name\"]\n    }\n\n    action {\n        var participants array\n        participants = DBFind(\"votings_participants\").Where({voting_id:$votingID, decision:0})\n        var i int\n        while i < Len(participants) {\n            var participant member params map\n            participant = participants[i]\n            member = safeJsonToMap(participant[\"member\"])\n            params[\"voting_id\"] = $votingID\n            NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,rid,closure_type\", Int(member[\"member_id\"]), 1, \"fa-check\", \"Voting\", $voting_name, \"voting_view\", JSONEncode(params), 0, 0)\n\n            i = i + 1\n        }\n\n        DBUpdate(\"votings\", $votingID, {\"flags->notifics\":1})\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingStatusUpdate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingStatusUpdate {\r\n    data {}\r\n\r\n    func notificationSend(voting map){\r\n        var title string id i lenVoters int voters array\r\n        $type_p = DBFind(\"votings\").Columns(\"id,voting->type_participants\").WhereId(Int(voting[\"id\"])).Row()\r\n        if($type_p[\"voting.type_participants\"] == 5){\r\n            title = voting[\"voting.name\"]\r\n            id = Int(voting[\"id\"])\r\n            voters = DBFind(\"votings_participants\").Columns(\"member->role_id\").Where({voting_id:id, decision:0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter roleId params map\r\n                voter = voters[i]\r\n                roleId = Int(voter[\"member.role_id\"])\r\n                params[\"voting_id\"] = id\r\n                NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,closure_type\", roleId, 1, \"fa-check\", \"Voting\", title, \"voting_view\", params,1)\r\n                i = i + 1\r\n            }\r\n            //notifications_Send(\"icon_name,rid,closure_type,sender,text_header,text_body,page_name,params_map\",\"fa-check\",$role_id_send, 1, 1,\"Voting\",$voting_name,\"voting_view\",JSONEncode(params))\r\n        } else{\r\n            title = voting[\"voting.name\"]\r\n            id = Int(voting[\"id\"])\r\n            voters = DBFind(\"votings_participants\").Columns(\"member->member_id\").Where({voting_id:id, decision:0})\r\n            lenVoters = Len(voters)\r\n            while i < lenVoters {\r\n                var voter memberId params map\r\n                voter = voters[i]\r\n                memberId = Int(voter[\"member.member_id\"])\r\n                params[\"voting_id\"] = id\r\n                NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map\", memberId, 1, \"fa-check\", \"Voting\", title, \"voting_view\", params)\r\n                i = i + 1\r\n            }\r\n        }\r\n    }\r\n    func changeVotings(from, to map){\r\n        var votings array i lenVotings int v map\r\n        from[\"deleted\"] = 0\r\n        votings = DBFind(\"votings\").Columns(\"id,date_started,date_ended,voting->name\").Where(from)\r\n  \r\n        lenVotings = Len(votings)\r\n        while i<lenVotings{\r\n            v = votings[i]\r\n            if to[\"status\"] == $STARTED{\r\n                notificationSend(v)\r\n                to[\"flags->notifics\"] = 1\r\n            }\r\n            DBUpdate(\"votings\", Int(v[\"id\"]), to)\r\n            i=i+1\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        MainCondition()\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n    }\r\n    action {\r\n        var bt string\r\n        bt = BlockTime()\r\n        changeVotings({status:$WAITING, \"flags->full_data\":0}, {status:$INVALID})\r\n        changeVotings({status:$INVALID, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\r\n        changeVotings({status:$WAITING, \"flags->full_data\":1, \"progress->number_participants\":{\"$gt\":0}}, {status:$VALID})\r\n        changeVotings({status:$VALID, date_started:{\"$lte\":bt}}, {status:$STARTED})\r\n\r\n        changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}}, {status:$FINISHED})\r\n     \r\n        // changeVotings({status:$STARTED, date_ended:{\"$lte\":bt}, \"flags->decision\":1}, {status:$FINISHED})\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectCandidates",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectCandidates {\n    data {\n        votingID int\n        memberID int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"members\").WhereId(kid).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"keys\").WhereId(kid).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4        \n        $voting = DBFind(\"votings\").Where({id:$votingID}).Columns(\"id,optional->number_candidates,voting->type,flags->full_data,status\").Row()\n        if $voting[\"status\"] == $STARTED {\n            warning \"Voting already started. Can not add candidates\"\n        }\n        if $voting[\"status\"] == $FINISHED {\n            warning \"Voting already finished. Can not add candidates\"\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n\n        if $memberID == 0 {\n            $memberID = $key_id\n        }\n\n        if DBFind(\"votings_subject\").Where({voting_id:$votingID, \"subject->member_id\":$memberID}).One(\"id\") {\n            warning \"This candidature for this role has already been added before\"\n        }\n\n        $member = getMemberInfo($memberID)\n        if !$member {\n            warning Sprintf(\"Key not found (%v)\", $memberID)\n        }\n    }\n\n    action {\n        DBInsert(\"votings_subject\", {voting_id:$votingID, subject:$member})\n        var m map\n        m[\"optional->number_candidates\"] = Int($voting[\"optional.number_candidates\"]) + 1\n        DBUpdate(\"votings\", $votingID, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectSettings",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectSettings {\n    data {\n        votingID int\n\n        roleID int\n        vacancies int\n\n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        if $vacancies < 1 {\n            warning \"Number of vacancies can not be less than 1\"\n        }\n\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"optional,voting->type,flags->full_data\").Row()\n\n        if !$voting {\n            warning \"Voting already started. Can not edit document\"\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n        var role map\n        role = DBFind(\"roles\").Where({id:$roleID, deleted:0}).Row()\n        if !role {\n            warning \"Specified role not found\"\n        }\n\n        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role\n        if !(role[\"role_type\"] == 2 || role[\"role_type\"] == 3) {\n            warning \"The chosen role is not elective or has been removed\"\n        }\n    }\n\n    action {\n        var optional map\n        optional = safeJsonToMap($voting[\"optional\"])\n\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = safeJsonToMap($contract_accept_params)\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = safeJsonToMap($contract_reject_params)\n        optional[\"role_id\"] = $roleID\n        optional[\"role_vacancies\"] = $vacancies\n\n        DBUpdate(\"votings\", $votingID, {optional:optional})\n\n        VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectContract {\n    data {\n        votingID int\n\n        contract_accept string\n        contract_accept_params string \"optional\"\n\n        contract_reject string\n        contract_reject_params string \"optional\"\n    }\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,voting->type,flags->full_data\").Row()\n        if !$voting {\n            warning \"Voting already started. Can not edit document\"\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n\n    action {\n        var accept_params, reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var subject map\n        subject[\"contract_accept\"] = $contract_accept\n        subject[\"contract_accept_params\"] = accept_params\n        subject[\"contract_reject\"] = $contract_reject\n        subject[\"contract_reject_params\"] = reject_params\n\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\n        if $subject_id {\n            DBUpdate(\"votings_subject\", Int($subject_id), {subject:subject})\n        } else {\n            DBInsert(\"votings_subject\", {voting_id:$votingID, subject:subject})\n        }\n\n        VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectDocument",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectDocument {\n    data {\n        votingID int\n        text_document string\n\n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\n        if !$voting {\n            warning \"Voting already started. Can not edit document\"\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n\n    action {\n        var subject map\n        subject[\"text\"] = $text_document\n        subject[\"hash\"] = Sha256($text_document)\n\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", {voting_id:$votingID, subject:subject})\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), {subject:subject})\n        }\n        var accept_params reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var optional map\n        optional = safeJsonToMap($voting[\"optional\"])\n\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n\n        DBUpdate(\"votings\", $votingID, {optional:optional})\n\n        VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSubjectFormal",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSubjectFormal {\n    data {\n        votingID int\n\n        description string \"optional\"\n        table_to_written string\n        row_id string\n        column_name string\n        written_value string\n\n        contract_accept string \"optional\"\n        contract_accept_params string \"optional\"\n        contract_reject string \"optional\"\n        contract_reject_params string \"optional\"\n    }\n\n    func safeJsonToMap(m string) map {\n        var res map\n        if Size(m) > 0 { res = JSONToMap(m) }\n        return res\n    }\n\n    conditions {\n        $STARTED = 3\n        $FINISHED = 4\n        $voting = DBFind(\"votings\").Where({id:$votingID, status:[{\"$neq\":$STARTED},{\"$neq\":$FINISHED}]}).Columns(\"id,date_started,flags->full_data,voting->type,optional\").Row()\n        if !$voting {\n            warning \"Voting already started. Can not edit document\"\n        }\n\n        if $voting[\"flags.full_data\"] == 1 && $voting[\"voting.type\"] == 2 {\n            warning \"This vote is a system. Change settings not allowed\"\n        }\n    }\n\n    action {\n        var subject map\n        subject = {description:$description, table:$table_to_written, table_id:$row_id, column:$column_name, column_value:$written_value}\n\n        $subject_id = DBFind(\"votings_subject\").Where({voting_id:$votingID}).One(\"id\")\n        if !$subject_id {\n            DBInsert(\"votings_subject\", {voting_id:$votingID, subject:subject})\n        } else {\n            DBUpdate(\"votings_subject\", Int($subject_id), {subject:subject})\n        }\n\n        var accept_params reject_params map\n        accept_params = safeJsonToMap($contract_accept_params)\n        reject_params = safeJsonToMap($contract_reject_params)\n\n        var optional map\n        optional = safeJsonToMap($voting[\"optional\"])\n        optional[\"contract_accept\"] = $contract_accept\n        optional[\"contract_accept_params\"] = accept_params\n        optional[\"contract_reject\"] = $contract_reject\n        optional[\"contract_reject_params\"] = reject_params\n\n        DBUpdate(\"votings\", $votingID, {optional:optional})\n\n        VotingSubjectCheck(\"votingID\", $votingID)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateRun",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTemplateRun{\n    data{\n        TemplateId int\n        Duration int\n\n        KeyId int \"optional\"\n        TableWritten string \"optional\"\n        RowId string \"optional\"\n        ColumnName string \"optional\"\n        NewValue string \"optional\"\n        TextDocument string \"optional\"\n    }\n    func checkInput(value, name string){\n        if Size(value) == 0 || value == \"NULL\" {\n            warning Sprintf(\"%q not found\", name)\n        }\n    }\n    func emptyOrValue(value string) string{\n        if value == \"NULL\" {\n            value = \"\"\n        }\n        return value\n    }\n\n    conditions{\n        var template map\n        template = DBFind(\"voting_templates\").WhereId($TemplateId).Row()\n        if !template{\n            warning \"Voting template not found\"\n        }\n        if $KeyId != 0{\n            $keyFind = DBFind(\"keys\").WhereId($KeyId).Row()\n            if !$keyFind{\n                warning \"Key id not found\"\n            }\n        }\n        if $Duration <= 0{\n            $Duration = 3\n        }\n\n        var initContract string\n        initContract = template[\"init_contract\"]\n        $voters = template[\"voters\"]\n        $candidates = template[\"candidates\"]\n        $votingName = Sprintf(\"%v [template id:%v]\", template[\"title\"], $TemplateId)\n        $volume = Int(template[\"volume\"])\n        $quorum = Int(template[\"quorum\"])\n        $type_voting = Int(template[\"type_voting\"])\n        $participants = Int(template[\"type_participants\"])\n        $decision = Int(template[\"type_decision\"])\n        $vacancies = Int(template[\"vacancies\"])\n\n        if initContract != \"\" && initContract != \"NULL\"{\n            var initParam map\n            if $decision == 4 && $type_voting == 2 {\n                // voting for new value of sysparam\n                initParam[\"Name\"] = $ColumnName\n                initParam[\"Value\"] = $NewValue\n            }else{\n                initParam[\"KeyId\"] = $KeyId\n            }\n            CallContract(initContract, initParam)\n        }\n\n        $desc = Sprintf(\"template #%v\", $TemplateId)\n        if $type_voting < 1 || $type_voting > 2 {\n            warning \"Invalid type of voting\"\n        }\n        $contractAccept = emptyOrValue(template[\"contract_accept\"])\n        $acceptParams = emptyOrValue(template[\"accept_params\"])\n        $contractReject = emptyOrValue(template[\"contract_reject\"])\n        $rejectParams = emptyOrValue(template[\"reject_params\"])\n\n        if $decision == 1 || $decision == 2 {\n            // role-candidates\n            checkInput($candidates, \"Candidate role\")\n            var candidate map\n            candidate = DBFind(\"roles\").Where({id:$candidates, deleted:0}).Row()\n            if !candidate {\n                warning Sprintf(\"Candidates role (id: %v) not found\", $candidates)\n            }\n            $candidateId = Int(candidate[\"id\"])\n        }\n\n        if $decision == 3 {\n            // document approval\n            checkInput($TextDocument, \"TextDocument\")\n        }\n\n        if $decision == 4 {\n            // formal decision\n            // in the system vote need only a field and a value\n            checkInput($ColumnName, \"ColumnName\")\n            checkInput($NewValue, \"NewValue\")\n            if $type_voting == 2{\n                $desc = Sprintf(\"Parameter: %v, Value: %v\", $ColumnName, $NewValue)\n            }\n\n            if $type_voting == 1{\n                checkInput($TableWritten, \"TableWritten\")\n                checkInput($RowId, \"RowId\")\n                $desc = Sprintf(\"Table: %v, Column: %v, ID: %v, Value: %v\", $TableWritten, $ColumnName, $RowId, $NewValue)\n            }\n            if $RowId == \"\" || $RowId == \"NULL\"{\n                $RowId = 0\n            }\n\n        }\n        // check duplicated\n        if DBFind(\"votings\").Where({\"voting->name\":$votingName, \"flags->decision\":{\"$nin\":[\"1\", \"-1\"]}, deleted:0}).Row(){\n            error \"Same voting already created\"\n        }\n\n\n        if $participants == 3 {\n            // if the type of the participants \"in role\" - check the role\n            var role map\n            role = DBFind(\"roles\").Where({id:$voters, deleted:0}).Row()\n            if !role {\n                warning Sprintf(\"Voters role (id: %v) not found\", $voters)\n            }\n            $roleId = Int(role[\"id\"])\n        }\n    }\n\n    action{\n        var votingId int\n        votingId = VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration)\n\n        if votingId == 0 {\n            warning \"votingId is zero\"\n        }\n        // the default argument for Contract\n        var defaultParams string\n        defaultParams = Sprintf(`{\"VotingTemplateId\":\"%v\",\"KeyId\":\"%v\",\"VotingId\":\"%v\"}`, $TemplateId, $KeyId, votingId)\n\n        if Size($acceptParams) == 0{\n            $acceptParams = defaultParams\n        }\n        if Size($rejectParams) == 0{\n            $rejectParams = defaultParams\n        }\n\n        if $decision == 1 || $decision == 2{\n            // 1. Role candidates with the registration of participants on request\n            // 2. Role candidates with manual registration of the participants\n            VotingSubjectCandidates(\"votingID,memberID\", votingId, $KeyId)\n            VotingSubjectSettings(\"votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)\n        }\n        if $decision == 3 {\n            // Document approval\n            VotingSubjectDocument(\"votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params\", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n\n        if $decision == 4 {\n            // Formal decision\n            VotingSubjectFormal(\"votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)\n\n        }\n\n        if $decision == 5 {\n            // Execution of the contract\n            VotingSubjectContract(\"votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params\",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)\n        }\n        if $participants == 3 {\n            // participants: \"by role\"\n            VotingInvite(\"votingID,var_id\", votingId, $roleId)\n        }\n        if $participants == 1 {\n            // if the participants are \"all\", the invite has already occurred in \"VotingCreate\"\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingSysparamInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingSysparamInit{\r\n    data{\r\n        Name string\r\n        Value string\r\n    }\r\n\r\n    conditions{\r\n        if GetContractByName($Name){\r\n            var params map\r\n            params[\"Value\"] = $Value\r\n            CallContract($Name, params)\r\n        } else {\r\n            warning \"System parameter not found\"\r\n        }\r\n        // InvestorRefresh()\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplateCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTemplateCreate{\n    data{\n        Title string\n        TypeParticipants int\n        TypeVoting int\n        TypeDecision int\n        Volume int\n        Quorum int\n        Subject string\n        Voters string \"optional\" // role of participant\n        Candidates string \"optional\" // role of candidate\n        InitContract string \"optional\" // Execute before the vote\n        Vacancies int \"optional\"\n        ContractAccept string \"optional\"\n        ParamsAccept string \"optional\"\n        ContractReject string \"optional\"\n        ParamsReject string \"optional\"\n    }\n\n    conditions{\n        if $TypeParticipants == 3 {\n            if Size($Voters) == 0 || $Voters == \"NULL\" || $Voters == 0 {\n                warning \"Voters role not found\"\n            }\n        }\n        if Size($Title) <3 {\n            warning \"Please enter title\"\n        }\n        if $Volume <0 || $Volume > 100 {\n            warning \"Wrong volume range\"\n        }\n        if $Quorum <0 || $Quorum > 100 {\n            warning \"Wrong quorum range\"\n        }\n\n        if $TypeDecision == 1 || $TypeDecision == 2 {\n            if $Vacancies < 1 {\n                warning \"Wrong number vacancies\"\n            }\n            if $Candidates == \"NULL\" || $Candidates == 0 || Size($Candidates) == 0 {\n                warning \"Wrong candidate role\"\n            }\n        }\n\n        if Size($InitContract) > 0{\n            if GetContractByName($InitContract) == 0 {\n                warning \"Init Contract not found\"\n            }\n        }\n        if Size($ContractAccept) > 0{\n            if GetContractByName($ContractAccept) == 0 {\n                warning \"Contract for accepted decision not found\"\n            }\n        }\n        if Size($ContractReject) > 0{\n            if GetContractByName($ContractReject) == 0{\n                warning \"Contract for rejected decision not found\"\n            }\n        }\n    }\n\n    action{\n        var m map\n        m[\"title\"] = $Title\n        m[\"subject\"] = $Subject\n        m[\"voters\"] = $Voters\n        m[\"candidates\"] = $Candidates\n        m[\"init_contract\"] = $InitContract\n        m[\"volume\"] = $Volume\n        m[\"quorum\"] = $Quorum\n        m[\"type_voting\"] = $TypeVoting\n        m[\"type_participants\"] = $TypeParticipants\n        m[\"type_decision\"] = $TypeDecision\n        m[\"vacancies\"] = $Vacancies\n        m[\"contract_accept\"] = $ContractAccept\n        m[\"accept_params\"] = $ParamsAccept\n        m[\"contract_reject\"] = $ContractReject\n        m[\"reject_params\"] = $ParamsReject\n        $result = DBInsert(\"voting_templates\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingNodeAdd",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingNodeAdd{\r\n    data{\r\n        TcpAddress string\r\n        ApiAddress string\r\n        KeyId int\r\n        PubKey string\r\n        Duration int\r\n    }\r\n    func warn(name, detail string){\r\n        warning Sprintf(\"%v invalid (%v)\", name, detail)\r\n    }\r\n    func checkApiAddress(addr string){\r\n        var name string\r\n        name = \"API Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if !(HasPrefix(addr, \"http://\") || HasPrefix(addr, \"https://\")) {\r\n            warn(name, \"protocol\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        addr = Replace(addr, \"http://\", \"\")\r\n        addr = Replace(addr, \"https://\", \"\")\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n            addr = parts[0]\r\n        }\r\n    }\r\n    func checkTcpAddress(addr string){\r\n        var name string\r\n        name = \"TCP Address\"\r\n        if Size(addr) == 0 {\r\n            warn(name, \"size\")\r\n        }\r\n        if Contains(addr, \" \") {\r\n            warn(name, \"space\")\r\n        }\r\n        var parts array\r\n        if Contains(addr, \":\") {\r\n            parts = Split(addr, \":\")\r\n            if Len(parts) > 2 {\r\n                warn(name, \":\")\r\n            }\r\n            var port string\r\n            port = parts[1]\r\n            if port <= 0 {\r\n                warn(name, \"port\")\r\n            }\r\n        }\r\n    }\r\n    func checkPub(pub string){\r\n        if PubToID(pub) == 0 {\r\n            warning \"Public key invalid\"\r\n        }\r\n    }\r\n    func checkKeyId(keyid int){\r\n        var existed map\r\n        existed = DBFind(\"keys\").WhereId(keyid).Row()\r\n        if !existed {\r\n            warning \"Key id not found\"\r\n        }\r\n    }\r\n    func getNodesJSON() string{\r\n        var nodes string\r\n        nodes = SysParamString(\"full_nodes\")\r\n        if Size(nodes) < 100 {\r\n            nodes = \"[]\"\r\n        }\r\n        return nodes\r\n    }\r\n    func appendFirstNode(nodes array) array{\r\n        var first string firstNode map\r\n        first = AppParam($appId,\"first_node\")\r\n        if !HasPrefix(first, \"{\") || Size(first) < 100 {\r\n            warning \"Application parameter first_node not valid\"\r\n        }\r\n        firstNode = JSONDecode(first)\r\n        checkTcpAddress(firstNode[\"tcp_address\"])\r\n        checkApiAddress(firstNode[\"api_address\"])\r\n        checkKeyId(Int(firstNode[\"key_id\"]))\r\n        checkPub(firstNode[\"public_key\"])\r\n\r\n        nodes = Append(nodes, firstNode)\r\n        return nodes\r\n    }\r\n    conditions{\r\n        $appId = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\r\n        $templateId = Int(AppParam($appId,\"voting_sysparams_template_id\"))\r\n        if $templateId == 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n        checkKeyId($KeyId)\r\n        checkPub($PubKey)\r\n        checkApiAddress($ApiAddress)\r\n        checkTcpAddress($TcpAddress)\r\n    }\r\n\r\n    action{\r\n        var nodes array node map\r\n        node[\"tcp_address\"] = $TcpAddress\r\n        node[\"api_address\"] = $ApiAddress\r\n        node[\"key_id\"] = Str($KeyId)\r\n        node[\"public_key\"] = $PubKey\r\n        nodes = JSONDecode(getNodesJSON())\r\n        if Len(nodes) == 0 {\r\n            nodes = appendFirstNode(nodes)\r\n        }\r\n        nodes = Append(nodes, node)\r\n        VotingTemplateRun(\"TemplateId,Duration,KeyId,TableWritten,RowId,ColumnName,NewValue,TextDocument\", $templateId, $Duration, 0, \"\", \"\", \"full_nodes\", JSONEncode(nodes), \"\")\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTemplatesInstall",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTemplatesInstall{\n    data{}\n    func applyTemplate(m map){\n        DBInsert(\"voting_templates\", m)\n    }\n    func getAppRoleId(id int, name string) int{\n        var rid int\n        rid = Int(AppParam(id, name))\n        if rid == 0{\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\n        }\n        return rid\n    }\n    conditions{\n        var appId int\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\", deleted:0}).One(\"id\"))\n        if appId == 0{\n            warning \"Application not found\"\n        }\n        $consensusRoleId = getAppRoleId(appId, \"role_apla_consensus_asbl\")\n        $validatorRoleId = getAppRoleId(appId, \"role_validator\")\n\n    }\n\n    action{\n        var template map\n        // common\n        template[\"quorum\"] = 51\n        template[\"volume\"] = 70\n        template[\"accept_params\"] = \"\"\n        template[\"reject_params\"] = \"\"\n        template[\"type\"] = \"law\"\n        template[\"voters\"] = $consensusRoleId\n        template[\"type_participants\"] = 3 // by Role\n\n        // validator\n        template[\"title\"] = \"Voting for Validator\"\n        template[\"init_contract\"] = \"VotingValidatorInit\"\n        template[\"contract_accept\"] = \"VotingValidatorAccept\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 1\n        template[\"candidates\"] = $validatorRoleId\n        template[\"type_decision\"] = 2\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"Validator\"\n        applyTemplate(template)\n\n        // sysparam\n        template[\"title\"] = \"Voting for System param value\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 4\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"System param\"\n        applyTemplate(template)\n\n        // valued ecosystem\n        template[\"title\"] = \"Voting for Valued Ecosystem\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"\"\n        template[\"contract_reject\"] = \"\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 4\n        template[\"type_voting\"] = 1\n        template[\"subject\"] = \"Valued ecosystem\"\n        applyTemplate(template)\n\n        // tokenrefund\n        template[\"title\"] = \"Token Refund\"\n        template[\"init_contract\"] = \"\"\n        template[\"contract_accept\"] = \"TokensRefundAccept\"\n        template[\"contract_reject\"] = \"TokensRefundReject\"\n        template[\"vacancies\"] = 0\n        template[\"candidates\"] = 0\n        template[\"type_decision\"] = 5\n        template[\"type_voting\"] = 2\n        template[\"subject\"] = \"Token refund\"\n        applyTemplate(template)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingTokensRefundCreate",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingTokensRefundCreate{\r\n    data{\r\n        VictimAccount string\r\n        SuspectAccount string\r\n        Amount int\r\n        Note string\r\n    }\r\n    func blockAccounts(victimId, attackerId int){\r\n        if victimId==0 {\r\n            error \"unblockAccounts. invalid victim key\"\r\n        }\r\n        if attackerId==0{\r\n            error \"unblockAccounts. invalid attacker key\"\r\n        }\r\n        if !DBFind(\"keys\").Where({blocked:1, id:victimId}).One(\"id\"){\r\n            DBUpdate(\"keys\", victimId, {blocked:1})\r\n        }\r\n        if !DBFind(\"keys\").Where({blocked:1, id:attackerId}).One(\"id\"){\r\n            DBUpdate(\"keys\", attackerId, {blocked:1})\r\n        }\r\n    }\r\n    func getKeyId(test string) int{\r\n        if Len(Split(test, \"-\")) > 1 {\r\n            // probably it is address\r\n            return AddressToId(test)\r\n        }\r\n        if \"invalid\" != IdToAddress(Int(test)){\r\n            // probably it is key_id\r\n            return Int(test)\r\n        }\r\n        return 0\r\n    }\r\n\r\n    conditions{\r\n        if $Amount <= 0{\r\n            error \"Amount not valid\"\r\n        }\r\n        if Size($Note) == 0{\r\n            error \"Please add description\"\r\n        }\r\n        var victim attacker int\r\n        victim = getKeyId($VictimAccount)\r\n        attacker = getKeyId($SuspectAccount)\r\n        if victim == 0{\r\n            error \"Victim address not valid\"\r\n        }\r\n        if attacker == 0{\r\n            error \"Suspect address not valid\"\r\n        }\r\n        $victimId = victim\r\n        $attackerId = attacker\r\n\r\n        var app_id template_id int\r\n        app_id = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\r\n        template_id = Int(AppParam(app_id,\"voting_tokenrefund_template_id\"))\r\n        if template_id <= 0 {\r\n            warning \"Template id not found\"\r\n        }\r\n\r\n        $template = DBFind(\"voting_templates\").WhereId(template_id).Row()\r\n        $votersRoleId = Int($template[\"voters\"])\r\n        $votingName = $template[\"title\"]\r\n        $typeParticipants = Int($template[\"type_participants\"])\r\n        $typeDecision = Int($template[\"type_decision\"])\r\n        $typeVoting = Int($template[\"type_voting\"])\r\n        $volume = Int($template[\"volume\"])\r\n        $quorum = Int($template[\"quorum\"])\r\n        $contractAccept = $template[\"contract_accept\"]\r\n        $contractReject = $template[\"contract_reject\"]\r\n        var initContract string\r\n        initContract = $template[\"init_contract\"]\r\n        if Size(initContract) > 4 { // greater then \"NULL\"\r\n            var m map\r\n            CallContract(initContract, m)\r\n        }\r\n        $desc = Sprintf(\"%v (victim: %v, attacker: %v, amount: %v)\", $votingName, $victimId, $attackerId, $Amount)\r\n\r\n        if !DBFind(\"roles_participants\").Where({\"role->id\":$votersRoleId, deleted:0}).One(\"id\") {\r\n            warning Sprintf(\"Role (id: %v) does not contain members\", $votersRoleId)\r\n        }\r\n    }\r\n\r\n    action{\r\n        blockAccounts($victimId,$attackerId)\r\n        var votingId int params m map paramsJSON interval_days string\r\n        interval_days = \"3\"\r\n        votingId = VotingCreate(\"voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval\", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)\r\n\r\n        m[\"victim_key_id\"] = $victimId\r\n        m[\"attacker_key_id\"] = $attackerId\r\n        m[\"amount\"] = $Amount\r\n        m[\"note\"] = $Note\r\n        m[\"validator_key_id\"] = $key_id\r\n        m[\"blocked_at\"] = BlockTime()\r\n        m[\"voting_id\"] = votingId\r\n        m[\"status\"] = 1 // 0.Accounts blocked 1.Discussion 2.Vote 3.Closed\r\n        m[\"result\"] = 0 // 0. discussion and voting 1. cancelled 2. the tokens returned\r\n        params[\"Id\"] = DBInsert(\"tokenrefund\", m)\r\n\r\n        paramsJSON = JSONEncode(params)\r\n        VotingSubjectContract(\"votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params\", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)\r\n\r\n        VotingInvite(\"votingID,var_id\", votingId, $votersRoleId)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingDecisionReject",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingDecisionReject {\r\n    data {\r\n        votingID int\r\n    }\r\n    func closeNotification(){\r\n        var role_id_search int\r\n        role_id_search = Int(DBFind(\"notifications\").Where({\"recipient->role_id\":$role_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n        if role_id_search > 0 {\r\n            NotificationsClose(\"notific_id\", role_id_search)\r\n        } else {\r\n            var id int\r\n            id = Int(DBFind(\"notifications\").Where({\"recipient->member_id\":$key_id, page_name:\"voting_view\", \"page_params->voting_id\":$votingID, closed:0}).One(\"id\"))\r\n            if id > 0 {\r\n                NotificationsClose(\"notific_id\", id)\r\n            }\r\n        }\r\n    }\r\n    conditions {\r\n        $WAITING = 1\r\n        $VALID = 2\r\n        $STARTED = 3\r\n        $FINISHED = 4\r\n        $INVALID = 5\r\n        $voting = DBFind(\"votings\").WhereId($votingID).Columns(\"voting->type_participants,voting->role_id,flags->decision,flags->notifics,status\").Row()\r\n        if !$voting {\r\n            warning \"Voting is not found\"\r\n        }\r\n        if $voting[\"voting.type_participants\"] == 3{\r\n            if $voting[\"voting.role_id\"] != $role_id{\r\n                warning \"Incorrect role for voting\"\r\n            }\r\n        }\r\n        if $voting[\"status\"] == $FINISHED {\r\n            warning \"Voting has expired. Voting is now not possible\"\r\n        }\r\n        if $voting[\"status\"] != $STARTED {\r\n            warning \"Voting has not yet begun. Try again later, please\"\r\n        }\r\n        $participant_role_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->role_id\":$role_id,\"member->member_id\":0}).One(\"id\")\r\n      \r\n        $check_type = DBFind(\"votings\").Columns(\"id,voting,voting->type_participants\").WhereId($votingID).Row()\r\n        if (Int($check_type[\"voting.type_participants\"]) < 5){\r\n            $participant_id = DBFind(\"votings_participants\").Where({voting_id:$votingID, \"member->member_id\":$key_id,decision:0}).One(\"id\")\r\n            if !$participant_id {\r\n                warning \"You are not a participant in this voting\"\r\n            }\r\n        }\r\n        \r\n        if $participant_role_id {\r\n            $rid = DBFind(\"votings_participants\").Columns(\"id,voting_id,member->role_id\").Where({voting_id:$votingID, \"member->role_id\":$role_id}).Row()\r\n            if $rid {\r\n                var mem_role int\r\n                mem_role = Int($rid[\"member.role_id\"])\r\n                $participant_id = DBFind(\"roles_participants\").Columns(\"id,role,role->id,member,member->member_id\").Where({\"member->member_id\":$key_id,\"role->id\":mem_role,\"deleted\":0}).One(\"member.member_id\")\r\n                if !$participant_id{\r\n                    warning \"You are not a participant in this voting\"\r\n                } else {\r\n                    var solo_role_vot map\r\n                    $membership_role_name = DBFind(\"members\").WhereId($key_id).Row()\r\n                    solo_role_vot[\"role_id\"] = Int($rid[\"member.role_id\"])\r\n                    solo_role_vot[\"member_id\"] = $key_id\r\n                    solo_role_vot[\"member_name\"] = $membership_role_name[\"member_name\"]\r\n                    solo_role_vot[\"image_id\"] = $membership_role_name[\"image_id\"]\r\n                    var json string\r\n                    json = JSONEncode(solo_role_vot)\r\n                    DBUpdate(\"votings_participants\",Int($rid[\"id\"]),{\"member\":json})\r\n                    $participant_id = Int($rid[\"id\"])\r\n                }\r\n            } else {\r\n                warning \"You are not a participant in this voting\"\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $voting[\"flags.notifics\"] == 1 {\r\n            closeNotification()\r\n        }\r\n        if $voting[\"flags.decision\"] != 1 {\r\n            var bt string\r\n            bt = BlockTime()\r\n\r\n            DBUpdate(\"votings_participants\", Int($participant_id), {decision_date:bt, decision:\"-1\"})\r\n            VotingUpdate(\"votingID\", $votingID)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorAccept",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorAccept{\r\n    data{\r\n        VotingTemplateId string\r\n        KeyId string\r\n        VotingId string\r\n    }\r\n    func getAppRoleId(id int, name string, warn bool) int{\r\n        var rid int\r\n        rid = Int(AppParam(id, name))\r\n        if rid == 0 && warn{\r\n            warning Sprintf(\"Role not setted in application parameter '%v'\", name)\r\n        }\r\n        return rid\r\n    }\r\n    func conditions{\r\n        var prev string\r\n        prev = $stack[0]\r\n        if Len($stack) > 2{\r\n            prev = $stack[Len($stack) - 2]\r\n        }\r\n        if prev != \"@1VotingDecisionCheck\"{\r\n            warning \"This contract allow starts only from @1VotingDecisionCheck\"\r\n        }\r\n\r\n        var appId templateId int params map\r\n        appId = Int(DBFind(\"applications\").Where({name:\"Basic application\"}).Columns(\"name,id\").One(\"id\"))\r\n        templateId = Int(AppParam(appId,\"voting_validators_template_id\"))\r\n        if !DBFind(\"voting_templates\").WhereId(templateId).One(\"id\"){\r\n            warning \"Voting template not found\"\r\n        }\r\n        if $VotingTemplateId != templateId{\r\n            warning \"Incorrect template\"\r\n        }\r\n\r\n        var candidateId oldRoleId roleId int roleName string\r\n        oldRoleId = getAppRoleId(appId, \"role_candidate_for_validators\", false)\r\n        roleId = getAppRoleId(appId, \"role_validator\", true)\r\n\r\n        candidateId = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId}).One(\"candidate_key_id\")\r\n        if !candidateId {\r\n            warning \"Candidate key id not found\"\r\n        }\r\n        $oldRoleRowId = Int(DBFind(\"roles_participants\").Where({deleted:0, \"role->id\":oldRoleId, \"member->member_id\":candidateId}).One(\"id\"))\r\n\r\n        $roleId = Int(DBFind(\"roles\").Where({id:roleId, deleted:0}).One(\"id\"))\r\n        if $roleId == 0 {\r\n            warning \"Validator role not found\"\r\n        }\r\n    }\r\n\r\n    func action{\r\n        if $oldRoleRowId > 0 {\r\n            RolesUnassign(\"row_id\", $oldRoleRowId)\r\n        }\r\n        RolesAssign(\"rid,member_id\", $roleId, Int($KeyId))\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "VotingValidatorInit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "contract VotingValidatorInit{\r\n    data{\r\n        KeyId int\r\n    }\r\n    \r\n    conditions{\r\n        ContractConditions(\"MainCondition\")\r\n        $candidate = DBFind(\"sysparams_candidate\").Where({candidate_key_id:$KeyId, deleted:0}).Row()\r\n        if !$candidate{\r\n            warning \"Candidate not found\"\r\n        }\r\n    }\r\n    action{\r\n        DelegateRefresh()\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}