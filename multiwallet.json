{
    "name": "Multiwallet",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "multiwallet",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(@1keys).WhereId(#key_id#).Columns(\"id,multi\").Vars(k)\nIf(#k_multi#==0){\n    AddToolButton(Title:$@1multiwallet_create$, Icon:icon-wallet, Page:@1multiwallet).Popup(50, $@1multiwallet_create$)\n}",
            "Type": "blocks"
        },
        {
            "Name": "multiwallet_create",
            "Trans": "{\"en\": \"Create multiwallet\", \"ru\": \"Создать мультикошелек\"}",
            "Type": "languages"
        },
        {
            "Name": "multiwallet_group_single",
            "Trans": "{\"en\": \"Any member of the group\", \"ru\": \"Любой участник группы\"}",
            "Type": "languages"
        },
        {
            "Name": "multiwallet_group_voting",
            "Trans": "{\"en\": \"The vote within the group\", \"ru\": \"Голосование внутри группы\"}",
            "Type": "languages"
        },
        {
            "Name": "multiwallet_role_single",
            "Trans": "{\"en\": \"Any member of the role\", \"ru\": \"Любой участник роли\"}",
            "Type": "languages"
        },
        {
            "Name": "multiwallet_role_voting",
            "Trans": "{\"en\": \"The voting members of the role\", \"ru\": \"Голосование участников роли\"}",
            "Type": "languages"
        },
        {
            "Name": "multiwallet_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "$@1multiwallet_group_single$,$@1multiwallet_group_voting$,$@1multiwallet_role_single$,$@1multiwallet_role_voting$",
            "Type": "app_params"
        },
        {
            "Name": "multiwallet",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id\").Where({name:\"Multiwallet\", ecosystem:1}).Vars(application)\nAppParam(App: #application_id#, Name:multiwallet_types, Source:types)\nDBFind(@1keys).WhereId(#key_id#).Columns(\"id,multi\").Vars(key)\n\nSetVar(this_page,@1multiwallet).(back_page,@1profile_edit).(cols,2)\nDBFind(@1buffer_data).Where({member_id:#key_id#, key:multiaccount_units, ecosystem:#ecosystem_id#}).Columns(\"id,value->type,value->units\").Vars(buf)\nDBFind(@1roles,src_roles).Where({ecosystem:#ecosystem_id#}).Columns(\"id,role_name\")\nDiv(content-wrapper){\n    If(#Action#==\"select\"){\n        Form(){\n            ArrayToSource(buf_units, [])\n            If(#buf_value_type#==#Type#){\n                ArrayToSource(buf_units, #buf_value_units#)\n            }\n            If(Or(#Type#==1,#Type#==2)){\n                DBFind(@1keys,units).Where({ecosystem:#ecosystem_id#}).Columns(\"id\")\n            }.ElseIf(Or(#Type#==3,#Type#==4)){\n                DBFind(@1roles,units).Where({ecosystem:#ecosystem_id#}).Columns(\"id,role_name\")\n            }\n            Div(row){\n                ForList(units){\n                    SetVar(checked,false)\n                    ForList(buf_units){\n                        If(#id#==#value#){\n                            SetVar(checked,true)\n                        }\n                    }\n                    Div(col-sm-6 text-nowrap){\n                        Label(Class: form-inline){\n                            Input(Name: Vals, Type: checkbox, Value: #checked#)\n                            Input(Name: Units, Type: hidden, Value: #id#)\n                            If(GetVar(role_name)){\n                                #role_name#\n                            }.Else{\n                                Address(#id#)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(text-left){\n                Button(Body: $@1back$, Class: btn btn-default, Page: #this_page#, PageParams: \"Type=#Type#\")\n                Button(Body: $@1confirm$, Class: btn btn-primary pull-right, Page: #this_page#, Contract: MultiwalletUnits, PageParams: \"Type=#Type#\", Params:\"Action=set,Type=#Type#,Vals=Val(Vals),Units=Val(Units)\")\n            }\n        }\n    }.Else{\n        If(#key_multi#==0){\n            If(GetVar(Type)){\n                SetTitle($@1multiwallet_create$)\n                Div(breadcrumb){\n                    LinkPage(Body: $@1profile$, Page: profile_view)\n                    Span(/,mh)\n                    Span($@1multiwallet_create$,text-muted)\n                }\n                Div(text-right form-group){\n                    Button(Body: $@1assign_group$, Page: #this_page#, Class: btn btn-default, PageParams: \"Type=#Type#,Action=select\").Popup(50, $@1assign_group$)\n                }\n                Div(row){\n                    Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n                        Form(panel panel-primary){\n                            Div(panel-body){\n                                Div(list-group-item){\n                                    TODO: ввод лимитов на доверенность (без срока)\n                                }\n                                Div(list-group-item){\n                                    TODO:\n                                    Создание шаблона голосования или\n                                    выбор из имеющихся шаблонов или\n                                    \"перевод одной подписью\"\n                                }\n                                Div(list-group-item){\n                                    Div(h4){\n                                        Structure of group\n                                    }\n                                    Div(){\n                                        If(#buf_value_type#==#Type#){\n                                            ArrayToSource(buf_units, #buf_value_units#)\n                                            If(Or(#Type#==1,#Type#==2)){\n                                                ForList(buf_units){\n                                                    Span(#value#, mr)\n                                                }\n                                            }.ElseIf(Or(#Type#==3,#Type#==4)){\n                                                ForList(buf_units){\n                                                    ForList(src_roles){\n                                                        If(#id#==#value#){\n                                                            Span(#role_name#, mr)\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }.Else{\n                                            Div(text-center text-muted){\n                                                $not_assigned$\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            Div(panel-footer text-left){\n                                Button(Body: $@1back$, Class: btn btn-default, Page: #this_page#).Popup(50, $@1multi_types$)\n                                Button(Body: $@1convert$, Class: btn btn-primary pull-right, Page: #back_page#, Contract: MultiwalletCreate, Params: \"BufferId=#buf_id#\").Alert(Text: $@1want_profile_convert$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                            }\n                        }\n                    }\n                }\n            }.Else{\n                Form(){\n                    Div(form-group){\n                        Select(Name: Type, Source: types, NameColumn: name, ValueColumn: id)\n                    }\n                    Div(){\n                        Button(Body: $@1back$, Class: btn btn-default, Page: #back_page#)\n                        Button(Body: $@1next$, Class: btn btn-primary pull-right, Page: #this_page#, PageParams: \"Type=Val(Type)\")\n                    }\n                }\n            }\n        }.Else{\n            Div(mt-lg alert alert-warning text-center){\n                $@1attention_already_multi$\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "MultiwalletCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MultiwalletCreate {\n    data {\n        BufferId int\n    }\n    conditions {\n        var buf map\n        buf[\"key\"] = \"multiaccount_units\"\n        buf[\"member_id\"] = $key_id\n        $buf = DBFind(\"@1buffer_data\").WhereId($BufferId).Row()\n        if !$buf {\n            warning \"not assigned group\"\n        }\n    }\n\n    action {\n        // При клике на кнопке Create\n        // в таблице 1_keys в колонку multi записывается\n        // id шаблона голосования\n        // -1, если выбрано \"перевод одной подписью\"\n        // пользователи и роли КМП заносятся в таблицу доверенностей с указанными лимитами\n    }\n}\n",
            "Type": "contracts"
        },
        {
            "Name": "MultiwalletUnits",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract MultiwalletUnits {\n    data {\n        Action string\n        Units array\n        Vals array\n        Type int\n    }\n    conditions {\n        var units array i lenVals int\n        lenVals = Len($Vals)\n        while i < lenVals{\n            if $Vals[i] == \"true\"{\n                units = Append(units, $Units[i])\n            }\n            i = i + 1\n        }\n        $units = units\n    }\n\n    action {\n        var id int m buf map\n        buf[\"key\"] = \"multiaccount_units\"\n        buf[\"member_id\"] = $key_id\n        buf[\"ecosystem\"] = $ecosystem_id\n        if !DBFind(\"@1buffer_data\").Where(buf).Row() {\n            buf[\"value\"] = `{}`\n            buf[\"id\"] = DBInsert(\"@1buffer_data\", buf)\n        }else{\n            buf[\"value\"] = `{}`\n            DBUpdate(\"@1buffer_data\", Int($buf[\"id\"]), buf)\n        }\n        if $Action == \"set\" {\n            m[\"value->type\"] = $Type\n            m[\"value->units\"] = JSONEncode($units)\n            DBUpdate(\"@1buffer_data\", Int($buf[\"id\"]), m)\n        }\n    }\n}\n",
            "Type": "contracts"
        }
    ]
}