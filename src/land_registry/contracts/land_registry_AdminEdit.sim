contract land_registry_AdminEdit{
    data {
        LandId int
        Coords string // {"coords":[{"lat":float,"lng":float},],"area": float,"address": string}
        LandUse int
        BuildingsUseClass int
        // Area int
        // CoordsAddress string
        LandNature int
        LandLocalBody int
    }
    func conditions {
        $landRegistryRecord = DBFind("land_registry").Where({"id": $LandId}).Row()
        if !$landRegistryRecord{
            warning "Land Registry record not found"
        }
    }
    
    func log(field, value string){
        if value != $landRegistryRecord[field] {
            var name old_field string
            name = DBFind("@1members").Where({"id": $key_id, "ecosystem": $ecosystem_id}).One("member_name")
            old_field = $landRegistryRecord[field]
            DBInsert("land_registry_editing", {"editing_attribute": field, "lend_object_id": $LandId, "new_attr_value": value, "old_attr_value": old_field, "person_id": $key_id, "person_name": name, "date": $block_time})
        }
    }
    func action {
        var coords map
        coords = JSONToMap($Coords)
        var coordsAddress, area string
        coordsAddress = coords["address"]
        area = Sprintf("%.0f", coords["area"])

        log("land_use", Str($LandUse))
        log("buildings_use_class", Str($BuildingsUseClass))
        log("map_coords", $Coords)
        // log("address", coordsAddress)
        // log("area", area)
        
        DBUpdate("land_registry", $LandId, {"address": coordsAddress, "area": area, "buildings_use_class": $BuildingsUseClass, "map_coords": $Coords, "land_use": $LandUse, "land_nature": $LandNature, "land_local_body": $LandLocalBody})
    }
}