contract land_registry_Install{
    data{}
    
    func conditions{
        MainCondition()
    }
    
    func action{
        var roleName string
        var m, isAssigned, role map
        var amount int
        var members, fMembers array
        amount = 1000000
        var i int
        
        // fake members
        // fMembers[0] = "0022-5368-9996-5437-2905"
        // fMembers[1] = "0099-6231-3856-5867-2293"
        // fMembers[2] = "1823-8019-6419-0516-5483"
        // fMembers[3] = "0702-8968-3827-9121-2498"
        // DBUpdate("keys", $key_id, "amount", 1000000000000)
        // var keyIdOriginal int
        // keyIdOriginal = $key_id
        // while i<Len(fMembers){
        //     $key_id = keyIdOriginal
        //     @1MoneyTransfer("Recipient,Amount,Comment", fMembers[i], amount, "")
            
        //     $key_id = AddressToId(fMembers[i])
        //     var fName string
        //     fName = Sprintf("fake_member_%v",i)
        //     Profile_Edit("member_name,avatar", fName, "")
            
        //     i=i+1
        // }
        
        members = DBFind("@1members").Where({"ecosystem": $ecosystem_id})
        i=0
        var m_id r_id int m_avatar, m_name string
        while i< Len(members){
            m = members[i]
            m_id = m["id"]
            m_avatar = m["image_id"]
            m_name = m["member_name"]
            isAssigned = DBFind("land_registry_accounts").Where({"member_id": m_id}).Row()
            if isAssigned {
                DBUpdate("land_registry_accounts", Int(isAssigned["id"]), {"member_id": m_id, "member_avatar": m_avatar, "member_name": m_name, "amount_money": amount, "amount": amount, "onhold": 0})
            }else{
                DBInsert("land_registry_accounts", {"member_id": m_id, "member_avatar": m_avatar, "member_name": m_name, "amount_money": amount, "amount": amount})
            }
            i=i+1
        }
        i = 0
        while i < 4{
            if i==3{
                roleName = "land_bank"
            }else{
                roleName = Sprintf("land_depart%v", i+1)
            }
            role = DBFind("@1roles").Where({"role_name": roleName, "role_type": 1, "company_id": 0, "deleted": 0, "ecosystem": $ecosystem_id}).Row()
            if !role {
                // create required roles
                // role_type==1 must be assigned_role
                @1RolesCreate("role_name,role_type", roleName, 1)
                role = DBFind("@1roles").Where({"role_name": roleName, "role_type": 1, "company_id": 0, "deleted": 0, "ecosystem": $ecosystem_id}).Row()
            }
            r_id = Int(role["id"])
            isAssigned = DBFind("@1roles_participants").Where({"id": r_id, "deleted": 0, "ecosystem": $ecosystem_id}).Row()
            if isAssigned{
                var roleCreatorId int
                //$key_id = Int(DBFind("@1roles").Where({"id": r_id, "ecosystem": $ecosystem_id}).One("creator->member_id"))
                @1RolesUnassign("row_id", Int(isAssigned["id"]))
            }
            var j int
            if i < Len(members){
                j = i
            }
            m = members[j]
            m_id = Int(m["id"])
            @1RolesAssign("rid,member_id", r_id, m_id)
            i=i+1
        }
    }
}