contract land_registry_PurchaseAccept{
    data{
        LandId int
        NotificId int "optional"
    }
    conditions{
        $roleId = DBFind("@1roles").Where({"role_name": "land_bank", "deleted": 0, "ecosystem": $ecosystem_id}).One("id")
        if $roleId == nil{
            info "Banker not found"
        }
    }
    action{
        var ownership map
        ownership = DBFind("land_registry_ownership").Where({"lend_object_id": $LandId}).Row()
        var ownershipId, buyerId int
        ownershipId = Int(ownership["id"])
        buyerId = Int(ownership["owner_new_id"])
        
        DBUpdate("land_registry_ownership", ownershipId, {"step": 1})
        
        // notify buyer
        var icon, header, body, page string params map
        icon = "fa-bell"
        header = "$purchase_approved$"
        body = "$waiting_bank$"
        page = "land_registry_view"
		params["land_id"] = $LandId
        
        @1NotificationsSend("sender,member_id,icon_name,text_header,text_body,page_name,params_map", 1, buyerId, icon, header, body, page, params)
        
        // notify bank
        var roleId, closureType int
        header = "$new_land$"
        body = "$need_your_processing$"
        closureType = 2
        page = "land_registry_bank"
        @1NotificationsSend("sender,rid,closure_type,icon_name,text_header,text_body,page_name,params_map", 1, Int($roleId), closureType, icon, header, body, page, params)
        
        // closing notify for owner
        if $NotificId > 0 {
		    @1NotificationsClose("notific_id", $NotificId)
        }
    }
}