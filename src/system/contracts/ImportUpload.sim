contract ImportUpload {
    data {
        Data file
    }

    conditions {
        DeveloperCondition()

        $Data = BytesToString($Data["Body"])
        $limit = 10 // data piece size of import
    }

    action {
        // init buffer_data, cleaning old buffer
        @1BufferManager("Action,Key,Val", "clean", "import", "")
        @1BufferManager("Action,Key,Val", "clean", "import_info", "")

        var input map arrData array
        input = JSONDecode($Data)
        arrData = input["data"]

        var pages_arr blocks_arr menu_arr parameters_arr languages_arr contracts_arr tables_arr array

        // IMPORT INFO
        var i lenArrData int item map
        lenArrData = Len(arrData)
        while i < lenArrData {
            item = arrData[i]

            if item["Type"] == "pages" {
                pages_arr = Append(pages_arr, item["Name"])
            } elif item["Type"] == "blocks" {
                blocks_arr = Append(blocks_arr, item["Name"])
            } elif item["Type"] == "menu" {
                menu_arr = Append(menu_arr, item["Name"])
            } elif item["Type"] == "app_params" {
                parameters_arr = Append(parameters_arr, item["Name"])
            } elif item["Type"] == "languages" {
                languages_arr = Append(languages_arr, item["Name"])
            } elif item["Type"] == "contracts" {
                contracts_arr = Append(contracts_arr, item["Name"])
            } elif item["Type"] == "tables" {
                tables_arr = Append(tables_arr, item["Name"])
            }

            i = i + 1
        }

        var inf map
        inf["app_name"] = input["name"]
        inf["pages"] = Join(pages_arr, ", ")
        inf["pages_count"] = Len(pages_arr)
        inf["blocks"] = Join(blocks_arr, ", ")
        inf["blocks_count"] = Len(blocks_arr)
        inf["menu"] = Join(menu_arr, ", ")
        inf["menu_count"] = Len(menu_arr)
        inf["parameters"] = Join(parameters_arr, ", ")
        inf["parameters_count"] = Len(parameters_arr)
        inf["languages"] = Join(languages_arr, ", ")
        inf["languages_count"] = Len(languages_arr)
        inf["contracts"] = Join(contracts_arr, ", ")
        inf["contracts_count"] = Len(contracts_arr)
        inf["tables"] = Join(tables_arr, ", ")
        inf["tables_count"] = Len(tables_arr)

        if 0 == inf["pages_count"] + inf["blocks_count"] + inf["menu_count"] + inf["parameters_count"] + inf["languages_count"] + inf["contracts_count"] + inf["tables_count"] {
            warning "Invalid or empty import file"
        }

        // IMPORT DATA
        // the contracts is imported in one piece, the rest is cut under the $limit
        var sliced contracts array
        i = 0
        while i < lenArrData {
            var items array l int item map
            while l < $limit && (i + l < lenArrData) {
                item = arrData[i + l]
                if item["Type"] == "contracts" {
                    contracts = Append(contracts, item)
                } else {
                    items = Append(items, item)
                }
                l = l + 1
            }
            var batch map
            batch["Data"] = JSONEncode(items)
            sliced = Append(sliced, batch)
            i = i + $limit
        }
        if Len(contracts) > 0 {
            var batch map
            batch["Data"] = JSONEncode(contracts)
            sliced = Append(sliced, batch)
        }
        input["data"] = sliced

        // storing
        @1BufferManager("Action,Key,Val", "set", "import", JSONEncode(input))
        @1BufferManager("Action,Key,Val", "set", "import_info", JSONEncode(inf))

        var name string
        name = Str(input["name"])
        var cndns string
        cndns = Str(input["conditions"])

        if !DBFind("@1applications").Columns("id").Where({"name": name, "ecosystem": $ecosystem_id}).One("id") {
            DBInsert("@1applications", {"name": name, "conditions": cndns, "ecosystem": $ecosystem_id})
        }
    }
}