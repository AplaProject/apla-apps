DBFind("@1applications").Where({"ecosystem": "#ecosystem_id#", "name": "System"}).Vars(application)
SetVar(role_developer_id, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: role_developer))
SetVar(role_admin_id, AppParam(Ecosystem: #ecosystem_id#, App: #application_id#, Name: role_admin))
DBFind("@1roles_participants").Where({"ecosystem": "#ecosystem_id#", "$and": [{"role->id": {"$in": [#role_developer_id#]}}, {"role->id": "#role_id#"}], "member->account": "#account_id#", "deleted": 0}).Vars(developer_access)
DBFind("@1roles_participants").Where({"ecosystem": "#ecosystem_id#", "$and": [{"role->id": {"$in": [#role_admin_id#]}}, {"role->id": "#role_id#"}], "member->account": "#account_id#", "deleted": 0}).Vars(admin_access)

If(Or(#developer_access_id#>0,#admin_access_id#>0)){
    Div(Class: content-wrapper){
        SetTitle($@1edit_properties$)
        Div(breadcrumb){
            Div(){
                If(#type# == page){
                    LinkPage($@1pages$, @1app_pages)
                    Span(/).Style(margin-right: 10px; margin-left: 10px;)
                    Span($@1edit_page$, text-muted)
                    DBFind("@1pages", src_page).Where({"id": "#edit_property_id#", "ecosystem": "#ecosystem_id#"}).Vars(item)
                    DBFind("@1menu", src_menus).Where({"ecosystem": "#ecosystem_id#"})
                }
                If(#type# == contract){
                    DBFind("@1contracts", src_contract).Columns("id,name,value,wallet_id,token_id,conditions,app_id").Where({"id": "#edit_property_id#", "ecosystem": "#ecosystem_id#"}).Vars(item)
                    LinkPage($@1contracts$, @1app_contracts)
                    Span(/).Style(margin-right: 10px; margin-left: 10px;)
                    Span($@1edit_contract$, text-muted)
                }
                If(#type# == block){
                    LinkPage($@1blocks$, @1app_blocks)
                    Span(/).Style(margin-right: 10px; margin-left: 10px;)
                    Span($@1edit_block$, text-muted)
                    DBFind("@1blocks", src_block).Where({"id": "#edit_property_id#", "ecosystem": "#ecosystem_id#"}).Vars(item)
                }
                If(#type# == menu){
                    LinkPage($@1menu$, @1menus_list)
                    Span(/).Style(margin-right: 10px; margin-left: 10px;)
                    Span($@1edit_menu$, text-muted)
                    DBFind("@1menu", src_menu).Where({"id": "#edit_property_id#", "ecosystem": "#ecosystem_id#"}).Vars(item)
                }
            }
        }
        Form(){
            Div(form-group){
                Label($@1name$)
                Input(Name: Name, Value: #item_name#, Disabled: "true")
            }
            If(#type# == page){
                Div(form-group){
                    Label($@1menu$)
                    Select(Name: Menu, Source: src_menus, NameColumn: name, ValueColumn: name, Value: #item_menu#)
                }
                Div(form-group){
                    Label($@1conditions$)
                    Input(Name: Conditions, Value: #item_conditions#)
                }
                Div(form-group){
                    Label($@1page_validate_count$)
                    Input(Name: ValidateCount, Type: number, Value: #item_validate_count#)
                }
                Div(form-group){
                    Label($@1page_validate_mode$)
                    Input(Name: ValidateMode, Type: number, Value: #item_validate_mode#)
                }
                Div(form-group text-right){
                    Button(Body: $@1save$, Class: btn btn-primary, Page: @1app_pages, Contract: @1EditPage, Params: "Menu=Val(Menu),Conditions=Val(Conditions),Id=#edit_property_id#")
                }
            }
            If(#type# == contract){
                Div(){
                    Div(form-group){
                        Label($@1bind_wallet$)
                        Div(row){
                            Div(col-md-12){
                                If(#item_wallet_id# == 0){
                                    Input(Name: WalletV, Value: 0, Disabled: "true")
                                }.Else{
                                    SetVar(account_key, AddressToId(#account_id#))
                                    If(#item_wallet_id#==#account_key#){
                                        Div(input-group){
                                            SetVar(address_item_wallet_id, Address(#item_wallet_id#))
                                            Input(Name: WalletV, Value: #address_item_wallet_id#, Disabled: "true")
                                            Div(input-group-btn){
                                                Button(Body: $@1unbind$, Class: btn bg-gray-lighter buttons, Contract: @1UnbindWallet, Params: "Id=#edit_property_id#", Page: @1properties_edit, PageParams: "edit_property_id=#edit_property_id#,type=#type#").Alert(Text: $@1want_unbind_contract$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)
                                            }
                                        }
                                    }.Else{
                                        SetVar(address_item_wallet_id, Address(#item_wallet_id#))
                                        Input(Name: WalletV, Value: #address_item_wallet_id#, Disabled: "true")
                                    }
                                }
                            }
                        }
                    }
                    Div(form-group){
                        Div(row){
                            Div(col-md-12){
                                Span(Body: "$@1contract_binding_another_user_desc$", Class: m0 text-muted)
                                Div(input-group){
                                    Input(Name: Wallet, Placeholder: "xxxx-xxxx-xxxx-xxxx-xxxx")
                                    Div(input-group-btn){
                                        Button(Body: $@1bind$, Class: btn bg-gray-lighter buttons, Contract: @1BindWallet, Params: "Id=#edit_property_id#,WalletId=Val(Wallet)", Page: @1properties_edit, PageParams: "edit_property_id=#edit_property_id#,type=#type#").Alert(Text: $@1want_bind_contract$, ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)
                                    }
                                }
                            }
                        }
                    }
                    Div(form-group){
                        Label($@1conditions$)
                        Input(Name: Conditions, Value: #item_conditions#)
                    }
                    Div(form-group text-right){
                        Button(Body: $@1save$, Class: btn btn-primary, Page: @1app_contracts, Contract: @1EditContract, Params: "Conditions=Val(Conditions),WalletId=Val(Wallet),Id=#edit_property_id#")
                    }
                }.Style(
                    .buttons {
                        border: 1px solid #dde6e9;
                    }
                )
            }
            If(#type# == block){
                Div(form-group){
                    Label($@1conditions$)
                    Input(Name: Conditions, Value: #item_conditions#)
                }
                Div(form-group text-right){
                    Button(Body: $@1save$, Class: btn btn-primary, Page: @1app_blocks, Contract: @1EditBlock, Params: "Conditions=Val(Conditions),Id=#edit_property_id#")
                }
            }
            If(#type# == menu){
                Div(form-group){
                    Label($@1menu_title$)
                    Input(Name: Title, Value: #item_title#)
                }
                Div(form-group){
                    Label($@1conditions$)
                    Input(Name: Conditions, Value: #item_conditions#)
                }
                Div(form-group text-right){
                    Button(Body: $@1save$, Class: btn btn-primary, Page: @1menus_list, Contract: @1EditMenu, Params: "Conditions=Val(Conditions),Id=#edit_property_id#,NameTitle=Val(Title)")
                }
            }
        }
    }
}.Else{
    SetTitle($@1edit_properties$)
    Div(breadcrumb){
        Span(Class: text-muted, Body: $@1role_change_no_view_permission$)
    }
}