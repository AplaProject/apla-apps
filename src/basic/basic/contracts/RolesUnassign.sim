contract RolesUnassign {
    data {
        row_id int
    }

    conditions {
        // check record
        var assigned role map
        assigned = DBFind("roles_participants").Columns("id,role->id").Where("id=$", $row_id).Row()
        if !assigned {
            warning "Participant not found"
        }

        role = DBFind("roles").Columns("id,creator->member_id,role_name").Where("id=?", assigned["role.id"]).Row()
        if !role {
            warning "Role not found in the roles registry"
        }

        var specialRules map prev_contract string stack array
        stack = JSONDecode(JSONEncode($stack))
        prev_contract = stack[0]
        if Len(stack)>2{
            prev_contract = stack[Len(stack)-2]
        }
        specialRules["@1VotingValidatorAccept"] = "Candidate for validators"
        specialRules["@1DelegateRefresh"] = "Delegate"
        specialRules["@1CandidateValidatorRequest"] = "Candidate for validators"
        specialRules["@1InvestorRefresh"] = "Investor with voting rights"
        specialRules["@1VotingTokensRefundCreate"] = "Investor with voting rights"
        specialRules["@1sysparams_ValidatorResign"] = "Validator"

        if specialRules[prev_contract] != role["role_name"] {
            RolesAccessCheck("rid", Int(role["id"]))
        }
    }

    action {
        // delete the member
        DBUpdate("roles_participants", $row_id, "deleted,timestamp date_deleted", 1, $block_time)
    }
}