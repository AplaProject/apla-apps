DBFind(@1notifications,threads).Where({ecosystem:#ecosystem_id#, "page_params->type":"message",{"$or": [{"sender->member_id":#key_id#}, {"recipient->member_id":#key_id#}]}}).Order({"id":"-1"}).Limit(250).Count(threads_count).Columns("id,sender->member_id,sender->member_name,sender->image_id,recipient->member_id,recipient->member_name,notification->body,notification->header,page_params->thread,date_created,closed")

Div(content-wrapper){
    Div(row){
        Div(col-lg-6 col-lg-offset-3 col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1){
            Div(list-group-item text-center p0){
                Span(Class: h4 text-bold vc, Body: LangRes(@1message_active_threads))
                Button(Class: btn-xs btn-link plus-button p0 b0, Page: @1message_create){
                    Span(Class: fa fa-2x icon-plus vc)
                }.Popup(50, $@1message_create$)
            }.Style(
                .plus-button {
                    position: absolute;
                    right: 10px;
                }
            )
            If(#threads_count#>0){
                ForList(threads){
                    If(#page_params.thread#>0){
                        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, "page_params->thread": #page_params.thread#}).Order({"id":"-1"}).Limit(1).Columns("id").Vars(last)
                    }.Else{
                        DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, "page_params->thread": #id#}).Count(thread_depth)
                    }
                    If(Or(#id#==#last_id#,#thread_depth#==0)){
                        If(And(#closed#==0,Or(#sender.member_id#!=#key_id#,#recipient.member_id#==#key_id#))){
                            SetVar(status, "unread")
                        }.Else{
                            SetVar(status, "read")
                        }
                        Div(list-group-item col-sm-12 thread-block #status#){
                            Div(avatar-block text-center){
                                DBFind(@1notifications).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns("sender->member_id,recipient->member_id,sender->member_name,recipient->member_name,sender->image_id,recipient->image_id").Vars(init_message)
                                If(#init_message_sender_member_id#!=#key_id#){
                                    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#init_message_sender_member_id#}).Vars(talker)
                                    If(GetVar(talker_id)){
                                        SetVar(talker_name,#talker_member_name#)
                                        SetVar(talker_picture,#talker_image_id#)
                                    }.Else{
                                        SetVar(talker_id,#init_message_sender_member_id#)
                                        SetVar(talker_name,#init_message_sender_member_name#)
                                        SetVar(talker_picture,#init_message_sender_image_id#)
                                    }
                                }.Else{
                                    DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#init_message_recipient_member_id#}).Vars(talker)
                                    If(GetVar(talker_id)){
                                        SetVar(talker_name,#talker_member_name#)
                                        SetVar(talker_picture,#talker_image_id#)
                                    }.Else{
                                        SetVar(talker_id,#init_message_recipient_member_id#)
                                        SetVar(talker_name,#init_message_recipient_member_name#)
                                        SetVar(talker_picture,#init_message_recipient_image_id#)
                                    }
                                }
                                LinkPage(Page: @1profile_view, PageParams: "v_key_id=#talker_id#"){
                                    If(#talker_picture#>0){
                                        Image(Src: Binary().ById(#talker_picture#), Class: img-circle avatar)
                                    }.Else{
                                        Span(Class: fa icon-user fa-3x)
                                    }
                                    Div(preview m0 h5){#talker_name#}
                                }
                            }
                            Div(message-block){
                                LinkPage(Page: @1message_view, PageParams: "notific_id=#id#"){
                                    If(#notification.header#==""){
                                        Div(Class: preview h4 m0, Body: LangRes(@1message_subject_empty))
                                    }.Else{
                                        Div(Class: preview h4 m0, Body: #notification.header#)
                                    }
                                    If(#sender.member_id#==#key_id#){
                                        Div(Class: preview text-muted, Body: $@1you$: #notification.body#)
                                    }.Else{
                                        Div(Class: preview text-muted, Body: #notification.body#)
                                    }
                                }
                            }
                            Div(datetime-block text-muted){
                                If(GetVar(status)=="unread"){
                                    Span(Class: badge mr, Body: LangRes(@1unread))
                                }
                                Span(Class: h6, Body: DateTime(#date_created#, HH:MI DD.MM.YYYY))
                            }
                        }
                    }
                }
            }.Else{
                Div(list-group-item text-center text-muted){
                    $@1messages_empty$
                }
            }
        }
    }.Style(
        .thread-block {height: 80px;}
        .avatar-block {
            position: absolute;
            width: 70px;
        }
        .message-block {margin-left: 85px;}
        .datetime-block {
            position: absolute;
            bottom: 5px;
            right: 10px;
        }
        .preview {
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }
        .avatar {
            max-width: 42px;
            max-height: 42px;
            border: 1px solid #bbb;
        }
        .badge {margin-top: -2px;}
        .unread {background-color: #f7fafe;}
        .vc {line-height: 44px;}
    )
}