contract VotingValidatorAccept{
    data{
        VotingTemplateId string
        KeyId string
        VotingId string
    }
    func conditions{
        var prev string stack array
        stack = JSONDecode(JSONEncode($stack))
        prev = stack[0]
        if Len(stack)>2{
            prev = stack[Len(stack)-2]
        }
        if prev != "@1VotingDecisionCheck"{
            warning "This contract allow starts only from @1VotingDecisionCheck"
        }

        var app_id templateId int params map
        app_id = Int(DBFind("applications").Columns("name,id").Where("name='Basic application'").One("id"))
        templateId = Int(AppParam(app_id,"voting_validators_template_id"))
        if !DBFind("voting_templates").Where("id=?", templateId).One("id"){
            warning "Voting template not found"
        }
        if $VotingTemplateId != templateId{
            warning "Incorrect template"
        }
        
        var candidateId oldRoleId roleId int roleName string
        oldRoleId = 4 // must be "Candidate for validators"
        roleId = 5 
        roleName = "Validator"
        
        candidateId = DBFind("sysparams_candidate").Where("candidate_key_id=?", $KeyId).One("candidate_key_id")
        if !candidateId {
            warning "Candidate key id not found"
        }
        $rowId = Int(DBFind("roles_participants").Where("deleted=0 and role->id=? and member->member_id=?", oldRoleId, candidateId).One("id"))
        
        $roleId = Int(DBFind("roles").Where("id=? and role_name=? and deleted=0", roleId, roleName).One("id"))
        if $roleId == 0 {
            warning "Validator role not found"
        }
    }
    
    func action{
        if $rowId > 0 {
            RolesUnassign("row_id", $rowId)
        }
        RolesAssign("rid,member_id", $roleId, Int($KeyId))
    }
}