contract GroupsAssign {
    data {
        gr_id int
        Address string
    }

    conditions {
        $key_address = IdToAddress($key_id)
        $Address = IdToAddress(AddressToId($Address))
        $group = DBFind("@1groups").Where({"id": $gr_id}).Columns("id,deleted,group_type,group_name,image_id,creator->address").Row()
        if !$group {
            warning LangRes("@1group_not_found", "en")
        }
        if !DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "address": $Address}).Row() {
            warning LangRes("@1key_not_found", "en")
        }
        if Int($group["deleted"]) == 1 {
            warning LangRes("@1group_deleted_request_impossible", "en")
        }
        if Int($group["group_type"]) != 1 {
            @1GroupsAccessCheck("gr_id", $gr_id)
        }
    }

    action {
        if DBFind("@1groups_participants").Where({"ecosystem": $ecosystem_id, "groups_info->id": $gr_id, "member->address": $Address, "deleted": 0}).One("id") {
            // do not re-assign and do not warning because this contract may be called for other
            return
        }

        var group member appointer map
        group["id"] = $group["id"]
        group["type"] = $group["group_type"]
        group["name"] = $group["group_name"]
        group["image_id"] = $group["image_id"]
        member["address"] = $Address
        appointer["address"] = $key_address

        var m map
        m["groups_info"] = group
        m["member"] = member
        m["appointed"] = appointer
        m["date_created"] = $block_time
        m["ecosystem"] = $ecosystem_id
        DBInsert("@1groups_participants", m)
    }
}