contract GroupsAssignList {
    data {
        Keys string
        GroupId int
    }

    func addPub(pub_key string) {
        if HasPrefix(pub_key, "04") {
            pub_key = Substr(pub_key, 2, Size(pub_key) - 2)
        }
        if Size(pub_key) < 128 {
            warning LangRes("@1key_too_short", "en")
        }
        if Size(pub_key) > 128 {
            warning LangRes("@1key_too_long", "en")
        }

        var account_key int account string
        account_key = PubToID(pub_key)
        if account_key == 0 {
            warning LangRes("@1public_key_invalid", "en")
        }
        account = IdToAddress(account_key)
        $check_user = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": account, "deleted": 0})
        if !$check_user {
            warning Sprintf("%v: " + "key not found", pub_key)
        }

        @1GroupsAssign("GroupId,MemberAccount", $GroupId, account)
    }

    conditions {
        if $Keys == "" {
            warning LangRes("@1public_key_empty", "en")
        }
        $Keys = Replace($Keys, " ", "")
        $Keys = Replace($Keys, "\n", "")
        $Keys = Replace($Keys, "\r", "")
    }

    action {
        if Contains($Keys, ",") {
            var pub_array array i int
            pub_array = Split($Keys, ",")
            while i < Len(pub_array) {
                var pub_key string
                pub_key = Str(pub_array[i])
                addPub(pub_key)
                i = i + 1
            }
        } else {
            addPub($Keys)
        }
    }
}