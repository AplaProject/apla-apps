contract VotingSubjectSettings {
    data {
        VotingId int
        RoleId int
        Vacancies int

        OptContractAcceptName string "optional"
        OptContractAcceptParams string "optional"
        OptContractRejectName string "optional"
        OptContractRejectParams string "optional"
    }

    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }

    conditions {
        if $Vacancies < 1 {
            warning LangRes("@1vacancies_number_less_one", "en")
        }

        $STARTED = 3
        $FINISHED = 4
        $voting = DBFind("@1votings").Where({"ecosystem": $ecosystem_id, "id": $VotingId, "status":[{"$neq": $STARTED},{"$neq": $FINISHED}]}).Columns("optional,voting->type,flags->full_data,creator->account").Row()

        if !$voting {
            warning LangRes("@1voting_started_can_not_edit", "en")
        }
        if $voting["creator.account"] != $account_id {
            warning LangRes("@1access_denied", "en")
        }
        if $voting["flags.full_data"] == 1 && $voting["voting.type"] == 2 {
            warning LangRes("@1system_voting_can_not_edit", "en")
        }
        var role map
        role = DBFind("@1roles").Where({"ecosystem": $ecosystem_id, "id": $RoleId, "deleted": 0}).Row()
        if !role {
            warning LangRes("@1specified_role_not_found", "en")
        }
        // roles_types: 1. assigned_role, 2. elective_role, 3. system_role, 4. company_role
        if !(role["role_type"] == 2 || role["role_type"] == 3) {
            warning LangRes("@1role_not_elective_or_removed", "en")
        }
    }

    action {
        var optional map
        optional = safeJsonToMap($voting["optional"])

        optional["contract_accept"] = $OptContractAcceptName
        optional["contract_accept_params"] = safeJsonToMap($OptContractAcceptParams)
        optional["contract_reject"] = $OptContractRejectName
        optional["contract_reject_params"] = safeJsonToMap($OptContractRejectParams)
        optional["role_id"] = $RoleId
        optional["role_vacancies"] = $Vacancies

        DBUpdate("@1votings", $VotingId, {optional:optional})

        $subject_map = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId}).Row()
        if $subject_map {
            @1VotingSubjectCheck("VotingId", $VotingId)
        }
    }
}