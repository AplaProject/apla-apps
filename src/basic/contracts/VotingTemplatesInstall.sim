contract VotingTemplatesInstall {
    data {
        SetDefault string "optional"
    }

    func applyTemplate(m map, param string) {
        var templateId paramId int
        templateId = DBInsert("@1voting_templates", m)

        if $SetDefault == "yes" {
            paramId = Int(DBFind("@1app_params").Where({"app_id": $app_id, "name": param, "ecosystem": $ecosystem_id}).One("id"))
            if paramId > 0 {
                @1EditAppParam("Id,Value", paramId, templateId)
            }
        }
    }

    func getRoleId(name string) int {
        var rid int
        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))
        if rid == 0 {
            warning Sprintf(LangRes("@role_not_set_application_parameter", "en"), name)
        }
        return rid
    }

    func installSystem() {
        var template map

        // Sysparam
        template["voting->name"] = "Voting for Platform Parameter"
        template["voting->type"] = 2
        template["voting->volume"] = 70
        template["voting->quorum"] = 51
        template["voting->rating"] = 0
        template["voting->count_type_voters"] = 0
        template["voting->type_decision"] = 4
        template["voting->type_participants"] = 3
        template["subject->candidates"] = 0
        template["subject->vacancies"] = 0
        template["subject->voters"] = $consensusRoleId
        template["subject->contract_accept"] = "@1UpdateSysParam"
        template["subject->contract_reject"] = ""
        template["optional->contract_accept"] = ""
        template["optional->contract_reject"] = ""
        template["optional->init_contract"] = ""
        template["optional->contract_accept_params"] = ""
        template["optional->contract_reject_params"] = ""
        template["optional->init_contract_params"] = ""
        template["ecosystem"] = 1
        applyTemplate(template, "voting_template_platformparams")

        // Validator
        template["voting->name"] = "Voting for Validator"
        template["voting->type"] = 2
        template["voting->volume"] = 70
        template["voting->quorum"] = 51
        template["voting->rating"] = 0
        template["voting->count_type_voters"] = 0
        template["voting->type_decision"] = 4
        template["voting->type_participants"] = 3
        template["subject->candidates"] = 0
        template["subject->vacancies"] = 0
        template["subject->voters"] = $consensusRoleId
        template["subject->contract_accept"] = "@1UpdateSysParam"
        template["subject->contract_reject"] = ""
        template["optional->contract_accept"] = "VotingValidatorAccept"
        template["optional->contract_reject"] = ""
        template["optional->init_contract"] = ""
        template["optional->contract_accept_params"] = ""
        template["optional->contract_reject_params"] = ""
        template["optional->init_contract_params"] = ""
        template["ecosystem"] = 1
        applyTemplate(template, "voting_template_validators")

        // Valued ecosystem
        template["voting->name"] = "Voting for Valued Ecosystem"
        template["voting->type"] = 2
        template["voting->volume"] = 70
        template["voting->quorum"] = 51
        template["voting->rating"] = 0
        template["voting->count_type_voters"] = 0
        template["voting->type_decision"] = 4
        template["voting->type_participants"] = 3
        template["subject->candidates"] = 0
        template["subject->vacancies"] = 0
        template["subject->voters"] = $consensusRoleId
        template["subject->contract_accept"] = "VotingVesAccept"
        template["subject->contract_reject"] = ""
        template["optional->contract_accept"] = ""
        template["optional->contract_reject"] = ""
        template["optional->init_contract"] = ""
        template["optional->contract_accept_params"] = ""
        template["optional->contract_reject_params"] = ""
        template["optional->init_contract_params"] = ""
        template["ecosystem"] = 1
        applyTemplate(template, "voting_template_ves")

        // Token refund
        template["voting->name"] = "Voting for Token Refund"
        template["voting->type"] = 2
        template["voting->volume"] = 70
        template["voting->quorum"] = 51
        template["voting->rating"] = 0
        template["voting->count_type_voters"] = 0
        template["voting->type_decision"] = 4
        template["voting->type_participants"] = 3
        template["subject->candidates"] = 0
        template["subject->vacancies"] = 0
        template["subject->voters"] = $consensusRoleId
        template["subject->contract_accept"] = "TokensRefundAccept"
        template["subject->contract_reject"] = "TokensRefundReject"
        template["optional->contract_accept"] = ""
        template["optional->contract_reject"] = ""
        template["optional->init_contract"] = ""
        template["optional->contract_accept_params"] = ""
        template["optional->contract_reject_params"] = ""
        template["optional->init_contract_params"] = ""
        template["ecosystem"] = 1
        applyTemplate(template, "voting_template_tokenrefund")

        // Change parameter of the ecosystem
        template["voting->name"] = "Voting for Ecosystem Parameter"
        template["voting->type"] = 2
        template["voting->volume"] = 70
        template["voting->quorum"] = 75
        template["voting->rating"] = 0
        template["voting->count_type_voters"] = 0
        template["voting->type_decision"] = 4
        template["voting->type_participants"] = 3
        template["subject->candidates"] = 0
        template["subject->vacancies"] = 0
        template["subject->voters"] = $consensusRoleId
        template["subject->contract_accept"] = "@1EditParameter"
        template["subject->contract_reject"] = ""
        template["optional->contract_accept"] = ""
        template["optional->contract_reject"] = ""
        template["optional->init_contract"] = ""
        template["optional->contract_accept_params"] = ""
        template["optional->contract_reject_params"] = ""
        template["optional->init_contract_params"] = ""
        template["ecosystem"] = 1
        applyTemplate(template, "voting_template_ecosysparams")
    }

    func installCustom() {
        var template map

        // A decision by a simple majority of votes
        template["voting->name"] = "Voting for Decision (simple majority of votes)"
        template["voting->type"] = 1
        template["voting->volume"] = 70
        template["voting->quorum"] = 51
        template["voting->rating"] = 0
        template["voting->count_type_voters"] = 0
        template["voting->type_decision"] = 3
        template["voting->type_participants"] = 1
        template["subject->candidates"] = 0
        template["subject->vacancies"] = 0
        template["subject->voters"] = 0
        template["subject->contract_accept"] = ""
        template["subject->contract_reject"] = ""
        template["optional->contract_accept"] = ""
        template["optional->contract_reject"] = ""
        template["optional->init_contract"] = ""
        template["optional->contract_accept_params"] = ""
        template["optional->contract_reject_params"] = ""
        template["optional->init_contract_params"] = ""
        template["ecosystem"] = $ecosystem_id
        applyTemplate(template, "voting_template_decision")
    }

    conditions {
        $app_id = Int(DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Basic"}).One("id"))
        $system_app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "System"}).One("id")
        $consensusRoleId = getRoleId("role_consensus")
        $validatorRoleId = getRoleId("role_validator")
    }

    action {
        var arr_templates array count_templates int
        arr_templates = DBFind("@1voting_templates").Where({"ecosystem": $ecosystem_id})
        count_templates = Len(arr_templates)

        if count_templates == 0 {
            if $ecosystem_id == 1 {
                installSystem()
            }
            installCustom()      
        }
    }
}