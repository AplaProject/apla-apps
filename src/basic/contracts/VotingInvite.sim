contract VotingInvite {
    data {
        VotingId int
        VarId string //0, account, role_id, group_id
    }

    func addVotingParticipant(votingId int, k_id string, r_id string) {
        var m member role map

        if k_id && k_id != "0" {
            member["account"] = k_id
            member["member_name"] = k_id
        } else {
            member["account"] = 0
        }

        if r_id && r_id != "0" {
            member["role_id"] = r_id
        }

        m["member"] = member
        m["voting_id"] = votingId
        m["ecosystem"] = $ecosystem_id
        m["rating"] = 1
        DBInsert("@1votings_participants", m)
    }

    conditions {
        $INVALID = 1
        $WAITING = 2
        $STARTED = 3
        $FINISHED = 4

        $voting = DBFind("@1votings").Where({"ecosystem": $ecosystem_id, "id": $VotingId, "status": [{"$neq": $STARTED},{"$neq": $FINISHED}]}).Columns("progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended,creator->account").Row()
        if !$voting {
            warning LangRes("@1voting_expired_can_not_add_participants", "en")
        }
        if $voting["creator.account"] != $account_id {
            warning LangRes("@1access_denied", "en")
        }

        $type_participants = $voting["voting.type_participants"]
        $type_voting = $voting["voting.type"]
        $number_participants = Int($voting["progress.number_participants"])

        if $number_participants > 1 && $type_voting == 2 {
            warning LangRes("@1system_voting_can_not_add_participants", "en")
        }
        var isAdded string
        if $type_participants == 2 {
            if !DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": $VarId, "deleted": 0}).Row(){
                warning LangRes("@1key_not_found", "en")
            }
            isAdded = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId, "member->account": $VarId}).One("id")
            if isAdded {
                warning LangRes("@1member_added_before", "en")
            }
        }
        if $type_participants == 3 {
            isAdded = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId}).One("id")
            if isAdded {
                warning LangRes("@1voting_one_role_allowed", "en")
            }
            if Len(DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": $VarId, "deleted": 0})) == 0 {
                warning LangRes("@1roles_participants_not_found", "en")
            }
        }
        if $type_participants == 4 || $type_participants == 5 {
            isAdded = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId, "member->role_id": $VarId}).One("id")
            if isAdded {
                if ($type_participants == 4){
                    warning LangRes("@1role_members_added_before", "en")
                }
                if ($type_participants == 5){
                    warning LangRes("@1role_added_before", "en")
                }
            }
            if Len(DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": $VarId, "deleted": 0})) == 0 {
                warning LangRes("@1roles_participants_not_found", "en")
            }
        }
        if $type_participants == 6 {
            isAdded = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId}).One("id")
            if isAdded {
                warning LangRes("@1voting_one_group_allowed", "en")
            }
            if Len(DBFind("@1groups_participants").Where({"ecosystem": $ecosystem_id, "groups_info->id": $VarId, "deleted": 0})) == 0 {
                warning LangRes("@1groups_participants_not_found", "en")
            }
        }
    }

    action {
        var i int
        if $type_participants == 1 { // everybody
            var keys array
            keys = DBFind("@1keys").Where({ecosystem: $ecosystem_id, "account": {"$neq": $guest_key}, "deleted": 0})
            while i < Len(keys) {
                var key map
                key = keys[i]
                addVotingParticipant($VotingId, key["account"], "0")
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }
        if $type_participants == 2 { // manual
            var key map
            key = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": $VarId, "deleted": 0}).Row()
            addVotingParticipant($VotingId, key["account"], "0")
            $number_participants = $number_participants + 1
        }
        if $type_participants == 3 { // one role
            var roles array
            roles = DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": $VarId, "deleted": 0}).Columns("member->account").Order("id")
            while i < Len(roles) {
                var role m map
                role = roles[i]
                addVotingParticipant($VotingId, role["member.account"], "0")
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }
        if $type_participants == 4 { // all participants in the selected roles vote
            var roles array
            roles = DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": $VarId, "deleted": 0}).Columns("member->account").Order("id")
            while i < Len(roles) {
                var role m map
                role = roles[i]
                addVotingParticipant($VotingId, role["member.account"], $VarId)
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }
        if $type_participants == 5 { // one participant of the selected roles votes
            var rl map
            rl = DBFind("@1roles").Where({"ecosystem": $ecosystem_id, "id": $VarId}).Row()
            addVotingParticipant($VotingId, "0", rl["id"])
            $number_participants = $number_participants + 1
        }
        if $type_participants == 6 { // one group
            var groups array
            groups = DBFind("@1groups_participants").Where({"ecosystem": $ecosystem_id, "groups_info->id": $VarId, "deleted": 0}).Columns("member->account").Order("id")
            while i < Len(groups) {
                var group m map
                group = groups[i]
                addVotingParticipant($VotingId, group["member.account"], "0")
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }

        var v map
        if $type_participants == 3 {
            v["voting->role_id"] = $VarId
        }
        v["progress->number_participants"] = $number_participants

        DBUpdate("@1votings", $VotingId, v)
        @1VotingStatusUpdate()
    }
}