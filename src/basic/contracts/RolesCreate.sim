contract RolesCreate {
    data {
        role_name string
        role_type int
    }
    
    func getMemberInfo(kid int) map {
        var res member map
        member = DBFind("@1members").Where({ecosystem:$ecosystem_id, id:kid}).Row()
        if member {
            res["member_id"] = member["id"]
            res["member_name"] = member["member_name"]
            res["image_id"] = member["image_id"]
        }else{
            member = DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:kid}).Row()
            if member {
                res["member_id"] = member["id"]
                res["member_name"] = IdToAddress(Int(member["id"]))
                res["image_id"] = 0
            }
        }
        return res
    }

    conditions {
        // system role
        if $role_type == 3 {
            warning LangRes("@1system_role_can_not_create", "en")
        }

        // check role_creates_roles
        $role_creates_roles = Int(EcosysParam("role_creates_roles"))
        if $role_creates_roles != 0 {
            if !RoleAccess($role_creates_roles) {
                warning LangRes("@1access_denied", "en")
            }
        }
        if ($role_name == DBFind("@1roles").Where({"ecosystem":$ecosystem_id, "role_name":$role_name}).One("role_name")) {
            warning LangRes("@1role_exists", "en")
        }
    }

    action {
        var roles_access_arr array, buffer map
        buffer = DBFind("@1buffer_data").Where({ecosystem:$ecosystem_id, "member_id": $key_id, "key": "roles_access"}).Row()
        if buffer {
            roles_access_arr = JSONDecode(buffer["value"])
            DBUpdate("@1buffer_data", Int(buffer["id"]), {"value": "[]"})
        }
        roles_access_arr = Append(roles_access_arr, 1)

        var m map
        m["creator"] = getMemberInfo($key_id)
        m["role_name"] = $role_name
        m["role_type"] = $role_type
        m["date_created"] = BlockTime()
        m["roles_access"] = JSONEncode(roles_access_arr)
        m["ecosystem"] = $ecosystem_id
        $result = DBInsert("@1roles", m)
    }
}