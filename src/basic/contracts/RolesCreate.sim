contract RolesCreate {
    data {
        role_name string
        role_type int
    }

    conditions {
        $key_address = IdToAddress($key_id)
        // system role
        if $role_type == 3 {
            warning LangRes("@1system_role_can_not_create", "en")
        }

         // check role_creates_roles
        $check_access = EcosysParam("role_creates_roles")
        if $check_access && Str($check_access) != "0" {
            var rids array
            rids = JSONDecode("[" + $check_access + "]")
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": {"$in": rids}, "member->address": $key_address, "deleted": 0}).Row() {
                warning LangRes("@1access_denied", "en")
            }
        } else {
            var admin_id int
            admin_id = EcosysParam("role_admin")
            var rids array
            rids = JSONDecode("[" + admin_id + "]")
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": {"$in": rids}, "member->address": $key_address, "deleted": 0}).Row() {
                warning LangRes("@1access_denied", "en")
            }
        }
        if $role_name == DBFind("@1roles").Where({"ecosystem": $ecosystem_id, "role_name": $role_name}).One("role_name") {
            warning LangRes("@1role_exists", "en")
        }
        if Size($role_name) < 3 || Size($role_name) > 30 {
            warning LangRes("@1name", "en") + " " + LangRes("@1validate_role_name", "en")
        }
    }

    action {
        var roles_access_arr array, buffer map
        buffer = DBFind("@1buffer_data").Where({"ecosystem": $ecosystem_id, "address": $key_address, "key": "roles_access"}).Columns("id,value,value->roles_access").Row()
        if buffer {
            roles_access_arr = JSONDecode(buffer["value.roles_access"])
            var filled map
            filled["roles_access"] = []
            filled["role_name"] = ""
            filled["role_type"] = ""
            DBUpdate("@1buffer_data", Int(buffer["id"]), {"value": filled})
        }
        var m creator map
        creator["member_id"] = $key_id
        creator["address"] = $key_address
        m["creator"] = creator
        m["role_name"] = $role_name
        m["role_type"] = $role_type
        m["date_created"] = $block_time
        m["roles_access"] = JSONEncode(roles_access_arr)
        m["ecosystem"] = $ecosystem_id
        $result = DBInsert("@1roles", m)
    }
}