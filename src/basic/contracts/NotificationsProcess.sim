contract NotificationsProcess {
    data {
        NotificId int
    }

    func getMemberInfo(kid int) map {
        var res member map
        member = DBFind("@1members").Where({"ecosystem": $ecosystem_id, "id": kid}).Row()
        if member {
            res["member_id"] = member["id"]
            res["member_name"] = member["member_name"]
            res["image_id"] = member["image_id"]
        }else{
            member = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "id": kid}).Row()
            if member {
                res["member_id"] = member["id"]
                res["member_name"] = IdToAddress(Int(member["id"]))
                res["image_id"] = 0
            }
        }
        return res
    }

    conditions {
        $notify = DBFind("@1notifications").Where({"ecosystem": $ecosystem_id, "id": $NotificId}).Columns("recipient->role_id,sender->type,date_start_processing").Row()
        if !$notify {
            warning LangRes("@1notification_not_found", "en")
        }

        if $notify["sender.type"] == 2{
            if Int($notify["date_start_processing"]) != 0 {
                warning LangRes("@1notification_processing_started_already", "en")
            }
            var rid string
            rid = Int($notify["recipient.role_id"])
            if rid > 0{
                if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": rid, "member->member_id": $key_id, "deleted": 0}).One("id") {
                    warning LangRes("@1notification_not_part_of_role", "en")
                }
            }
        }else{
            if $notify["sender.type"] != 1 {
                warning LangRes("@1notification_type_not_found", "en")
            }
        }
    }

    action {
        var model map
        model["processing_info"] = getMemberInfo($key_id)
        model["date_start_processing"] = $block_time
        DBUpdate("@1notifications", $NotificId, model)
    }
}