contract VotingStatusUpdate {
    data {}

    func notificationSend(voting map) {
        var title string id i lenVoters int voters array
        $page_name = "@1voting_view"
        title = voting["voting.name"]
        id = Int(voting["id"])
        if voting["voting.type_participants"] == 5 {
            voters = DBFind("@1votings_participants").Columns("member->role_id").Limit(10000).Where({"ecosystem": $ecosystem_id, "voting_id": id, "decision": 0})
            lenVoters = Len(voters)
            while i < lenVoters {
                var voter roleId params map
                voter = voters[i]
                roleId = Int(voter["member.role_id"])
                params["voting_id"] = id
                @1NotificationsSend("Rid,Sender,Icon,Header,Body,Page,Params,Closure", roleId, 1, "fa-check", LangRes("@1voting", "en"), title, $page_name, params, 1)
                i = i + 1
            }
        } else {
            voters = DBFind("@1votings_participants").Columns("member->member_id").Limit(10000).Where({"ecosystem": $ecosystem_id, "voting_id": id, "decision": 0})
            lenVoters = Len(voters)
            while i < lenVoters {
                var voter memberId params map
                voter = voters[i]
                memberId = Int(voter["member.member_id"])
                params["voting_id"] = id
                @1NotificationsSend("MemberId,Sender,Icon,Header,Body,Page,Params", memberId, 1, "fa-check", LangRes("@1voting", "en"), title, $page_name, params)
                i = i + 1
            }
        }
    }

    func updateRatings(voting map) {
        if voting["voting.rating"] == 1 && voting["voting.type_participants"] != 5 {
            var id i lenVoters int voters array
            id = Int(voting["id"])
            voters = DBFind("@1votings_participants").Columns("id,member->member_id").Limit(10000).Where({"ecosystem": $ecosystem_id, "voting_id": id})
            lenVoters = Len(voters)

            while i < lenVoters {
                var voter map memberId int
                voter = voters[i]
                memberId = Int(voter["member.member_id"])

                var where rating map
                where[$rating_wallet] = IdToAddress(memberId)
                where["ecosystem"] = $ecosystem_id
                rating = DBFind($rating_table).Columns($request_columns).Where(where).Row()

                var rating_amount_i int rating_amount_f float
                rating_amount_f = Float(rating[$rating_amount]) * Float($rating_weight)
                if rating_amount_f < 1.0 {
                    rating_amount_f = 1.0
                }
                rating_amount_f = 1 + Log(rating_amount_f)
                rating_amount_i = Int(rating_amount_f * 1000)

                DBUpdate("@1votings_participants", Int(voter["id"]), {rating: rating_amount_i})
                i = i + 1
            }
        }
    }

    func changeVotings(from, to map) {
        var votings array i lenVotings int v map
        from["deleted"] = 0
        votings = DBFind("@1votings").Columns("id,date_started,date_ended,voting->name,voting->type,voting->rating,voting->type_participants").Where(from)

        lenVotings = Len(votings)
        while i < lenVotings {
            v = votings[i]
            if to["status"] == $STARTED {
                notificationSend(v)
                updateRatings(v)
                to["flags->notifics"] = 1
            }
            DBUpdate("@1votings", Int(v["id"]), to)
            i = i + 1
        }
    }

    func checkPrev(names array) {
        var i lenNames int prev string
        lenNames = Len(names)
        prev = $stack[0]
        if Len($stack) > 2 {
            prev = $stack[Len($stack) - 2]
        }
        while i < lenNames {
            if prev == names[i] {
                return
            }
            i = i + 1
        }
        @1AdminCondition()
    }

    conditions {
        checkPrev(["@1VotingSubjectCheck", "@1VotingInvite"])

        $INVALID = 1
        $WAITING = 2
        $STARTED = 3
        $FINISHED = 4

        var app_id int
        app_id = Int(DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "Basic"}).One("id"))
        $rating_table = AppParam(app_id, "voting_rating_table", $ecosystem_id)
        $rating_wallet = AppParam(app_id, "voting_rating_wallet", $ecosystem_id)
        $rating_amount = AppParam(app_id, "voting_rating_amount", $ecosystem_id)
        $rating_weight = AppParam(app_id, "voting_rating_weight", $ecosystem_id)
        $request_columns = "id," + $rating_wallet + "," + $rating_amount
    }

    action {
        //setting status INVALID
        changeVotings({status:$WAITING, "flags->full_data":0}, {"status":$INVALID})
        changeVotings({status:$WAITING, "progress->number_participants":0}, {"status":$INVALID})
        //setting status WAITING
        changeVotings({status:$INVALID, "flags->full_data":1, "progress->number_participants":{"$gt":0}}, {"status":$WAITING})
        //setting status STARTED
        changeVotings({status:$INVALID, "date_started":{"$lte":$block_time}, "flags->full_data":1, "progress->number_participants":{"$gt":0}}, {"status":$STARTED})
        changeVotings({status:$WAITING, "date_started":{"$lte":$block_time}}, {status:$STARTED})
        //setting status FINISHED
        changeVotings({status:$STARTED, "date_ended":{"$lte":$block_time}}, {"status":$FINISHED})
    }
}