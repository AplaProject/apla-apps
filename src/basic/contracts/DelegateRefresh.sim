contract DelegateRefresh {
    data {}
    
    func notInArray(arr array, val string) bool {
        var i int
        // info arr
        while i < Len(arr){
            if val == arr[i]{
                return false
            }
            i = i + 1
        }
        return true
    }
    
    func getRoleId(name string) int {
        var rid int
        rid = Int(EcosysParam(name))
        if rid == 0{
            warning Sprintf(LangRes("@1role_not_set_eco_parameter", "en"), name)
        }
        return rid
    }
    
    conditions {
        MainCondition()
        var roleId int
        roleId = getRoleId("role_delegate")

        $role = DBFind("@1roles").Where({"id": roleId, "deleted": 0}).Row()
        if !$role{
            warning LangRes("@1role_not_found", "en")
        }
    }

    action {
        // get delegates ids
        var delegates currentDelegates ecosystems array i ecoId int rid string
        ecosystems = DBFind("@1ecosystems").Columns("id")
        while i < Len(ecosystems) {
            var eco delegateParam map
            eco = ecosystems[i]
            ecoId = Int(eco["id"])
            delegateParam = DBFind("@1parameters").Where({"name": "delegate_account", "ecosystem": ecoId}).Row()
            if !delegateParam{
                delegateParam = DBFind("@1parameters").Where({"name": "founder_account", "ecosystem": ecoId}).Row()
            }
            var delegateAddress string
            delegateAddress = IdToAddress(Int(delegateParam["value"]))
            if notInArray(delegates, delegateAddress){
                delegates = Append(delegates, delegateAddress)
            }
            i = i + 1
        }

        // remove old role assigns
        rid = Int($role["id"])
        currentDelegates = DBFind("@1roles_participants").Where({"role->id": rid, "deleted": 0}).Columns("id,member->address")
        var delegate map rowId int
        i = 0
        while i < Len(currentDelegates){
            delegate = currentDelegates[i]
            if notInArray(delegates, delegate["member.address"]){
                rowId = Int(delegate["id"])
                @1RolesUnassign("row_id", rowId)
            }
            i = i + 1
        }

        // assign new roles
        var key map delegateAddress string
        i = 0
        while i < Len(delegates) {
            delegateAddress = delegates[i]
            key = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "address": delegateAddress}).Row()
            if key {
                // check role dup
                if !DBFind("@1roles_participants").Where({"member->address": delegateAddress, "role->id": rid, "deleted": 0}).Row(){
                    @1RolesAssign("rid,Address", rid, delegateAddress)
                }
            }
            i = i + 1
        }
    }
}