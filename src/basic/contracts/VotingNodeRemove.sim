contract VotingNodeRemove{
    data{
        Index int
        Duration int
    }
    conditions{
        var appId int
        appId = Int(DBFind("@1applications").Where({"ecosystem": 1, "name": "Basic"}).Columns("name,id").One("id"))
        $templateId = Int(AppParam(appId,"voting_sysparams_template_id", 1))
        if $templateId == 0 {
            warning LangRes("@1template_id_not_found", "en")
        }
        var nodesJson string
        nodesJson = SysParamString("full_nodes")
        if Size(nodesJson) < 100 {
            warning LangRes("@1invalid_full_nodes", "en")
        }

        $nodes = JSONDecode(nodesJson)
        if Len($nodes) <= 3{ // minimal count nodes for work
            warning LangRes("@1removing_node_impossible", "en")
        }
    }

    action{
        var nodesNew array i int node map
        while i < Len($nodes){
            node = $nodes[i]
            if i != $Index {
                nodesNew = Append(nodesNew, node)
            }
            i = i + 1
        }
        @1VotingTemplateRun("TemplateId,Duration,ColumnName,NewValue", $templateId, $Duration, "full_nodes", JSONEncode(nodesNew))
    }
}