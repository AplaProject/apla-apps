contract CandidateValidatorRequest{
    data{
        HostIp string
        // CommissionPub string
        CommissionAddress string
        Description string "optional"
        Comment string "optional"
    }

    func isNotValidIp(ip string)bool{
        var parts array
        var i, lenParts, part int
        parts = Split(ip, ".")

        lenParts = Len(parts)
        if lenParts != 4{
            return true
        }
        while i < lenParts {
            part = Int(parts[i])
            if part < 0{
                return true
            }
            if part > 255{
                return true
            }
            i = i + 1
        }

        return false
    }

    conditions{
        // $CommissionPub = Replace($CommissionPub, " ", "")
        // info Sprintf("%v %v", $CommissionAddress, PubToID($CommissionPub))
        // if $CommissionAddress != PubToID($CommissionPub) {
        // info "Address or Public key are invalid"
        // }

        $CommissionAddress = AddressToId($CommissionAddress)
        if !DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:$CommissionAddress}).Row(){
            warning "Address not valid"
        }

        if isNotValidIp($HostIp){
            warning "Please enter a valid ip address"
        }
        var roleName string, roleId int, role map
        roleName = "Candidate for validators"
        roleId = 4
        role = DBFind("@1roles").Where({ecosystem:$ecosystem_id, role_name:roleName, id:roleId, deleted:0}).Row()
        if !role{
            warning Sprintf("Role %q not found", roleName)
        }
        @1RolesAssign("rid,member_id", roleId, $key_id)
    }

    action{
        //no $ecosystem_id
        var m map
        m["host_ip"] = $HostIp
        m["commission_pub"] = ""
        m["commission_address"] = $CommissionAddress
        m["description"] = $Description
        m["comment"] = $Comment
        m["candidate_key_id"] = $key_id
        m["date_created"] = BlockTime()
        m["deleted"] = 0
        DBInsert("sysparams_candidate", m)
    }
}