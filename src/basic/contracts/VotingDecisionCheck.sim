contract VotingDecisionCheck {
    data {
        votingID int
    }

    func runContract(cont, p string) {
        if Size(cont) > 0 {
            var params map
            if Size(p) > 0 {
                params = JSONToMap(p)
            }
            CallContract(cont, params)
        }
    }

    func closeNotes() {
        var notes array i int
        notes = DBFind("@1notifications").Where({"closed": 0, "ecosystem": $ecosystem_id, "page_name": "@1voting_view", "page_params->voting_id": $votingID})
        while i < Len(notes){
            var note map
            note = notes[i]
            @1NotificationsClose("notific_id", Int(note["id"]))
            i = i + 1
        }
    }

    conditions {
        $ACCEPT = 1
        $REJECT = -1

        $INVALID = 1
        $WAITING = 2
        $STARTED = 3
        $FINISHED = 4

        $voting = DBFind("@1votings").Where({"ecosystem": $ecosystem_id, "id": $votingID}).Columns("voting->name,voting->count_type_voters,voting->type,voting->volume,voting->type_decision,flags->success,progress->number_voters,progress->percent_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params,status").Row()
        $type_decision = Int($voting["voting.type_decision"])
        $volume = $voting["voting.volume"]

        var prevContract string
        prevContract = $stack[0]
        if Len($stack) > 2 {
            prevContract = $stack[Len($stack) - 2]
        }
        if prevContract != "@1VotingUpdate" {
            if Int($voting["status"]) != $FINISHED {
                warning LangRes("@1voting_not_expired", "en")
            }
        }

        $subject_id = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID}).One("id")
        if !$subject_id {
            warning LangRes("@1voting_subject_not_found", "en")
        }
    }

    action {
        var flag_decision i int
        flag_decision = -2 // decision can not be made (not enough participants to make a decision)
        if $voting["flags.success"] == $ACCEPT { //now enough participants to make a decision
            if $type_decision == 1 || $type_decision == 2 {
                var candidates_added_count int
                candidates_added_count = 0 // candidates who have already been added
                flag_decision = $REJECT // none of the candidates has been added yet

                var subjects array
                subjects = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID, "results": {"$gt":0}}).Order({"results":"-1"}).Columns("subject->address,subject->key_id")
                i = 0
                while i < Len(subjects) {
                    var subject map
                    subject = subjects[i]

                    // if there are still vacancies
                    if candidates_added_count < Int($voting["optional.role_vacancies"]) {
                        // added candidate to the role
                        var buffer_id int role map
                        buffer_id = Int($voting["optional.role_id"])
                        role = DBFind("@1roles").Columns("id,role_type,role_name,image_id").Where({"ecosystem": $ecosystem_id, "id": buffer_id}).Row()
                        if role {
                            var member assignedMember map mid rid string
                            mid = subject["subject.address"]
                            member["addresss"] = mid
                            rid = role["id"]
                            assignedMember = DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "member->address": mid, "role->id": rid, "deleted": 0}).Row()

                            if !assignedMember {
                                member["address"] = subject["subject.address"]
                                member["key_id"] = subject["subject.key_id"]

                                var rolePart appointed m map
                                rolePart["id"] = role["id"]
                                rolePart["type"] = role["role_type"]
                                rolePart["name"] = role["role_name"]
                                rolePart["image_id"] = role["image_id"]
                                appointed["voting_id"] = $votingID
                                appointed["voting_name"] = $voting["voting.name"]

                                // add a candidate to the role
                                m["role"] = rolePart
                                m["member"] = member
                                m["appointed"] = appointed
                                m["date_created"] = BlockTime()
                                m["ecosystem"] = $ecosystem_id
                                DBInsert("@1roles_participants", m)

                                candidates_added_count = candidates_added_count + 1

                                // if at least one of the candidates was added to the role, then the voting decision is considered successful
                                flag_decision = $ACCEPT
                            }
                        }
                    }
                    i = i + 1
                }
            }

            if $type_decision == 3 {
                var subject map
                subject = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID}).Columns("id,results->percent_accepted,results->percent_rejected").Row()
                if subject {
                    var percent_accepted percent_rejected float
                    percent_accepted = Float(subject["results.percent_accepted"])
                    percent_rejected = Float(subject["results.percent_rejected"])
                    if ( Int($voting["voting.count_type_voters"]) == 0 && percent_accepted >= Float($volume)   ) ||
                       ( Int($voting["voting.count_type_voters"]) == 1 && percent_accepted >  percent_rejected ) {
                        flag_decision = $ACCEPT
                    } else {
                        flag_decision = $REJECT
                    }
                }
            }

            if $type_decision == 4 {
                var subject map
                subject = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID}).Columns("id,results->percent_accepted,results->percent_rejected,subject->table,subject->table_id,subject->column,subject->column_value").Row()
                if subject {
                    var percent_accepted percent_rejected float
                    percent_accepted = Float(subject["results.percent_accepted"])
                    percent_rejected = Float(subject["results.percent_rejected"])
                    if ( Int($voting["voting.count_type_voters"]) == 0 && percent_accepted >= Float($volume)   ) ||
                       ( Int($voting["voting.count_type_voters"]) == 1 && percent_accepted >  percent_rejected ) {
                        flag_decision = $ACCEPT

                        var column string
                        column = Str(subject["subject.column"])
                        $colValue = Str(subject["subject.column_value"])
                        // type of voting - custom
                        if Int($voting["voting.type"]) == 1 {
                            // ALWAYS CHECK THE PERMISSION
                            var colType string
                            colType = GetColumnType(subject["subject.table"], column)
                            if colType == "number"{
                                $colValue = Int($colValue)
                            }
                            if colType == "money"{
                                $colValue = Money($colValue)
                            }
                            if colType == "double" {
                                $colValue = Float($colValue)
                            }
                            var m map
                            m[column] = $colValue
                            DBUpdate(subject["subject.table"], Int(subject["subject.table_id"]), m)
                        }

                        // type of voting - system
                        if Int($voting["voting.type"]) == 2 {
                            if subject["subject.table"] == "@1ecosystems" {
                                var m map
                                m[column] = $colValue
                                DBUpdate(subject["subject.table"], Int(subject["subject.table_id"]), m)
                            } else {
                                @1UpdateSysParam("Name,Value,VotingId", column, $colValue, $votingID)
                            }
                        }
                    } else {
                        flag_decision = $REJECT
                    }
                }
            }

            if $type_decision == 5 {
                var subject map
                subject = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID}).Columns("id,results->percent_accepted,results->percent_rejected,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params").Row()
                if subject {
                    var percent_accepted percent_rejected float
                    percent_accepted = Float(subject["results.percent_accepted"])
                    percent_rejected = Float(subject["results.percent_rejected"])
                    if ( Int($voting["voting.count_type_voters"]) == 0 && percent_accepted >= Float($volume)   ) ||
                       ( Int($voting["voting.count_type_voters"]) == 1 && percent_accepted >  percent_rejected ) {
                        flag_decision = $ACCEPT
                        runContract(subject["subject.contract_accept"], subject["subject.contract_accept_params"])
                    } else {
                        flag_decision = $REJECT
                        runContract(subject["subject.contract_reject"], subject["subject.contract_reject_params"])
                    }
                }
            }

            if flag_decision == $ACCEPT {
                runContract($voting["optional.contract_accept"], $voting["optional.contract_accept_params"])    
            }
            if flag_decision == $REJECT {
                runContract($voting["optional.contract_reject"], $voting["optional.contract_reject_params"])
            }

            closeNotes()
        }

        DBUpdate("@1votings", $votingID, {"flags->decision": flag_decision})
    }
}