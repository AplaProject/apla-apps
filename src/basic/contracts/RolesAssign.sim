contract RolesAssign {
    data {
        rid int
        member_id int
    }

    func getMemberInfo(kid int) map {
        var res member map
        member = DBFind("@1members").Where({"ecosystem": $ecosystem_id, "id": kid}).Row()
        if member {
            res["member_id"] = member["id"]
            res["member_name"] = member["member_name"]
            res["image_id"] = member["image_id"]
        }else{
            member = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "id": kid}).Row()
            if member {
                res["member_id"] = member["id"]
                res["member_name"] = IdToAddress(Int(member["id"]))
                res["image_id"] = 0
            }
        }
        return res
    }

    conditions {
        $role = DBFind("@1roles").Where({"id": $rid}).Columns("id,deleted,role_type,role_name,image_id,creator->member_id").Row()
        if (Int($role["role_type"]) == 2){
            warning LangRes("@1elective_role_voting_only", "en")
        }
        if !$role {
            warning LangRes("@1role_not_found", "en")
        }

        if !DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "id": $member_id}).Row() {
            warning LangRes("@1key_not_found", "en")
        }

        if $role["deleted"] == 1 {
            warning LangRes("@1role_deleted_request_impossible", "en")
        }

        var specRules map prev_contract string
        prev_contract = $stack[0]
        if Len($stack) > 2{
            prev_contract = $stack[Len($stack) - 2]
        }
        specRules["@1VotingValidatorAccept"] = 1
        specRules["@1DelegateRefresh"] = 1
        specRules["@1ValidatorRequest"] = 1
        if specRules[prev_contract] != 1 {
            @1RolesAccessCheck("rid", $rid)
        }
    }

    action {
        if DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": $rid, "member->member_id": $member_id, "deleted": 0}).One("id") {
            // do not re-assign and do not warning because this contract may be called for other
            return
        }
        var role member appointer map
        role["id"] = $role["id"]
        role["type"] = $role["role_type"]
        role["name"] = $role["role_name"]
        role["image_id"] = $role["image_id"]

        member = getMemberInfo($member_id)
        appointer = getMemberInfo($key_id)
        var m map
        m["role"] = role
        m["member"] = member
        m["appointed"] = appointer
        m["date_created"] = BlockTime()
        m["ecosystem"] = $ecosystem_id
        DBInsert("@1roles_participants", m)
    }
}