contract TokensRefundAccept {
    data {
        RefundId int
    }

    conditions {
        var prevContract string
        prevContract = $stack[0]
        if Len($stack) > 2 {
            prevContract = $stack[Len($stack) - 2]
        }
        if prevContract != "@1VotingDecisionCheck"{
            warning LangRes("@1contract_start_votingdecisioncheck_only", "en")
        }

        $tokenrefund = DBFind("@1tokens_refund").Where({"id": $RefundId}).Row()
        if !$tokenrefund {
            warning LangRes("@1tokens_refund_not_found", "en")
        }

        $RecipientId = $tokenrefund["victim_account"]
        $SenderId = $tokenrefund["attacker_account"]
        $amount = Money($tokenrefund["amount"])
        $votingID = Int($tokenrefund["voting_id"])

        if $amount <= 0 {
            warning LangRes("@1amount_less_equal_zero", "en")
        }
        
        var sender map
        sender = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": $SenderId, "deleted": 0}).Row()
        if !sender {
            warning LangRes("@1sender_invalid", "en")
        }
        if !DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": $RecipientId, "deleted": 0}).Row() {
            warning LangRes("@1recipient_invalid", "en")
        }
        if sender["amount"] < $amount {
            warning Sprintf(LangRes("@1sender_amount_not_enough", "en"), sender["amount"])
        }
    }

    action {
        if $tokenrefund["result"] == 0 {
            TokensLockoutMember("KeyId,Value", $RecipientId, 0)
            TokensLockoutMember("KeyId,Value", $SenderId, 0)

            @1TokensTransfer("Amount,SenderId,RecipientId,Comment", $amount, $SenderId, $RecipientId, "Refund tokens")

            var m map
            m["status"] = 2
            m["result"] = 2
            m["closed_at"] = $block_time
            DBUpdate("@1tokens_refund", Int($RefundId), m)
        }
    }
}