contract VotingCreate {
    data {
        Name string
        Type int
        TypeParticipants int
        TypeDecision int

        Quorum int
        Rating string "optional"
        Volume int "optional"
        CountTypeVoters string "optional"
        Description string "optional"
        Interval string "optional"
        StartDate string "optional"
        StartTime string "optional"
        EndDate string "optional"
        EndTime string "optional"
    }

    func trimZeroTime(s string) string {
        if Contains(s, "T00:00:00Z") {
            s = Replace(s, "T00:00:00Z", "")
        }
        return s
    }

    func dateAddTime(d, t string) string {
        var dt string
        if Size(t) == 5 {
            dt = Sprintf("%v %v:00", trimZeroTime(d), t)
        }
        return dt
    }

    func isCalledFromPage() bool {
        return $stack[0] == Sprintf("@%v%v", $ecosystem_id, $this_contract)
    }

    func fixDatetimes() {
        $date_started = UnixDateTime(dateAddTime($StartDate, $StartTime))
        $date_ended = UnixDateTime(dateAddTime($EndDate, $EndTime))

        if $date_started == 0 || $date_ended == 0 { // invalid datetimes
            if isCalledFromPage() {
                var errs array
                if Size($StartDate) < 10 {
                    errs = Append(errs, "starting date")
                }
                if Size($StartTime) < 5 {
                    errs = Append(errs, "starting time")
                }
                if Size($EndDate) < 10 {
                    errs = Append(errs, "ending date")
                }
                if Size($EndTime) < 5 {
                    errs = Append(errs, "ending time")
                }
                warning Sprintf(LangRes("@1voting_creation_error_x_unspecified", "en"), Join(errs, ", "))
            } else {
                $date_started = $block_time
                $Interval = Int($Interval)
                if $Interval == 0 {
                    $Interval = 3
                }
                $date_ended = $date_started + 3600 * 24 * $Interval
            }
        }
        if $date_started < $block_time {
            warning LangRes("@1starting_date_invalid", "en")
        }
        if $date_started >= $date_ended {
            warning LangRes("@1ending_date_invalid", "en")
        }
    }

    conditions {
        $INVALID = 1
        $WAITING = 2
        $STARTED = 3
        $FINISHED = 4

        if (($TypeDecision == 1 || $TypeDecision == 2) && $CountTypeVoters == 1) {
            info LangRes("@1voting_type_not_suitable", "en")
        }
        if ($Quorum < 1) || ($Quorum > 100) {
            warning Sprintf(LangRes("@1quorum_range_must_be", "en"), $Quorum)
        }
        if $CountTypeVoters == 0 && $TypeDecision != 1 && $TypeDecision != 2 {
            if ($Volume < 1) || ($Volume > 100) {
                warning Sprintf(LangRes("@1volume_range_must_be", "en"), $Volume)
            }
        }
        if $CountTypeVoters == 1 {
            if $Quorum < 1 {
                info LangRes("@1voters_number_less_one", "en")
            }
            $Volume = 0
        }
        if $Type == 2 {
            var systemAllowed map
            systemAllowed["@1VotingRunEditPlatformParam"] = 1
            systemAllowed["@1VotingRunNewValidator"] = 1
            systemAllowed["@1VotingRunRemoveValidator"] = 1
            systemAllowed["@1VotingRunVes"] = 1
            systemAllowed["@1VotingRunTokenRefund"] = 1
            systemAllowed["@1VotingRunEditEcosysParam"] = 1
            if systemAllowed[$stack[0]] != 1 {
                warning Sprintf(LangRes("@1system_voting_can_not_start_from_x", "en"), $stack[0])
            }
        }

        $key = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "id": $key_id}).Row()
        if !$key {
            warning LangRes("@1ecosystem_not_member", "en")
        }

        fixDatetimes()
    }

    action {
        var voting progress flags creator map votingId int
        voting["name"] = $Name
        voting["type"] = $Type
        voting["description"] = $Description
        voting["type_participants"] = $TypeParticipants
        voting["type_decision"] = $TypeDecision
        voting["volume"] = $Volume
        voting["quorum"] = $Quorum
        voting["count_type_voters"] = $CountTypeVoters
        if $Rating == "true" || $Rating == "1" {
            voting["rating"] = 1
        } else {
            voting["rating"] = 0
        }

        progress["number_participants"] = "0"
        progress["number_voters"] = "0"
        progress["percent_success"] = "0"
        progress["percent_voters"] = "0"

        flags["success"] = "0"
        flags["decision"] = "0"
        flags["full_data"] = "0"
        flags["notifics"] = "0"

        creator["member_id"] = $key["id"]
        creator["member_name"] = IdToAddress($key_id)
        var m map
        m["voting"] = voting
        m["progress"] = progress
        m["flags"] = flags
        m["creator"] = creator
        m["status"] = $INVALID
        m["date_started"] = $date_started
        m["date_ended"] = $date_ended
        m["ecosystem"] = $ecosystem_id

        votingId = DBInsert("@1votings", m)

        // if all members are voting participants
        if $TypeParticipants == 1 {
            @1VotingInvite("VotingId,VarId", votingId, 0)
        }

        var buffer_data map
        buffer_data["voting_id"] = votingId
        @1BufferManager("Action,Key,Val", "set", "voting", JSONEncode(buffer_data))

        $result = votingId
    }
}