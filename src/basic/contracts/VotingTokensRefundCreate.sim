contract VotingTokensRefundCreate {
    data {
        VictimAccount string
        SuspectAccount string
        Amount money
        Note string
    }

    conditions {
        $victimId = AddressToId($VictimAccount)
        $attackerId = AddressToId($SuspectAccount)
        if !DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:$victimId}).Row(){
            warning LangRes("@1victim_key_invalid", "en")
        }
        if !DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:$attackerId}).Row(){
            warning LangRes("@1attacker_key_invalid", "en")
        }

        if $Amount <= 0 {
            warning LangRes("@1amount_invalid", "en")
        }
        if Size($Note) == 0 {
            warning LangRes("@1add_description", "en")
        }

        var app_id template_id int
        app_id = Int(DBFind("@1applications").Where({ecosystem:1, name:"Basic"}).Columns("name,id").One("id"))
        template_id = Int(AppParam(app_id,"voting_tokenrefund_template_id", 1))
        if template_id <= 0 {
            warning LangRes("@1template_id_not_found", "en")
        }

        $template = DBFind("@1voting_templates").Where({ecosystem:$ecosystem_id, id:template_id}).Row()
        $votersRoleId = Int($template["voters"])
        $votingName = $template["title"]
        $typeParticipants = Int($template["type_participants"])
        $typeDecision = Int($template["type_decision"])
        $typeVoting = Int($template["type_voting"])
        $volume = Int($template["volume"])
        $quorum = Int($template["quorum"])
        $contractAccept = $template["contract_accept"]
        $contractReject = $template["contract_reject"]
        $initContract = $template["init_contract"]

        if !RoleAccess($votersRoleId){
            var roleName string
            roleName = DBFind("@1roles").Where({ecosystem:1, id:$votersRoleId}).One("role_name")
            warning Sprintf(LangRes("@1template_only_role_allowed", "en"), roleName)
        }
        if !DBFind("@1roles_participants").Where({ecosystem:$ecosystem_id, "role->id":$votersRoleId, deleted:0}).One("id") {
            warning Sprintf(LangRes("@1role_id_no_members", "en"), $votersRoleId)
        }

        $desc = Sprintf("%v (" + LangRes("@1tokens_refund_victim", "en") + ": %v, " + LangRes("@1tokens_refund_attacker", "en") + ": %v, " + LangRes("@1amount", "en") + ": %v)", $votingName, $victimId, $attackerId, $Amount)
    }

    action {
        if Size($initContract) > 4 { // greater then "NULL"
            var m map
            CallContract($initContract, m)
        }

        TokensLockoutMember("KeyId,Value", $victimId, 1)
        TokensLockoutMember("KeyId,Value", $attackerId, 1)
        
        var votingId int params m map paramsJSON interval_days string
        interval_days = "3"
        votingId = @1VotingCreate("voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval", $votingName, $typeVoting, $desc, $typeParticipants, $typeDecision, $volume, $quorum, interval_days)

        m["victim_key_id"] = $victimId
        m["attacker_key_id"] = $attackerId
        m["amount"] = $Amount
        m["note"] = $Note
        m["validator_key_id"] = $key_id
        m["blocked_at"] = BlockTime()
        m["voting_id"] = votingId
        m["status"] = 1 // 0. Accounts blocked, 1. Discussion, 2. Vote, 3. Closed
        m["result"] = 0 // 0. Discussion and voting, 1. Cancelled, 2. Tokens returned
        params["Id"] = DBInsert("tokens_refund", m) //no $ecosystem_id

        paramsJSON = JSONEncode(params)
        @1VotingSubjectContract("votingID,contract_reject,contract_accept,contract_reject_params,contract_accept_params", votingId, $contractReject, $contractAccept, paramsJSON, paramsJSON)
        @1VotingInvite("votingID,var_id", votingId, $votersRoleId)
    }
}