contract VotingTemplateRun {
    data {
        TemplateId int
        Duration int

        KeyId int "optional"
        TableWritten string "optional"
        RowId string "optional"
        ColumnName string "optional"
        NewValue string "optional"
        TextDocument string "optional"
    }

    func checkInput(value, name string) {
        if Size(value) == 0 || value == "NULL" {
            warning Sprintf(LangRes("@1x_not_found", "en"), name)
        }
    }

    func emptyOrValue(value string) string {
        if value == "NULL" {
            value = ""
        }
        return value
    }

    conditions {
        $template = DBFind("@1voting_templates").Where({ecosystem:$ecosystem_id, id:$TemplateId}).Row()
        if !$template{
            warning LangRes("@1voting_template_not_found", "en")
        }
        if $KeyId != 0{
            $keyFind = DBFind("@1keys").Where({ecosystem:$ecosystem_id, id:$KeyId}).Row()
            if !$keyFind{
                warning LangRes("@1key_not_found", "en")
            }
        }
        if $Duration <= 0{
            $Duration = 3
        }

        $voters = $template["voters"]
        $candidates = $template["candidates"]
        $votingName = Sprintf("%v [" + LangRes("@1template_id", "en") + ": %v]", $template["title"], $TemplateId)
        $volume = Int($template["volume"])
        $quorum = Int($template["quorum"])
        $type_voting = Int($template["type_voting"])
        $participants = Int($template["type_participants"])
        $decision = Int($template["type_decision"])
        $vacancies = Int($template["vacancies"])
        $countTypeVoters = Int($template["count_type_voters"])

        $desc = Sprintf(LangRes("@1template", "en") + " #%v", $TemplateId)
        if $type_voting < 1 || $type_voting > 3 {
            warning LangRes("@1voting_type_invalid", "en")
        }
        if $type_voting == 2 {
            var prev string systemAllowed map
            systemAllowed["@1VotingVesCreate"] = 1
            systemAllowed["@1VotingValidatorCreate"] = 1
            systemAllowed["@1VotingNodeAdd"] = 1
            systemAllowed["@1VotingParamCreate"] = 1
            systemAllowed["@1VotingNodeRemove"] = 1
            prev = $stack[0]
            if Len($stack) > 1 {
                prev = $stack[Len($stack) - 2]
            }
            if systemAllowed[prev] != 1 {
                warning LangRes("@1voting_type_invalid", "en")
            }
        }
        $contractAccept = emptyOrValue($template["contract_accept"])
        $acceptParams = emptyOrValue($template["accept_params"])
        $contractReject = emptyOrValue($template["contract_reject"])
        $rejectParams = emptyOrValue($template["reject_params"])

        if $decision == 1 || $decision == 2 {
            // role-candidates
            checkInput($candidates, "Candidate role")
            var candidate map
            candidate = DBFind("@1roles").Where({ecosystem:$ecosystem_id, id:$candidates, deleted:0}).Row()
            if !candidate {
                warning Sprintf(LangRes("@1candidate_role_id_not_found", "en"), $candidates)
            }
            $candidateId = Int(candidate["id"])
        }

        if $decision == 3 {
            // document approval
            checkInput($TextDocument, "TextDocument")
        }

        if $decision == 4 {
            // formal decision
            checkInput($ColumnName, "ColumnName")
            checkInput($NewValue, "NewValue")
            if $type_voting == 2{
                if $TableWritten == "@1ecosystems"{
                    $desc = Sprintf("%v: %v, %v: %v, %v: %v, %v: %v", LangRes("@1table", "en"), $TableWritten, LangRes("@1column", "en"), $ColumnName, LangRes("@1id", "en"), $RowId, LangRes("@1value", "en"), $NewValue)
                }else{
                    $desc = Sprintf(LangRes("@1parameter", "en") + ": %v, " + LangRes("@1value", "en") + ": %v", $ColumnName, $NewValue)
                }
            }

            if $type_voting == 1{
                checkInput($TableWritten, "TableWritten")
                checkInput($RowId, "RowId")
                $desc = Sprintf(LangRes("@1table", "en") + ": %v, " + LangRes("@1column", "en") + ": %v, " + LangRes("@1id", "en") + ": %v, " + LangRes("@1value", "en") + ": %v", $TableWritten, $ColumnName, $RowId, $NewValue)
            }
            if $RowId == "" || $RowId == "NULL"{
                $RowId = 0
            }

        }
        // check duplicated
        if DBFind("@1votings").Where({ecosystem:$ecosystem_id, "voting->name":$votingName, "flags->decision":{"$nin":["1", "-1"]}, deleted:0}).Row(){
            warning LangRes("@1same_voting_created", "en")
        }


        if $participants == 3 {
            // if the type of the participants "in role" - check the role
            var role map
            role = DBFind("@1roles").Where({ecosystem:$ecosystem_id, id:$voters, deleted:0}).Row()
            if !role {
                warning Sprintf(LangRes("@1voters_role_id_not_found", "en"), $voters)
            }
            $roleId = Int(role["id"])
            if !DBFind("@1roles_participants").Where({ecosystem:$ecosystem_id, deleted:0, "role->id":$roleId, "member->member_id":$key_id}).Row(){
                warning LangRes("@1role_not_involved", "en")
            }
        }
    }

    action {
        var initContract string
        initContract = $template["init_contract"]

        if initContract != "" && initContract != "NULL" {
            var initParam map
            if $decision == 4 && $type_voting == 2 {
                // voting for new value of sysparam
                initParam["Name"] = $ColumnName
                initParam["Value"] = $NewValue
            } else {
                initParam["KeyId"] = $KeyId
            }
            CallContract(initContract, initParam)
        }

        var votingId int
        votingId = @1VotingCreate("voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval,count_type_voters", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration, $countTypeVoters)

        if votingId == 0 {
            warning LangRes("@1voting_creation_error", "en")
        }
        // the default argument for Contract
        var defaultParams string
        defaultParams = Sprintf(`{"VotingTemplateId":"%v","KeyId":"%v","VotingId":"%v"}`, $TemplateId, $KeyId, votingId)

        if Size($acceptParams) == 0{
            $acceptParams = defaultParams
        }
        if Size($rejectParams) == 0{
            $rejectParams = defaultParams
        }

        if $decision == 1 || $decision == 2{
            // 1. Role candidates with the registration of participants on request
            // 2. Role candidates with manual registration of the participants
            @1VotingSubjectCandidates("votingID,memberID", votingId, $KeyId)
            @1VotingSubjectSettings("votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)
        }
        if $decision == 3 {
            // Document approval
            @1VotingSubjectDocument("votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)
        }

        if $decision == 4 {
            // Formal decision
            @1VotingSubjectFormal("votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)

        }

        if $decision == 5 {
            // Execution of the contract
            @1VotingSubjectContract("votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)
        }
        if $participants == 3 {
            // participants: "by role"
            @1VotingInvite("votingID,var_id", votingId, $roleId)
        }
        if $participants == 1 {
            // if the participants are "all", the invite has already occurred in "@1VotingCreate"
        }
        if $type_voting == 3 {
            @1VotingStatusUpdate()
        }
    }
}