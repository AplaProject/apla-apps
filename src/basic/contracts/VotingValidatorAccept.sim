contract VotingValidatorAccept {
    data {
        TemplateId string
        VotingId string
    }

    func getRoleId(name string, warn bool) int {
        var rid int
        rid = Int(EcosysParam(name))
        if rid == 0 && warn{
            warning Sprintf(LangRes("@1role_not_set_eco_parameter", "en"), name)
        }
        return rid
    }

    func conditions {
        var prev string
        prev = $stack[0]
        if Len($stack) > 2{
            prev = $stack[Len($stack) - 2]
        }
        if prev != "@1VotingDecisionCheck"{
            warning LangRes("@1contract_start_votingdecisioncheck_only", "en")
        }

        var appId tId int
        appId = Int(DBFind("@1applications").Where({"ecosystem": 1, "name": "Basic"}).Columns("name,id").One("id"))
        tId = Int(AppParam(appId,"voting_template_validators", 1))
        if !DBFind("@1voting_templates2").Where({"ecosystem": $ecosystem_id, "id": tId}).One("id"){
            warning LangRes("@1voting_template_not_found", "en")
        }
        if $TemplateId != tId {
            warning LangRes("@1template_incorrect", "en")
        }

        var candidateId oldRoleId roleId int roleName string
        oldRoleId = getRoleId("role_candidate_for_validators", false)
        roleId = getRoleId("role_validator", true)

        var validator_map map
        validator_map = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId}).Columns("subject->contract_accept_params").One("subject->contract_accept_params")
        if !validator_map {
            warning LangRes("@1voting_subject_not_found", "en")
        }
        validator_map = JSONDecode(validator_map)
        $validator_id = Int(validator_map["ValidatorId"])

        candidateId = DBFind("@1validator_candidates").Where({"candidate_key_id": $validator_id}).One("candidate_key_id")
        if !candidateId {
            warning LangRes("@1candidate_key_not_found", "en")
        }
        $oldRoleRowId = Int(DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "deleted": 0, "role->id": oldRoleId, "member->member_id": candidateId}).One("id"))

        $roleId = Int(DBFind("@1roles").Where({"ecosystem": $ecosystem_id, "id": roleId, "deleted": 0}).One("id"))
        if $roleId == 0 {
            warning LangRes("@1validator_role_not_found", "en")
        }
    }

    func action {
        if $oldRoleRowId > 0 {
            @1RolesUnassign("row_id", $oldRoleRowId)
        }
        @1RolesAssign("rid,member_id", $roleId, Int($validator_id))
    }
}