contract GroupsCreate {
    data {
        group_name string "optional"
        group_type int "optional"
        group_information string "optional"
        gr_id int "optional"
    }

    conditions {
        $key_address = IdToAddress($key_id)
        if $gr_id == 0 {
            if $group_name == "" {
                info LangRes("@1group_name_cannot_be_empty", "en")
            }
            if $group_type == 0 {
                info LangRes("@1group_type_error", "en")
            }
        }
        $check_access = EcosysParam("role_creates_groups")
        if $check_access && Str($check_access) != "0" {
            var rids array
            rids = JSONDecode("[" + $check_access + "]")
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": {"$in":rids}, "member->address": $key_address, "deleted": 0}).Row() {
                warning LangRes("@1access_denied", "en")
            }
        } else {
            var admin_id int
            admin_id = EcosysParam("role_admin")
            var rids array
            rids = JSONDecode("[" + admin_id + "]")
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "role->id": {"$in": rids}, "member->address": $key_address, "deleted": 0}).Row() {
                warning LangRes("@1access_denied", "en")
            }
        }
        if $group_name == DBFind("@1groups").Where({"ecosystem": $ecosystem_id, "group_name": $group_name}).One("group_name") {
            warning LangRes("@1group_name_already", "en")
        }
    }

    action {
        if $gr_id == 0 {
            var roles_access_arr array, buffer map
            buffer = DBFind("@1buffer_data").Where({"ecosystem": $ecosystem_id, "address": $key_address, "key": "group_access"}).Columns("id,value,value->groups_access").Row()
            if buffer {
                roles_access_arr = JSONDecode(buffer["value.groups_access"])
                var filled map
                filled["groups_access"] = []
                filled["group_name"] = ""
                filled["group_type"] = ""
                filled["group_information"] = ""
                DBUpdate("@1buffer_data", Int(buffer["id"]), {"value": filled})
            }

            var m creator map
            creator["address"] = $key_address
            m["creator"] = creator
            m["group_name"] = $group_name
            m["group_type"] = $group_type
            m["date_created"] = $block_time
            m["group_access"] = JSONEncode(roles_access_arr)
            m["group_info"] = $group_information
            m["ecosystem"] = $ecosystem_id
            DBInsert("@1groups", m)
        } else {
            var m map
            m["group_info"] = $group_information
            DBUpdate("@1groups",$gr_id, m)
        }
    }
}