contract InvestorRefresh {
    data {
        RoleId int
    }

    func notInArray(arr array, val string) bool {
        var i lenArr int
        lenArr = Len(arr)
        while i < lenArr{
            if val == Str(arr[i]){
                return false
            }
            i = i + 1
        }
        return true
    }

    func getParamInt(id int, name string) int {
        var param int
        param = Int(AppParam(id, name, 1))
        if param == 0{
            warning Sprintf(LangRes("@1application_parameter_not_set", "en"), name)
        }
        return param
    }
    func getRoleId(name string) int {
        var rid int
        rid = Int(EcosysParam(name))
        if rid == 0{
            warning Sprintf(LangRes("@1role_not_set_eco_parameter", "en"), name)
        }
        return rid
    }

    conditions {
        var appId int
        appId = Int(DBFind("@1applications").Where({"ecosystem": 1, "name": "Basic", "deleted": 0}).One("id"))
        if appId == 0{
            warning LangRes("@1app_not_found", "en")
        }

        var roleValidatorId roleInvestorId string

        roleValidatorId = getRoleId("role_validator")
        if !RoleAccess(roleValidatorId) {
            warning LangRes("@1not_validator_can_not_run", "en")
        }

        roleInvestorId = getRoleId("role_investor_with_voting_rights")
        $roleId = Int(DBFind("@1roles").Where({"id": roleInvestorId, "deleted": 0}).One("id"))
        if $roleId == 0{
            warning LangRes("@1investor_role_not_found_or_removed", "en")
        }

        $limitInvestors = getParamInt(appId, "investors_number")
    }

    action {
        // get investors ids
        var investors assignedInvestors investorsAddrs assignedAddrs array
        investors = DBFind("@1keys").Where({"ecosystem": $ecosystem_id}).Columns("address").Order([{amount:"-1"},{id:"-1"}]).Limit($limitInvestors) // получаем самых богатых юзеров экосистемы в количестве $limitInvestors
        assignedInvestors = DBFind("@1roles_participants").Where({"role->id": $roleId, "deleted": 0}).Columns("member->address")

        // get addresses
        var i int
        while i < Len(investors) {
            var inv map
            inv = investors[i]
            investorsAddrs[i] = inv["address"]
            i = i + 1
        }
        i = 0
        while i < Len(assignedInvestors) {
            var inv map
            inv = assignedInvestors[i]
            assignedAddrs[i] = inv["member.address"]
            i = i + 1
        }

        // remove old investors
        var assigned map adr string
        i = 0
        while i < Len(assignedAddrs) {
            adr = assignedAddrs[i]
            if notInArray(investorsAddrs, adr){
                assigned = DBFind("@1roles_participants").Where({"member->address": adr, "role->id": $roleId}).Row()
                if assigned {
                    @1RolesUnassign("row_id", Int(assigned["id"]))
                }
            }
            i = i + 1
        }
        // add new investors
        i = 0
        while i < Len(investorsAddrs) {
            if notInArray(assignedAddrs, investorsAddrs[i]){
                var adr string
                adr = investorsAddrs[i]
                if DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "address": adr}).Row(){
                    @1RolesAssign("rid,Address", $roleId, adr)
                }
            }
            i = i + 1
        }
    }
}