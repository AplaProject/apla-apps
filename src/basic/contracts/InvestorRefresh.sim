contract InvestorRefresh {
    data {
        RoleId int
    }

    func notInArray(val string, arr array) bool {
        var i lenArr int
        lenArr = Len(arr)
        while i < lenArr {
            if val == Str(arr[i]) {
                return false
            }
            i = i + 1
        }
        return true
    }

    func getParamInt(id int, name string) int {
        var param int
        param = Int(AppParam(id, name, 1))
        if param == 0 {
            warning Sprintf(LangRes("@1application_parameter_not_set", "en"), name)
        }
        return param
    }

    func getRoleId(name string) int {
        var rid int
        rid = Int(AppParam(Int($system_app_id), name, $ecosystem_id))
        if rid == 0 {
            warning Sprintf(LangRes("@role_not_set_application_parameter", "en"), name)
        }
        return rid
    }

    conditions {
        $system_app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "System"}).One("id")
        var appId int
        appId = Int(DBFind("@1applications").Where({"ecosystem": 1, "name": "Basic", "deleted": 0}).One("id"))
        if appId == 0 {
            warning LangRes("@1app_not_found", "en")
        }

        var roleConsortiumMemberId roleInvestorId string

        roleConsortiumMemberId = getRoleId("role_consortium_member")
        if !RoleAccess(roleConsortiumMemberId) {
            warning LangRes("@1consortium_members_only", "en")
        }

        roleInvestorId = getRoleId("role_investor_with_voting_rights")
        $roleId = Int(DBFind("@1roles").Where({"id": roleInvestorId, "deleted": 0}).One("id"))
        if $roleId == 0 {
            warning LangRes("@1investor_role_not_found_or_removed", "en")
        }

        $limitInvestors = getParamInt(appId, "investors_number")
    }

    action {
        // get investors ids
        var keysInvestors assignedInvestors investorsIds assignedIds array
        keysInvestors = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "deleted": 0}).Columns("account").Order({"amount": "-1", "id": "-1"}).Limit($limitInvestors)
        assignedInvestors = DBFind("@1roles_participants").Where({"role->id": $roleId, "deleted": 0}).Columns("member->account")

        // get ids
        var i int
        while i < Len(keysInvestors) {
            var inv map
            inv = keysInvestors[i]
            investorsIds[i] = inv["account"]
            i = i + 1
        }
        i = 0
        while i < Len(assignedInvestors) {
            var inv map
            inv = assignedInvestors[i]
            assignedIds[i] = inv["member.account"]
            i = i + 1
        }

        // remove old investors
        var assigned map mid string
        i = 0
        while i < Len(assignedIds) {
            if notInArray(assignedIds[i], investorsIds){
                mid = assignedIds[i]
                assigned = DBFind("@1roles_participants").Where({"member->account": mid, "role->id": $roleId}).Row()
                if assigned {
                    @1RolesUnassign("RowId", Int(assigned["id"]))
                }
            }
            i = i + 1
        }
        // add new investors
        i = 0
        while i < Len(investorsIds) {
            if notInArray(investorsIds[i], assignedIds){
                var account string
                account = investorsIds[i]
                if DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": account, "deleted": 0}).Row(){
                    @1RolesAssign("Rid,MemberAccount", $roleId, account)
                }
            }
            i = i + 1
        }
    }
}