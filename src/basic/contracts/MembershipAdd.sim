contract MembershipAdd {
    data {
        Keys string
    }

    func addPub(pub string) {
        pub = Replace(pub, " ", "")
        if Size(pub) < 128 {
            warning LangRes("@1key_too_short", "en")
        }
        if Size(pub) > 130 {
            warning LangRes("@1key_too_long", "en")
        }

        var account_key int account string
        account_key = PubToID(pub)
        if account_key == 0 {
            warning LangRes("@1public_key_invalid", "en")
        }
        account = IdToAddress(account_key)
        $check_user = DBFind("@1keys").Where({"ecosystem": $ecosystem_id, "account": account, "deleted": 0})
        if $check_user {
            warning LangRes("@1key_already_exists", "en")
        }
        var pub_bytes bytes
        pub_bytes = HexToPub(pub)
        DBInsert("@1keys", {"ecosystem": $ecosystem_id, "id": account_key, "account": account, "pub": pub_bytes, "deleted": 0})
    }

    conditions {
        $system_app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "System"}).One("id")
        if $Keys == "" {
            warning LangRes("@1public_key_empty", "en")
        }
        $Keys = Replace($Keys, " ", "")
        $Keys = Replace($Keys, "\n", "")
        $Keys = Replace($Keys, "\r", "")

        var admin_id int
        admin_id = Int(AppParam(Int($system_app_id), "role_admin", $ecosystem_id))

        if !RoleAccess(admin_id) {
            warning LangRes("@1access_denied", "en")
        }

        if $ecosystem_id == 1 {
            warning LangRes("@1impossible_for_platform_ecosystem", "en")
        }
    }

    action {
        if Contains($Keys, ",") {
            var pub_array array
            pub_array = Split($Keys, ",")

            var i int
            while i < Len(pub_array) {
                var pub_key string
                pub_key = Str(pub_array[i])
                addPub(pub_key)
                i = i + 1
            }
        } else {
            addPub($Keys)
        }
    }
}