contract BufferManager {
    data {
        Action string
        Key string
        Val string "optional"
    }

    func decodeArray(s string) array {
        var ar array
        if HasPrefix($buf["value"], "[") {
            ar = JSONDecode($buf["value"])
        }
        return ar
    }

    action {
        $emptyVal = JSONEncode("")
        $buf = DBFind("@1buffer_data").Where({"ecosystem": $ecosystem_id, "key": $Key, "member_id": $key_id}).Row()
        if !$buf {
            var buf map, id int
            id = DBInsert("@1buffer_data", {ecosystem:$ecosystem_id, key:$Key, value:$emptyVal, member_id:$key_id})
            buf["id"] = Str(id)
            buf["value"] = ""
            buf["member_id"] = Str($key_id)
            buf["key"] = Str($Key)
            $buf = buf
        }
        var id int
        id = Int($buf["id"])
        if $Action == "clean" {
            DBUpdate("@1buffer_data", id, {value:$emptyVal})
        }
        if $Action == "set" {
            DBUpdate("@1buffer_data", id, {value:$Val})
        }
        if $Action == "array_add_value" {
            var ar array enc string
            ar = decodeArray($buf["value"])
            ar = Append(ar, $Val)
            enc = JSONEncode(ar)
            DBUpdate("@1buffer_data", id, {value:enc})
        }
        if $Action == "array_remove_value" {
            var ar arNew array i int enc string
            ar = decodeArray($buf["value"])
            while i < Len(ar){
                if ar[i] != $Val{
                    arNew = Append(arNew, ar[i])
                }
                i = i + 1
            }
            enc = JSONEncode(arNew)
            DBUpdate("@1buffer_data", id, {value:enc})
        }
    }
}
