contract NotificationsSend {
    data {
        member_id int "optional"
        rid int "optional"
        closure_type int "optional"

        sender int
        icon_name string "optional"
        text_header string
        text_body string "optional"
        page_name string
        params_map string // json encoded expected
        current_role_id string "optional"
        eco_id string "optional"
    }

    func getMemberInfo(kid, ecoId int) map {
        var res member map
        member = DBFind("@1members").Where({ecosystem:ecoId, id:kid}).Row()
        if member {
            res["member_id"] = member["id"]
            res["member_name"] = member["member_name"]
            res["image_id"] = member["image_id"]
        }else{
            if DBFind("@1keys").Where({ecosystem:ecoId, id:kid}).Columns("id").Row() {
                res["member_id"] = Str(kid)
                res["member_name"] = IdToAddress(kid)
                res["image_id"] = "0"
            }
        }
        return res
    }

    func sendNotify(recipient map) {
        var notification map
        notification["header"] = $text_header
        notification["type"] = $notify_type
        notification["icon"] = $icon_name
        notification["body"] = $text_body
        var sender map
        if $sender == 1 && $senderMember {
            // send from member
            sender["type"] = $sender
            sender["member_id"] = $senderMember["member_id"]
            sender["member_name"] = $senderMember["member_name"]
            sender["image_id"] = $senderMember["image_id"]
        }else{
            if $sender == 2 && $senderRole{
                // send from role
                sender["type"] = $sender
                sender["role_id"] = $senderRole["id"]
                sender["role_name"] = $senderRole["role_name"]
                sender["image_id"] = $senderRole["image_id"]
            }
        }
        var model map
        model["recipient"] = recipient
        model["sender"] = sender
        model["notification"] = notification
        model["page_name"] = $page_name
        model["page_params"] = $params_map
        model["date_created"] = BlockTime()
        model["ecosystem"] = $eco_id
        DBInsert("@1notifications", model)
    }

    func sendToRole(roleId, ecoId int) {
        var role recipient map
        role = DBFind("@1roles").Where({ecosystem:ecoId, id:roleId}).Row()
        recipient["role_id"] = role["id"]
        recipient["role_name"] = role["role_name"]
        recipient["image_id"] = role["image_id"]
        sendNotify(recipient)
    }

    conditions {
        $member_id = Int($member_id)
        $rid = Int($rid)
        $current_role_id = Int($current_role_id)
        $eco_id = Int($eco_id)
        if $eco_id == 0{
            $eco_id = $ecosystem_id
        }
        if Size($icon_name) < 1{
            $icon_name = "icon-envelope"
        }
        if $member_id != 0 {
            if !DBFind("@1keys").Where({ecosystem:$eco_id, id:$member_id}).Row(){
                warning LangRes("@1key_not_found", "en")
            }
            $notify_type = 1 // is "member"
        }elif $rid > 0{
            $notify_type = 2 // is "role"
            if !DBFind("@1roles").Where({ecosystem:$eco_id, id:$rid}).One("id") {
                warning $this_contract + ": " + LangRes("@1recipient_role_not_found", "en")
            }
            if !DBFind("@1roles_participants").Where({ecosystem:$eco_id, "role->id":$rid, deleted:0}).One("id") {
                warning $this_contract + ": " + LangRes("@1recipient_role_no_members", "en")
            }
        } else{
            warning $this_contract + ": " + LangRes("@1notification_type_not_defined", "en")
        }
        $senderMember = nil
        $senderRole = nil
        if $sender == 1 {
            $senderMember = getMemberInfo($key_id, $ecosystem_id)
        }elif $sender == 2 {
            $senderRole = DBFind("@1roles").Where({ecosystem:$ecosystem_id, id:$current_role_id}).Row()
            if !$senderRole {
                warning $this_contract + ": " + LangRes("@1sender_role_not_found", "en")
            }
        }else{
            warning $this_contract + ": " + LangRes("@1sender_invalid", "en")
        }
    }

    action {
        if $member_id != 0 {
            sendNotify(getMemberInfo($member_id, $eco_id))
            UpdateNotifications($eco_id, Int($member_id))
        }elif $rid > 0 {
            if $closure_type == 1 {
                // Single closure: one begins the process - the others do not see
                sendToRole($rid, $eco_id)
                UpdateRolesNotifications($eco_id, Int($rid))
            } else {
                // Multiple closure: to each his own notification
                $notify_type = 1
                var participants array
                participants = DBFind("@1roles_participants").Where({ecosystem:$eco_id, "role->id":$rid, deleted:0}).Columns("member->member_id")
                var i int
                while i < Len(participants) {
                    var p map
                    p = participants[i]
                    sendNotify(getMemberInfo(Int(p["member.member_id"]), $eco_id))
                    UpdateNotifications($eco_id, Int(p["member.member_id"]))
                    i = i + 1
                }
            }
        }
    }
}