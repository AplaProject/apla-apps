contract NotificationsSend {
    data {
        MemberId int "optional"
        Rid int "optional"
        Closure int "optional"
        Sender int
        Icon string "optional"
        Header string
        Body string "optional"
        Page string
        Params string // json encoded expected
        CurrentRid string "optional"
        EcosystemId string "optional"
        Popup string "optional"
    }

    func getMemberInfo(kid, ecoId int) map {
        var res member map
        member = DBFind("@1members").Where({"ecosystem": ecoId, "id": kid}).Row()
        if member {
            res["member_id"] = member["id"]
            res["member_name"] = member["member_name"]
            res["image_id"] = member["image_id"]
        } else {
            if DBFind("@1keys").Where({"ecosystem": ecoId, "id": kid}).Columns("id").Row() {
                res["member_id"] = Str(kid)
                res["member_name"] = IdToAddress(kid)
                res["image_id"] = "0"
            }
        }
        return res
    }

    func sendNotify(recipient map) {
        var notification map
        notification["header"] = $Header
        notification["type"] = $notify_type
        notification["icon"] = $Icon
        notification["body"] = $Body
        if $Popup == "true" || $Popup == "1" {
            notification["popup"] = 1
        } else {
            notification["popup"] = 0
        }
        var sender map
        if $Sender == 1 && $senderMember {
            // send from member
            sender["type"] = $Sender
            sender["member_id"] = $senderMember["member_id"]
            sender["member_name"] = $senderMember["member_name"]
            sender["image_id"] = $senderMember["image_id"]
        } else {
            if $Sender == 2 && $senderRole{
                // send from role
                sender["type"] = $Sender
                sender["role_id"] = $senderRole["id"]
                sender["role_name"] = $senderRole["role_name"]
                sender["image_id"] = $senderRole["image_id"]
            }
        }
        var model map
        model["recipient"] = recipient
        model["sender"] = sender
        model["notification"] = notification
        model["page_name"] = $Page
        model["page_params"] = $Params
        model["date_created"] = $block_time
        model["ecosystem"] = $EcosystemId
        DBInsert("@1notifications", model)
    }

    func sendToRole(roleId, ecoId int) {
        var role recipient map
        role = DBFind("@1roles").Where({"ecosystem": ecoId, "id": roleId}).Row()
        recipient["role_id"] = role["id"]
        recipient["role_name"] = role["role_name"]
        recipient["image_id"] = role["image_id"]
        sendNotify(recipient)
    }

    conditions {
        $MemberId = Int($MemberId)
        $Rid = Int($Rid)
        $CurrentRid = Int($CurrentRid)
        $EcosystemId = Int($EcosystemId)
        if $EcosystemId == 0 {
            $EcosystemId = $ecosystem_id
        }
        if Size($Icon) < 1 {
            $Icon = "icon-envelope"
        }
        if $MemberId != 0 {
            if !DBFind("@1keys").Where({"ecosystem": $EcosystemId, "id": $MemberId}).Row(){
                warning LangRes("@1key_not_found", "en")
            }
            $notify_type = 1 // is "member"
        } elif $Rid > 0 {
            $notify_type = 2 // is "role"
            if !DBFind("@1roles").Where({"ecosystem": $EcosystemId, "id": $Rid}).One("id") {
                warning $this_contract + ": " + LangRes("@1recipient_role_not_found", "en")
            }
            if !DBFind("@1roles_participants").Where({"ecosystem": $EcosystemId, "role->id": $Rid, "deleted": 0}).One("id") {
                warning $this_contract + ": " + LangRes("@1recipient_role_no_members", "en")
            }
        } else {
            warning $this_contract + ": " + LangRes("@1notification_type_not_defined", "en")
        }
        $senderMember = nil
        $senderRole = nil
        if $Sender == 1 {
            $senderMember = getMemberInfo($key_id, $ecosystem_id)
        } elif $Sender == 2 {
            if !RoleAccess($CurrentRid) {
                warning LangRes("@1access_denied", "en")
            }
            $senderRole = DBFind("@1roles").Where({"ecosystem": $ecosystem_id, "id": $CurrentRid}).Row()
            if !$senderRole {
                warning $this_contract + ": " + LangRes("@1sender_role_not_found", "en")
            }
        } else {
            warning $this_contract + ": " + LangRes("@1sender_invalid", "en")
        }
    }

    action {
        if $MemberId != 0 {
            sendNotify(getMemberInfo($MemberId, $EcosystemId))
            UpdateNotifications($EcosystemId, Int($MemberId))
        } elif $Rid > 0 {
            if $Closure == 1 {
                // Single closure: one begins the process - the others do not see
                sendToRole($Rid, $EcosystemId)
                UpdateRolesNotifications($EcosystemId, Int($Rid))
            } else {
                // Multiple closure: to each his own notification
                $notify_type = 1
                var participants array
                participants = DBFind("@1roles_participants").Where({"ecosystem": $EcosystemId, "role->id": $Rid, "deleted": 0}).Columns("member->member_id")
                var i int
                while i < Len(participants) {
                    var p map
                    p = participants[i]
                    sendNotify(getMemberInfo(Int(p["member.member_id"]), $EcosystemId))
                    UpdateNotifications($EcosystemId, Int(p["member.member_id"]))
                    i = i + 1
                }
            }
        }
    }
}