contract VotingDecisionAccept {
    data {
        VotingId int
        RoleId int
    }

    func closeNotification() {
        var role_id_search int
        role_id_search = Int(DBFind("@1notifications").Where({"ecosystem": $ecosystem_id, "recipient->role_id": $RoleId, "page_params->voting_id": $VotingId, "closed": 0}).One("id"))
        if role_id_search > 0 {
            @1NotificationsClose("NotificId", role_id_search)
        } else {
            var id int
            id = Int(DBFind("@1notifications").Where({"ecosystem": $ecosystem_id, "recipient->member_id": $key_id, "page_params->voting_id": $VotingId, "closed": 0}).One("id"))
            if id > 0 {
                @1NotificationsClose("NotificId", id)
            }
        }
    }

    conditions {
        $INVALID = 1
        $WAITING = 2
        $STARTED = 3
        $FINISHED = 4

        $voting = DBFind("@1votings").Where({"ecosystem": $ecosystem_id, "id": $VotingId}).Columns("id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended").Row()
        if !$voting {
            warning LangRes("@1voting_not_found", "en")
        }
        if $voting["voting.type_participants"] == 3 {
            if $voting["voting.role_id"] != $RoleId{
                warning LangRes("@1voting_role_incorrect", "en")
            }
        }
        if $voting["status"] == $FINISHED || $block_time > Int($voting["date_ended"]) {
            warning LangRes("@1voting_expired_can_not_vote", "en")
        }
        if $voting["status"] != $STARTED {
            warning LangRes("@1voting_not_started", "en")
        }
        $subject = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId}).Columns("id,number_accept,results->rating_accepted,results->rating_rejected").Row()
        if !$subject {
            warning LangRes("@1voting_subject_not_found", "en")
        }

        if Int($voting["voting.type_participants"]) != 5 {
            $participant = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId, "member->member_id": $key_id, "decision": 0}).Columns("id,rating").Row()
        }
        if Int($voting["voting.type_participants"]) == 5 {
            $participant = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $VotingId, "member->member_id": 0, "member->role_id": $RoleId, "decision": 0}).Columns("id,rating").Row()
        }
        if !$participant {
            warning LangRes("@1voting_not_participant", "en")
        }
    }

    action {
        if Int($voting["voting.type_participants"]) == 5 {
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "member->member_id": $key_id, "role->id": $RoleId, "deleted": 0}).One("id") {
                warning LangRes("@1voting_not_participant", "en")
            } else {
                var member map
                member["member_id"] = $key_id
                member["member_name"] = IdToAddress($key_id)
                member["role_id"] = $RoleId
                var member_json string
                member_json = JSONEncode(member)
                DBUpdate("@1votings_participants", Int($participant["id"]), {"member":member_json})
            }
        }

        if $voting["flags.notifics"] == 1 {
            closeNotification()
        }

        if $voting["flags.decision"] != 1 {
            var m map
            m["decision_date"] = $block_time
            m["decision"] = 1
            DBUpdate("@1votings_participants", Int($participant["id"]), m)

            var p map
            var rating_accepted rating_rejected summ_rating int
            rating_accepted = Int($subject["results.rating_accepted"]) + Int($participant["rating"])
            rating_rejected = Int($subject["results.rating_rejected"])
            summ_rating = rating_accepted + rating_rejected
            var percent_accepted percent_rejected float
            percent_accepted = (Float(rating_accepted)*Float(100))/Float(summ_rating)
            percent_rejected = (Float(rating_rejected)*Float(100))/Float(summ_rating)
            p["results->rating_accepted"] = rating_accepted
            p["results->rating_rejected"] = rating_rejected
            p["results->percent_accepted"] = percent_accepted
            p["results->percent_rejected"] = percent_rejected
            p["number_accept"] = Int($subject["number_accept"]) + 1
            DBUpdate("@1votings_subject", Int($subject["id"]), p)

            @1VotingUpdate("VotingId", $VotingId)
        }
    }
}