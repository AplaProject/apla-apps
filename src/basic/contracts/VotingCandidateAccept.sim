contract VotingCandidateAccept {
    data {
        votingID int
        CandidateID int
        RoleId int
    }

    func closeNotification() {
        var role_id_search int
        role_id_search = Int(DBFind("@1notifications").Where({"ecosystem": $ecosystem_id, "recipient->role_id": $RoleId, "page_name": "@1voting_view", "page_params->voting_id": $votingID, "closed": 0}).One("id"))
        if role_id_search > 0 {
            @1NotificationsClose("notific_id", role_id_search)
        } else {
            var id int
            id = Int(DBFind("@1notifications").Where({"ecosystem": $ecosystem_id, "recipient->member_id": $key_id, "page_name": "@1voting_view", "page_params->voting_id": $votingID, "closed": 0}).One("id"))
            if id > 0 {
                @1NotificationsClose("notific_id", id)
            }
        }
    }

    func getUnixDataEnd(d string) int {
        d = Replace(d, "T", " ")
        d = Replace(d, "Z", "")
        return UnixDateTime(d)
    }

    conditions {
        $INVALID = 1
        $WAITING = 2
        $STARTED = 3
        $FINISHED = 4

        $voting = DBFind("@1votings").Where({"ecosystem": $ecosystem_id, "id": $votingID}).Columns("id,flags->decision,flags->notifics,voting->type_participants,voting->role_id,status,date_ended").Row()
        if !$voting {
            warning LangRes("@1voting_not_found", "en")
        }
        if $voting["status"] == $FINISHED || $block_time > getUnixDataEnd($voting["date_ended"]) {
            warning LangRes("@1voting_expired_can_not_vote", "en")
        }
        if $voting["status"] != $STARTED {
            warning LangRes("@1voting_not_started", "en")
        }
        $subject = DBFind("@1votings_subject").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID, "subject->member_id": $CandidateID}).Columns("id,number_accept,results").Row()
        if !$subject {
            warning LangRes("@1voting_subject_not_found", "en")
        }

        if Int($voting["voting.type_participants"]) != 5 {
            $participant = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID, "member->member_id": $key_id, "decision": 0}).Columns("id,rating").Row()
        }
        if Int($voting["voting.type_participants"]) == 5 {
            $participant = DBFind("@1votings_participants").Where({"ecosystem": $ecosystem_id, "voting_id": $votingID, "member->member_id": 0, "member->role_id": $RoleId, "decision": 0}).Columns("id,rating").Row()
        }
        if !$participant {
            warning LangRes("@1voting_not_participant", "en")
        }
    }

    action {
        if Int($voting["voting.type_participants"]) == 5 {
            if !DBFind("@1roles_participants").Where({"ecosystem": $ecosystem_id, "member->member_id": $key_id, "role->id": $RoleId, "deleted": 0}).One("id") {
                warning LangRes("@1voting_not_participant", "en")
            } else {
                var member map
                member["member_id"] = $key_id
                member["key_id"] = $key_id
                member["address"] = IdToAddress($key_id)
                member["member_name"] = IdToAddress($key_id)
                member["role_id"] = $RoleId
                var member_json string
                member_json = JSONEncode(member)
                DBUpdate("@1votings_participants", Int($participant["id"]), {"member":member_json})
            }
        }

        if $voting["flags.notifics"] == 1 {
            closeNotification()
        }

        if $voting["flags.decision"] != 1 {
            var m map
            m["decision_date"] = BlockTime()
            m["decision"] = $CandidateID
            DBUpdate("@1votings_participants", Int($participant["id"]), m)

            var p map
            p["number_accept"] = Int($subject["number_accept"]) + 1
            p["results"] = Int($subject["results"]) + Int($participant["rating"]) 
            DBUpdate("@1votings_subject", Int($subject["id"]), p)

            @1VotingUpdate("votingID", $votingID)
        }
    }
}