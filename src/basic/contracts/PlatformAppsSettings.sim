contract PlatformAppsSettings {
    data {
        RoleAdmin int
        RoleValidatorCandidate int
        RoleConsensus int
        RoleDelegate int
        RoleDeveloper int
        RoleInvestor int
        RoleValidator int
        RoleCreatesRoles int
    }
 
    conditions {
        MainCondition()
    }

    func updateParam(name string, value int) {
        if value > 0 {
            var param paramsNew map
            if $app_id > 0 {
                param = DBFind("@1app_params").Where({"ecosystem": $ecosystem_id, "app_id": $app_id, "name": name}).Row()
                if param {
                    paramsNew["Id"] = Int(param["id"])
                    paramsNew["Value"] = Str(value)
                    paramsNew["Conditions"] = param["conditions"]
                    CallContract("@1EditAppParam", paramsNew)
                } else {
                    paramsNew["ApplicationId"] = $app_id
                    paramsNew["Name"] = name
                    paramsNew["Value"] = Str(value)
                    paramsNew["Conditions"] = "ContractConditions(\"AdminCondition\")"
                    CallContract("@1NewAppParam", paramsNew)
                }
            } else {
                warning LangRes("@1app_not_found", "en")
            }
        }
    }

    action {
        $app_id = DBFind("@1applications").Where({"ecosystem": $ecosystem_id, "name": "System"}).One("id")
        updateParam("role_admin", $RoleAdmin)
        updateParam("role_candidate_for_validators", $RoleValidatorCandidate)
        updateParam("role_consensus", $RoleConsensus)
        updateParam("role_delegate", $RoleDelegate)
        updateParam("role_developer", $RoleDeveloper)
        updateParam("role_investor_with_voting_rights", $RoleInvestor)
        updateParam("role_validator", $RoleValidator)
        updateParam("role_creates_roles", $RoleCreatesRoles)
    }
}