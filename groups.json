{
    "name": "Groups",
    "conditions": "ContractConditions(\"@1DeveloperCondition\")",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1groups$, Page:@1groups_list, Icon:\"icon-people\")",
            "Type": "menu"
        },
        {
            "Name": "groups",
            "Columns": "[\r\n    {\r\n        \"name\":\"creator\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"date_created\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"date_deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsDelete\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsDelete\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"ecosystem\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"group_access\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupAccessManager\\\")\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"group_info\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsCreate\\\")\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"name\":\"group_name\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"text\"\r\n    },\r\n    {\r\n        \"name\":\"group_type\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"image_id\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1GroupsCreate\\\")\", \"update\": \"ContractAccess(\\\"@1GroupsCreate\\\",\\\"@1GroupsDelete\\\",\\\"@1GroupAccessManager\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "groups_participants",
            "Columns": "[\r\n    {\r\n        \"name\":\"appointed\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"date_created\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"date_deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsUnassign\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"deleted\",\r\n        \"conditions\": \"ContractAccess(\\\"@1GroupsUnassign\\\")\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"ecosystem\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"number\"\r\n    },\r\n    {\r\n        \"name\":\"groups_info\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    },\r\n    {\r\n        \"name\":\"member\",\r\n        \"conditions\":\"false\",\r\n        \"type\":\"json\"\r\n    }\r\n]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractAccess(\\\"@1GroupsAssign\\\")\", \"update\": \"ContractAccess(\\\"@1GroupsUnassign\\\")\", \"new_column\": \"ContractConditions(\\\"@1AdminCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "groups_types",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "@1open_group,@1closed_group",
            "Type": "app_params"
        },
        {
            "Name": "groups_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Form(){\r\n    P(Class: text-muted h6 m0 mb-sm, Body: \"$@1keys_must_be_separated$\")\r\n    Input(Name: memberskeys, Type: textarea)\r\n    Button(Contract: @1GroupsAssignList, Class: btn btn-primary pull-right mt, Page: @1groups_view, Body: $@1members_add$, Params: \"gr_id=#v_group_id#\", PageParams: \"v_group_id=#v_group_id#\")\r\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"name\": \"Groups\", \"ecosystem\": 1}).Vars(application)\r\n\r\nIf(#Id#!=\"\"){\r\n    SetVar(v_group_id, #Id#)\r\n}\r\n\r\nIf(#v_group_id#>0){\r\n    DBFind(@1groups, src_groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_group_id#}).Columns(\"id,group_name,group_type,group_access,creator->member_id\").Vars(prefix)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id, 1)\r\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#group_id#>0,#prefix_deleted#==0)){\r\n        DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\":[{\"$in\": #prefix_group_access#}, {\"$eq\": #group_id#}]}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    Form(){\r\n        Div(row){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1group)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                Input(Type: hidden, Name: gr_id, Value: #prefix_id#)\r\n                SetVar(Name: var_prefix_group_name, Value: LangRes(#prefix_group_name#))\r\n                Input(Name: input_prefix_group_name, Value: #var_prefix_group_name#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1type)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                SetVar(Name: var_prefix_group_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: groups_types, Index: #prefix_group_type#))\r\n                Input(Name: input_prefix_group_type, Value: #var_prefix_group_type#, Disabled: 1)\r\n            }\r\n        }\r\n        Div(row mt-sm){\r\n            Div(col-md-3 mt-sm text-right){\r\n                Label(){\r\n                    LangRes(@1member)\r\n                    Span(Class: text-danger, Body:*)\r\n                }\r\n            }\r\n            Div(col-md-9 text-left){\r\n                If(GetVar(MemberId) == \"\"){\r\n                    SetVar(MemberId, 0)\r\n                }\r\n                Input(Name: member_id, Type:hidden, Value: #MemberId#)\r\n                Div(input-group){\r\n                    If(Or(#MemberId#>0,#MemberId#<0)){\r\n                        SetVar(AddressMemberId, Address(#MemberId#))\r\n                    }\r\n                    Input(Name: m_name, Disabled: 1, Placeholder: \"xxxx-xxxx-xxxx-xxxx-xxxx\", Value: #AddressMemberId#)\r\n                    Div(input-group-btn){\r\n                        Button(Class: btn bg-gray-lighter fa fa-caret-down buttons, Page: @1select_wallet, PageParams:\"back_page=@1groups_assign,back_header=$@1assign$,Id=#v_group_id#,EcosystemId=#ecosystem_id#\").Popup(Header: $@1member$, Width: \"50\")\r\n                    }.Style(\r\n                        .buttons {\r\n                            border: 1px solid #dde6e9;\r\n                            padding: 6px 16px;\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        If(#manager_id#>0){\r\n            Button(Body: LangRes(@1assign), Class: btn btn-primary pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\", Contract: @1GroupsAssign, Params: \"member_id=Val(member_id)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n        }\r\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({\"ecosystem\": 1, \"name\": \"Groups\"}).Vars(application)\r\nDBFind(@1roles, src_roles).Columns(\"id,role_name\").Where({\"ecosystem\": #ecosystem_id#, \"deleted\": 0}).Order(id)\r\nIf(#back_page#==\"\"){\r\n   SetVar(back_page, \"@1groups_list\")\r\n}\r\n\r\nIf(#gr_id#==\"\"){\r\n    SetVar(title, $@1new_group$)\r\n    DBFind(@1buffer_data).Columns(value).Where({\"ecosystem\": #ecosystem_id#, \"key\": \"group_access\", \"member_id\": #key_id#}).Columns(\"id,key,member_id,ecosystem,value->groups_access,value->group_information,value->group_type,value->group_name\").Vars(buffer)\r\n    AppParam(Source: type_group, Ecosystem: 1, App: #application_id#, Name: groups_types)\r\n    If(And(#buffer_value_groups_access#!=\"NULL\",#buffer_value_groups_access#!=\"\",#buffer_value_groups_access#!=\"[]\")){\r\n        DBFind(@1roles, src_roles_access).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #buffer_value_groups_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}.Else{\r\n    SetVar(title, $@1edit_group$)\r\n    DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #gr_id#}).Columns(\"id,group_name,group_type,group_info,group_access\").Vars(gr_e)\r\n    SetVar(type_group, AppParam(Ecosystem: 1, App: #application_id#, Name: groups_types, Index: #gr_e_group_type#))\r\n    If(And(#gr_e_group_access#!=\"NULL\",#gr_e_group_access#!=\"\",#gr_e_group_access#!=\"[]\")){\r\n        DBFind(@1roles, src_roles_access).Where({\"ecosystem\": #ecosystem_id#, \"id\": {\"$in\": #gr_e_group_access#}}).Columns(\"id,role_name\").Count(ra_count).Order(\"role_name\")\r\n    }\r\n}\r\n\r\nForm(){\r\n    Div(row){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1name)\r\n                Span(Class: text-danger, Body:*)  \r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#gr_id#==\"\"){\r\n                Input(Name: group_name, Value: #buffer_value_group_name#).Validate(minLength:3, maxLength:30)\r\n                InputErr(Name: group_name, minLength: $@1validate_role_name$, maxLength: $@1validate_role_name$)\r\n            }.Else{\r\n                Input(Name: e_group_name, Value: #gr_e_group_name#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1type)\r\n                Span(Class: text-danger, Body:*)  \r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            If(#gr_id#==\"\"){\r\n                Select(Name: group_type, Source: type_group, NameColumn: name, ValueColumn: id, Value: #buffer_value_group_type#)\r\n            }.Else{\r\n                Input(Name: e_group_type, Value: #type_group#, Disabled: 1)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt text-right){\r\n            Label(){\r\n                LangRes(@1group_info)\r\n            }\r\n        }\r\n        Div(col-md-9 text-left){ \r\n            If(#gr_id#==\"\"){\r\n                Input(Name: group_information, Type: textarea, Value: #buffer_value_group_information#)\r\n            }.Else{\r\n                Input(Name: group_information, Type: textarea, Value: #gr_e_group_info#)\r\n            }\r\n        }\r\n    }\r\n    Div(row mt-sm){\r\n        Div(col-md-3 mt-sm text-right){\r\n            Label(){\r\n                LangRes(@1group_access)\r\n                Span(Class: text-danger, Body:*) \r\n            }\r\n        }\r\n        Div(col-md-9 text-left){\r\n            Div(input-group mb-sm){\r\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\r\n                Div(input-group-btn){\r\n                    Button(Class: btn bg-gray-lighter fa fa-plus mtl buttons, Page: @1groups_create, Contract: @1GroupAccessManager, Params: \"ManagerRid=Val(roles_managers),Action=add,gr_id=#gr_id#\", PageParams: \"gr_id=#gr_id#\").Popup(50, #title#)\r\n                }\r\n            }\r\n            If(#ra_count#>0){\r\n                ForList(src_roles_access){\r\n                    SetVar(btn_class, \"bg-gray-lighter\")\r\n                    If(#id#==#role_id#){\r\n                        SetVar(btn_class, \"bg-primary\")\r\n                    }\r\n                    Button(Class: btn-xs #btn_class# mr-sm mb-sm, Page: @1groups_create, Contract: @1GroupAccessManager, Params: \"ManagerRid=#id#,Action=remove,gr_id=#gr_id#\", PageParams: \"gr_id=#gr_id#\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, #title#)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    If(#gr_id#==\"\"){\r\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract:GroupsCreate)\r\n    }.Else{\r\n        Button(Body: LangRes(@1edit), Class: btn btn-primary pull-right mt, Page: #back_page#, Contract:GroupsCreate, Params:\"gr_id=#gr_id#\")\r\n    }\r\n    Button(Body: LangRes(@1back), Class: btn bg-gray-lighter pull-right mt, Page: #back_page#)\r\n}.Style(\r\n    .buttons{border: 1px solid #dde6e9;}\r\n)",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1groups_list).(this_table, @1groups)\r\nInclude(@1pager_header)\r\n\r\nSetTitle($@1groups$)\r\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1group_desc$))\r\nAddToolButton(Page: @1groups_create, Icon: icon-plus, Title: $@1create$).Popup(50, $@1new_group$)\r\n\r\nIf(GetVar(search)){\r\n    SetVar(w_search, {\"group_name\": {\"$like\": \"#search#\"}})\r\n}\r\nSetVar(where, {\"ecosystem\": #ecosystem_id#, {GetVar(w_search)}})\r\n\r\nDiv(list-group-item ml-lg mr-lg pt-lg){\r\n    SetVar(search_name, $@1groups$)\r\n    Include(@1search)\r\n}\r\nDBFind(@1applications).Columns(\"id,name\").Where({\"ecosystem\": 1, \"name\": \"Groups\"}).Vars(application)\r\n\r\nDBFind(#this_table#, src_groups).Where(#where#).Order({\"deleted\": \"1\", \"id\": \"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,group_name,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,group_access,group_info,group_type\").Custom(_id){\r\n    If(#deleted# == 0){\r\n        SetVar(style_text, \"text-normal\").(style_link, \"text-primary\")\r\n    }.Else{\r\n        SetVar(style_text, \"text-muted\").(style_link, \"text-muted\")\r\n    }\r\n    Span(Class: #style_text#, Body: #id#)\r\n}.Custom(_creator){\r\n    If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\r\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\r\n            #creator.member_name#\r\n        }\r\n    }\r\n}.Custom(_name){\r\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1groups_view, PageParams: \"v_group_id=#id#\"){\r\n        If(#image_id#>0){\r\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\r\n            #group_name#\r\n        }.Else{\r\n            Div(Class: #style_link#){\r\n                Span(Class: fa icon-settings fa-2x mr-sm)\r\n            }.Style(\r\n                display: inline-block;\r\n            )\r\n            Span(Class: btn-link text-bold pb-sm){\r\n                Span(Class: #style_link#, Body: #group_name#)\r\n            }.Style(\r\n                display: inline-block;\r\n                vertical-align: top;\r\n                padding-top: 7px;\r\n                padding-left: 4px;\r\n            )\r\n        }\r\n    }\r\n}.Custom(_date){\r\n    Div(#style_text# small){\r\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        If(#deleted# == 1){\r\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\r\n        }\r\n    }\r\n}.Custom(_status){\r\n    Span(Class: #style_text#){\r\n        If(#deleted# == 0){\r\n            LangRes(@1active)\r\n        }.Else{\r\n            LangRes(@1deleted)\r\n        }\r\n    }\r\n}.Custom(_access){\r\n    If(#creator.member_id#==#key_id#){\r\n        SetVar(access,done)\r\n    }.Else{\r\n        SetVar(access,)\r\n    }\r\n    If(And(#group_access#!=\"NULL\",#group_access#!=\"\",#group_access#!=\"[]\")){\r\n        DBFind(@1roles,src_access_list).Where({\"id\": {\"$in\": #group_access#}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\r\n        Div(#style_text# breaker){\r\n            ForList(src_access_list){\r\n                If(#role_id#==#id#){\r\n                    SetVar(access,done)\r\n                }\r\n                If(#access_count#!=#src_access_list_index#){\r\n                    Span(\"#role_name#,\",mr-sm)\r\n                }.Else{\r\n                    #role_name#\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(_actions){\r\n    Div(text-right button-group text-nowrap){\r\n        If(#access#==\"done\"){\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter, Contract: @1GroupsDelete, Params: \"ops=D,gr_id=#id#\", Page: @1groups_list){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n                Button(Class: btn bg-gray-lighter mh-sm, PageParams: \"gr_id=#id#\", Page: @1groups_create){\r\n                    Em(Class: text-default fa fa-1x fa-edit)\r\n                }.Popup(50, $@1edit_group$)\r\n            }.ElseIf(#deleted#==1){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1GroupsDelete, Params: \"ops=R,gr_id=#id#\", Page: @1groups_list){\r\n                    Em(Class: text-info fa fa-1x fa-recycle)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}.Custom(type_group){\r\n    If(#deleted#==0){\r\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: groups_types, Index:#group_type#))\r\n    }.Else{\r\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: groups_types, Index:#group_type#), Class: text-muted)\r\n    }\r\n}.Custom(join_group){\r\n    If(#deleted# == 0){\r\n        DBFind(\"@1groups_participants\").Columns(\"id,groups_info,groups_info->id,deleted,member,member->member_id\").Where({\"groups_info->id\": #id#, \"deleted\": 0, \"member->member_id\": #key_id#}).Vars(j_l).Count(check_membership)\r\n        If(And(#group_type#==1,#check_membership#==0)){\r\n            Button(Body: $@1join_the_group$, Class: btn btn-link pull-right, Contract: @1GroupsAssign, Page: @1groups_view, PageParams: \"v_group_id=#id#\", Params: \"gr_id=#id#,member_id=#key_id#\")\r\n        }.ElseIf(And(#group_type# == 1,#check_membership# == 1)){\r\n            Button(Body: $@1leave_the_group$, Class: btn btn-link pull-right, Contract: @1GroupsUnassign, Page: @1groups_list, Params:\"row_id=#j_l_id#\")\r\n        }.ElseIf(And(#group_type# == 2,#check_membership# == 0)){\r\n            Button(Body: $@1send_request$, Class: btn btn-link pull-right, Contract: @1GroupRequestMembership, Page: @1groups_view, PageParams:\"v_group_id=#id#\", Params: \"gr_id=#id#\")\r\n        }\r\n    }\r\n}.Custom(gr_info){\r\n    If(#deleted#==0){\r\n        Span(Body: #group_info#)\r\n    }.Else{\r\n        Span(Body: #group_info#, Class: text-muted)\r\n    }\r\n}.Count(count)\r\n\r\nDiv(fullscreen){\r\n    Div(table-responsive ml-lg mr-lg){\r\n        Div(list-group-item){\r\n            If(#count# > 0){\r\n                Table(src_groups, \"$@1group$=_name,$@1type$=type_group,$@1id$=id,$@1group_info$=gr_info,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1access$=_access,=join_group,=_actions\")\r\n            }.ElseIf(#all_roles_count# > 0){\r\n                Div(Class: text-center h4 text-muted){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1group$ $@1not_founded$\")\r\n                }\r\n            }.Else{\r\n                Div(Class: text-center){\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1group$ $@1not_founded$\")\r\n                }\r\n            }\r\n        }.Style(\r\n            margin-top:-15px;\r\n            tbody > tr:nth-of-type(odd) {\r\n                background-color: #f8f9fc;\r\n            }\r\n        )\r\n    }\r\n}\r\nDiv(mt-sm ml-lg mr-sm mb-sm){\r\n    Include(@1pager)\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_request_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\r\n    DBFind(@1notifications).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_id#}).Columns(\"page_params->gr_id,page_params->decide,sender->image_id,recipient->member_name,recipient->member_id,recipient->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\r\n    \r\n    Div(row){\r\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\r\n            Form(panel panel-default){\r\n                Div(panel-heading text-center){\r\n                    If(#notific_page_params_decide# == 1){\r\n                        Span(Class: h3, Body: $@1your_request_approved$)\r\n                    }.ElseIf(#notific_page_params_decide# == -1){\r\n                        Span(Class: h3, Body: $@1your_request_denied$)\r\n                    }.Else{\r\n                        Span(Class: h3, Body: $@1request_group$)\r\n                    }\r\n                }\r\n                Div(panel-body){\r\n                    Div(form-group){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-sm text-center){\r\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                                    If(#notific_recipient_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#notific_recipient_member_name#}\r\n                                }.Else{\r\n                                    If(#notific_sender_image_id# > 0){\r\n                                        Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\r\n                                    }.Else{\r\n                                        Span(Class: fa icon-user fa-5x)\r\n                                    }\r\n                                    Div(m0 h4 text-bold){#notific_sender_member_name#}\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\r\n                        If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                            Span(Class: h5 text-bold, Body: Address(#notific_recipient_member_id#))\r\n                        }.Else{\r\n                            Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\r\n                        }\r\n                    }\r\n                    Div(list-group-item text-center){\r\n                        DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #notific_page_params_gr_id#}).Vars(group)\r\n                        Div(text-muted m0 h5, Body: $@1group$)\r\n                        Span(Class: h5 text-bold, Body: #group_group_name# (#group_id#))\r\n                    }\r\n                    If(#notific_closed# == 0){\r\n                        Div(row){\r\n                            Div(col-md-12 mt-lg text-center){\r\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\r\n                                    Button(Class: btn btn-primary mh-sm, Body: $@1close$, Contract: @1NotificationsClose, Page: @1notifications_list, Params: \"notific_id=#notific_id#\")\r\n                                }.Else{\r\n                                    Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"notific_id=#notific_id#,accept=0\")\r\n                                    Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"notific_id=#notific_id#,accept=1\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(page_par)!=\"\"){\r\n    SetVar(Name: v_group_id, Value: #page_par#)\r\n}\r\n\r\nIf(#v_group_id# > 0){\r\n    SetVar(this_page, @1groups_view).(this_table, @1groups_participants)\r\n    Include(@1pager_header)\r\n\r\n    DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": #v_group_id#}).Columns(\"group_name,group_type,deleted,group_access,creator->member_id\").Vars(prefix)\r\n    If(#prefix_creator_member_id#==#key_id#){\r\n        SetVar(manager_id,1)\r\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#group_id#>0,#prefix_deleted#==0)){\r\n        DBFind(@1groups).Where({\"ecosystem\": #ecosystem_id#, \"id\": [{\"$in\": #prefix_group_access#}, {\"$eq\": #group_id#}]}).Columns(\"id\").Vars(manager)\r\n    }\r\n\r\n    If(#manager_id#>0){\r\n        AddToolButton(Page: @1groups_assign, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\r\n        AddToolButton(Page: @1groups_add_members, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1members_add$).Popup(50, $@1add_members_to_group$)\r\n    }\r\n\r\n    SetTitle(\"$@1group$\": #prefix_group_name#)\r\n    Span(Class: h5 m0 mb ml-lg){\r\n        LinkPage(Class: ml-sm, Body: $@1groups$, Page: @1groups_list)\r\n        Span(Class: text-muted mh-sm, Body: /)\r\n        Span(Class: text-muted, Body: #prefix_group_name#)\r\n    }.Style(\r\n        display: inline-block;\r\n    )\r\n\r\n    If(GetVar(search)){\r\n        SetVar(w_search, {\"member->member_name\": {\"$like\": \"#search#\"}})\r\n    }\r\n    SetVar(where, {\"ecosystem\": #ecosystem_id#, \"groups_info->id\": #v_group_id#, {GetVar(w_search)}})\r\n\r\n    Div(list-group-item ml-lg mr-lg pt-lg){\r\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_group_id#)\r\n        Include(@1search)\r\n    }\r\n\r\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->member_id,groups_info,groups_info->id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\r\n        If(#deleted# == 0){\r\n            SetVar(Name: style_text, Value: \"text-normal\")\r\n            SetVar(Name: style_link, Value: \"text-primary\")\r\n        }.Else{\r\n            SetVar(Name: style_text, Value: \"text-muted\")\r\n            SetVar(Name: style_link, Value: \"text-muted\")\r\n        }\r\n        Span(Class: #style_text#, Body: #id#)\r\n    }.Custom(custom_appointed){\r\n        If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\r\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#appointed.member_id#\"){\r\n                Span(Body: #appointed.member_name#)\r\n            }\r\n        }\r\n    }.Custom(custom_member){\r\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\"){\r\n            If(#member.image_id#>0){\r\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\r\n                Span(#member.member_name#)\r\n            }.Else{\r\n                Div(){\r\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\r\n                    Span(#member.member_name#)\r\n                }.Style(display:flex; align-items:center;)\r\n            }\r\n        }\r\n    }.Custom(custom_address){\r\n        Span(Class: #style_text#, Body: Address(#member.member_id#))\r\n    }.Custom(custom_date){\r\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        If(#deleted# == 1){\r\n            Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\r\n        }\r\n    }.Custom(custom_status){\r\n        If(#deleted# == 0){\r\n            Span(Class: #style_text#, Body: LangRes(@1active))\r\n        }.Else{\r\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\r\n        }\r\n    }.Custom(actions){\r\n        Div(pull-right){\r\n            If(#deleted#==0){\r\n                Button(Class: btn bg-gray-lighter mh-sm, Contract: @1GroupsUnassign, Params: \"row_id=#id#\", Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\"){\r\n                    Em(Class: text-danger fa fa-1x fa-trash)\r\n                }.Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\r\n            }\r\n        }\r\n    }.Count(count)\r\n\r\n    Div(fullscreen){\r\n        Div(table-responsive ml-lg mr-lg){\r\n            Div(list-group-item){\r\n                If(#count# > 0){\r\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\r\n                }.Else{\r\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\r\n                }                       \r\n            }.Style(\r\n                margin-top:-15px;\r\n                tbody > tr:nth-of-type(odd) {\r\n                    background-color: #f8f9fc;\r\n                }\r\n            )\r\n        }\r\n    }\r\n    Div(mt-sm ml-lg mr-sm mb-sm){\r\n        Include(@1pager)\r\n    }\r\n}.Else{\r\n    Div(md-12 alert alert-danger text-center){\r\n        Span(Body: LangRes(@1attention))\r\n    }\r\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "GroupsAccessCheck",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAccessCheck {\r\n    data {\r\n        gr_id int\r\n    }\r\n\r\n    conditions {\r\n        var group map\r\n        group = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": $gr_id}).Columns(\"id,group_name,deleted,group_access,creator->member_id\").Row()\r\n        if !group {\r\n            warning Sprintf(\"%v: \" + \"group not found\", $this_contract)\r\n        }\r\n\r\n        if group[\"creator.member_id\"] == $key_id {\r\n            return\r\n        }\r\n\r\n        var gr_ids array\r\n        gr_ids = JSONDecode(group[\"group_access\"])\r\n        if !DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": {\"$in\": gr_ids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n            warning Sprintf(LangRes(\"@1group_change_no_permission\", \"en\"), group[\"group_name\"])\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupAccessManager",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupAccessManager {\r\n    data {\r\n        Action string\r\n        ManagerRid string \"optional\"\r\n        gr_id int \"optional\"\r\n        group_name string \"optional\"\r\n        group_type int \"optional\"\r\n        group_information string \"optional\"\r\n    }\r\n\r\n    func updateAccess(ra array) {\r\n        var roles_access string\r\n        roles_access = JSONEncode(ra)\r\n        DBUpdate(\"@1groups\", $gr_id, {\"group_access\": roles_access})\r\n    }\r\n\r\n    func updateBufferAccess(ra array) {\r\n        var groups_access string\r\n        groups_access = JSONEncode(ra)\r\n        var filled map\r\n        filled[\"groups_access\"] = groups_access\r\n        filled[\"group_name\"] = $group_name\r\n        filled[\"group_type\"] = $group_type\r\n        filled[\"group_information\"] = $group_information\r\n        if !$buffer_id {\r\n            DBInsert(\"@1buffer_data\", {\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\", \"value\": filled})\r\n        } else {\r\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": filled})\r\n        }\r\n    }\r\n\r\n    conditions {\r\n        $ManagerRid = Int($ManagerRid)\r\n        if $gr_id > 0 {\r\n            @1GroupsAccessCheck(\"gr_id\", $gr_id)\r\n            $role = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": $gr_id}).Columns(\"id,group_access\").Row()\r\n            if !$role {\r\n                warning LangRes(\"@1group\" \"@1not_founded\", \"en\")\r\n            }\r\n            if $ManagerRid > 0 {\r\n                if !DBFind(\"@1roles\").Where({\"ecosystem\": $ecosystem_id, \"id\": $ManagerRid}).One(\"id\") {\r\n                    warning LangRes(\"@1role_not_found\", \"en\")\r\n                }\r\n            }\r\n            var ids array, i int\r\n            $ids = ids\r\n            ids = JSONDecode($role[\"group_access\"])\r\n            while i < Len(ids){\r\n                if ids[i] > 0 {\r\n                    $ids = Append($ids, ids[i])\r\n                }\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            $buffer_managers = 0\r\n            $buffer_id = 0\r\n            $ids = []\r\n            var buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\r\n            if buffer {\r\n                $buffer_managers = buffer[\"value.groups_access\"]\r\n                $buffer_id = buffer[\"id\"]\r\n            }\r\n        }\r\n    }\r\n\r\n    action {\r\n        if $gr_id == 0 {\r\n            if $buffer_managers {\r\n                $ids = JSONDecode($buffer_managers)\r\n            }\r\n        }\r\n        if $ManagerRid > 0 {\r\n            var i int idsNew array\r\n            if $Action == \"remove\" {\r\n                while i < Len($ids) {\r\n                    if $ids[i] != $ManagerRid{\r\n                        idsNew = Append(idsNew, $ids[i])\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if $gr_id == 0 {\r\n                    updateBufferAccess(idsNew)\r\n                } else {\r\n                    updateAccess(idsNew)\r\n                }\r\n            }\r\n            if $Action == \"add\" {\r\n                var double bool\r\n                while i < Len($ids) {\r\n                    if $ids[i] == $ManagerRid{\r\n                        double = true\r\n                    }\r\n                    i = i + 1\r\n                }\r\n                if !double {\r\n                    $ids = Append($ids, $ManagerRid)\r\n                }\r\n                if $gr_id == 0 {\r\n                    updateBufferAccess($ids)\r\n                } else {\r\n                    updateAccess($ids)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestMembership",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupRequestMembership {\r\n    data {\r\n        gr_id int\r\n    }\r\n\r\n    conditions {\r\n        $group = DBFind(\"@1groups\").Where({\"id\": $gr_id}).Columns(\"id,deleted,group_type,group_name,image_id,creator->member_id,group_access,group_name\").Row()\r\n        if !$group {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $key_id}).Row() {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n        if $group[\"deleted\"] == 1 {\r\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\r\n        }\r\n        $check_join = DBFind(\"@1groups_participants\").Where({\"deleted\": 0, \"member->member_id\": $key_id, \"groups_info->id\": $gr_id, \"ecosystem\": $ecosystem_id}).Columns(\"id,deleted,member,member->member_id,groups_info,groups_info->id,ecosystem\").One(\"id\")\r\n        if $check_join {\r\n            warning LangRes(\"@1already_group\", \"en\")\r\n        }\r\n        $check_send_notific = DBFind(\"@1notifications\").Where({\"sender->member_id\": $key_id, \"page_params->gr_id\": $gr_id, \"closed\": 0, \"ecosystem\": $ecosystem_id}).Columns(\"id,closed,ecosystem,sender,sender->member_id,page_params->gr_id\").One(\"id\")\r\n        if $check_send_notific {\r\n            info LangRes(\"@1request_to_group\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        var gr_ids array i int icon header body page ecoName string\r\n\r\n        var params map\r\n        params[\"gr_id\"] = $gr_id\r\n        params[\"member_id\"] = $key_id\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"New request\"\r\n        body = Sprintf(\"New request to the group %t\",$group[\"group_name\"])\r\n        page = \"@1groups_request_view\"\r\n\r\n        gr_ids = JSONDecode($group[\"group_access\"])\r\n        if Len(gr_ids) > 0 {\r\n            while i < Len(gr_ids) {\r\n                var id_role int\r\n                id_role = Int(gr_ids[i])\r\n                @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,eco_id,closure_type\", id_role, 1, icon, header, body, page, params, $ecosystem_id,1)\r\n                i = i + 1\r\n            }\r\n        } else{\r\n            $creator_id = Int($group[\"creator.member_id\"])\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", $creator_id, 1, icon, header, body, page, params, $ecosystem_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAssign {\r\n    data {\r\n        gr_id int\r\n        member_id int\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        $group = DBFind(\"@1groups\").Where({\"id\": $gr_id}).Columns(\"id,deleted,group_type,group_name,image_id,creator->member_id\").Row()\r\n        if !$group {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if !DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": $member_id}).Row() {\r\n            warning LangRes(\"@1key_not_found\", \"en\")\r\n        }\r\n        if Int($group[\"deleted\"]) == 1 {\r\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\r\n        }\r\n        if Int($group[\"group_type\"]) != 1 {\r\n            @1GroupsAccessCheck(\"gr_id\", $gr_id)\r\n        }\r\n    }\r\n\r\n    action {\r\n        if DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"groups_info->id\": $gr_id, \"member->member_id\": $member_id, \"deleted\": 0}).One(\"id\") {\r\n            // do not re-assign and do not warning because this contract may be called for other\r\n            return\r\n        }\r\n\r\n        var group member appointer map\r\n        group[\"id\"] = $group[\"id\"]\r\n        group[\"type\"] = $group[\"group_type\"]\r\n        group[\"name\"] = $group[\"group_name\"]\r\n        group[\"image_id\"] = $group[\"image_id\"]\r\n        member = getMemberInfo($member_id)\r\n        appointer = getMemberInfo($key_id)\r\n\r\n        var m map\r\n        m[\"groups_info\"] = group\r\n        m[\"member\"] = member\r\n        m[\"appointed\"] = appointer\r\n        m[\"date_created\"] = $block_time\r\n        m[\"ecosystem\"] = $ecosystem_id\r\n        DBInsert(\"@1groups_participants\", m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestDecide",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupRequestDecide {\r\n    data {\r\n        notific_id int\r\n        accept int\r\n    }\r\n\r\n    conditions {\r\n        $notific = DBFind(\"@1notifications\").WhereId($notific_id).Columns(\"id,closed,page_params->gr_id,page_params->member_id,sender,sender->member_id,recipient,recipient->role_id\").Row()\r\n        if $notific[\"closed\"] == 1 {\r\n            warning LangRes(\"@1request_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action {\r\n        $gr_id = Int($notific[\"page_params.gr_id\"])\r\n        $member_id = Int($notific[\"page_params.member_id\"])\r\n        if $accept == 1 {\r\n            @1GroupsAssign(\"gr_id,member_id\", $gr_id, $member_id)\r\n        }\r\n        var params map\r\n        params[\"gr_id\"] = $gr_id\r\n        if $accept == 1 {\r\n            params[\"decide\"] = 1\r\n        } else {\r\n            params[\"decide\"] = -1\r\n        }\r\n        var icon header body page ecoName string member int\r\n        icon = \"icon icon-user-follow\"\r\n        header = \"Request to group\"\r\n        body = \"Solution for your request\"\r\n        page = \"@1groups_request_view\"\r\n        member = Int($notific[\"sender.member_id\"])\r\n        if $notific[\"recipient.role_id\"] > 0 {\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id,current_role_id\", member, 2, icon, header, body, page, params, $ecosystem_id, Int($notific[\"recipient.role_id\"]))\r\n            @1NotificationsProcess(\"notific_id\", $notific_id)\r\n            @1NotificationsClose(\"notific_id\", $notific_id)\r\n        } else{\r\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\", member, 1, icon, header, body, page, params, $ecosystem_id)\r\n            @1NotificationsClose(\"notific_id\", $notific_id)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssignList",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsAssignList {\r\n    data {\r\n        memberskeys string\r\n        gr_id int\r\n    }\r\n\r\n    func addPub(pub_key string) {\r\n        if HasPrefix(pub_key, \"04\") {\r\n            pub_key = Substr(pub_key, 2, Size(pub_key) - 2)\r\n        }\r\n        if Size(pub_key) < 128 {\r\n            warning LangRes(\"@1key_too_short\", \"en\")\r\n        }\r\n        if Size(pub_key) > 128 {\r\n            warning LangRes(\"@1key_too_long\", \"en\")\r\n        }\r\n\r\n        var k_id int\r\n        k_id = PubToID(pub_key)\r\n        if k_id == 0 {\r\n            warning LangRes(\"@1public_key_invalid\", \"en\")\r\n        }\r\n        $check_user = DBFind(\"@1keys\").Where({\"id\": k_id, \"ecosystem\": $ecosystem_id})\r\n        if !$check_user {\r\n            warning Sprintf(\"%v: \" + \"key not found\", pub_key)\r\n        }\r\n\r\n        @1GroupsAssign(\"gr_id,member_id\",$gr_id,k_id)\r\n    }\r\n\r\n    conditions {\r\n        if $memberskeys == \"\" {\r\n            warning LangRes(\"@1public_key_empty\", \"en\")\r\n        }\r\n        $memberskeys = Replace($memberskeys, \" \", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\n\", \"\")\r\n        $memberskeys = Replace($memberskeys, \"\\r\", \"\")\r\n    }\r\n\r\n    action {\r\n        if Contains($memberskeys, \",\") {\r\n            var pub_array array i int\r\n            pub_array = Split($memberskeys, \",\")\r\n            while i < Len(pub_array) {\r\n                var pub_key string\r\n                pub_key = Str(pub_array[i])\r\n                addPub(pub_key)\r\n                i = i + 1\r\n            }\r\n        } else {\r\n            addPub($memberskeys)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsCreate",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsCreate {\r\n    data {\r\n        group_name string \"optional\"\r\n        group_type int \"optional\"\r\n        group_information string \"optional\"\r\n        gr_id int \"optional\"\r\n    }\r\n\r\n    func getMemberInfo(kid int) map {\r\n        var res member map\r\n        member = DBFind(\"@1members\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n        if member {\r\n            res[\"member_id\"] = member[\"id\"]\r\n            res[\"member_name\"] = member[\"member_name\"]\r\n            res[\"image_id\"] = member[\"image_id\"]\r\n        } else {\r\n            member = DBFind(\"@1keys\").Where({\"ecosystem\": $ecosystem_id, \"id\": kid}).Row()\r\n            if member {\r\n                res[\"member_id\"] = member[\"id\"]\r\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\r\n                res[\"image_id\"] = 0\r\n            }\r\n        }\r\n        return res\r\n    }\r\n\r\n    conditions {\r\n        if $gr_id == 0 {\r\n            if $group_name == \"\" {\r\n                info LangRes(\"@1group_name_cannot_be_empty\", \"en\")\r\n            }\r\n            if $group_type == 0 {\r\n                info LangRes(\"@1group_type_error\", \"en\")\r\n            }\r\n        }\r\n        $check_access = EcosysParam(\"role_creates_groups\")\r\n        if $check_access && Str($check_access) != \"0\" {\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+$check_access+\"]\")  \r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\":rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        } else {\r\n            var admin_id int\r\n            admin_id = EcosysParam(\"role_admin\")\r\n            var rids array\r\n            rids = JSONDecode(\"[\"+admin_id+\"]\")  \r\n            if !DBFind(\"@1roles_participants\").Where({\"ecosystem\": $ecosystem_id, \"role->id\": {\"$in\": rids}, \"member->member_id\": $key_id, \"deleted\": 0}).Row() {\r\n                warning LangRes(\"@1access_denied\", \"en\")\r\n            }\r\n        }\r\n        if $group_name == DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"group_name\": $group_name}).One(\"group_name\") {\r\n            warning LangRes(\"@1group_name_already\", \"en\")\r\n        }\r\n    }\r\n\r\n    action { \r\n        if $gr_id == 0 {\r\n            var roles_access_arr array, buffer map\r\n            buffer = DBFind(\"@1buffer_data\").Where({\"ecosystem\": $ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\r\n            if buffer {\r\n                roles_access_arr = JSONDecode(buffer[\"value.groups_access\"])\r\n                var filled map\r\n                filled[\"groups_access\"] = []\r\n                filled[\"group_name\"] = \"\"\r\n                filled[\"group_type\"] = \"\"\r\n                filled[\"group_information\"] = \"\"\r\n                DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": filled})\r\n            }\r\n\r\n            var m map\r\n            m[\"creator\"] = getMemberInfo($key_id)\r\n            m[\"group_name\"] = $group_name\r\n            m[\"group_type\"] = $group_type\r\n            m[\"date_created\"] = $block_time\r\n            m[\"group_access\"] = JSONEncode(roles_access_arr)\r\n            m[\"group_info\"] = $group_information\r\n            m[\"ecosystem\"] = $ecosystem_id\r\n            DBInsert(\"@1groups\", m)\r\n        } else {\r\n            var m map\r\n            m[\"group_info\"] = $group_information\r\n            DBUpdate(\"@1groups\",$gr_id, m)\r\n        }\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsUnassign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsUnassign {\r\n    data {\r\n        row_id int\r\n    }\r\n\r\n    conditions {\r\n        var assigned map\r\n        assigned = DBFind(\"@1groups_participants\").Where({\"ecosystem\": $ecosystem_id, \"id\": $row_id, \"deleted\": 0}).Columns(\"id,ecosystem,deleted,groups_info->id,member->member_id\").Row()\r\n        if !assigned {\r\n            warning LangRes(\"@1group_participant_not_found\", \"en\")\r\n        }\r\n\r\n        var buffer_id int group map\r\n        buffer_id = Int(assigned[\"groups_info.id\"])\r\n        group = DBFind(\"@1groups\").Where({\"ecosystem\": $ecosystem_id, \"id\": buffer_id}).One(\"id\")\r\n        $groupId = Int(group[\"id\"])\r\n        $groupType = Int(group[\"group_type\"])\r\n\r\n        if $groupId == 0 {\r\n            warning LangRes(\"@1group_not_found\", \"en\")\r\n        }\r\n        if $groupType == 1 {\r\n            if Int(assigned[\"member.member_id\"]) != $key_id {\r\n                @1GroupsAccessCheck(\"gr_id\", $groupId)\r\n            }\r\n        } else {\r\n            @1GroupsAccessCheck(\"gr_id\", $groupId)\r\n        }\r\n    }\r\n\r\n    action {\r\n        var m map\r\n        m[\"deleted\"] = 1\r\n        m[\"date_deleted\"] = $block_time\r\n        DBUpdate(\"@1groups_participants\", $row_id, m)\r\n    }\r\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsDelete",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "contract GroupsDelete {\r\n    data {\r\n        gr_id int\r\n        ops string\r\n    }\r\n\r\n    conditions {\r\n        @1GroupsAccessCheck(\"gr_id\", $gr_id)\r\n    }\r\n\r\n    action {\r\n        // delete all participants\r\n        var participants array i int\r\n        participants = DBFind(\"@1groups_participants\").Where({\"groups_info->id\": $gr_id, \"deleted\": 0}).Columns(\"id\")\r\n        while i < Len(participants) {\r\n            var p map\r\n            p = participants[i]\r\n            @1GroupsUnassign(\"row_id\", Int(p[\"id\"]))\r\n            i = i + 1\r\n        }\r\n\r\n        var m map\r\n        if $ops == \"D\" {\r\n            m[\"deleted\"] = 1\r\n            m[\"date_deleted\"] = $block_time\r\n        }\r\n        if $ops == \"R\" {\r\n            m[\"deleted\"] = 0\r\n        }\r\n        DBUpdate(\"@1groups\", $gr_id, m)\r\n    }\r\n}",
            "Type": "contracts"
        }
    ]
}