{
    "name": "Groups",
    "data": [
        {
            "Name": "default_menu",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "MenuItem(Title:$@1groups$, Page:@1groups_list, Icon:\"icon-people\")",
            "Type": "menu"
        },
        {
            "Name": "groups",
            "Columns": "[{\"name\":\"creator\",\"conditions\":\"true\",\"type\":\"json\"},{\"name\":\"date_created\",\"conditions\":\"true\",\"type\":\"datetime\"},{\"name\":\"date_deleted\",\"conditions\":\"true\",\"type\":\"datetime\"},{\"name\":\"deleted\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"ecosystem\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"group_access\",\"conditions\":\"true\",\"type\":\"json\"},{\"name\":\"group_info\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"text\"},{\"name\":\"group_name\",\"conditions\":\"true\",\"type\":\"text\"},{\"name\":\"group_type\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"number\"},{\"name\":\"image_id\",\"conditions\":\"true\",\"type\":\"number\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"ContractConditions(\\\"MainCondition\\\")\", \"update\": \"ContractConditions(\\\"MainCondition\\\")\", \"new_column\": \"ContractConditions(\\\"MainCondition\\\")\"}",
            "Type": "tables"
        },
        {
            "Name": "groups_participants",
            "Columns": "[{\"name\":\"appointed\",\"conditions\":\"true\",\"type\":\"json\"},{\"name\":\"date_created\",\"conditions\":\"true\",\"type\":\"datetime\"},{\"name\":\"date_deleted\",\"conditions\":\"true\",\"type\":\"datetime\"},{\"name\":\"deleted\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"ecosystem\",\"conditions\":\"true\",\"type\":\"number\"},{\"name\":\"groups_info\",\"conditions\":\"{\\\"update\\\":\\\"true\\\",\\\"read\\\":\\\"true\\\"}\",\"type\":\"json\"},{\"name\":\"member\",\"conditions\":\"true\",\"type\":\"json\"}]",
            "Permissions": "{\"read\": \"true\", \"insert\": \"true\", \"update\": \"true\", \"new_column\": \"true\"}",
            "Type": "tables"
        },
        {
            "Name": "type_groups",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Open group,Closed group",
            "Type": "app_params"
        },
        {
            "Name": "group_add_members",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(type_add)==\"\"){\n    SetVar(type_add,0)\n}\nDiv(mt-sm col-md-12 pb-xl pl0){\n    If(#type_add# == 0){\n        Button($@1add_user_by_pubkey$, Class: btn btn-primary disabled)\n        Button($@1add_user_by_list$, Class: btn btn-primary,Page:@1group_add_members,PageParams:\"type_add=1,v_group_id=#v_group_id#\").Popup(50, $@1add_members_to_group$)\n    }.Else{\n        Button($@1add_user_by_pubkey$, Class: btn btn-primary,Page:@1group_add_members,PageParams:\"type_add=0,v_group_id=#v_group_id#\").Popup(50, $@1add_members_to_group$)\n        Button($@1add_user_by_list$, Class: btn btn-primary disabled)\n    }\n}\nIf(#type_add# == 0){\n    Form(){\n        Div(){\n            P(Class: text-muted h6 m0, Body: \"$@1keys_must_be_separated$\")\n        }.Style(padding-bottom:5px;)\n        Input(Name: memberskeys, Type: textarea)\n        Button(Contract: @1MembershipAddGroup, Class: btn btn-primary pull-right mt, Page:@1groups_view, Body: $@1members_add$,Params: \"gr_id=#v_group_id#\",PageParams: \"v_group_id=#v_group_id#\")\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view,PageParams:\"v_group_id=#v_group_id#\")\n    }\n}.Else{\n    Form(){\n        DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#}).Columns(\"id\").Custom(_name){\n            SetVar(m_id, 0)\n            DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\n            Address(#id#)\n            If(Or(#m_id#>0,#m_id#<0)){\n                \" (#m_member_name#)\"\n            }\n        }.Custom(_cbox){\n            Input(Name:cboxmembers,Type:checkbox,Value: id)\n        }\n        Table(Source: src_keys,\"$@1id$=id,$@1name$=_name,=_cbox\").Style(\n            tr > *:last-child {\n                padding-right:20px;\n                text-align:right;\n            }\n        )\n        Div(Class: mt-sm){\n            Button(Contract: @1MembershipAddGroup, Class: btn btn-primary pull-right mt, Page:@1groups_view, Body: $@1members_add$,Params: \"gr_id=#v_group_id#\",PageParams: \"v_group_id=#v_group_id#\")\n            Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view,PageParams:\"v_group_id=#v_group_id#\")\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_assign",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"name,id\").Where({name:\"Groups\", ecosystem:1}).Vars(application)\n\nIf(#v_group_id#>0){\n    DBFind(@1groups,src_groups).Where({ecosystem:#ecosystem_id#, id:#v_group_id#}).Columns(\"id,group_name,group_type,group_access,creator->member_id\").Vars(prefix)\n\n    If(#prefix_creator_member_id#==#key_id#){\n        SetVar(manager_id,1)\n    }.ElseIf(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#group_id#>0)){\n        DBFind(@1groups).Where({ecosystem:#ecosystem_id#, id:[{\"$in\": #prefix_group_access#}, {\"$eq\":#group_id#}]}).Columns(\"id\").Vars(manager)\n    }.Else{\n        SetVar(manager_id,0)\n    }\n    Form(){\n        Div(row){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    Span(Body: $@1group$)\n                    Span(Class: text-danger, Body:*)\n                }\n            }\n            Div(col-md-9 text-left){\n                Input(Type: hidden, Name: gr_id, Value: #prefix_id#)\n                SetVar(Name: var_prefix_group_name, Value: LangRes(#prefix_group_name#))\n                Input(Name: input_prefix_group_name, Value: #var_prefix_group_name#, Disabled: true)\n            }\n        }\n        Div(row mt-sm){\n            Div(col-md-3 mt-sm text-right){\n                Label(){\n                    LangRes(@1type) Span(*,text-danger)\n                }\n            }\n            Div(col-md-9 text-left){\n                SetVar(Name: var_prefix_group_type, Value: AppParam(Ecosystem:1, App:#application_id#, Name: type_groups, Index: #prefix_group_type#))\n                Input(Name: input_prefix_group_type, Value: #var_prefix_group_type#, Disabled: true)\n                If(#manager_id#==0){\n                    P(Class: m0 text-danger h6, Body: LangRes(@1appointment_impossible))\n                }\n            }\n        }\n        If(#manager_id#>0){\n            SetVar(participants,0)\n            DBFind(@1groups_participants).Where({\"groups_info->id\":#v_role_id#, deleted:0, ecosystem:#ecosystem_id#}).Columns(\"groups_info->id,id,member->member_id\").Custom(_id){\n                SetVar(participants,\"#participants#,#member.member_id#\")\n            }\n            DBFind(@1keys,src_keys).Where({ecosystem:#ecosystem_id#, id:{\"$nin\":[#participants#]}}).Columns(\"id\").Custom(_name){\n                SetVar(m_id, 0)\n                DBFind(@1members).Where({ecosystem:#ecosystem_id#, id:#id#}).Columns(\"id,member_name\").Vars(m)\n                Address(#id#)\n                If(Or(#m_id#>0,#m_id#<0)){\n                    \" (#m_member_name#)\"\n                }\n            }\n            Div(row mt-sm){\n                Div(col-md-3 mt-sm text-right){\n                    Label(){\n                        Span(Body: LangRes(@1member)).(Class: text-danger, Body:*)\n                    }\n                }\n                Div(col-md-9 text-left){\n                    Select(Name: member_id, Source: src_keys, NameColumn: _name, ValueColumn: id)\n                }\n            }\n        }\n        If(#manager_id#>0){\n            Button(Body: LangRes(@1assign), Class: btn btn-primary pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\", Contract: @1GroupsAssign, Params: \"member_id=Val(member_id)\").Alert(Text: \"$@1want_assign_member_to_role$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n        }\n        Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\")\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_create",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "DBFind(@1applications).Columns(\"id,name\").Where({ecosystem:1, \"name\": \"Groups\"}).Vars(application)\nDBFind(@1roles, src_roles).Columns(\"id,role_name\").Where({ecosystem:#ecosystem_id#, \"deleted\":0}).Order(id)\n\nIf(#gr_id# > 0){\n    DBFind(@1groups).Columns(\"id,group_name,group_type,group_info,group_access\").WhereId(#gr_id#).Vars(gr_e)\n}.Else{\n    DBFind(@1buffer_data).Columns(value).Where({ecosystem:#ecosystem_id#, \"key\": \"group_access\", \"member_id\": #key_id#}).Columns(\"id,key,member_id,ecosystem,value->groups_access,value->group_information,value->group_type,value->group_name\").Vars(buffer)\n}\nForm(){\n    Div(row){\n        Div(col-md-2 mt-sm text-right){\n            Label(){\n                LangRes(@1name)   \n            }\n        }\n        Div(col-md-10 mt-sm text-left){ \n            If(#gr_e_id# > 0){\n                Input(Name: e_group_name,Value: #gr_e_group_name#,Disabled: true)\n            }.Else{\n                Input(Name: group_name,Value: #buffer_value_group_name#).Validate(minLength:3)\n                InputErr(Name: group_name, minLength: \"Group name too short\")  \n            }\n        }\n    }\n    Div(row mt-sm){\n        Div(col-md-2 mt-sm text-right){\n            Label(){\n                $@1type$        \n            }\n        }\n        Div(col-md-10 text-left mt-sm){ \n            If(#gr_e_id# > 0){\n                Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: type_groups,Index:#gr_e_group_type#))\n            }.Else{\n                AppParam(Ecosystem:1, App: #application_id#, Name: type_groups, Source: type_group)\n                Select(Name: group_type,Source: type_group,NameColumn: name,ValueColumn: id,Value: #buffer_value_group_type#) \n            } \n        }\n    }\n    Div(row mt-sm){\n        Div(col-md-2 mt-sm text-right){\n            Label(){\n                $@1group_info$         \n            }\n        }\n        Div(col-md-10 mt-sm text-left){ \n            If(#gr_e_id# > 0){\n                Input(Name: group_information,Type: textarea,Value: #gr_e_group_info#)  \n            }.Else{\n                Input(Name: group_information,Type: textarea,Value: #buffer_value_group_information#)  \n            }\n        }\n    }\n    Div(row mt-sm){\n        Div(col-md-2 mt-sm text-right){\n            Label(){\n                $@1group_access$\n            }\n        }\n        Div(col-md-10 mt-sm text-left){\n            Div(input-group mb-sm){\n                Select(Name: roles_managers, Source: src_roles, NameColumn: role_name, ValueColumn: id)\n                Div(input-group-btn){\n                    Button(Class: btn btn-primary fa fa-plus, Page: @1groups_create, Contract: @1GroupAccessManager, Params:\"ManagerRid=Val(roles_managers),Action=add,gr_id=#gr_id#\",PageParams: \"gr_id=#gr_id#\").Popup(50, $@new_group$)\n                }\n            }\n            If(And(#gr_e_id# > 0,#gr_e_group_access#!=\"NULL\",#gr_e_group_access#!=\"\",#gr_e_group_access#!=\"[]\",GetVar(gr_e_group_access)!=\"\")){\n                DBFind(@1roles, src_roles_access).Columns(\"id,role_name\").Where({ecosystem:#ecosystem_id#, \"id\": {\"$in\": #gr_e_group_access#}}).Order(role_name)\n            }.Else{\n                If(And(#buffer_value_groups_access#!=\"NULL\",#buffer_value_groups_access#!=\"\",#buffer_value_groups_access#!=\"[]\",GetVar(buffer_value_groups_access)!=\"\")){\n                    DBFind(@1roles, src_roles_access).Columns(\"id,role_name\").Where({ecosystem:#ecosystem_id#, \"id\": {\"$in\": #buffer_value_groups_access#}}).Order(role_name)\n                }\n            }\n            ForList(src_roles_access){\n                SetVar(btn_class,\"btn-default\")\n                If(#id#==#role_id#){\n                    SetVar(btn_class,\"btn-info\")\n                }\n                Button(Class: btn #btn_class# mr-sm mb-sm, Page: @1groups_create, Contract: @1GroupAccessManager, Params:\"ManagerRid=#id#,Action=remove,gr_id=#gr_id#\",PageParams: \"gr_id=#gr_id#\", Body: Span(Class: fa fa-remove) #role_name#).Popup(50, $@new_group$)\n            }\n        }\n    }\n    If(#gr_e_id# > 0){\n        Button(Body: LangRes(@1edit), Class: btn btn-primary pull-right mt, Page: @1groups_list,Contract:GroupsCreate,Params:\"gr_id=#gr_id#\")\n    }.Else{\n        Button(Body: LangRes(@1create), Class: btn btn-primary pull-right mt, Page: @1groups_list,Contract:GroupsCreate)\n    }\n    Button(Body: LangRes(@1back), Class: btn btn-default pull-right mt, Page: @1groups_list)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_list",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "SetVar(this_page, @1groups_list).(this_table, @1groups)\nInclude(@1pager_header)\n\nSetTitle($@1groups$)\nSpan(Class: text-muted h5 m0 mb ml-lg, Body: Span(Class: ml-sm, Body: $@1group_desc$))\nAddToolButton(Page: @1groups_create, Icon: icon-plus, Title: $@1create$).Popup(50, $new_group$)\n\nIf(GetVar(search)){\n    SetVar(where, \"{group_name:{$like:#search#}, ecosystem:#ecosystem_id#}\")\n}.Else{\n    SetVar(where, \"{id:{$neq:0}, ecosystem:#ecosystem_id#}\").(search,)\n}\n\nDiv(list-group-item ml-lg mr-lg pt-lg){\n    SetVar(search_name, $@1groups$)\n    Include(@1search)\n}\nDBFind(@1applications).Columns(\"id,name\").Where({ecosystem:1, \"name\": \"Groups\"}).Vars(application)\n\nDBFind(#this_table#, src_groups).Where(#where#).Order({deleted:\"1\", id:\"1\"}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,group_name,image_id,creator->member_id,creator->member_name,date_created,date_deleted,deleted,group_access,group_info,group_type\").Custom(_id){\n    If(#deleted# == 0){\n        SetVar(style_text,).(style_link,\"text-primary\")\n    }.Else{\n        SetVar(style_text,\"text-muted\").(style_link,\"text-muted\")\n    }\n    Span(Class: #style_text#, Body: #id#)\n}.Custom(_creator){\n    If(And(#creator.member_name#!=NULL,#creator.member_name#!=\"\")){\n        LinkPage(Class: #style_link# text-bold, Page: @1profile_view, PageParams: \"v_key_id=#creator.member_id#\"){\n            #creator.member_name#\n        }\n    }\n}.Custom(_name){\n    LinkPage(Class: #style_link# h5 text-bold, Page: @1groups_view, PageParams: \"v_group_id=#id#\"){\n        If(#image_id#>0){\n            Image(Src: Binary().ById(#image_id#), Class: mr-sm).Style(width: 30px; border: 1px solid #5A5D63;)\n            #group_name#\n        }.Else{\n            Div(Class: text-primary){\n                Span(Class: fa icon-settings fa-2x mr-sm)\n            }.Style(\n                display: inline-block;\n            )\n            Div(Class: text-primary){\n                Span(Class: btn-link text-bold pb-sm, Body: #group_name#)\n            }.Style(\n                display: inline-block;\n                vertical-align: top;\n                padding-top: 7px;\n                padding-left: 4px;\n            )\n        }\n    }\n}.Custom(_date){\n    Div(#style_text# small){\n        Div(text-nowrap){DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\")}\n        If(#deleted# == 1){\n            Div(text-nowrap){DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\")}\n        }\n    }\n}.Custom(_status){\n    Span(Class:#style_text#){\n        If(#deleted# == 0){\n            LangRes(@1active)\n        }.Else{\n            LangRes(@1deleted)\n        }\n    }\n}.Custom(_access){\n    If(#creator.member_id#==#key_id#){\n        SetVar(access,done)\n    }.Else{\n        SetVar(access,)\n    }\n    If(And(#group_access#!=\"NULL\",#group_access#!=\"\",#group_access#!=\"[]\")){\n        DBFind(@1roles,src_access_list).Where({id:{\"$in\":#group_access#}}).Columns(\"id,role_name\").Count(access_count).Order(role_name)\n        Div(#style_text# breaker){\n            ForList(src_access_list){\n                If(#role_id#==#id#){\n                    SetVar(access,done)\n                }\n\n                If(#access_count#!=#src_access_list_index#){\n                    Span(\"#role_name#,\",mr-sm)\n                }.Else{\n                    #role_name#\n                }\n            }\n        }\n    }\n}.Custom(_actions){\n    Div(text-right button-group text-nowrap){\n        If(#access#==\"done\"){\n            If(#deleted#==0){\n                Button(Class: fa fa-trash btn btn-danger mh-sm, Contract: @1GroupsDelete, Params: \"ops=D,gr_id=#id#\", Page: @1groups_list).Alert(Text: \"$@1sure_want_delete$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }.ElseIf(#deleted#==1){\n                Button(Class: fa fa-recycle btn btn-info mh-sm, Contract: @1GroupsDelete, Params: \"ops=R,gr_id=#id#\", Page: @1groups_list)\n            }\n            Button(Class: fa fa-edit btn btn-default mh-sm, PageParams: \"gr_id=#id#\", Page: @1groups_create).Popup(50, $@1edit_group$)\n        }\n    }\n}.Custom(type_group){\n    If(#deleted#==0){\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: type_groups,Index:#group_type#))\n    }.Else{\n        Span(Body: AppParam(Ecosystem:1, App: #application_id#, Name: type_groups,Index:#group_type#),Class:text-muted)\n    }\n}.Custom(join_group){\n    DBFind(\"@1groups_participants\").Columns(\"id,groups_info,groups_info->id,deleted,member,member->member_id\").Where({\"groups_info->id\":#id#,\"deleted\":0,\"member->member_id\":#key_id#}).Vars(j_l).Count(check_membership)\n    If(And(#group_type# == 1,#check_membership# == 0)){\n        Button(Body: $@1join_the_group$, Class: btn btn-link pull-right,Contract:@1GroupsAssign,Page: @1groups_view,PageParams: \"v_group_id=#id#\",Params: \"gr_id=#id#,member_id=#key_id#\")\n    }.ElseIf(And(#group_type# == 1,#check_membership# == 1)){\n        Button(Body: $@1leave_the_group$, Class: btn btn-link pull-right,Contract:@1GroupsUnassign,Page: @1groups_list,Params:\"row_id=#j_l_id#\")\n    }.ElseIf(And(#group_type# == 2,#check_membership# == 0)){\n        Button(Body: $@1send_request$, Class: btn btn-link pull-right,Contract:@1GroupRequestMembership,Page: @1groups_view,PageParams:\"v_group_id=#id#\",Params: \"gr_id=#id#\")\n    }\n}.Custom(gr_info){\n    If(#deleted#==0){\n        Span(Body:#group_info#)\n    }.Else{\n        Span(Body:#group_info#,Class: text-muted)\n    }\n}.Count(count)\n\nDiv(fullscreen){\n    Div(table-responsive ml-lg mr-lg){\n        Div(list-group-item){\n            If(#count# > 0){\n                Table(src_groups, \"$@1id$=id,$@1group$=_name,$@1group_info$=gr_info,$@1type$=type_group,$@1creator$=_creator,$@1role_created_deleted$=_date,$@1status$=_status,$@1access$=_access,=join_group,=_actions\")\n            }.ElseIf(#all_roles_count# > 0){\n                Div(Class: text-center h4 text-muted){\n                    Div(Class: text-center h4 text-muted, Body: \"$@group\" \"$@1not_founded$\")\n                }\n            }.Else{\n                Div(Class: text-center){\n                    Span(Class:h4 text-muted,Body: $@1groups_not_created$)\n                }\n            }\n        }.Style(\n            margin-top:-15px;\n            tbody > tr:nth-of-type(odd) {\n                background-color: #f8f9fc;\n            }\n        )\n    }\n}\nDiv(mt-sm ml-lg mr-sm mb-sm){\n    Include(@1pager)\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "groups_view",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "If(GetVar(page_par)!=\"\"){\n    SetVar(Name: v_group_id, Value: #page_par#)\n}\nIf(#v_group_id# > 0){\n    SetVar(this_page, @1groups_view).(this_table, @1groups_participants)\n    Include(@1pager_header)\n\n    DBFind(@1groups).Where({ecosystem:#ecosystem_id#, id:#v_group_id#}).Columns(\"group_name,group_type,deleted,group_access,creator->member_id\").Vars(prefix)\n    SetTitle($@1group$: #prefix_group_name#)\n    If(#prefix_creator_member_id#==#key_id#){\n        SetVar(manager_id,1)\n    }.ElseIf(#prefix_deleted#==0){\n        If(And(#prefix_group_access#!=\"NULL\",#prefix_group_access#!=\"\",#prefix_group_access#!=\"[]\",#group_id#>0)){\n            DBFind(@1groups).Where({ecosystem:#ecosystem_id#, id:[{\"$in\": #prefix_group_access#}, {\"$eq\":#group_id#}]}).Columns(\"id\").Vars(manager)\n        }\n    }\n    If(#manager_id#>0){\n        AddToolButton(Page: @1groups_assign, PageParams: \"v_group_id=#v_group_id#\", Icon: icon-plus, Title: $@1assign$).Popup(50, $@1assign$)\n        AddToolButton(Title: $@1members_add$, Page:@1group_add_members, Icon: icon-plus,PageParams: \"v_group_id=#v_group_id#\").Popup(50, $@1add_members_to_group$)\n    }\n\n    Span(Class: h5 m0 mb ml-lg){\n        LinkPage(Class: ml-sm, Body: $@1groups$, Page: @1groups_list)\n        Span(Class: text-muted mh-sm, Body: /)\n        Span(Class: text-muted, Body: #prefix_group_name#)\n    }.Style(\n        display: inline-block;\n    )\n\n    If(GetVar(search)){\n        SetVar(where, {\"ecosystem\":#ecosystem_id#,\"groups_info->id\":#v_group_id#,\"member->member_name\":{\"$like\": #search#}})\n    }.Else{\n        SetVar(where, {\"ecosystem\":#ecosystem_id#,\"groups_info->id\":#v_group_id#}).(search,)\n    }\n\n    Div(list-group-item ml-lg mr-lg pt-lg){\n        SetVar(search_name, LangRes(@1member)).(page_par, #v_group_id#)\n        Include(@1search)\n    }\n\n    DBFind(#this_table#, src_participants).Where(#where#).Order({\"deleted\": 1, \"id\": 1}).Limit(#pager_limit#).Offset(#pager_offset#).Columns(\"id,member->member_id,groups_info,groups_info->id,member->member_name,member->image_id,appointed->member_id,appointed->member_name,date_created,date_deleted,deleted\").Custom(custom_id){\n        If(#deleted# == 0){\n            SetVar(Name: style_text, Value: \"text-normal\")\n            SetVar(Name: style_link, Value: \"text-primary\")\n        }.Else{\n            SetVar(Name: style_text, Value: \"text-muted\")\n            SetVar(Name: style_link, Value: \"text-muted\")\n        }\n        Span(Class: #style_text#, Body: #id#)\n    }.Custom(custom_appointed){\n        If(Or(#appointed.member_id#>0,#appointed.member_id#<0)){\n            LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#appointed.member_id#\"){\n                Span(Body: #appointed.member_name#)\n            }\n        }\n    }.Custom(custom_member){\n        LinkPage(Class: #style_link# h5 text-bold, Page: @1profile_view, PageParams: \"v_key_id=#member.member_id#\"){\n            If(#member.image_id#>0){\n                Image(Src: Binary().ById(#member.image_id#), Class: img-circle).Style(width: 30px; border: 1px solid #5A5D63; margin-right: 10px;)\n                Span(#member.member_name#)\n            }.Else{\n                Div(){\n                    Span(Em(Class: fa icon-user fa-2x)).Style(margin-right:10px;)\n                    Span(#member.member_name#)\n                }.Style(display:flex; align-items:center;)\n            }\n        }\n    }.Custom(custom_address){\n        Span(Class: #style_text#, Body: Address(#member.member_id#))\n    }.Custom(custom_date){\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_created#, Format: \"DD.MM.YYYY HH:MI\"))\n        Div(Class: #style_text# h6 m0, Body: DateTime(DateTime: #date_deleted#, Format: \"DD.MM.YYYY HH:MI\"))\n    }.Custom(custom_status){\n        If(#deleted# == 0){\n            Span(Class: #style_text#, Body: LangRes(@1active))\n        }.Else{\n            Span(Class: #style_text#, Body: LangRes(@1deleted))\n        }\n    }.Custom(actions){\n        Div(pull-right){\n            If(#deleted#==0){\n                Button(Body: Em(Class: fa fa-trash), Class: btn btn-default, Contract: @1GroupsUnassign, Params: \"row_id=#id#\", Page: @1groups_view, PageParams: \"v_group_id=#v_group_id#\").Alert(Text: \"$@1sure_want_delete_member$\", ConfirmButton: $@1yes$, CancelButton: $@1no$, Icon: question)\n            }\n        }\n    }.Count(count)\n\n    Div(fullscreen){\n        Div(table-responsive ml-lg mr-lg){\n            Div(list-group-item){\n                If(#count# > 0){\n                    Table(src_participants, \"$@1member$=custom_member,$@1address$=custom_address,$@1appointed$=custom_appointed,$@1appointed_deleted_member$=custom_date,$@1status$=custom_status,=actions\")\n                }.Else{\n                    Div(Class: text-center h4 text-muted, Body: \"$@1participants$ $@1not_founded$\")\n                }                       \n            }.Style(\n                margin-top:-15px;\n                tbody > tr:nth-of-type(odd) {\n                    background-color: #f8f9fc;\n                }\n            )\n        }\n    }\n    Div(mt-sm ml-lg mr-sm mb-sm){\n        Include(@1pager)\n    }\n}.Else{\n    Div(md-12 alert alert-danger text-center){\n        Span(Body: LangRes(@1attention))\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "membership_group",
            "Conditions": "ContractConditions(\"@1DeveloperCondition\")",
            "Value": "Div(content-wrapper){\n    DBFind(@1notifications).Where({id:#notific_id#}).Columns(\"page_params->gr_id,page_params->decide,sender->image_id,recipient->member_name,recipient->member_id,recipient->image_id,sender->member_id,sender->member_name,closed\").Vars(notific)\n    DBFind(@1groups).WhereId(#notific_page_params_gr_id#).Vars(group)\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Form(panel panel-default){\n                Div(panel-heading text-center){\n                    If(#notific_page_params_decide# == 1){\n                        Span(Class: h3, Body: $@your_request_approved$)\n                    }.ElseIf(#notific_page_params_decide# == -1){\n                        Span(Class: h3, Body: $@your_request_denied$)\n                    }.Else{\n                        Span(Class: h3, Body: $@request_group$)\n                    }\n                }\n                Div(panel-body){\n                    Div(form-group){\n                        Div(row){\n                            Div(col-md-12 mt-sm text-center){\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\n                                    If(#notific_recipient_image_id#>0){\n                                        Image(Src: Binary().ById(#notific_recipient_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                    }.Else{\n                                        Span(Class: fa icon-user fa-5x)\n                                    }\n                                    Div(m0 h4 text-bold){#notific_recipient_member_name#}\n                                }.Else{\n                                    If(#notific_sender_image_id#>0){\n                                        Image(Src: Binary().ById(#notific_sender_image_id#), Class: img-thumbnail).Style(width: 120px; border: 1px solid #5A5D63;)\n                                    }.Else{\n                                        Span(Class: fa icon-user fa-5x)\n                                    }\n                                    Div(m0 h4 text-bold){#notific_sender_member_name#}\n                                }\n                            }\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: LangRes(@1address))\n                        If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\n                            Span(Class: h5 text-bold, Body: Address(#notific_recipient_member_id#))\n                        }.Else{\n                            Span(Class: h5 text-bold, Body: Address(#notific_sender_member_id#))\n                        }\n                    }\n                    Div(list-group-item text-center){\n                        Div(text-muted m0 h5, Body: $@1group$)\n                        Span(Class: h5 text-bold, Body: #group_group_name# (#group_id#))\n                    }\n                    If(#notific_closed# == 0){\n                        Div(row){\n                            Div(col-md-12 mt-lg text-center){\n                                If(Or(#notific_page_params_decide# == 1,#notific_page_params_decide# == -1)){\n                                    Button(Class: btn btn-primary mh-sm, Body: $@1close$, Contract: @1NotificationsClose, Page: @1notifications_list, Params: \"notific_id=#notific_id#\")\n                                }.Else{\n                                    Button(Class: btn btn-danger mh-sm, Body: $@1reject$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"notific_id=#notific_id#,accept=0\")\n                                    Button(Class: btn btn-success mh-sm, Body: $@1accept$, Contract: @1GroupRequestDecide, Page: @1notifications_list, Params: \"notific_id=#notific_id#,accept=1\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
            "Menu": "default_menu",
            "Type": "pages"
        },
        {
            "Name": "GroupsAccessCheck",
            "Conditions": "true",
            "Value": "contract GroupsAccessCheck {\n    data {\n        gr_id int\n    }\n\n    conditions {\n        var group map\n        group = DBFind(\"@1groups\").Where({ecosystem:$ecosystem_id, id:$gr_id}).Columns(\"id,group_name,deleted,group_access,creator->member_id\").Row()\n        if !group {\n            warning Sprintf(\"%v: \" + \"group not found\", $this_contract)\n        }\n       \n        if group[\"creator.member_id\"] == $key_id {\n            return\n        }\n\n        var gr_ids array\n        gr_ids = JSONDecode(group[\"group_access\"])\n        if !DBFind(\"@1groups_participants\").Where({ecosystem:$ecosystem_id, \"groups_info->id\":{\"$in\":gr_ids}, \"member->member_id\":$key_id, deleted:0}).Row() {\n            warning Sprintf(\"You don't have permissions to change the group %v\", group[\"group_name\"])\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupAccessManager",
            "Conditions": "true",
            "Value": "contract GroupAccessManager {\n    data {\n        Action string\n        ManagerRid string \"optional\"\n        gr_id int \"optional\"\n        //filled input\n        group_name string \"optional\"\n        group_type int \"optional\"\n        group_information string \"optional\"\n    }\n\n    func updateAccess(ra array) {\n        var roles_access string\n        roles_access = JSONEncode(ra)\n        DBUpdate(\"@1groups\", $gr_id, {\"group_access\": roles_access})\n    }\n\n    func updateBufferAccess(ra array) {\n        var groups_access string\n        groups_access = JSONEncode(ra)\n        var filled map\n        filled[\"groups_access\"] = groups_access\n        filled[\"group_name\"] = $group_name\n        filled[\"group_type\"] = $group_type\n        filled[\"group_information\"] = $group_information\n        if !$buffer_id {\n            DBInsert(\"@1buffer_data\", {ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\", \"value\": filled})\n        } else {\n            DBUpdate(\"@1buffer_data\", Int($buffer_id), {\"value\": filled})\n        }\n    }\n    \n    conditions {\n        $ManagerRid = Int($ManagerRid)\n        if $gr_id > 0 {\n            @1GroupsAccessCheck(\"gr_id\", $gr_id)\n\n            $role = DBFind(\"@1groups\").Where({ecosystem:$ecosystem_id, id:$gr_id}).Columns(\"id,group_access\").Row()\n            if !$role {\n                warning (\"Group not found\")\n            }\n            if $ManagerRid > 0 {\n                if !DBFind(\"@1roles\").Where({ecosystem:$ecosystem_id, id:$ManagerRid}).One(\"id\") {\n                    warning LangRes(\"@1role_not_found\", \"en\")\n                }\n            }\n            var ids array, i int\n            $ids = ids\n            ids = JSONDecode($role[\"group_access\"])\n            while i < Len(ids){\n                if ids[i] > 0 {\n                    $ids = Append($ids, ids[i])\n                }\n                i = i + 1\n            }\n        } else {\n            $buffer_managers = 0\n            $buffer_id = 0\n            $ids = []\n            var buffer map\n            buffer = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\n            if buffer {\n                $buffer_managers = buffer[\"value.groups_access\"]\n                $buffer_id = buffer[\"id\"]\n            }\n        }\n    }\n\n    action {\n        if $gr_id == 0{\n            if $buffer_managers {\n                $ids = JSONDecode($buffer_managers)\n            }\n        }\n        \n        if $ManagerRid > 0 {\n            var i int, idsNew array\n            if $Action == \"remove\" {\n                while i < Len($ids) {\n                    if $ids[i] != $ManagerRid{\n                        idsNew = Append(idsNew, $ids[i])\n                    }\n                    i = i + 1\n                }\n                if $gr_id == 0 {\n                    updateBufferAccess(idsNew)\n                } else {\n                    updateAccess(idsNew)\n                } \n            }\n            if $Action == \"add\" {\n                var double bool\n                while i < Len($ids) {\n                    if $ids[i] == $ManagerRid{\n                        double = true\n                    }\n                    i = i + 1\n                }\n                if !double {\n                    $ids = Append($ids, $ManagerRid)\n                }\n                if $gr_id == 0 {\n                    updateBufferAccess($ids)\n                } else {\n                    updateAccess($ids)\n                }\n            }\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestMembership",
            "Conditions": "true",
            "Value": "contract GroupRequestMembership {\n    data {\n        gr_id int\n    }\n    conditions {\n        $group = DBFind(\"@1groups\").Where({id:$gr_id}).Columns(\"id,deleted,group_type,group_name,image_id,creator->member_id,group_access,group_name\").Row()\n        if !$group {\n            warning LangRes(\"@1group_not_found\", \"en\")\n        }\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$key_id}).Row() {\n            warning LangRes(\"@1key_not_found\", \"en\")\n        }\n        if $group[\"deleted\"] == 1 {\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\n        }\n        $check_join = DBFind(\"@1groups_participants\").Columns(\"id,deleted,member,member->member_id,groups_info,groups_info->id,ecosystem\").Where({\"deleted\":0,\"member->member_id\":$key_id,\"groups_info->id\":$gr_id,\"ecosystem\":$ecosystem_id}).One(\"id\")\n        if $check_join != nil {\n            error(\"You are already in this group\")\n        }\n        $check_send_notific = DBFind(\"@1notifications\").Columns(\"id,closed,ecosystem,sender,sender->member_id,page_params->gr_id\").Where({\"sender->member_id\":$key_id,\"page_params->gr_id\":$gr_id,\"closed\":0,\"ecosystem\":$ecosystem_id}).One(\"id\")\n        if $check_send_notific != nil {\n            info(\"You have already sent a request to this group. Expect a response\")\n        }\n    }\n    action {\n        var gr_ids array i int\n\n        var params map\n        params[\"gr_id\"] = $gr_id\n        params[\"member_id\"] = $key_id\n\n        var icon header body page ecoName string\n        icon = \"icon icon-user-follow\"\n        header = \"New request\"\n        body = Sprintf(\"New request to the group %t\",$group[\"group_name\"])\n        page = \"@1membership_group\"\n\n        gr_ids = JSONDecode($group[\"group_access\"])\n        if Len(gr_ids) > 0 {\n            while i < Len(gr_ids) {\n                var id_role int\n                id_role = Int(gr_ids[i])\n                @1NotificationsSend(\"rid,sender,icon_name,text_header,text_body,page_name,params_map,eco_id,closure_type\",id_role, 1, icon, header, body, page, params, $ecosystem_id,1)\n                i=i+1\n            }\n        } else{\n            $creator_id = Int($group[\"creator.member_id\"])\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\",$creator_id, 1, icon, header, body, page, params, $ecosystem_id)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsAssign",
            "Conditions": "true",
            "Value": "contract GroupsAssign {\n    data {\n        gr_id int\n        member_id int\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        $group = DBFind(\"@1groups\").Where({id:$gr_id}).Columns(\"id,deleted,group_type,group_name,image_id,creator->member_id\").Row()\n        if !$group {\n            warning LangRes(\"@1group_not_found\", \"en\")\n        }\n\n        if !DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:$member_id}).Row() {\n            warning LangRes(\"@1key_not_found\", \"en\")\n        }\n\n        if $group[\"deleted\"] == 1 {\n            warning LangRes(\"@1group_deleted_request_impossible\", \"en\")\n        }\n        if Int($group[\"group_type\"]) != 1 {\n            @1GroupsAccessCheck(\"gr_id\", $gr_id)\n        }\n    }\n\n    action {\n        if DBFind(\"@1groups_participants\").Where({ecosystem:$ecosystem_id, \"groups_info->id\":$gr_id, \"member->member_id\":$member_id, deleted:0}).One(\"id\") {\n            // do not re-assign and do not warning because this contract may be called for other\n            return\n        }\n        var group member appointer map\n        group[\"id\"] = $group[\"id\"]\n        group[\"type\"] = $group[\"group_type\"]\n        group[\"name\"] = $group[\"group_name\"]\n        group[\"image_id\"] = $group[\"image_id\"]\n\n        member = getMemberInfo($member_id)\n        appointer = getMemberInfo($key_id)\n        var m map\n        m[\"groups_info\"] = group\n        m[\"member\"] = member\n        m[\"appointed\"] = appointer\n        m[\"date_created\"] = BlockTime()\n        m[\"ecosystem\"] = $ecosystem_id\n        DBInsert(\"@1groups_participants\", m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupRequestDecide",
            "Conditions": "true",
            "Value": "contract GroupRequestDecide {\n    data {\n        notific_id int\n        accept int\n    }\n    conditions {\n        $notific = DBFind(\"@1notifications\").WhereId($notific_id).Columns(\"id,closed,page_params->gr_id,page_params->member_id,sender,sender->member_id,recipient,recipient->role_id\").Row()\n        if($notific[\"closed\"] == 1){\n            error(\"This request has already been processed\")\n        }\n    }\n    action {\n        $gr_id = Int($notific[\"page_params.gr_id\"])\n        $member_id = Int($notific[\"page_params.member_id\"])\n        if($accept == 1){\n            @1GroupsAssign(\"gr_id,member_id\",$gr_id,$member_id)\n        }\n        var params map\n        params[\"gr_id\"] = $gr_id\n        if($accept == 1){\n            params[\"decide\"] = 1\n        } else{\n            params[\"decide\"] = -1\n        }\n\n        var icon header body page ecoName string member int\n        icon = \"icon icon-user-follow\"\n        header = \"Request to group\"\n        body = \"Solution for your request\"\n        page = \"@1membership_group\"\n        member = Int($notific[\"sender.member_id\"])\n        if $notific[\"recipient.role_id\"] > 0 {\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id,current_role_id\",member, 2, icon, header, body, page, params, $ecosystem_id,Int($notific[\"recipient.role_id\"]))\n            @1NotificationsProcess(\"notific_id\",$notific_id)\n            @1NotificationsClose(\"notific_id\",$notific_id)\n            //DBUpdateExt(\"@1notifications\", {\"closed\":0,\"sender->member_id\":member,\"page_params->gr_id\":$gr_id}, {closed:1})\n        } else{\n            @1NotificationsSend(\"member_id,sender,icon_name,text_header,text_body,page_name,params_map,eco_id\",member, 1, icon, header, body, page, params, $ecosystem_id)\n            @1NotificationsClose(\"notific_id\",$notific_id)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsCreate",
            "Conditions": "true",
            "Value": "contract GroupsCreate {\n    data {\n        group_name string \"optional\"\n        group_type int \"optional\"\n        group_information string \"optional\"\n        gr_id int \"optional\"\n    }\n    func getMemberInfo(kid int) map {\n        var res member map\n        member = DBFind(\"@1members\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n        if member {\n            res[\"member_id\"] = member[\"id\"]\n            res[\"member_name\"] = member[\"member_name\"]\n            res[\"image_id\"] = member[\"image_id\"]\n        }else{\n            member = DBFind(\"@1keys\").Where({ecosystem:$ecosystem_id, id:kid}).Row()\n            if member {\n                res[\"member_id\"] = member[\"id\"]\n                res[\"member_name\"] = IdToAddress(Int(member[\"id\"]))\n                res[\"image_id\"] = 0\n            }\n        }\n        return res\n    }\n\n    conditions {\n        if $gr_id == 0 {\n            if $group_name == \"\" {\n                info(\"Group name cannot be empty\")\n            }\n            if $group_type == 0 {\n                info(\"Group type error\")\n            }\n        }\n        $check_access = EcosysParam(\"role_creates_groups\")\n        if $check_access && Str($check_access) != \"0\" {\n            var rids array\n            rids = JSONDecode(\"[\"+$check_access+\"]\")  \n            if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":{\"$in\":rids}, \"member->member_id\":$key_id, deleted:0}).Row() {\n                warning LangRes(\"@1access_denied\", \"en\")\n            }\n        } else {\n            var admin_id int\n            admin_id = EcosysParam(\"role_admin\")\n            var rids array\n            rids = JSONDecode(\"[\"+admin_id+\"]\")  \n            if !DBFind(\"@1roles_participants\").Where({ecosystem:$ecosystem_id, \"role->id\":{\"$in\":rids}, \"member->member_id\":$key_id, deleted:0}).Row() {\n                warning LangRes(\"@1access_denied\", \"en\")\n            }\n        }\n        if $group_name == DBFind(\"@1groups\").Where({\"ecosystem\":$ecosystem_id, \"group_name\":$group_name}).One(\"group_name\") {\n            warning (\"The group name is already taken\")\n        }\n\n    }\n\n    action { \n        if $gr_id == 0 {\n            var roles_access_arr array, buffer map\n            buffer = DBFind(\"@1buffer_data\").Where({ecosystem:$ecosystem_id, \"member_id\": $key_id, \"key\": \"group_access\"}).Columns(\"id,value,value->groups_access\").Row()\n            if buffer {\n                roles_access_arr = JSONDecode(buffer[\"value.groups_access\"])\n                var filled map\n                filled[\"groups_access\"] = []\n                filled[\"group_name\"] = \"\"\n                filled[\"group_type\"] = \"\"\n                filled[\"group_information\"] = \"\"\n                DBUpdate(\"@1buffer_data\", Int(buffer[\"id\"]), {\"value\": filled})\n            }\n\n            var m map\n            m[\"creator\"] = getMemberInfo($key_id)\n            m[\"group_name\"] = $group_name\n            m[\"group_type\"] = $group_type\n            m[\"date_created\"] = BlockTime()\n            m[\"group_access\"] = JSONEncode(roles_access_arr)\n            m[\"group_info\"] = $group_information\n            m[\"ecosystem\"] = $ecosystem_id\n            \n            DBInsert(\"@1groups\", m)\n        } else{\n            var m map\n            m[\"group_info\"] = $group_information\n    \n            DBUpdate(\"@1groups\",$gr_id, m)\n        }\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsUnassign",
            "Conditions": "true",
            "Value": "contract GroupsUnassign {\n    data {\n        row_id int\n    }\n\n    conditions {\n        var assigned group map\n        assigned = DBFind(\"@1groups_participants\").Where({ecosystem:$ecosystem_id, id:$row_id, deleted:0}).Columns(\"id,ecosystem,deleted,groups_info->id,member->member_id\").Row()\n        if !assigned {\n            warning (\"group_participant_not_found\")\n        }\n        var buffer_id int\n        buffer_id = Int(assigned[\"groups_info.id\"])\n        group = DBFind(\"@1groups\").Where({ecosystem:$ecosystem_id, id:buffer_id}).Row()\n        $groupId = Int(group[\"id\"])\n        if $groupId == 0 {\n            warning (\"Group not found\")\n        }\n        if(Int(group[\"group_type\"]) == 1){\n            if Int(assigned[\"member.member_id\"]) != $key_id {\n                @1GroupsAccessCheck(\"gr_id\", $groupId)\n            }\n        } else{\n            @1GroupsAccessCheck(\"gr_id\", $groupId)\n        }\n        \n    }\n\n    action {\n        // delete the member\n        var m map\n        m[\"deleted\"] = 1\n        m[\"date_deleted\"] = BlockTime()\n        DBUpdate(\"@1groups_participants\", $row_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "GroupsDelete",
            "Conditions": "true",
            "Value": "contract GroupsDelete {\n    data {\n        gr_id int\n        ops string\n    }\n\n    conditions {\n        @1GroupsAccessCheck(\"gr_id\", $gr_id)\n    }\n\n    action {\n        var participants array\n        participants = DBFind(\"@1groups_participants\").Where({\"groups_info->id\":$gr_id,\"deleted\":0}).Columns(\"id\")\n        \n        // delete all participants\n        var i int\n        while i < Len(participants) {\n            var p map\n            p = participants[i]\n            @1GroupsUnassign(\"row_id\", Int(p[\"id\"]))\n            i = i + 1\n        }\n        var m map\n        if $ops == \"D\" {\n            m[\"deleted\"] = 1\n            m[\"date_deleted\"] = BlockTime()\n        }\n        if $ops == \"R\" {\n            m[\"deleted\"] = 0\n        }\n        \n        DBUpdate(\"@1groups\", $gr_id, m)\n    }\n}",
            "Type": "contracts"
        },
        {
            "Name": "MembershipAddGroup",
            "Conditions": "true",
            "Value": "contract MembershipAddGroup {\n    data {\n        memberskeys string \"optional\"\n        gr_id int \"optional\"\n        cboxmembers string\n    }\n    \n    func addPub(pub_key string) {\n        if HasPrefix(pub_key, \"04\") {\n            pub_key = Substr(pub_key, 2, Size(pub_key) - 2)\n        }\n        if Size(pub_key) < 128 {\n            error LangRes(\"@1key_too_short\", \"en\")\n        }\n        if Size(pub_key) > 128 {\n            error LangRes(\"@1key_too_long\", \"en\")\n        }\n\n        var k_id int\n        k_id = PubToID(pub_key)\n        if k_id == 0 {\n            warning LangRes(\"@1public_key_invalid\", \"en\")\n        }\n        $check_user = DBFind(\"@1keys\").Where({id:k_id, ecosystem:$ecosystem_id})\n        if !$check_user {\n            warning Sprintf(\"%v: \" + \"key not found\", pub_key)\n        }\n\n        @1GroupsAssign(\"gr_id,member_id\",$gr_id,k_id)\n    }\n\n    conditions {\n        info($cboxmembers)\n        if $memberskeys == \"\" {\n            warning LangRes(\"@1public_key_empty\", \"en\")\n        }\n        $memberskeys = Replace($memberskeys, \" \", \"\")\n        $memberskeys = Replace($memberskeys, \"\\n\", \"\")\n        $memberskeys = Replace($memberskeys, \"\\r\", \"\")\n    }\n\n    action {\n        if Contains($memberskeys, \",\") {\n            var pub_array array\n            pub_array = Split($memberskeys, \",\")\n\n            var i int\n            while i < Len(pub_array) {\n                var pub_key string\n                pub_key = Str(pub_array[i])\n                addPub(pub_key)\n                i = i + 1\n            }\n        } else {\n            addPub($memberskeys)\n        }\n    }\n}",
            "Type": "contracts"
        }
    ]
}